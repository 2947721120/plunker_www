;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {
  var module;

  require("../../vendor/angular/angular");

  require("../../vendor/angular/angular-cookies");

  require("../../vendor/angular-ui/ui-bootstrap");

  require("../../vendor/angular-ui/ui-router");

  require("../services/session.coffee");

  require("../services/notifier.coffee");

  require("../services/disabler.coffee");

  require("../services/basePlunk.coffee");

  require("../services/layout.coffee");

  require("../services/updater.coffee");

  require("../services/collab.coffee");

  require("../directives/borderLayout.coffee");

  require("../directives/codeEditor.coffee");

  require("../directives/previewer.coffee");

  require("../directives/toolbar.coffee");

  module = angular.module("plunker.app.editor", ["ui.bootstrap", "ui.router", "fa.borderLayout", "plunker.service.session", "plunker.service.notifier", "plunker.service.disabler", "plunker.service.basePlunk", "plunker.service.layout", "plunker.service.updater", "plunker.service.collab", "plunker.directive.codeEditor", "plunker.directive.previewer", "plunker.directive.toolbar"]);

  module.config([
    "$stateProvider", "$urlRouterProvider", "$locationProvider", function($stateProvider, $urlRouterProvider, $locationProvider) {
      $locationProvider.html5Mode(true);
      $urlRouterProvider.when("/edit", "/edit/");
      return $urlRouterProvider.otherwise("/edit/");
    }
  ]);

  module.config([
    "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
      $stateProvider.state("editor", {
        url: "/edit",
        abstract: true,
        template: "<div ui-view=\"body\"></div>"
      });
      $stateProvider.state("editor.blank", {
        url: "/",
        views: {
          "body": {
            controller: [
              "$state", "$scope", "layout", function($state, $scope, layout) {
                return $state.go("editor.new");
              }
            ]
          }
        }
      });
      $stateProvider.state("editor.new", {
        url: "/new",
        views: {
          "body": {
            templateUrl: "/partials/editor.html",
            controller: [
              "$scope", "session", "basePlunk", "notifier", "layout", "updater", "disabler", function($scope, session, basePlunk, notifier, layout, updater, disabler) {
                var client;
                layout.current.templates.closed = false;
                client = session.createClient("edit.blank");
                return disabler.enqueue("editor", updater.update(basePlunk).then(function(json) {
                  var idx;
                  client.reset(json);
                  client.cursorSetIndex((0 <= (idx = client.getFileIndex("index.html"))) && idx || 0);
                  return notifier.success("Plunk reset");
                }));
              }
            ]
          }
        }
      });
      $stateProvider.state("editor.stream", {
        url: "/stream:{streamId:[a-z0-9]+}",
        views: {
          "body": {
            templateUrl: "/partials/editor.html",
            controller: [
              "$stateParams", "$q", "$http", "$scope", "$state", "$timeout", "collab", "notifier", "disabler", "layout", "updater", function($stateParams, $q, $http, $scope, $state, $timeout, collab, notifier, disabler, layout, updater) {
                layout.current.templates.closed = true;
                return disabler.enqueue("editor", collab.connect($stateParams.streamId).then(function(json) {
                  return notifier.success("Connected to stream");
                }, function() {
                  return notifier.error("Failed to connect to stream");
                }));
              }
            ]
          }
        }
      });
      return $stateProvider.state("editor.gist", {
        url: "/gist:{gistId:[0-9]+|[0-9a-z]{20}}",
        views: {
          "body": {
            templateUrl: "/partials/editor.html",
            controller: [
              "$stateParams", "$q", "$http", "$scope", "$state", "$timeout", "session", "notifier", "disabler", "layout", "updater", function($stateParams, $q, $http, $scope, $state, $timeout, session, notifier, disabler, layout, updater) {
                var client, parser, request;
                layout.current.templates.closed = true;
                client = session.createClient("edit.gist");
                disabler.enqueue("editor", request = $http.jsonp("https://api.github.com/gists/" + $stateParams.gistId + "?callback=JSON_CALLBACK"));
                parser = request.then(function(response) {
                  var e, file, filename, gist, json, manifest, _ref;
                  if (response.data.meta.status >= 400) {
                    return $q.reject("Gist not found");
                  }
                  gist = response.data.data;
                  json = {
                    'private': true,
                    files: []
                  };
                  if (manifest = gist.files["plunker.json"]) {
                    try {
                      angular.extend(json, angular.fromJson(manifest.content));
                    } catch (_error) {
                      e = _error;
                      notifier.warn("Unable to parse the plunker.json file");
                    }
                  }
                  json.description = gist.description || ("https://gist.github.com/" + $stateParams.gistId);
                  _ref = gist.files;
                  for (filename in _ref) {
                    file = _ref[filename];
                    if (filename !== "plunker.json") {
                      json.files.push({
                        filename: filename,
                        content: file.content
                      });
                    }
                  }
                  return updater.update(json);
                }, function(error) {
                  console.log("[ERR] Pulling gist", error);
                  return $q.reject("Unable to load gist");
                });
                return parser.then(function(json) {
                  var idx;
                  layout.current.templates.closed = true;
                  client.reset(json);
                  client.cursorSetIndex((0 <= (idx = client.getFileIndex("index.html"))) && idx || 0);
                  return notifier.success("Imported gist " + $stateParams.gistId);
                }, function(errorText) {
                  $state.go("editor.blank");
                  return notifier.error(errorText);
                });
              }
            ]
          }
        }
      });
    }
  ]);

  module.controller("SidebarController", [
    "$scope", "session", function($scope, session) {
      var client;
      $scope.session = client = session.createClient("SidebarController");
      $scope.addFile = function() {
        var filename;
        if (filename = prompt("Filename?")) {
          client.fileCreate(filename);
          return client.cursorSetFile(filename);
        }
      };
      $scope.renameFile = function(old_filename) {
        var filename;
        if (client.hasFile(old_filename) && (filename = prompt("Filename?", old_filename))) {
          return client.fileRename(old_filename, filename);
        }
      };
      $scope.removeFile = function(filename) {
        if (client.hasFile(filename) && confirm("Are you sure you would like to delete " + filename + "?")) {
          return client.fileRemove(filename);
        }
      };
      return $scope.moveTo = function(filename) {
        return client.cursorSetFile(filename);
      };
    }
  ]);

  module.controller("LayoutController", [
    "$scope", "layout", function($scope, layout) {
      $scope.layout = layout;
      return $scope.togglePreviewPane = function() {
        return $scope.showPreviewPane = !$scope.showPreviewPane;
      };
    }
  ]);

}).call(this);


},{"../../vendor/angular-ui/ui-bootstrap":20,"../../vendor/angular-ui/ui-router":21,"../../vendor/angular/angular":23,"../../vendor/angular/angular-cookies":22,"../directives/borderLayout.coffee":2,"../directives/codeEditor.coffee":3,"../directives/previewer.coffee":4,"../directives/toolbar.coffee":5,"../services/basePlunk.coffee":7,"../services/collab.coffee":8,"../services/disabler.coffee":9,"../services/layout.coffee":11,"../services/notifier.coffee":12,"../services/session.coffee":14,"../services/updater.coffee":17}],2:[function(require,module,exports){
(function() {
  var Region, module, throttle,
    __slice = [].slice;

  module = angular.module("fa.borderLayout", []);

  throttle = function(delay, fn) {
    var throttled;
    throttled = false;
    return function() {
      if (throttled) {
        return;
      }
      throttled = true;
      setTimeout(function() {
        return throttled = false;
      }, delay);
      return fn.call.apply(fn, [this].concat(__slice.call(arguments)));
    };
  };

  Region = (function() {
    function Region(width, height) {
      this.width = width != null ? width : 0;
      this.height = height != null ? height : 0;
      this.top = 0;
      this.right = 0;
      this.bottom = 0;
      this.left = 0;
    }

    Region.prototype.calculateSize = function(orientation, target) {
      var available, matches, terms, total;
      if (target == null) {
        target = 0;
      }
      total = this.getSize(orientation);
      available = this.getAvailableSize(orientation);
      if (angular.isNumber(target)) {
        if (target >= 1) {
          return Math.round(target);
        }
        if (target >= 0) {
          return Math.round(target * total);
        }
        return 0;
      }
      target = target.replace(/\s+/mg, "");
      if ((terms = target.split("-")).length > 1) {
        return this.calculateSize(orientation, terms.shift()) - this.calculateSize(orientation, terms.join("+"));
      }
      if ((terms = target.split("+")).length > 1) {
        return this.calculateSize(orientation, terms.shift()) + this.calculateSize(orientation, terms.join("+"));
      }
      if (matches = target.match(/^(\d+)px$/)) {
        return parseInt(matches[1], 10);
      }
      if (matches = target.match(/^(\d+(?:\.\d+)?)&$/)) {
        return Math.round(available * parseFloat(matches[1]) / 100);
      }
      if (matches = target.match(/^(\d+(?:\.\d+)?)%$/)) {
        return Math.round(total * parseFloat(matches[1]) / 100);
      }
      throw new Error("Unsupported size: " + target);
    };

    Region.prototype.consume = function(anchor, size) {
      var style;
      if (size == null) {
        size = 0;
      }
      switch (anchor) {
        case "north":
          style = {
            top: "" + this.top + "px",
            right: "" + this.right + "px",
            left: "" + this.left + "px",
            height: "" + size + "px"
          };
          this.top += size;
          break;
        case "east":
          style = {
            top: "" + this.top + "px",
            right: "" + this.right + "px",
            bottom: "" + this.bottom + "px",
            width: "" + size + "px"
          };
          this.right += size;
          break;
        case "south":
          style = {
            right: "" + this.right + "px",
            bottom: "" + this.bottom + "px",
            left: "" + this.left + "px",
            height: "" + size + "px"
          };
          this.bottom += size;
          break;
        case "west":
          style = {
            top: "" + this.top + "px",
            bottom: "" + this.bottom + "px",
            left: "" + this.left + "px",
            width: "" + size + "px"
          };
          this.left += size;
      }
      return style;
    };

    Region.prototype.getInnerRegion = function() {
      return new Region(this.width - this.right - this.left, this.height - this.top - this.bottom);
    };

    Region.prototype.getSize = function(orientation) {
      switch (orientation) {
        case "vertical":
          return this.height;
        case "horizontal":
          return this.width;
      }
    };

    Region.prototype.getAvailableSize = function(orientation) {
      switch (orientation) {
        case "vertical":
          return this.height - this.top - this.bottom;
        case "horizontal":
          return this.width - this.right - this.left;
      }
    };

    return Region;

  })();

  module.directive("pane", [
    function() {
      return {
        restrict: "E",
        replace: true,
        require: ["pane", "^borderLayout"],
        transclude: true,
        scope: true,
        template: "<div class=\"border-layout-pane\">\n  <div class=\"border-layout-pane-overlay\" ng-style=\"styleContent\"></div>\n  <div class=\"border-layout-pane-handle\" layout-handle ng-style=\"styleHandle\"></div>\n  <div class=\"border-layout-pane-scroller\" ng-style=\"styleContent\" ng-transclude></div>\n</div>",
        controller: [
          "$scope", "$element", "$attrs", function($scope, $element, $attrs) {
            var $handle, $overlay, $scroller, pane, _ref;
            pane = this;
            _ref = $element.children(), $overlay = _ref[0], $handle = _ref[1], $scroller = _ref[2];
            $scope.$watch($attrs.options, function(options, oldOptions) {
              if (options) {
                pane.anchor = options.anchor || "center";
                pane.orientation = pane.getOrientation(pane.anchor);
                pane.target = options.size;
                pane.max = options.max || Number.MAX_VALUE;
                pane.min = options.min || 0;
                pane.open = !options.closed;
                pane.order = parseInt(options.order || 0, 10);
                pane.handleSize = parseInt(options.handle || 0, 10);
                return pane.layout.reflow();
              }
            }, true);
            this.children = [];
            this.openSize = 0;
            this.attachChild = function(child) {
              return this.children.push(child);
            };
            this.getOrientation = function(anchor) {
              if (anchor == null) {
                anchor = pane.anchor;
              }
              switch (anchor) {
                case "north":
                case "south":
                  return "vertical";
                case "east":
                case "west":
                  return "horizontal";
              }
            };
            this.getContentStyle = function(anchor, handleSize) {
              var style;
              style = {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
              };
              switch (anchor) {
                case "north":
                  style.bottom = "" + handleSize + "px";
                  break;
                case "east":
                  style.left = "" + handleSize + "px";
                  break;
                case "south":
                  style.top = "" + handleSize + "px";
                  break;
                case "west":
                  style.right = "" + handleSize + "px";
              }
              return style;
            };
            this.getHandleStyle = function(anchor, region, handleSize) {
              switch (anchor) {
                case "north":
                  return {
                    height: "" + (region.calculateSize('vertical', handleSize)) + "px",
                    right: 0,
                    left: 0,
                    bottom: 0
                  };
                case "south":
                  return {
                    height: "" + (region.calculateSize('vertical', handleSize)) + "px",
                    right: 0,
                    left: 0,
                    top: 0
                  };
                case "east":
                  return {
                    width: "" + (region.calculateSize('horizontal', handleSize)) + "px",
                    top: 0,
                    bottom: 0,
                    left: 0
                  };
                case "west":
                  return {
                    width: "" + (region.calculateSize('horizontal', handleSize)) + "px",
                    top: 0,
                    bottom: 0,
                    right: 0
                  };
              }
            };
            this.onHandleDown = function() {
              $element.addClass("active");
              return this.layout.onHandleDown();
            };
            this.onHandleUp = function() {
              $element.removeClass("active");
              return this.layout.onHandleUp();
            };
            this.toggle = function(open) {
              if (open == null) {
                open = !pane.open;
              }
              pane.open = open;
              if (!open) {
                this.openSize = this.size;
              } else {
                this.size = this.openSize;
              }
              if (open) {
                $element.removeClass("closed");
              } else {
                $element.addClass("closed");
              }
              return this.layout.reflow();
            };
            this.reflow = function(region, target) {
              var anchor, child, handleSize, inner, orientation, size, styleContainer, styleContent, styleHandle, _i, _len, _ref1;
              if (target == null) {
                target = pane.target;
              }
              anchor = pane.anchor;
              if (open) {
                $element.removeClass("closed");
              } else {
                $element.addClass("closed");
              }
              if (anchor === "center") {
                $element.css({
                  top: "" + region.top + "px",
                  right: "" + region.right + "px",
                  bottom: "" + region.bottom + "px",
                  left: "" + region.left + "px"
                });
              } else if (anchor === "north" || anchor === "east" || anchor === "south" || anchor === "west") {
                orientation = this.getOrientation(anchor);
                handleSize = region.calculateSize(orientation, pane.handleSize || 0);
                if (!pane.open) {
                  size = handleSize;
                } else {
                  size = region.calculateSize(orientation, target);
                  size = Math.min(size, region.calculateSize(orientation, pane.max));
                  size = Math.max(size, region.calculateSize(orientation, pane.min));
                  size = Math.min(size, region.getAvailableSize(orientation));
                  size = Math.max(size, handleSize + 2);
                }
                this.size = size;
                styleContainer = region.consume(anchor, size);
                styleContent = this.getContentStyle(anchor, handleSize);
                styleHandle = this.getHandleStyle(anchor, region, handleSize);
                $element.attr("style", "").css(styleContainer);
                angular.element($overlay).attr("style", "").css(styleContent);
                angular.element($scroller).attr("style", "").css(styleContent);
                angular.element($handle).attr("style", "").css(styleHandle);
              }
              if (this.children.length) {
                inner = region.getInnerRegion();
                _ref1 = this.children;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  child = _ref1[_i];
                  inner = child.reflow(inner);
                }
              }
              return region;
            };
            return this.resize = function(target) {
              pane.target = target || 0;
              return this.layout.reflow();
            };
          }
        ],
        link: function($scope, $el, $attrs, _arg) {
          var pane, parent;
          pane = _arg[0], parent = _arg[1];
          pane.layout = parent;
          parent.attachChild(pane);
          $scope.$$nextSibling.pane = pane;
          return $scope.$watch("constrained", function(constrained) {
            if (constrained) {
              return $el.addClass("border-layout-constrained");
            } else {
              return $el.removeClass("border-layout-constrained");
            }
          });
        }
      };
    }
  ]);

  module.directive("layoutHandle", [
    "$window", function($window) {
      return {
        restrict: "A",
        require: ["?^pane", "^?borderLayout"],
        link: function($scope, $element, $attrs, _arg) {
          var clickRadius, clickTime, el, layout, pane;
          pane = _arg[0], layout = _arg[1];
          if (!pane) {
            return;
          }
          el = $element[0];
          clickRadius = 5;
          clickTime = 300;
          $scope.$watch((function() {
            return pane.getOrientation();
          }), function(orientation) {
            $element.removeClass("vertical");
            $element.removeClass("horizontal");
            switch (orientation) {
              case "vertical":
                return $element.addClass("vertical");
              case "horizontal":
                return $element.addClass("horizontal");
            }
          });
          return el.addEventListener("mousedown", function(e) {
            var anchor, coord, handleClick, handleMouseMove, handleMouseMoveThrottled, handleMouseUp, scale, startCoord, startPos, startSize, startTime;
            if (e.button !== 0) {
              return;
            }
            anchor = pane.anchor;
            if (anchor === "north" || anchor === "south") {
              coord = "screenY";
            } else if (anchor === "west" || anchor === "east") {
              coord = "screenX";
            }
            if (anchor === "north" || anchor === "west") {
              scale = 1;
            } else if (anchor === "south" || anchor === "east") {
              scale = -1;
            }
            startPos = {
              x: e.screenX,
              y: e.screenY
            };
            startCoord = e[coord];
            startSize = pane.size;
            startTime = Date.now();
            pane.onHandleDown();
            el.unselectable = "on";
            el.onselectstart = function() {
              return false;
            };
            el.style.userSelect = el.style.MozUserSelect = "none";
            e.preventDefault();
            e.defaultPrevented = true;
            e = null;
            handleClick = function(e) {
              return $scope.$apply(function() {
                return pane.toggle();
              });
            };
            handleMouseMove = function(e) {
              $element.addClass("border-layout-pane-moving");
              $scope.$apply(function() {
                var targetSize;
                return pane.resize(targetSize = startSize + scale * (e[coord] - startCoord));
              });
              e.preventDefault();
              e.defaultPrevented = true;
              return e = null;
            };
            handleMouseUp = function(e) {
              var cleanup, displacementSq, timeElapsed;
              displacementSq = Math.pow(e.screenX - startPos.x, 2) + Math.pow(e.screenY - startPos.y, 2);
              timeElapsed = Date.now() - startTime;
              $window.removeEventListener("mousemove", handleMouseMoveThrottled, true);
              $window.removeEventListener("mouseup", handleMouseUp, true);
              cleanup = function() {
                e.preventDefault();
                e.defaultPrevented = true;
                e = null;
                return pane.onHandleUp();
              };
              if (displacementSq <= Math.pow(clickRadius, 2) && timeElapsed <= clickTime) {
                handleClick(e);
                cleanup();
                return;
              }
              handleMouseMove(e);
              return cleanup();
            };
            handleMouseMoveThrottled = throttle(10, handleMouseMove);
            $window.addEventListener("mousemove", handleMouseMoveThrottled, true);
            return $window.addEventListener("mouseup", handleMouseUp, true);
          });
        }
      };
    }
  ]);

  module.directive("borderLayout", [
    "$window", "$timeout", function($window, $timeout) {
      return {
        restrict: "E",
        replace: true,
        require: ["borderLayout", "^?pane"],
        transclude: true,
        template: "<div class=\"border-layout\" ng-transclude>\n</div>",
        controller: [
          "$scope", "$element", "$attrs", function($scope, $element, $attrs) {
            var layout;
            layout = this;
            this.children = [];
            this.attachChild = function(child) {
              return this.children.push(child);
            };
            this.onHandleDown = function() {
              return $element.addClass("active");
            };
            this.onHandleUp = function() {
              $element.removeClass("active");
              return $scope.$broadcast("border-layout-reflow");
            };
            return this.reflow = function(region) {
              var child, height, width, _i, _len, _ref;
              if (layout.reflowing) {
                return;
              }
              layout.reflowing = true;
              width = $element[0].offsetWidth;
              height = $element[0].offsetHeight;
              region || (region = new Region(width, height));
              this.children.sort(function(a, b) {
                return b.order - a.order;
              });
              _ref = this.children;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                child = _ref[_i];
                region = child.reflow(region);
              }
              $scope.$broadcast("border-layout-reflow", Date.now());
              return layout.reflowing = false;
            };
          }
        ],
        link: function($scope, $el, $attrs, _arg) {
          var layout, parent;
          layout = _arg[0], parent = _arg[1];
          if (parent) {
            parent.attachChild(layout);
          }
          $scope.$on("border-layout-reflow", function() {
            if (!parent) {
              return layout.reflow();
            }
          });
          $window.addEventListener("resize", function(e) {
            e.stopPropagation();
            return $scope.$apply(function() {
              return layout.reflow();
            });
          });
          return $timeout(function() {
            if (!parent) {
              return layout.reflow();
            }
          });
        }
      };
    }
  ]);

}).call(this);


},{}],3:[function(require,module,exports){
(function() {
  var module;

  require("../services/session.coffee");

  require("../services/types.coffee");

  require("../services/settings.coffee");

  require("../services/annotations.coffee");

  module = angular.module("plunker.directive.codeEditor", ["plunker.service.session", "plunker.service.types", "plunker.service.settings", "plunker.service.annotations"]);

  /*
  module.factory "editor", [ "types", (types) ->
    class ProjectFile
      constructor: (@filename, @content = "") ->
  
        @aceSession = new EditSession(@content or "")
        @aceSession.setUndoManager(new UndoManager())
        @aceSession.setUseWorker(true)
        @aceSession.setTabSize(settings.editor.tab_size)
        @aceSession.setUseWrapMode(!!settings.editor.wrap.enabled)
        @aceSession.setWrapLimitRange(settings.editor.wrap.range.min, settings.editor.wrap.range.max)
        
        @setMode()
  
        doc = aceSession.getDocument()
        
      setMode: (modeName) ->
        modeName ||= "ace/mode/" + types.getByFilename(filename).name
        
        @aceSession.setMode(modeName)
    
    class Project
      constructor: (@name) ->
        @files = []
        
      reset: (state = {files:[]}) ->
        file.destroy() for file in @files
        
        @files.push new ProjectFile(file.filename, file.content) for file in files
        
        @cursorMove(state.cursor.fileIndex, stateu.cursor.fileOffset) if state.cursor?
      
      cursorMove: (fileIndex, textOffset, textEndOffset) ->
        
      attachToSession: ->
        project = @
        client = session.createClient("project-#{@name}")
    
        client.on "reset", (e, snapshot) -> project.reset(snapshot)
        
        client.on "cursorSetFile", (e, snapshot) -> project.cursorMove(snapshot.cursor.fileIndex, snapshot.cursor.textOffset)
        
        client.on "cursorSetOffset", (e, snapshot) -> project.cursorMove(snapshot.cursor.fileIndex, snapshot.cursor.textOffset)
          
        client.on "fileCreate", (e, snapshot) -> project.files[e.index] = new ProjectFile(e.filename, e.content)
        
        client.on "fileRemove", (e, snapshot) ->
          [removed] = project.files.splice(e.index, 1)
          removed.destroy()
          file.
        
        client.on "fileRename", (e, snapshot) -> project.files[e.index].rename(e.filename)
        
        client.on "textInsert", (e, snapshot) -> 
          
        client.on "textRemove", (e, snapshot) ->
  
    projects = {}
    
    project: (projectName) -> project[projectName] ||= new Project(projectName)
  ]
  */


  module.directive("codeEditor", [
    "$rootScope", "$timeout", "session", "types", "settings", "annotations", function($rootScope, $timeout, session, types, settings, annotations) {
      var AceEditor, EditSession, Range, Renderer, UndoManager, config;
      AceEditor = ace.require("ace/editor").Editor;
      Renderer = ace.require("ace/virtual_renderer").VirtualRenderer;
      EditSession = ace.require("ace/edit_session").EditSession;
      UndoManager = ace.require("ace/undomanager").UndoManager;
      Range = ace.require("ace/range").Range;
      config = ace.require("ace/config");
      return {
        restrict: "E",
        replace: true,
        scope: {
          active: "="
        },
        template: "<div class=\"code-editor\">\n</div>",
        link: function($scope, $el, attrs) {
          var activateBuffer, addAceSession, buffers, changeSessionMode, client, editor, guessMode, moveCursor, removeAceSession, reset, snippetManager;
          editor = new AceEditor(new Renderer($el[0], "ace/theme/" + settings.editor.theme));
          client = session.createClient("code-editor");
          snippetManager = null;
          buffers = [];
          ace.config.loadModule("ace/ext/language_tools", function() {
            editor.setOptions({
              enableBasicAutocompletion: true,
              enableSnippets: true
            });
            return snippetManager = ace.require("ace/snippets").snippetManager;
          });
          $scope.$watch((function() {
            return settings.editor.theme;
          }), function(theme) {
            if (theme) {
              return editor.setTheme("ace/theme/" + theme);
            }
          });
          guessMode = function(filename) {
            return "ace/mode/" + types.getByFilename(filename).name;
          };
          activateBuffer = function(index) {
            editor.setSession(buffers[index]);
            return editor.focus();
          };
          moveCursor = function(offset) {
            var doc;
            doc = editor.session.doc;
            return editor.moveCursorToPosition(doc.indexToPosition(offset));
          };
          addAceSession = function(index, file) {
            var aceSession, doc, handleChangeAnnotationEvent, handleChangeEvent;
            aceSession = new EditSession(file.content || "");
            aceSession.setUndoManager(new UndoManager());
            aceSession.setUseWorker(true);
            aceSession.setTabSize(settings.editor.tab_size);
            aceSession.setUseWrapMode(!!settings.editor.wrap.enabled);
            aceSession.setWrapLimitRange(settings.editor.wrap.range.min, settings.editor.wrap.range.max);
            aceSession.setMode(guessMode(file.filename));
            aceSession.index$ = index;
            doc = aceSession.getDocument();
            handleChangeEvent = function(e) {
              if (!(file = client.getFileByIndex(aceSession.index$))) {
                throw new Error("Buffers and session are out of sync");
              }
              if (!$rootScope.$$phase) {
                $scope.$apply(function() {
                  var nl;
                  nl = doc.getNewLineCharacter();
                  switch (e.data.action) {
                    case "insertText":
                      return client.textInsert(file.filename, doc.positionToIndex(e.data.range.start), e.data.text);
                    case "insertLines":
                      return client.textInsert(file.filename, doc.positionToIndex(e.data.range.start), e.data.lines.join(nl) + nl);
                    case "removeText":
                      return client.textRemove(file.filename, doc.positionToIndex(e.data.range.start), e.data.text);
                    case "removeLines":
                      return client.textRemove(file.filename, doc.positionToIndex(e.data.range.start), e.data.lines.join(nl) + nl);
                  }
                });
              }
              if (file.content !== aceSession.getValue()) {
                return console.error("[ERR] Local session out of sync", e);
              }
            };
            handleChangeAnnotationEvent = function(e) {
              if (!(file = client.getFileByIndex(aceSession.index$))) {
                throw new Error("Buffers and session are out of sync");
              }
              if (!$rootScope.$$phase) {
                return $scope.$apply(function() {
                  annotations.update(file.filename, aceSession.getAnnotations());
                  return $rootScope.$broadcast("updateAnnotatinos", file, aceSession.getAnnotations());
                });
              }
            };
            buffers[index] = aceSession;
            annotations.update(file.filename, aceSession.getAnnotations());
            aceSession.on("change", handleChangeEvent);
            aceSession.on("changeAnnotation", handleChangeAnnotationEvent);
            return aceSession.destroy = function() {
              aceSession.off("change", handleChangeEvent);
              return aceSession.off("changeAnnotation", handleChangeAnnotationEvent);
            };
          };
          removeAceSession = function(index) {
            var buffer, file, idx, _i, _len;
            if (!buffers[index]) {
              debugger;
            }
            for (idx = _i = 0, _len = buffers.length; _i < _len; idx = ++_i) {
              buffer = buffers[idx];
              if (idx > index) {
                buffer.index$--;
              }
            }
            buffers[index].destroy();
            buffers.splice(index, 1);
            if (file = client.getFileByIndex(index)) {
              return annotations.remove(file.filename);
            }
          };
          reset = function(snapshot) {
            var file, idx, _i, _j, _len, _ref, _ref1;
            for (idx = _i = _ref = buffers.length - 1; _i >= 0; idx = _i += -1) {
              removeAceSession(idx);
            }
            _ref1 = snapshot.files;
            for (idx = _j = 0, _len = _ref1.length; _j < _len; idx = ++_j) {
              file = _ref1[idx];
              addAceSession(idx, file);
            }
            return activateBuffer(snapshot.cursor.fileIndex);
          };
          changeSessionMode = function(index, filename) {
            var buffer;
            if (buffer = buffers[index]) {
              return buffer.setMode(guessMode(filename));
            }
          };
          client.on("reset", function(e, snapshot) {
            return reset(e.snapshot);
          });
          client.on("cursorSetFile", function(e, snapshot) {
            return activateBuffer(e.index);
          });
          client.on("cursorSetOffset", function(e, snapshot) {
            return moveCursor(e.offset);
          });
          client.on("fileCreate", function(e, snapshot) {
            return addAceSession(e.index, snapshot.files[e.index]);
          });
          client.on("fileRemove", function(e, snapshot) {
            removeAceSession(e.index);
            return annotations.remove(e.filename);
          });
          client.on("fileRename", function(e, snapshot) {
            changeSessionMode(e.index, e.filename);
            return annotations.rename(e.filename, e.old_filename);
          });
          client.on("textInsert", function(e, snapshot) {
            var aceSession;
            if (!(aceSession = buffers[e.index])) {
              throw new Error("Received textInsert event for a file not being tracked");
            }
            return aceSession.doc.insert(aceSession.doc.indexToPosition(e.offset), e.text);
          });
          client.on("textRemove", function(e, snapshot) {
            var aceSession;
            if (!(aceSession = buffers[e.index])) {
              throw new Error("Received textInsert event for a file not being tracked");
            }
            return aceSession.doc.remove(Range.fromPoints(aceSession.doc.indexToPosition(e.offset), aceSession.doc.indexToPosition(e.offset + e.text.length)));
          });
          reset(client.getSnapshot());
          activateBuffer(client.getCursorFileIndex());
          moveCursor(client.getCursorTextOffset());
          $scope.$on("border-layout-reflow", function() {
            return editor.resize();
          });
          return $timeout(function() {
            return editor.resize();
          }, 100);
        }
      };
    }
  ]);

}).call(this);


},{"../services/annotations.coffee":6,"../services/session.coffee":14,"../services/settings.coffee":15,"../services/types.coffee":16}],4:[function(require,module,exports){
(function() {
  var debounce, genid, module;

  genid = require("genid");

  debounce = require("lodash.debounce");

  require("../../vendor/operative.js");

  require("../services/session.coffee");

  require("../services/types.coffee");

  require("../services/url.coffee");

  require("../services/settings.coffee");

  require("../services/annotations.coffee");

  require("../services/layout.coffee");

  module = angular.module("plunker.directive.previewer", ["plunker.service.session", "plunker.service.url", "plunker.service.settings", "plunker.service.annotations", "plunker.service.layout"]);

  module.directive("previewer", [
    "$timeout", "session", "url", "settings", "annotations", "layout", function($timeout, session, url, settings, annotations, layout) {
      return {
        restrict: "E",
        replace: true,
        scope: {
          session: "="
        },
        template: "<div>\n  <div class=\"plunker-preview-container\" ng-class=\"{message: message}\">\n    <iframe id=\"plunkerPreviewTarget\" name=\"plunkerPreviewTarget\" src=\"about:blank\" width=\"100%\" height=\"100%\" frameborder=\"0\"></iframe>\n  </div>\n  <div class=\"plunker-preview-message alert alert-danger\" ng-show=\"message\">\n    <button type=\"button\" class=\"close\" ng-click=\"message=''\" aria-hidden=\"true\">&times;</button>\n    <span ng-bind=\"message\"></span>\n  </div>\n</div>",
        link: function($scope, $el, attrs) {
          var applyRefresh, client, debouncedApplyRefresh, firstOpen, iframeEl, refresh;
          $scope.previewUrl || ($scope.previewUrl = "" + url.run + "/" + (genid()) + "/");
          iframeEl = document.getElementById("plunkerPreviewTarget");
          client = session.createClient("previewer");
          firstOpen = true;
          refresh = function(snapshot) {
            var field, file, filename, form, _i, _len, _ref;
            if (layout.current.preview.closed) {
              return;
            }
            if (filename = annotations.hasError()) {
              $scope.message = "Preview has not been updated due to syntax errors in " + filename;
              return;
            } else {
              $scope.message = "";
            }
            form = document.createElement("form");
            form.style.display = "none";
            form.setAttribute("method", "post");
            form.setAttribute("action", $scope.previewUrl);
            form.setAttribute("target", "plunkerPreviewTarget");
            _ref = snapshot.files;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              file = _ref[_i];
              field = document.createElement("input");
              field.setAttribute("type", "hidden");
              field.setAttribute("name", "files[" + file.filename + "][content]");
              field.setAttribute("value", file.content);
              form.appendChild(field);
            }
            document.body.appendChild(form);
            form.submit();
            return document.body.removeChild(form);
          };
          applyRefresh = function() {
            return $scope.$apply(function() {
              return refresh(client.getSnapshot());
            });
          };
          debouncedApplyRefresh = debounce(applyRefresh, settings.previewer.delay);
          $scope.$watch((function() {
            return settings.previewer.delay;
          }), function(delay, oldDelay) {
            if (delay !== oldDelay) {
              return debouncedApplyRefresh = debounce(debouncedApplyRefresh, delay);
            }
          });
          $scope.$watch((function() {
            return layout.current.preview.closed;
          }), function(closed, wasClosed) {
            if (closed) {
              iframeEl.contentWindow.location = "about:blank";
            } else if (firstOpen || wasClosed) {
              refresh(client.getSnapshot());
            }
            return firstOpen = false;
          });
          client.on("reset", debouncedApplyRefresh);
          client.on("fileCreate", debouncedApplyRefresh);
          client.on("fileRename", debouncedApplyRefresh);
          client.on("fileRemove", debouncedApplyRefresh);
          client.on("textInsert", debouncedApplyRefresh);
          client.on("textRemove", debouncedApplyRefresh);
          return $scope.$on("$destroy", function() {
            client.off("reset", debouncedApplyRefresh);
            client.off("fileCreate", debouncedApplyRefresh);
            client.off("fileRename", debouncedApplyRefresh);
            client.off("fileRemove", debouncedApplyRefresh);
            client.off("textInsert", debouncedApplyRefresh);
            return client.off("textRemove", debouncedApplyRefresh);
          });
        }
      };
    }
  ]);

}).call(this);


},{"../../vendor/operative.js":25,"../services/annotations.coffee":6,"../services/layout.coffee":11,"../services/session.coffee":14,"../services/settings.coffee":15,"../services/types.coffee":16,"../services/url.coffee":18,"genid":28,"lodash.debounce":29}],5:[function(require,module,exports){
(function() {
  var module;

  require("../../vendor/angular-ui/ui-bootstrap");

  require("../services/notifier.coffee");

  require("../services/layout.coffee");

  require("../services/oauth.coffee");

  module = angular.module("plunker.directive.toolbar", ["ui.bootstrap", "plunker.service.notifier", "plunker.service.layout", "plunker.service.oauth"]);

  module.directive("plunkerToolbar", [
    "$state", "session", "notifier", "layout", "oauth", function($state, session, notifier, layout, oauth) {
      return {
        restrict: "E",
        replace: true,
        scope: true,
        template: "<div class=\"plunker-editor-toolbar\">\n  <div class=\"pull-left\">\n    <button class=\"btn btn-sm btn-primary\" ng-click=\"save()\">\n      Save\n    </button>\n    \n    <button class=\"btn btn-sm btn-success\" ui-sref=\"editor.blank\">\n      New\n    </button>\n    \n    <button class=\"btn btn-sm btn-info\" ng-class=\"{active: !layout.current.preview.closed}\" ng-click=\"layout.current.preview.closed = !!!layout.current.preview.closed\">\n      Preview\n    </button>\n  </div>\n  <div class=\"pull-right\">\n    <div class=\"btn-group btn-sm\" ng-controller=\"LayoutController\">\n      <button class=\"btn btn-sm btn-default\" ng-click=\"layout.setLayout($index)\" ng-repeat=\"preset in layout.presets\" ng-bind=\"$index\" tooltip=\"{{preset.name}}\" tooltip-append-to-body=\"true\" tooltip-placement=\"bottom\"></button>\n    </div>\n  </div>\n  <div class=\"pull-right\">\n    <div class=\"btn-group btn-sm\">\n      <button class=\"btn btn-sm btn-default\" ng-click=\"login()\" tooltip=\"Login using Github\" tooltip-append-to-body=\"true\" tooltip-placement=\"bottom\">Login</button>\n    </div>\n  </div>\n</div>",
        link: function($scope, $element, $attrs) {
          var client;
          client = session.createClient("directive.toolbar");
          $scope.save = function() {
            return notifier.warn("Save not implemented... yet");
          };
          return $scope.login = function() {
            return oauth.authenticate();
          };
        }
      };
    }
  ]);

}).call(this);


},{"../../vendor/angular-ui/ui-bootstrap":20,"../services/layout.coffee":11,"../services/notifier.coffee":12,"../services/oauth.coffee":13}],6:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.annotations", []);

  module.factory("annotations", function() {
    return {
      annotations: {},
      update: function(filename, annotations) {
        var _base;
        if (annotations == null) {
          annotations = [];
        }
        return angular.copy(annotations, ((_base = this.annotations)[filename] || (_base[filename] = [])));
      },
      rename: function(old_filename, new_filename) {
        this.annotations[new_filename] = this.annotations[old_filename] || [];
        return delete this.annotations[old_filename];
      },
      remove: function(filename) {
        return delete this.annotations[filename];
      },
      hasError: function() {
        var annotation, annotations, filename, _i, _len, _ref;
        _ref = this.annotations;
        for (filename in _ref) {
          annotations = _ref[filename];
          for (_i = 0, _len = annotations.length; _i < _len; _i++) {
            annotation = annotations[_i];
            if (annotation.type === "error") {
              return filename;
            }
          }
        }
        return false;
      }
    };
  });

}).call(this);


},{}],7:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.basePlunk", []);

  module.value("basePlunk", {
    files: [
      {
        filename: "index.html",
        content: "<!doctype html>\n<html ng-app=\"plunker\" >\n<head>\n  <meta charset=\"utf-8\">\n  <title>AngularJS Plunker</title>\n  <script>document.write('<base href=\"' + document.location + '\" />');</script>\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <script data-require=\"angular.js@1.1.x\" src=\"http://code.angularjs.org/1.1.4/angular.js\"></script>\n  <script src=\"app.js\"></script>\n</head>\n<body ng-controller=\"MainCtrl\">\n  <p>Hello {{name}}!</p>\n</body>\n</html> "
      }, {
        filename: "app.js",
        content: "var app = angular.module('plunker', []);\n \napp.controller('MainCtrl', function($scope) {\n  $scope.name = 'World';\n});"
      }, {
        filename: "style.css",
        content: "p {\n  color: red;\n}"
      }
    ]
  });

}).call(this);


},{}],8:[function(require,module,exports){
(function() {
  var browserchannel, module,
    __slice = [].slice;

  browserchannel = require("../../vendor/share/bcsocket-uncompressed.js");

  require("../../vendor/share/share.uncompressed.js");

  require("../services/session.coffee");

  module = angular.module("plunker.service.collab", ["plunker.service.session"]);

  module.factory("collab", [
    "$rootScope", "$q", "session", function($rootScope, $q, session) {
      var client, share, socket;
      console.log("Browserchannel", browserchannel);
      socket = browserchannel.BCSocket(null, {
        reconnect: true
      });
      share = new window.sharejs.Connection(socket);
      client = session.createClient("share");
      return {
        connect: function(sessionId) {
          var dfd, doc;
          console.log("Share", share);
          dfd = $q.defer();
          doc = share.get("json_test", sessionId);
          doc.subscribe();
          doc.whenReady(function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            console.log.apply(console, ["Document ready"].concat(__slice.call(arguments)));
            return $rootScope.$apply(function() {
              var op, snapshot;
              if (!doc.type) {
                console.log("Document does not exist, creating", client.getSnapshot());
                doc.create("json0", snapshot = client.getSnapshot(), function() {
                  return dfd.resolve(snapshot);
                });
              } else if (!doc.snapshot) {
                op = {
                  p: [],
                  od: doc.snapshot,
                  oi: client.getSnapshot()
                };
                console.log("Document exists but is false, resetting", doc, op);
                doc.submitOp(op, function() {
                  return dfd.resolve(doc.snapshot);
                });
              } else {
                console.log("Got snapshot", doc, doc.getSnapshot());
                client.reset(snapshot = doc.getSnapshot());
                dfd.resolve(snapshot);
              }
              return client.on("remoteOp", function(e) {
                return doc.submitOp(e.op);
              });
            });
          });
          doc.on("op", function(op) {
            if (!$rootScope.$$phase) {
              return $rootScope.$apply(function() {
                console.log.apply(console, ["Remoteop"].concat(__slice.call(arguments)));
                return client._applyOps(op);
              });
            }
          });
          return dfd.promise;
        }
      };
    }
  ]);

}).call(this);


},{"../../vendor/share/bcsocket-uncompressed.js":26,"../../vendor/share/share.uncompressed.js":27,"../services/session.coffee":14}],9:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.disabler", []);

  module.directive("plunkerDisabler", [
    "disabler", function(disabler) {
      return {
        link: function($scope, $element, $attrs) {
          var mask;
          mask = angular.element("<div class=\"plunker-disabler\"></div>");
          return $scope.$watch((function() {
            return disabler.state[$attrs.plunkerDisabler];
          }), function(state, prev) {
            if (state) {
              return $element.append(mask);
            } else {
              return mask.remove();
            }
          });
        }
      };
    }
  ]);

  module.service("disabler", [
    "$q", function($q) {
      var queues;
      queues = {};
      this.state = {};
      return this.enqueue = function(name, valueOrPromise) {
        var disabler;
        disabler = this;
        disabler.state[name] = true;
        return $q.when(valueOrPromise)["finally"](function() {
          return disabler.state[name] = false;
        });
      };
    }
  ]);

}).call(this);


},{}],10:[function(require,module,exports){
(function() {
  var dominatrix, module;

  dominatrix = require("../../vendor/dominatrix/dominatrix");

  module = angular.module("plunker.service.htmlFile", []);

  module.factory("htmlFile", [
    "$q", function($q) {
      var HtmlFile;
      HtmlFile = (function() {
        function HtmlFile(markup) {
          this.markup = markup;
          this.doc = window.document.implementation.createHTMLDocument("");
          this.doc.open();
          this.doc.write(this.markup);
        }

        HtmlFile.prototype.toString = function() {
          return dominatrix.domToHtml(this.doc);
        };

        return HtmlFile;

      })();
      return {
        parse: function(markup) {
          return new HtmlFile(markup);
        },
        update: function(markup) {
          var dfd;
          dfd = $q.defer();
          dfd.resolve(this.parse(markup).toString());
          return dfd.promise;
        }
      };
    }
  ]);

}).call(this);


},{"../../vendor/dominatrix/dominatrix":24}],11:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.layout", []);

  module.factory("layout", [
    "$rootScope", function($rootScope) {
      var presets, service;
      presets = [
        {
          name: "Preview on the right",
          layout: {
            toolbar: {
              anchor: "north",
              size: "41px",
              order: 9
            },
            preview: {
              anchor: "east",
              order: 0,
              size: "50& - 4px",
              handle: 4
            },
            templates: {
              anchor: "west",
              order: 2,
              size: "300px"
            }
          }
        }, {
          name: "Preview at the bottom",
          layout: {
            toolbar: {
              anchor: "north",
              size: "41px",
              order: 9
            },
            preview: {
              anchor: "south",
              order: 2,
              size: "40% - 4px",
              handle: 4
            },
            templates: {
              anchor: "west",
              order: 2,
              size: "300px"
            }
          }
        }
      ];
      service = {
        current: {},
        presets: presets,
        isOpen: function(paneId) {
          var _ref, _ref1;
          return (_ref = this.current) != null ? (_ref1 = _ref.layout) != null ? _ref1[paneId].open : void 0 : void 0;
        },
        toggle: function(paneId) {
          var _ref, _ref1;
          return (_ref = this.current) != null ? (_ref1 = _ref.layout) != null ? _ref1[paneId].open = !this.current.layout[paneId].open : void 0 : void 0;
        },
        setLayout: function(idx) {
          var config, item, preset, _ref;
          if (preset = presets[idx]) {
            _ref = preset.layout;
            for (item in _ref) {
              config = _ref[item];
              this.current[item] = angular.extend(this.current[item] || {}, config);
            }
            $rootScope.$broadcast("reflow");
          }
          return this.current;
        }
      };
      service.setLayout(0);
      return service;
    }
  ]);

}).call(this);


},{}],12:[function(require,module,exports){
(function() {
  var module,
    __slice = [].slice;

  require("../../vendor/angular-growl/angular-growl");

  module = angular.module("plunker.service.notifier", ["angular-growl"]);

  module.config([
    "growlProvider", function(growlProvider) {
      return growlProvider.globalTimeToLive(3000);
    }
  ]);

  module.factory("notifier", [
    "growl", function(growl) {
      return {
        error: function(message) {
          console.log.apply(console, ["[ERR]"].concat(__slice.call(arguments)));
          return growl.addErrorMessage(message);
        },
        warn: function(message) {
          console.log.apply(console, ["[WARN]"].concat(__slice.call(arguments)));
          return growl.addWarnMessage(message);
        },
        success: function(message) {
          console.log.apply(console, ["[OK]"].concat(__slice.call(arguments)));
          return growl.addSuccessMessage(message);
        }
      };
    }
  ]);

}).call(this);


},{"../../vendor/angular-growl/angular-growl":19}],13:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.oauth", []);

  module.factory("oauth", [
    "$window", "$q", "$rootScope", "$timeout", function($window, $q, $rootScope, $timeout) {
      var oauthDeferred, postMessageHandler;
      oauthDeferred = null;
      postMessageHandler = function(e) {
        console.log("Got message", e);
        if (oauthDeferred) {
          try {
            return oauthDeferred.resolve(JSON.parse(e.data));
          } catch (_error) {
            return angular.noop();
          }
        }
      };
      $window.addEventListener("message", postMessageHandler);
      return {
        authenticate: function() {
          var authWindow, cancel, height, interval, left, oauth, resolved, screenHeight, timeout, top, width;
          oauth = this;
          oauthDeferred = $q.defer();
          resolved = false;
          screenHeight = screen.height;
          width = 640;
          height = 480;
          left = Math.round((screen.width / 2) - (width / 2));
          top = 0;
          if (screenHeight > height) {
            top = Math.round((screenHeight / 2) - (height / 2));
          }
          authWindow = window.open("/auth/github", "plunker-oauth-window", "left=" + left + ",top=" + top + ",width=" + width + ",height=" + height + ",personalbar=0,toolbar=0,scrollbars=1,resizable=1");
          authWindow.focus();
          cancel = function(reason) {
            return function() {
              oauthDeferred.reject(reason);
              oauthDeferred = null;
              clearInterval(interval);
              $timeout.cancel(timeout);
              return null;
            };
          };
          timeout = $timeout(cancel("Login timed out"), 1000 * 60 * 2);
          interval = setInterval(function() {
            if (!authWindow || authWindow.closed !== false) {
              return $rootScope.$apply(cancel("Auth window closed withotu logging in"));
            }
          }, 200);
          return oauthDeferred.promise.then(function(json) {
            return console.log("Got OAuth data", json);
          });
        }
      };
    }
  ]);

}).call(this);


},{}],14:[function(require,module,exports){
(function() {
  var Session, module;

  require("../../vendor/share/share.uncompressed.js");

  module = angular.module("plunker.service.session", []);

  module.service("session", Session = (function() {
    var SessionClient;

    SessionClient = (function() {
      function SessionClient(name, session) {
        this.name = name;
        this.session = session;
        this.listeners = {};
      }

      SessionClient.prototype.on = function(eventName, listener) {
        var _base;
        return ((_base = this.listeners)[eventName] || (_base[eventName] = [])).push(listener);
      };

      SessionClient.prototype.off = function(eventName, listener) {
        var idx;
        if (!(!this.listeners[eventName] || 0 > (idx = this.listeners[eventName].indexOf(listener)))) {
          return this.listeners[eventName].splice(idx, 1);
        }
      };

      SessionClient.prototype._applyOp = function(op) {
        return this._applyOps([op]);
      };

      SessionClient.prototype._applyOps = function(ops) {
        return this.session.applyOps(this.name, ops);
      };

      SessionClient.prototype._handleOp = function(sourceClientName, op, snapshot) {
        var filename;
        if (op.p.length === 0) {
          console.log("Reset");
          this._emit("reset", {
            snapshot: op.oi,
            old_snapshot: op.od
          });
        } else {
          switch (op.p[0]) {
            case "cursor":
              if (op.p[1] === "fileIndex") {
                this._emit("cursorSetFile", {
                  filename: snapshot.files[op.oi].filename,
                  prev_filename: snapshot.files[op.od].filename,
                  index: op.oi,
                  prev_index: op.od
                });
              } else if (op.p[1] === "textOffset") {
                this._emit("cursorSetOffset", {
                  offset: op.oi,
                  prev_offset: op.od
                });
              }
              break;
            case "description":
              if (op.p[1] !== 0) {
                return;
              }
              if (!(op.si && op.sd)) {
                return;
              }
              this._emit("setDescription", {
                description: op.si,
                old_description: op.sd
              });
              break;
            case "tags":
              if (!(op.li || op.ld)) {
                return;
              }
              if (op.p.length !== 2) {
                return;
              }
              if (op.li) {
                this._emit("tagAdd", {
                  tagName: op.li,
                  index: op.p[1]
                });
              } else if (op.ld) {
                this._emit("tagRemove", {
                  tagName: op.ld,
                  index: op.p[2]
                });
              }
              break;
            case "files":
              if (op.p.length === 2) {
                if (op.li) {
                  this._emit("fileCreate", {
                    filename: op.li.filename,
                    index: op.p[1],
                    content: op.li.content
                  });
                } else if (op.ld) {
                  this._emit("fileRemove", {
                    filename: op.ld.filename,
                    index: op.p[1],
                    content: op.ld.content
                  });
                }
              } else if (op.p[2] === "filename") {
                this._emit("fileRename", {
                  filename: op.oi,
                  index: op.p[1],
                  old_filename: op.od
                });
              } else if (op.p[2] === "content") {
                filename = snapshot.files[op.p[1]].filename;
                if (op.si) {
                  this._emit("textInsert", {
                    filename: filename,
                    index: op.p[1],
                    text: op.si,
                    offset: op.p[3]
                  });
                }
                if (op.sd) {
                  this._emit("textRemove", {
                    filename: filename,
                    index: op.p[1],
                    text: op.sd,
                    offset: op.p[3]
                  });
                }
              }
          }
        }
        return this._emit("remoteOp", {
          op: op,
          snapshot: snapshot
        });
      };

      SessionClient.prototype._emit = function(eventName, e) {
        var listener, snapshot, _i, _len, _ref, _results;
        snapshot = this.getSnapshot();
        e.eventName = eventName;
        if (this.listeners[eventName]) {
          _ref = this.listeners[eventName];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listener = _ref[_i];
            _results.push(listener(e, snapshot));
          }
          return _results;
        }
      };

      SessionClient.prototype.getCursorFileIndex = function() {
        return this.session.snapshot.cursor.fileIndex;
      };

      SessionClient.prototype.getCursorTextOffset = function() {
        return this.session.snapshot.cursor.textOffset;
      };

      SessionClient.prototype.getDescription = function() {
        return this.session.snapshot.description;
      };

      SessionClient.prototype.getFileIndex = function(filename) {
        var file, idx, _i, _len, _ref;
        _ref = this.session.snapshot.files;
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          file = _ref[idx];
          if (file.filename === filename) {
            return idx;
          }
        }
        return -1;
      };

      SessionClient.prototype.getFileByIndex = function(idx) {
        if (angular.isString(idx)) {
          idx = this.getFileIndex(idx);
        }
        return this.session.snapshot.files[idx];
      };

      SessionClient.prototype.getFile = function(filename) {
        var file, _i, _len, _ref;
        _ref = this.session.snapshot.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          if (file.filename === filename) {
            return file;
          }
        }
      };

      SessionClient.prototype.getNumFiles = function() {
        var _ref;
        return ((_ref = this.session.snapshot.files) != null ? _ref.length : void 0) || 0;
      };

      SessionClient.prototype.getNumTags = function() {
        var _ref;
        return ((_ref = this.session.snapshot.tags) != null ? _ref.length : void 0) || 0;
      };

      SessionClient.prototype.getSnapshot = function() {
        return this.session.snapshot;
      };

      SessionClient.prototype.getTagIndex = function(tagName) {
        var idx, tag, _i, _len, _ref;
        _ref = this.session.snapshot.tags;
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          tag = _ref[idx];
          if (tag === tagName) {
            return idx;
          }
        }
        return -1;
      };

      SessionClient.prototype.hasFile = function(filename) {
        return this.getFileIndex(filename) >= 0;
      };

      SessionClient.prototype.hasFileIndex = function(idx) {
        return this.getFileByIndex(idx) != null;
      };

      SessionClient.prototype.hasTag = function(tagName) {
        return this.getTagIndex(tagName) >= 0;
      };

      SessionClient.prototype.isValidTag = function(tagName) {
        return /^[-_a-z0-9\.\[\]]+$/i.test(tagName);
      };

      SessionClient.prototype.isValidFile = function(file) {
        return this.isValidFilename(file.filename) && angular.isString(file.content);
      };

      SessionClient.prototype.isValidFilename = function(filename) {
        return /^[-_a-z0-9\.\[\]]+$/i.test(filename);
      };

      SessionClient.prototype.reset = function(json) {
        var file, tagName, _i, _j, _len, _len1, _ref, _ref1;
        if (json == null) {
          json = {};
        }
        json.description || (json.description = "");
        json.tags || (json.tags = []);
        json.cursor || (json.cursor = {
          fileIndex: 0,
          textOffset: 0
        });
        if (!angular.isString(json.description)) {
          throw new Error("Reset failed. Description must be a string.");
        }
        if (!angular.isArray(json.tags)) {
          throw new Error("Reset failed. Tags must be an array.");
        }
        _ref = json.tags;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tagName = _ref[_i];
          if (!this.isValidTag(tagName)) {
            throw new Error("Reset failed. Invalid tag: " + tagName + ".");
          }
        }
        if (!angular.isArray(json.files)) {
          throw new Error("Reset failed. Files must be an array.");
        }
        _ref1 = json.files;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          file = _ref1[_j];
          if (!this.isValidFile(file)) {
            throw new Error("Reset failed. Invalid file: " + (JSON.stringify(file)) + ".");
          }
        }
        if (!json.files.length) {
          throw new Error("Reset failed. There must be at least one file.");
        }
        return this._applyOp({
          p: [],
          od: angular.copy(this.getSnapshot()),
          oi: json
        });
      };

      SessionClient.prototype.cursorSetFile = function(filename) {
        var idx;
        if (!this.hasFile(filename)) {
          throw new Error("Unable set the active file. File does not exist: " + filename);
        }
        idx = this.getFileIndex(filename);
        return this._applyOp({
          p: ["cursor", "fileIndex"],
          od: this.getCursorFileIndex(),
          oi: idx
        });
      };

      SessionClient.prototype.cursorSetIndex = function(idx) {
        if (!this.hasFileIndex(idx)) {
          throw new Error("Unable set the active file. File does not exist: " + idx);
        }
        return this._applyOp({
          p: ["cursor", "fileIndex"],
          od: this.getCursorFileIndex(),
          oi: idx
        });
      };

      SessionClient.prototype.cursorSetOffset = function(offset) {
        return this._applyOp({
          p: ["cursor", "textOffset"],
          od: this.getCursorTextOffset(),
          oi: offset
        });
      };

      SessionClient.prototype.setDescription = function(description) {
        if (description == null) {
          description = "";
        }
        return this._applyOp({
          p: ["description", 0],
          sd: this.getDescription(),
          si: description
        });
      };

      SessionClient.prototype.fileCreate = function(filename, content) {
        var idx;
        if (content == null) {
          content = "";
        }
        if (!this.isValidFilename(filename)) {
          throw new Error("Unable to create file. Invalid filename: " + filename);
        }
        if (this.hasFile(filename)) {
          throw new Error("Unable to create file. File already exists: " + filename);
        }
        idx = this.getNumFiles();
        return this._applyOp({
          p: ["files", idx],
          li: {
            filename: filename,
            content: content
          }
        });
      };

      SessionClient.prototype.fileRename = function(filename, new_filename) {
        var idx;
        if (!this.isValidFilename(new_filename)) {
          throw new Error("Unable to create file. Invalid filename: " + new_filename);
        }
        if (!this.hasFile(filename)) {
          throw new Error("Unable to rename file. File does not exist: " + filename);
        }
        if (this.hasFile(new_filename)) {
          throw new Error("Unable to rename file. A file already exists named: " + new_filename);
        }
        idx = this.getFileIndex(filename);
        return this._applyOp({
          p: ["files", idx, "filename"],
          od: filename,
          oi: new_filename
        });
      };

      SessionClient.prototype.fileRemove = function(filename) {
        var idx;
        if (!this.hasFile(filename)) {
          throw new Error("Unable to remove file. File does not exist: " + filename);
        }
        if (this.getNumFiles() <= 1) {
          throw new Error("Unable to remove file. You can not remove all files.");
        }
        idx = this.getFileIndex(filename);
        this.cursorSetIndex(0);
        return this._applyOp({
          p: ["files", idx],
          ld: this.getFile(filename)
        });
      };

      SessionClient.prototype.textInsert = function(filename, offset, text) {
        var idx;
        if (!this.hasFile(filename)) {
          throw new Error("Unable to insert text. File does not exist: " + filename);
        }
        idx = this.getFileIndex(filename);
        return this._applyOp({
          p: ["files", idx, "content", offset],
          si: text
        });
      };

      SessionClient.prototype.textRemove = function(filename, offset, text) {
        var idx;
        if (!this.hasFile(filename)) {
          throw new Error("Unable to remove text. File does not exist: " + filename);
        }
        idx = this.getFileIndex(filename);
        return this._applyOp({
          p: ["files", idx, "content", offset],
          sd: text
        });
      };

      SessionClient.prototype.tagAdd = function(tagName) {
        var idx;
        if (!this.isValidTag(tagName)) {
          throw new Error("Unable to add tag. Invalid tag: " + tagName);
        }
        if (this.hasTag(tagName)) {
          throw new Error("Unable to add tag. Tag already exists: " + tagName);
        }
        idx = this.getNumTags();
        return this._applyOp({
          p: ["tags", idx],
          li: tagName
        });
      };

      SessionClient.prototype.tagRemove = function(tagName) {
        var idx;
        if (!this.hasTag(tagName)) {
          throw new Error("Unable to remove tag. Tag not found: " + tagName);
        }
        idx = this.getTagIndex(tagName);
        return this._applyOp({
          p: ["tags", idx],
          ld: tagName
        });
      };

      return SessionClient;

    })();

    function Session() {
      this.$clients = {};
      this.snapshot = {};
      this.iface = this.createClient("session");
      this.iface.reset({
        files: [
          {
            filename: "index.html",
            content: ""
          }
        ]
      });
    }

    Session.prototype.createClient = function(clientName) {
      var session, _base;
      session = this;
      return (_base = this.$clients)[clientName] || (_base[clientName] = new SessionClient(clientName, session));
    };

    Session.prototype.applyOps = function(sourceClientName, ops) {
      var client, clientName, op, postSnapshot, _i, _len, _ref, _results;
      postSnapshot = ottypes.json0.apply(this.snapshot, ops);
      for (_i = 0, _len = ops.length; _i < _len; _i++) {
        op = ops[_i];
        console.log("[OT] op", op);
      }
      console.log("[OT] snapshot", angular.copy(this.snapshot));
      if (this.snapshot !== postSnapshot) {
        angular.copy(postSnapshot, this.snapshot);
      }
      _ref = this.$clients;
      _results = [];
      for (clientName in _ref) {
        client = _ref[clientName];
        if (clientName !== sourceClientName) {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = ops.length; _j < _len1; _j++) {
              op = ops[_j];
              _results1.push(client._handleOp(sourceClientName, op, this.snapshot));
            }
            return _results1;
          }).call(this));
        }
      }
      return _results;
    };

    return Session;

  })());

}).call(this);


},{"../../vendor/share/share.uncompressed.js":27}],15:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.settings", []);

  module.service("settings", [
    function() {
      var e, saved, settings;
      settings = {
        previewer: {
          delay: 1000,
          auto_refresh: true
        },
        editor: {
          tab_size: 2,
          soft_tabs: true,
          theme: "textmate",
          wrap: {
            range: {
              min: 0,
              max: 80
            },
            enabled: false
          }
        }
      };
      if (typeof localStorage !== "undefined" && localStorage !== null) {
        if (saved = localStorage.getItem("plnkr_settings")) {
          try {
            saved = JSON.parse(saved);
          } catch (_error) {
            e = _error;
            saved = {};
          }
        }
        setInterval(function() {
          return localStorage.setItem("plnkr_settings", JSON.stringify(settings));
        }, 2000);
      }
      return angular.extend(settings, saved);
    }
  ]);

}).call(this);


},{}],16:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.types", []);

  module.factory("types", function() {
    var name, type, types;
    types = {
      html: {
        regex: /\.html$/i,
        mime: "text/html"
      },
      javascript: {
        regex: /\.js$/i,
        mime: "text/javascript"
      },
      coffee: {
        regex: /\.coffee$/i,
        mime: "text/coffee"
      },
      css: {
        regex: /\.css$/i,
        mime: "text/css"
      },
      text: {
        regex: /\.txt$/,
        mime: "text/plain"
      }
    };
    for (name in types) {
      type = types[name];
      type.name = name;
    }
    return {
      types: types,
      getByFilename: function(filename) {
        var mode;
        for (name in types) {
          mode = types[name];
          if (mode.regex.test(filename)) {
            return mode;
          }
        }
        return types.text;
      }
    };
  });

}).call(this);


},{}],17:[function(require,module,exports){
(function() {
  var module;

  require("../services/htmlFile.coffee");

  module = angular.module("plunker.service.updater", ["plunker.service.htmlFile"]);

  module.factory("updater", [
    "$q", "htmlFile", function($q, htmlFile) {
      return {
        update: function(json) {
          var file, promises, _fn, _i, _len, _ref;
          if (!(json.files && json.files.length)) {
            throw new Error("Unable to update invalid json: missing files array");
          }
          promises = [];
          _ref = json.files;
          _fn = function(file) {
            if (file.filename.match(/\.html$/i)) {
              return promises.push(htmlFile.update(file.content).then(function(markup) {
                return file.content = markup;
              }));
            }
          };
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            _fn(file);
          }
          return $q.all(promises).then(function() {
            return json;
          });
        }
      };
    }
  ]);

}).call(this);


},{"../services/htmlFile.coffee":10}],18:[function(require,module,exports){
(function() {
  var module;

  module = angular.module("plunker.service.url", []);

  module.constant("url", _plunker.url);

}).call(this);


},{}],19:[function(require,module,exports){
/**
 * angular-growl - v0.3.0 - 2013-09-26
 * https://github.com/marcorinck/angular-growl
 * Copyright (c) 2013 Marco Rinck; Licensed MIT
 */
angular.module('angular-growl', []);
angular.module('angular-growl').directive('growl', [
  '$rootScope',
  function ($rootScope) {
    'use strict';
    return {
      restrict: 'A',
      template: '<div class="growl">' + '\t<div class="growl-item alert" ng-repeat="message in messages" ng-class="computeClasses(message)">' + '\t\t<button type="button" class="close" ng-click="deleteMessage(message)">&times;</button>' + '            {{ message.text}}' + '\t</div>' + '</div>',
      replace: false,
      scope: true,
      controller: [
        '$scope',
        '$timeout',
        function ($scope, $timeout) {
          $scope.messages = [];
          $rootScope.$on('growlMessage', function (event, message) {
            $scope.messages.push(message);
            if (message.ttl && message.ttl !== -1) {
              $timeout(function () {
                $scope.deleteMessage(message);
              }, message.ttl);
            }
          });
          $scope.deleteMessage = function (message) {
            var index = $scope.messages.indexOf(message);
            if (index > -1) {
              $scope.messages.splice(index, 1);
            }
          };
          $scope.computeClasses = function (message) {
            return {
              'alert-success': message.isSuccess,
              'alert-danger': message.isError,
              'alert-warning': message.isWarn,
              'alert-info': message.isInfo
            };
          };
        }
      ]
    };
  }
]);
angular.module('angular-growl').provider('growl', function () {
  'use strict';
  var _ttl = null, _messagesKey = 'messages', _messageTextKey = 'text', _messageSeverityKey = 'severity';
  this.globalTimeToLive = function (ttl) {
    _ttl = ttl;
  };
  this.messagesKey = function (messagesKey) {
    _messagesKey = messagesKey;
  };
  this.messageTextKey = function (messageTextKey) {
    _messageTextKey = messageTextKey;
  };
  this.messageSeverityKey = function (messageSeverityKey) {
    _messageSeverityKey = messageSeverityKey;
  };
  this.serverMessagesInterceptor = [
    '$q',
    'growl',
    function ($q, growl) {
      function checkResponse(response) {
        if (response.data[_messagesKey] && response.data[_messagesKey].length > 0) {
          growl.addServerMessages(response.data[_messagesKey]);
        }
      }
      function success(response) {
        checkResponse(response);
        return response;
      }
      function error(response) {
        checkResponse(response);
        return $q.reject(response);
      }
      return function (promise) {
        return promise.then(success, error);
      };
    }
  ];
  this.$get = [
    '$rootScope',
    '$filter',
    function ($rootScope, $filter) {
      var translate;
      try {
        translate = $filter('translate');
      } catch (e) {
      }
      function broadcastMessage(message) {
        if (translate) {
          message = translate(message);
        }
        $rootScope.$broadcast('growlMessage', message);
      }
      function sendMessage(text, config, severity) {
        var _config = config || {}, message;
        message = {
          text: text,
          isWarn: severity.isWarn,
          isError: severity.isError,
          isInfo: severity.isInfo,
          isSuccess: severity.isSuccess,
          ttl: _config.ttl || _ttl
        };
        broadcastMessage(message);
      }
      function addWarnMessage(text, config) {
        sendMessage(text, config, { isWarn: true });
      }
      function addErrorMessage(text, config) {
        sendMessage(text, config, { isError: true });
      }
      function addInfoMessage(text, config) {
        sendMessage(text, config, { isInfo: true });
      }
      function addSuccessMessage(text, config) {
        sendMessage(text, config, { isSuccess: true });
      }
      function addServerMessages(messages) {
        var i, message, severity, length;
        length = messages.length;
        for (i = 0; i < length; i++) {
          message = messages[i];
          if (message[_messageTextKey] && message[_messageSeverityKey]) {
            switch (message[_messageSeverityKey]) {
            case 'warn':
              severity = { isWarn: true };
              break;
            case 'success':
              severity = { isSuccess: true };
              break;
            case 'info':
              severity = { isInfo: true };
              break;
            case 'error':
              severity = { isError: true };
              break;
            }
            sendMessage(message[_messageTextKey], undefined, severity);
          }
        }
      }
      return {
        addWarnMessage: addWarnMessage,
        addErrorMessage: addErrorMessage,
        addInfoMessage: addInfoMessage,
        addSuccessMessage: addSuccessMessage,
        addServerMessages: addServerMessages
      };
    }
  ];
});
},{}],20:[function(require,module,exports){
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdownToggle","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/popup.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset-titles.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.transition', [])

/**
 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
 * @param  {DOMElement} element  The DOMElement that will be animated.
 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
 *   - As a string, it represents the css class to be added to the element.
 *   - As an object, it represents a hash of style attributes to be applied to the element.
 *   - As a function, it represents a function to be called that will cause the transition to occur.
 * @return {Promise}  A promise that is resolved when the transition finishes.
 */
.factory('$transition', ['$q', '$timeout', '$rootScope', function($q, $timeout, $rootScope) {

  var $transition = function(element, trigger, options) {
    options = options || {};
    var deferred = $q.defer();
    var endEventName = $transition[options.animation ? "animationEndEventName" : "transitionEndEventName"];

    var transitionEndHandler = function(event) {
      $rootScope.$apply(function() {
        element.unbind(endEventName, transitionEndHandler);
        deferred.resolve(element);
      });
    };

    if (endEventName) {
      element.bind(endEventName, transitionEndHandler);
    }

    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
    $timeout(function() {
      if ( angular.isString(trigger) ) {
        element.addClass(trigger);
      } else if ( angular.isFunction(trigger) ) {
        trigger(element);
      } else if ( angular.isObject(trigger) ) {
        element.css(trigger);
      }
      //If browser does not support transitions, instantly resolve
      if ( !endEventName ) {
        deferred.resolve(element);
      }
    });

    // Add our custom cancel function to the promise that is returned
    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
    // i.e. it will therefore never raise a transitionEnd event for that transition
    deferred.promise.cancel = function() {
      if ( endEventName ) {
        element.unbind(endEventName, transitionEndHandler);
      }
      deferred.reject('Transition cancelled');
    };

    return deferred.promise;
  };

  // Work out the name of the transitionEnd event
  var transElement = document.createElement('trans');
  var transitionEndEventNames = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };
  var animationEndEventNames = {
    'WebkitTransition': 'webkitAnimationEnd',
    'MozTransition': 'animationend',
    'OTransition': 'oAnimationEnd',
    'transition': 'animationend'
  };
  function findEndEventName(endEventNames) {
    for (var name in endEventNames){
      if (transElement.style[name] !== undefined) {
        return endEventNames[name];
      }
    }
  }
  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
  return $transition;
}]);

angular.module('ui.bootstrap.collapse',['ui.bootstrap.transition'])

// The collapsible directive indicates a block of html that will expand and collapse
.directive('collapse', ['$transition', function($transition) {
  // CSS transitions don't work with height: auto, so we have to manually change the height to a
  // specific value and then once the animation completes, we can reset the height to auto.
  // Unfortunately if you do this while the CSS transitions are specified (i.e. in the CSS class
  // "collapse") then you trigger a change to height 0 in between.
  // The fix is to remove the "collapse" CSS class while changing the height back to auto - phew!
  var fixUpHeight = function(scope, element, height) {
    // We remove the collapse CSS class to prevent a transition when we change to height: auto
    element.removeClass('collapse');
    element.css({ height: height });
    // It appears that  reading offsetWidth makes the browser realise that we have changed the
    // height already :-/
    var x = element[0].offsetWidth;
    element.addClass('collapse');
  };

  return {
    link: function(scope, element, attrs) {

      var isCollapsed;
      var initialAnimSkip = true;
      scope.$watch(function (){ return element[0].scrollHeight; }, function (value) {
        //The listener is called when scollHeight changes
        //It actually does on 2 scenarios: 
        // 1. Parent is set to display none
        // 2. angular bindings inside are resolved
        //When we have a change of scrollHeight we are setting again the correct height if the group is opened
        if (element[0].scrollHeight !== 0) {
          if (!isCollapsed) {
            if (initialAnimSkip) {
              fixUpHeight(scope, element, element[0].scrollHeight + 'px');
            } else {
              fixUpHeight(scope, element, 'auto');
            }
          }
        }
      });
      
      scope.$watch(attrs.collapse, function(value) {
        if (value) {
          collapse();
        } else {
          expand();
        }
      });
      

      var currentTransition;
      var doTransition = function(change) {
        if ( currentTransition ) {
          currentTransition.cancel();
        }
        currentTransition = $transition(element,change);
        currentTransition.then(
          function() { currentTransition = undefined; },
          function() { currentTransition = undefined; }
        );
        return currentTransition;
      };

      var expand = function() {
        if (initialAnimSkip) {
          initialAnimSkip = false;
          if ( !isCollapsed ) {
            fixUpHeight(scope, element, 'auto');
          }
        } else {
          doTransition({ height : element[0].scrollHeight + 'px' })
          .then(function() {
            // This check ensures that we don't accidentally update the height if the user has closed
            // the group while the animation was still running
            if ( !isCollapsed ) {
              fixUpHeight(scope, element, 'auto');
            }
          });
        }
        isCollapsed = false;
      };
      
      var collapse = function() {
        isCollapsed = true;
        if (initialAnimSkip) {
          initialAnimSkip = false;
          fixUpHeight(scope, element, 0);
        } else {
          fixUpHeight(scope, element, element[0].scrollHeight + 'px');
          doTransition({'height':'0'});
        }
      };
    }
  };
}]);

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

.constant('accordionConfig', {
  closeOthers: true
})

.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {
  
  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if ( closeOthers ) {
      angular.forEach(this.groups, function (group) {
        if ( group !== openGroup ) {
          group.isOpen = false;
        }
      });
    }
  };
  
  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function (event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if ( index !== -1 ) {
      this.groups.splice(this.groups.indexOf(group), 1);
    }
  };

}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('accordion', function () {
  return {
    restrict:'EA',
    controller:'AccordionController',
    transclude: true,
    replace: false,
    templateUrl: 'template/accordion/accordion.html'
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('accordionGroup', ['$parse', '$transition', '$timeout', function($parse, $transition, $timeout) {
  return {
    require:'^accordion',         // We need this directive to be inside an accordion
    restrict:'EA',
    transclude:true,              // It transcludes the contents of the directive into the template
    replace: true,                // The element containing the directive will be replaced with the template
    templateUrl:'template/accordion/accordion-group.html',
    scope:{ heading:'@' },        // Create an isolated scope and interpolate the heading attribute onto this scope
    controller: ['$scope', function($scope) {
      this.setHeading = function(element) {
        this.heading = element;
      };
    }],
    link: function(scope, element, attrs, accordionCtrl) {
      var getIsOpen, setIsOpen;

      accordionCtrl.addGroup(scope);

      scope.isOpen = false;
      
      if ( attrs.isOpen ) {
        getIsOpen = $parse(attrs.isOpen);
        setIsOpen = getIsOpen.assign;

        scope.$watch(
          function watchIsOpen() { return getIsOpen(scope.$parent); },
          function updateOpen(value) { scope.isOpen = value; }
        );
        
        scope.isOpen = getIsOpen ? getIsOpen(scope.$parent) : false;
      }

      scope.$watch('isOpen', function(value) {
        if ( value ) {
          accordionCtrl.closeOthers(scope);
        }
        if ( setIsOpen ) {
          setIsOpen(scope.$parent, value);
        }
      });
    }
  };
}])

// Use accordion-heading below an accordion-group to provide a heading containing HTML
// <accordion-group>
//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
// </accordion-group>
.directive('accordionHeading', function() {
  return {
    restrict: 'EA',
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^accordionGroup',
    compile: function(element, attr, transclude) {
      return function link(scope, element, attr, accordionGroupCtrl) {
        // Pass the heading to the accordion-group controller
        // so that it can be transcluded into the right place in the template
        // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
        accordionGroupCtrl.setHeading(transclude(scope, function() {}));
      };
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
// <div class="accordion-group">
//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
//   ...
// </div>
.directive('accordionTransclude', function() {
  return {
    require: '^accordionGroup',
    link: function(scope, element, attr, controller) {
      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
        if ( heading ) {
          element.html('');
          element.append(heading);
        }
      });
    }
  };
});

angular.module("ui.bootstrap.alert", []).directive('alert', function () {
  return {
    restrict:'EA',
    templateUrl:'template/alert/alert.html',
    transclude:true,
    replace:true,
    scope: {
      type: '=',
      close: '&'
    },
    link: function(scope, iElement, iAttrs, controller) {
      scope.closeable = "close" in iAttrs;
    }
  };
});

angular.module('ui.bootstrap.bindHtml', [])

  .directive('bindHtmlUnsafe', function () {
    return function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
        element.html(value || '');
      });
    };
  });
angular.module('ui.bootstrap.buttons', [])

  .constant('buttonConfig', {
    activeClass:'active',
    toggleEvent:'click'
  })

  .directive('btnRadio', ['buttonConfig', function (buttonConfig) {
  var activeClass = buttonConfig.activeClass || 'active';
  var toggleEvent = buttonConfig.toggleEvent || 'click';

  return {

    require:'ngModel',
    link:function (scope, element, attrs, ngModelCtrl) {

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(toggleEvent, function () {
        if (!element.hasClass(activeClass)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
}])

  .directive('btnCheckbox', ['buttonConfig', function (buttonConfig) {

  var activeClass = buttonConfig.activeClass || 'active';
  var toggleEvent = buttonConfig.toggleEvent || 'click';

  return {
    require:'ngModel',
    link:function (scope, element, attrs, ngModelCtrl) {

      function getTrueValue() {
        var trueValue = scope.$eval(attrs.btnCheckboxTrue);
        return angular.isDefined(trueValue) ? trueValue : true;
      }

      function getFalseValue() {
        var falseValue = scope.$eval(attrs.btnCheckboxFalse);
        return angular.isDefined(falseValue) ? falseValue : false;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
}]);
/**
* @ngdoc overview
* @name ui.bootstrap.carousel
*
* @description
* AngularJS version of an image carousel.
*
*/
angular.module('ui.bootstrap.carousel', ['ui.bootstrap.transition'])
.controller('CarouselController', ['$scope', '$timeout', '$transition', '$q', function ($scope, $timeout, $transition, $q) {
  var self = this,
    slides = self.slides = [],
    currentIndex = -1,
    currentTimeout, isPlaying;
  self.currentSlide = null;

  /* direction: "prev" or "next" */
  self.select = function(nextSlide, direction) {
    var nextIndex = slides.indexOf(nextSlide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > currentIndex ? "next" : "prev";
    }
    if (nextSlide && nextSlide !== self.currentSlide) {
      if ($scope.$currentTransition) {
        $scope.$currentTransition.cancel();
        //Timeout so ng-class in template has time to fix classes for finished slide
        $timeout(goNext);
      } else {
        goNext();
      }
    }
    function goNext() {
      //If we have a slide to transition from and we have a transition type and we're allowed, go
      if (self.currentSlide && angular.isString(direction) && !$scope.noTransition && nextSlide.$element) {
        //We shouldn't do class manip in here, but it's the same weird thing bootstrap does. need to fix sometime
        nextSlide.$element.addClass(direction);
        var reflow = nextSlide.$element[0].offsetWidth; //force reflow

        //Set all other slides to stop doing their stuff for the new transition
        angular.forEach(slides, function(slide) {
          angular.extend(slide, {direction: '', entering: false, leaving: false, active: false});
        });
        angular.extend(nextSlide, {direction: direction, active: true, entering: true});
        angular.extend(self.currentSlide||{}, {direction: direction, leaving: true});

        $scope.$currentTransition = $transition(nextSlide.$element, {});
        //We have to create new pointers inside a closure since next & current will change
        (function(next,current) {
          $scope.$currentTransition.then(
            function(){ transitionDone(next, current); },
            function(){ transitionDone(next, current); }
          );
        }(nextSlide, self.currentSlide));
      } else {
        transitionDone(nextSlide, self.currentSlide);
      }
      self.currentSlide = nextSlide;
      currentIndex = nextIndex;
      //every time you change slides, reset the timer
      restartTimer();
    }
    function transitionDone(next, current) {
      angular.extend(next, {direction: '', active: true, leaving: false, entering: false});
      angular.extend(current||{}, {direction: '', active: false, leaving: false, entering: false});
      $scope.$currentTransition = null;
    }
  };

  /* Allow outside people to call indexOf on slides array */
  self.indexOfSlide = function(slide) {
    return slides.indexOf(slide);
  };

  $scope.next = function() {
    var newIndex = (currentIndex + 1) % slides.length;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'next');
    }
  };

  $scope.prev = function() {
    var newIndex = currentIndex - 1 < 0 ? slides.length - 1 : currentIndex - 1;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(slides[newIndex], 'prev');
    }
  };

  $scope.select = function(slide) {
    self.select(slide);
  };

  $scope.isActive = function(slide) {
     return self.currentSlide === slide;
  };

  $scope.slides = function() {
    return slides;
  };

  $scope.$watch('interval', restartTimer);
  function restartTimer() {
    if (currentTimeout) {
      $timeout.cancel(currentTimeout);
    }
    function go() {
      if (isPlaying) {
        $scope.next();
        restartTimer();
      } else {
        $scope.pause();
      }
    }
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval>=0) {
      currentTimeout = $timeout(go, interval);
    }
  }
  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };
  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      if (currentTimeout) {
        $timeout.cancel(currentTimeout);
      }
    }
  };

  self.addSlide = function(slide, element) {
    slide.$element = element;
    slides.push(slide);
    //if this is the first slide or the slide is set to active, select it
    if(slides.length === 1 || slide.active) {
      self.select(slides[slides.length-1]);
      if (slides.length == 1) {
        $scope.play();
      }
    } else {
      slide.active = false;
    }
  };

  self.removeSlide = function(slide) {
    //get the index of the slide inside the carousel
    var index = slides.indexOf(slide);
    slides.splice(index, 1);
    if (slides.length > 0 && slide.active) {
      if (index >= slides.length) {
        self.select(slides[index-1]);
      } else {
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
    }
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
 */
.directive('carousel', [function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    controller: 'CarouselController',
    require: 'carousel',
    templateUrl: 'template/carousel/carousel.html',
    scope: {
      interval: '=',
      noTransition: '=',
      noPause: '='
    }
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
<div ng-controller="CarouselDemoCtrl">
  <carousel>
    <slide ng-repeat="slide in slides" active="slide.active">
      <img ng-src="{{slide.image}}" style="margin:auto;">
      <div class="carousel-caption">
        <h4>Slide {{$index}}</h4>
        <p>{{slide.text}}</p>
      </div>
    </slide>
  </carousel>
  <div class="row-fluid">
    <div class="span6">
      <ul>
        <li ng-repeat="slide in slides">
          <button class="btn btn-mini" ng-class="{'btn-info': !slide.active, 'btn-success': slide.active}" ng-disabled="slide.active" ng-click="slide.active = true">select</button>
          {{$index}}: {{slide.text}}
        </li>
      </ul>
      <a class="btn" ng-click="addSlide()">Add Slide</a>
    </div>
    <div class="span6">
      Interval, in milliseconds: <input type="number" ng-model="myInterval">
      <br />Enter a negative number to stop the interval.
    </div>
  </div>
</div>
  </file>
  <file name="script.js">
function CarouselDemoCtrl($scope) {
  $scope.myInterval = 5000;
  var slides = $scope.slides = [];
  $scope.addSlide = function() {
    var newWidth = 200 + ((slides.length + (25 * slides.length)) % 150);
    slides.push({
      image: 'http://placekitten.com/' + newWidth + '/200',
      text: ['More','Extra','Lots of','Surplus'][slides.length % 4] + ' '
        ['Cats', 'Kittys', 'Felines', 'Cutes'][slides.length % 4]
    });
  };
  for (var i=0; i<4; i++) $scope.addSlide();
}
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/

.directive('slide', ['$parse', function($parse) {
  return {
    require: '^carousel',
    restrict: 'EA',
    transclude: true,
    replace: true,
    templateUrl: 'template/carousel/slide.html',
    scope: {
    },
    link: function (scope, element, attrs, carouselCtrl) {
      //Set up optional 'active' = binding
      if (attrs.active) {
        var getActive = $parse(attrs.active);
        var setActive = getActive.assign;
        var lastValue = scope.active = getActive(scope.$parent);
        scope.$watch(function parentActiveWatch() {
          var parentActive = getActive(scope.$parent);

          if (parentActive !== scope.active) {
            // we are out of sync and need to copy
            if (parentActive !== lastValue) {
              // parent changed and it has precedence
              lastValue = scope.active = parentActive;
            } else {
              // if the parent can be assigned then do so
              setActive(scope.$parent, parentActive = lastValue = scope.active);
            }
          }
          return parentActive;
        });
      }

      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        if (active) {
          carouselCtrl.select(scope);
        }
      });
    }
  };
}]);

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods that can be use to retrieve position of DOM elements.
 * It is meant to be used where we need to absolute-position DOM elements in
 * relation to other, existing elements (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$position', ['$document', '$window', function ($document, $window) {

    function getStyle(el, cssprop) {
      if (el.currentStyle) { //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }

    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, "position") || 'static' ) === 'static';
    }

    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };

    return {
      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/
       */
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = { top: 0, left: 0 };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl != $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }

        return {
          width: element.prop('offsetWidth'),
          height: element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/
       */
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: element.prop('offsetWidth'),
          height: element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft  || $document[0].documentElement.scrollLeft)
        };
      }
    };
  }]);

angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.position'])

.constant('datepickerConfig', {
  dayFormat: 'dd',
  monthFormat: 'MMMM',
  yearFormat: 'yyyy',
  dayHeaderFormat: 'EEE',
  dayTitleFormat: 'MMMM yyyy',
  monthTitleFormat: 'yyyy',
  showWeeks: true,
  startingDay: 0,
  yearRange: 20,
  minDate: null,
  maxDate: null
})

.controller('DatepickerController', ['$scope', '$attrs', 'dateFilter', 'datepickerConfig', function($scope, $attrs, dateFilter, dtConfig) {
  var format = {
    day:        getValue($attrs.dayFormat,        dtConfig.dayFormat),
    month:      getValue($attrs.monthFormat,      dtConfig.monthFormat),
    year:       getValue($attrs.yearFormat,       dtConfig.yearFormat),
    dayHeader:  getValue($attrs.dayHeaderFormat,  dtConfig.dayHeaderFormat),
    dayTitle:   getValue($attrs.dayTitleFormat,   dtConfig.dayTitleFormat),
    monthTitle: getValue($attrs.monthTitleFormat, dtConfig.monthTitleFormat)
  },
  startingDay = getValue($attrs.startingDay,      dtConfig.startingDay),
  yearRange =   getValue($attrs.yearRange,        dtConfig.yearRange);

  this.minDate = dtConfig.minDate ? new Date(dtConfig.minDate) : null;
  this.maxDate = dtConfig.maxDate ? new Date(dtConfig.maxDate) : null;

  function getValue(value, defaultValue) {
    return angular.isDefined(value) ? $scope.$parent.$eval(value) : defaultValue;
  }

  function getDaysInMonth( year, month ) {
    return new Date(year, month, 0).getDate();
  }

  function getDates(startDate, n) {
    var dates = new Array(n);
    var current = startDate, i = 0;
    while (i < n) {
      dates[i++] = new Date(current);
      current.setDate( current.getDate() + 1 );
    }
    return dates;
  }

  function makeDate(date, format, isSelected, isSecondary) {
    return { date: date, label: dateFilter(date, format), selected: !!isSelected, secondary: !!isSecondary };
  }

  this.modes = [
    {
      name: 'day',
      getVisibleDates: function(date, selected) {
        var year = date.getFullYear(), month = date.getMonth(), firstDayOfMonth = new Date(year, month, 1);
        var difference = startingDay - firstDayOfMonth.getDay(),
        numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,
        firstDate = new Date(firstDayOfMonth), numDates = 0;

        if ( numDisplayedFromPreviousMonth > 0 ) {
          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );
          numDates += numDisplayedFromPreviousMonth; // Previous
        }
        numDates += getDaysInMonth(year, month + 1); // Current
        numDates += (7 - numDates % 7) % 7; // Next

        var days = getDates(firstDate, numDates), labels = new Array(7);
        for (var i = 0; i < numDates; i ++) {
          var dt = new Date(days[i]);
          days[i] = makeDate(dt, format.day, (selected && selected.getDate() === dt.getDate() && selected.getMonth() === dt.getMonth() && selected.getFullYear() === dt.getFullYear()), dt.getMonth() !== month);
        }
        for (var j = 0; j < 7; j++) {
          labels[j] = dateFilter(days[j].date, format.dayHeader);
        }
        return { objects: days, title: dateFilter(date, format.dayTitle), labels: labels };
      },
      compare: function(date1, date2) {
        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );
      },
      split: 7,
      step: { months: 1 }
    },
    {
      name: 'month',
      getVisibleDates: function(date, selected) {
        var months = new Array(12), year = date.getFullYear();
        for ( var i = 0; i < 12; i++ ) {
          var dt = new Date(year, i, 1);
          months[i] = makeDate(dt, format.month, (selected && selected.getMonth() === i && selected.getFullYear() === year));
        }
        return { objects: months, title: dateFilter(date, format.monthTitle) };
      },
      compare: function(date1, date2) {
        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() );
      },
      split: 3,
      step: { years: 1 }
    },
    {
      name: 'year',
      getVisibleDates: function(date, selected) {
        var years = new Array(yearRange), year = date.getFullYear(), startYear = parseInt((year - 1) / yearRange, 10) * yearRange + 1;
        for ( var i = 0; i < yearRange; i++ ) {
          var dt = new Date(startYear + i, 0, 1);
          years[i] = makeDate(dt, format.year, (selected && selected.getFullYear() === dt.getFullYear()));
        }
        return { objects: years, title: [years[0].label, years[yearRange - 1].label].join(' - ') };
      },
      compare: function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
      },
      split: 5,
      step: { years: yearRange }
    }
  ];

  this.isDisabled = function(date, mode) {
    var currentMode = this.modes[mode || 0];
    return ((this.minDate && currentMode.compare(date, this.minDate) < 0) || (this.maxDate && currentMode.compare(date, this.maxDate) > 0) || ($scope.dateDisabled && $scope.dateDisabled({date: date, mode: currentMode.name})));
  };
}])

.directive( 'datepicker', ['dateFilter', '$parse', 'datepickerConfig', '$log', function (dateFilter, $parse, datepickerConfig, $log) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/datepicker.html',
    scope: {
      dateDisabled: '&'
    },
    require: ['datepicker', '?^ngModel'],
    controller: 'DatepickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModel = ctrls[1];

      if (!ngModel) {
        return; // do nothing if no ng-model
      }

      // Configuration parameters
      var mode = 0, selected = new Date(), showWeeks = datepickerConfig.showWeeks;

      if (attrs.showWeeks) {
        scope.$parent.$watch($parse(attrs.showWeeks), function(value) {
          showWeeks = !! value;
          updateShowWeekNumbers();
        });
      } else {
        updateShowWeekNumbers();
      }

      if (attrs.min) {
        scope.$parent.$watch($parse(attrs.min), function(value) {
          datepickerCtrl.minDate = value ? new Date(value) : null;
          refill();
        });
      }
      if (attrs.max) {
        scope.$parent.$watch($parse(attrs.max), function(value) {
          datepickerCtrl.maxDate = value ? new Date(value) : null;
          refill();
        });
      }

      function updateShowWeekNumbers() {
        scope.showWeekNumbers = mode === 0 && showWeeks;
      }

      // Split array into smaller arrays
      function split(arr, size) {
        var arrays = [];
        while (arr.length > 0) {
          arrays.push(arr.splice(0, size));
        }
        return arrays;
      }

      function refill( updateSelected ) {
        var date = null, valid = true;

        if ( ngModel.$modelValue ) {
          date = new Date( ngModel.$modelValue );

          if ( isNaN(date) ) {
            valid = false;
            $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
          } else if ( updateSelected ) {
            selected = date;
          }
        }
        ngModel.$setValidity('date', valid);

        var currentMode = datepickerCtrl.modes[mode], data = currentMode.getVisibleDates(selected, date);
        angular.forEach(data.objects, function(obj) {
          obj.disabled = datepickerCtrl.isDisabled(obj.date, mode);
        });

        ngModel.$setValidity('date-disabled', (!date || !datepickerCtrl.isDisabled(date)));

        scope.rows = split(data.objects, currentMode.split);
        scope.labels = data.labels || [];
        scope.title = data.title;
      }

      function setMode(value) {
        mode = value;
        updateShowWeekNumbers();
        refill();
      }

      ngModel.$render = function() {
        refill( true );
      };

      scope.select = function( date ) {
        if ( mode === 0 ) {
          var dt = new Date( ngModel.$modelValue );
          dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );
          ngModel.$setViewValue( dt );
          refill( true );
        } else {
          selected = date;
          setMode( mode - 1 );
        }
      };
      scope.move = function(direction) {
        var step = datepickerCtrl.modes[mode].step;
        selected.setMonth( selected.getMonth() + direction * (step.months || 0) );
        selected.setFullYear( selected.getFullYear() + direction * (step.years || 0) );
        refill();
      };
      scope.toggleMode = function() {
        setMode( (mode + 1) % datepickerCtrl.modes.length );
      };
      scope.getWeekNumber = function(row) {
        return ( mode === 0 && scope.showWeekNumbers && row.length === 7 ) ? getISO8601WeekNumber(row[0].date) : null;
      };

      function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
        var time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
      }
    }
  };
}])

.constant('datepickerPopupConfig', {
  dateFormat: 'yyyy-MM-dd',
  closeOnDateSelection: true
})

.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'datepickerPopupConfig',
function ($compile, $parse, $document, $position, dateFilter, datepickerPopupConfig) {
  return {
    restrict: 'EA',
    require: 'ngModel',
    link: function(originalScope, element, attrs, ngModel) {

      var closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection;
      var dateFormat = attrs.datepickerPopup || datepickerPopupConfig.dateFormat;

     // create a child scope for the datepicker directive so we are not polluting original scope
      var scope = originalScope.$new();
      originalScope.$on('$destroy', function() {
        scope.$destroy();
      });

      var getIsOpen, setIsOpen;
      if ( attrs.isOpen ) {
        getIsOpen = $parse(attrs.isOpen);
        setIsOpen = getIsOpen.assign;

        originalScope.$watch(getIsOpen, function updateOpen(value) {
          scope.isOpen = !! value;
        });
      }
      scope.isOpen = getIsOpen ? getIsOpen(originalScope) : false; // Initial state

      function setOpen( value ) {
        if (setIsOpen) {
          setIsOpen(originalScope, !!value);
        } else {
          scope.isOpen = !!value;
        }
      }

      var documentClickBind = function(event) {
        if (scope.isOpen && event.target !== element[0]) {
          scope.$apply(function() {
            setOpen(false);
          });
        }
      };

      var elementFocusBind = function() {
        scope.$apply(function() {
          setOpen( true );
        });
      };

      // popup element used to display calendar
      var popupEl = angular.element('<datepicker-popup-wrap><datepicker></datepicker></datepicker-popup-wrap>');
      popupEl.attr({
        'ng-model': 'date',
        'ng-change': 'dateSelection()'
      });
      var datepickerEl = popupEl.find('datepicker');
      if (attrs.datepickerOptions) {
        datepickerEl.attr(angular.extend({}, originalScope.$eval(attrs.datepickerOptions)));
      }

      // TODO: reverse from dateFilter string to Date object
      function parseDate(viewValue) {
        if (!viewValue) {
          ngModel.$setValidity('date', true);
          return null;
        } else if (angular.isDate(viewValue)) {
          ngModel.$setValidity('date', true);
          return viewValue;
        } else if (angular.isString(viewValue)) {
          var date = new Date(viewValue);
          if (isNaN(date)) {
            ngModel.$setValidity('date', false);
            return undefined;
          } else {
            ngModel.$setValidity('date', true);
            return date;
          }
        } else {
          ngModel.$setValidity('date', false);
          return undefined;
        }
      }
      ngModel.$parsers.unshift(parseDate);

      // Inner change
      scope.dateSelection = function() {
        ngModel.$setViewValue(scope.date);
        ngModel.$render();

        if (closeOnDateSelection) {
          setOpen( false );
        }
      };

      element.bind('input change keyup', function() {
        scope.$apply(function() {
          updateCalendar();
        });
      });

      // Outter change
      ngModel.$render = function() {
        var date = ngModel.$viewValue ? dateFilter(ngModel.$viewValue, dateFormat) : '';
        element.val(date);

        updateCalendar();
      };

      function updateCalendar() {
        scope.date = ngModel.$modelValue;
        updatePosition();
      }

      function addWatchableAttribute(attribute, scopeProperty, datepickerAttribute) {
        if (attribute) {
          originalScope.$watch($parse(attribute), function(value){
            scope[scopeProperty] = value;
          });
          datepickerEl.attr(datepickerAttribute || scopeProperty, scopeProperty);
        }
      }
      addWatchableAttribute(attrs.min, 'min');
      addWatchableAttribute(attrs.max, 'max');
      if (attrs.showWeeks) {
        addWatchableAttribute(attrs.showWeeks, 'showWeeks', 'show-weeks');
      } else {
        scope.showWeeks = true;
        datepickerEl.attr('show-weeks', 'showWeeks');
      }
      if (attrs.dateDisabled) {
        datepickerEl.attr('date-disabled', attrs.dateDisabled);
      }

      function updatePosition() {
        scope.position = $position.position(element);
        scope.position.top = scope.position.top + element.prop('offsetHeight');
      }

      var documentBindingInitialized = false, elementFocusInitialized = false;
      scope.$watch('isOpen', function(value) {
        if (value) {
          updatePosition();
          $document.bind('click', documentClickBind);
          if(elementFocusInitialized) {
            element.unbind('focus', elementFocusBind);
          }
          element[0].focus();
          documentBindingInitialized = true;
        } else {
          if(documentBindingInitialized) {
            $document.unbind('click', documentClickBind);
          }
          element.bind('focus', elementFocusBind);
          elementFocusInitialized = true;
        }

        if ( setIsOpen ) {
          setIsOpen(originalScope, value);
        }
      });

      var $setModelValue = $parse(attrs.ngModel).assign;

      scope.today = function() {
        $setModelValue(originalScope, new Date());
      };
      scope.clear = function() {
        $setModelValue(originalScope, null);
      };

      element.after($compile(popupEl)(scope));
    }
  };
}])

.directive('datepickerPopupWrap', [function() {
  return {
    restrict:'E',
    replace: true,
    transclude: true,
    templateUrl: 'template/datepicker/popup.html',
    link:function (scope, element, attrs) {
      element.bind('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
    }
  };
}]);

/*
 * dropdownToggle - Provides dropdown menu functionality in place of bootstrap js
 * @restrict class or attribute
 * @example:
   <li class="dropdown">
     <a class="dropdown-toggle">My Dropdown Menu</a>
     <ul class="dropdown-menu">
       <li ng-repeat="choice in dropChoices">
         <a ng-href="{{choice.href}}">{{choice.text}}</a>
       </li>
     </ul>
   </li>
 */

angular.module('ui.bootstrap.dropdownToggle', []).directive('dropdownToggle', ['$document', '$location', function ($document, $location) {
  var openElement = null,
      closeMenu   = angular.noop;
  return {
    restrict: 'CA',
    link: function(scope, element, attrs) {
      scope.$watch('$location.path', function() { closeMenu(); });
      element.parent().bind('click', function() { closeMenu(); });
      element.bind('click', function (event) {

        var elementWasOpen = (element === openElement);

        event.preventDefault();
        event.stopPropagation();

        if (!!openElement) {
          closeMenu();
        }

        if (!elementWasOpen) {
          element.parent().addClass('open');
          openElement = element;
          closeMenu = function (event) {
            if (event) {
              event.preventDefault();
              event.stopPropagation();
            }
            $document.unbind('click', closeMenu);
            element.parent().removeClass('open');
            closeMenu = angular.noop;
            openElement = null;
          };
          $document.bind('click', closeMenu);
        }
      });
    }
  };
}]);
angular.module('ui.bootstrap.modal', [])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$modalStack', '$timeout', function ($modalStack, $timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: 'template/modal/backdrop.html',
      link: function (scope, element, attrs) {

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static') {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };
      }
    };
  }])

  .directive('modalWindow', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      scope: {
        index: '@'
      },
      replace: true,
      transclude: true,
      templateUrl: 'template/modal/window.html',
      link: function (scope, element, attrs) {
        scope.windowClass = attrs.windowClass || '';

        //trigger CSS transitions
        $timeout(function () {
          scope.animate = true;
        });
      }
    };
  }])

  .factory('$modalStack', ['$document', '$compile', '$rootScope', '$$stackedMap',
    function ($document, $compile, $rootScope, $$stackedMap) {

      var backdropjqLiteEl, backdropDomEl;
      var backdropScope = $rootScope.$new(true);
      var body = $document.find('body').eq(0);
      var openedWindows = $$stackedMap.createNew();
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        backdropScope.index = newBackdropIndex;
      });

      function removeModalWindow(modalInstance) {

        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        modalWindow.modalDomEl.remove();

        //remove backdrop if no longer needed
        if (backdropIndex() == -1) {
          backdropDomEl.remove();
          backdropDomEl = undefined;
        }

        //destroy scope
        modalWindow.modalScope.$destroy();
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key);
            });
          }
        }
      });

      $modalStack.open = function (modalInstance, modal) {

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var angularDomEl = angular.element('<div modal-window></div>');
        angularDomEl.attr('window-class', modal.windowClass);
        angularDomEl.attr('index', openedWindows.length() - 1);
        angularDomEl.html(modal.content);

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        body.append(modalDomEl);

        if (backdropIndex() >= 0 && !backdropDomEl) {
            backdropjqLiteEl = angular.element('<div modal-backdrop></div>');
            backdropDomEl = $compile(backdropjqLiteEl)(backdropScope);
            body.append(backdropDomEl);
        }
      };

      $modalStack.close = function (modalInstance, result) {
        var modal = openedWindows.get(modalInstance);
        if (modal) {
          modal.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance).value;
        if (modalWindow) {
          modalWindow.deferred.reject(reason);
          removeModalWindow(modalInstance);
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        backdrop: true, //can be also false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$http', '$templateCache', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $http, $templateCache, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $http.get(options.templateUrl, {cache: $templateCache}).then(function (result) {
                return result.data;
              });
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value, key) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              close: function (result) {
                $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                content: tplAndVars[0],
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                windowClass: modalOptions.windowClass
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function () {
              modalOpenedDeferred.reject(false);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });
angular.module('ui.bootstrap.pagination', [])

.controller('PaginationController', ['$scope', '$attrs', '$parse', '$interpolate', function ($scope, $attrs, $parse, $interpolate) {
  var self = this;

  this.init = function(defaultItemsPerPage) {
    if ($attrs.itemsPerPage) {
      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
        self.itemsPerPage = parseInt(value, 10);
        $scope.totalPages = self.calculateTotalPages();
      });
    } else {
      this.itemsPerPage = defaultItemsPerPage;
    }
  };

  this.noPrevious = function() {
    return this.page === 1;
  };
  this.noNext = function() {
    return this.page === $scope.totalPages;
  };

  this.isActive = function(page) {
    return this.page === page;
  };

  this.calculateTotalPages = function() {
    return this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
  };

  this.getAttributeValue = function(attribute, defaultValue, interpolate) {
    return angular.isDefined(attribute) ? (interpolate ? $interpolate(attribute)($scope.$parent) : $scope.$parent.$eval(attribute)) : defaultValue;
  };

  this.render = function() {
    this.page = parseInt($scope.page, 10) || 1;
    $scope.pages = this.getPages(this.page, $scope.totalPages);
  };

  $scope.selectPage = function(page) {
    if ( ! self.isActive(page) && page > 0 && page <= $scope.totalPages) {
      $scope.page = page;
      $scope.onSelectPage({ page: page });
    }
  };

  $scope.$watch('totalItems', function() {
    $scope.totalPages = self.calculateTotalPages();
  });

  $scope.$watch('totalPages', function(value) {
    if ( $attrs.numPages ) {
      $scope.numPages = value; // Readonly variable
    }

    if ( self.page > value ) {
      $scope.selectPage(value);
    } else {
      self.render();
    }
  });

  $scope.$watch('page', function() {
    self.render();
  });
}])

.constant('paginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true
})

.directive('pagination', ['$parse', 'paginationConfig', function($parse, config) {
  return {
    restrict: 'EA',
    scope: {
      page: '=',
      totalItems: '=',
      onSelectPage:' &',
      numPages: '='
    },
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pagination.html',
    replace: true,
    link: function(scope, element, attrs, paginationCtrl) {

      // Setup configuration parameters
      var maxSize,
      boundaryLinks  = paginationCtrl.getAttributeValue(attrs.boundaryLinks,  config.boundaryLinks      ),
      directionLinks = paginationCtrl.getAttributeValue(attrs.directionLinks, config.directionLinks     ),
      firstText      = paginationCtrl.getAttributeValue(attrs.firstText,      config.firstText,     true),
      previousText   = paginationCtrl.getAttributeValue(attrs.previousText,   config.previousText,  true),
      nextText       = paginationCtrl.getAttributeValue(attrs.nextText,       config.nextText,      true),
      lastText       = paginationCtrl.getAttributeValue(attrs.lastText,       config.lastText,      true),
      rotate         = paginationCtrl.getAttributeValue(attrs.rotate,         config.rotate);

      paginationCtrl.init(config.itemsPerPage);

      if (attrs.maxSize) {
        scope.$parent.$watch($parse(attrs.maxSize), function(value) {
          maxSize = parseInt(value, 10);
          paginationCtrl.render();
        });
      }

      // Create page object used in template
      function makePage(number, text, isActive, isDisabled) {
        return {
          number: number,
          text: text,
          active: isActive,
          disabled: isDisabled
        };
      }

      paginationCtrl.getPages = function(currentPage, totalPages) {
        var pages = [];

        // Default page limits
        var startPage = 1, endPage = totalPages;
        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

        // recompute if maxSize
        if ( isMaxSized ) {
          if ( rotate ) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);
            endPage   = startPage + maxSize - 1;

            // Adjust if limit is exceeded
            if (endPage > totalPages) {
              endPage   = totalPages;
              startPage = endPage - maxSize + 1;
            }
          } else {
            // Visible pages are paginated with maxSize
            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

            // Adjust last page if limit is exceeded
            endPage = Math.min(startPage + maxSize - 1, totalPages);
          }
        }

        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
          var page = makePage(number, number, paginationCtrl.isActive(number), false);
          pages.push(page);
        }

        // Add links to move between page sets
        if ( isMaxSized && ! rotate ) {
          if ( startPage > 1 ) {
            var previousPageSet = makePage(startPage - 1, '...', false, false);
            pages.unshift(previousPageSet);
          }

          if ( endPage < totalPages ) {
            var nextPageSet = makePage(endPage + 1, '...', false, false);
            pages.push(nextPageSet);
          }
        }

        // Add previous & next links
        if (directionLinks) {
          var previousPage = makePage(currentPage - 1, previousText, false, paginationCtrl.noPrevious());
          pages.unshift(previousPage);

          var nextPage = makePage(currentPage + 1, nextText, false, paginationCtrl.noNext());
          pages.push(nextPage);
        }

        // Add first & last links
        if (boundaryLinks) {
          var firstPage = makePage(1, firstText, false, paginationCtrl.noPrevious());
          pages.unshift(firstPage);

          var lastPage = makePage(totalPages, lastText, false, paginationCtrl.noNext());
          pages.push(lastPage);
        }

        return pages;
      };
    }
  };
}])

.constant('pagerConfig', {
  itemsPerPage: 10,
  previousText: 'Â« Previous',
  nextText: 'Next Â»',
  align: true
})

.directive('pager', ['pagerConfig', function(config) {
  return {
    restrict: 'EA',
    scope: {
      page: '=',
      totalItems: '=',
      onSelectPage:' &',
      numPages: '='
    },
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pager.html',
    replace: true,
    link: function(scope, element, attrs, paginationCtrl) {

      // Setup configuration parameters
      var previousText = paginationCtrl.getAttributeValue(attrs.previousText, config.previousText, true),
      nextText         = paginationCtrl.getAttributeValue(attrs.nextText,     config.nextText,     true),
      align            = paginationCtrl.getAttributeValue(attrs.align,        config.align);

      paginationCtrl.init(config.itemsPerPage);

      // Create page object used in template
      function makePage(number, text, isDisabled, isPrevious, isNext) {
        return {
          number: number,
          text: text,
          disabled: isDisabled,
          previous: ( align && isPrevious ),
          next: ( align && isNext )
        };
      }

      paginationCtrl.getPages = function(currentPage) {
        return [
          makePage(currentPage - 1, previousText, paginationCtrl.noPrevious(), true, false),
          makePage(currentPage + 1, nextText, paginationCtrl.noNext(), false, true)
        ];
      };
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider( '$tooltip', function () {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    animation: true,
    popupDelay: 0
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'focus': 'blur'
  };

  // The options specified to the provider globally.
  var globalOptions = {};
  
  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function( value ) {
		angular.extend( globalOptions, value );
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
   */
  this.setTriggers = function setTriggers ( triggers ) {
    angular.extend( triggerMap, triggers );
  };

  /**
   * This is a helper function for translating camel-case to snake-case.
   */
  function snake_case(name){
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = [ '$window', '$compile', '$timeout', '$parse', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $parse, $document, $position, $interpolate ) {
    return function $tooltip ( type, prefix, defaultTriggerShow ) {
      var options = angular.extend( {}, defaultOptions, globalOptions );

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers ( trigger ) {
        var show = trigger || options.trigger || defaultTriggerShow;
        var hide = triggerMap[show] || show;
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case( type );

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template = 
        '<'+ directiveName +'-popup '+
          'title="'+startSym+'tt_title'+endSym+'" '+
          'content="'+startSym+'tt_content'+endSym+'" '+
          'placement="'+startSym+'tt_placement'+endSym+'" '+
          'animation="tt_animation()" '+
          'is-open="tt_isOpen"'+
          '>'+
        '</'+ directiveName +'-popup>';

      return {
        restrict: 'EA',
        scope: true,
        link: function link ( scope, element, attrs ) {
          var tooltip = $compile( template )( scope );
          var transitionTimeout;
          var popupTimeout;
          var $body;
          var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;
          var triggers = getTriggers( undefined );
          var hasRegisteredTriggers = false;

          // By default, the tooltip is not open.
          // TODO add ability to start tooltip opened
          scope.tt_isOpen = false;

          function toggleTooltipBind () {
            if ( ! scope.tt_isOpen ) {
              showTooltipBind();
            } else {
              hideTooltipBind();
            }
          }
          
          // Show the tooltip with delay if specified, otherwise show it immediately
          function showTooltipBind() {
            if ( scope.tt_popupDelay ) {
              popupTimeout = $timeout( show, scope.tt_popupDelay );
            } else {
              scope.$apply( show );
            }
          }

          function hideTooltipBind () {
            scope.$apply(function () {
              hide();
            });
          }
          
          // Show the tooltip popup element.
          function show() {
            var position,
                ttWidth,
                ttHeight,
                ttPosition;

            // Don't show empty tooltips.
            if ( ! scope.tt_content ) {
              return;
            }

            // If there is a pending remove transition, we must cancel it, lest the
            // tooltip be mysteriously removed.
            if ( transitionTimeout ) {
              $timeout.cancel( transitionTimeout );
            }
            
            // Set the initial positioning.
            tooltip.css({ top: 0, left: 0, display: 'block' });
            
            // Now we add it to the DOM because need some info about it. But it's not 
            // visible yet anyway.
            if ( appendToBody ) {
                $body = $body || $document.find( 'body' );
                $body.append( tooltip );
            } else {
              element.after( tooltip );
            }

            // Get the position of the directive element.
            position = appendToBody ? $position.offset( element ) : $position.position( element );

            // Get the height and width of the tooltip so we can center it.
            ttWidth = tooltip.prop( 'offsetWidth' );
            ttHeight = tooltip.prop( 'offsetHeight' );
            
            // Calculate the tooltip's top and left coordinates to center it with
            // this directive.
            switch ( scope.tt_placement ) {
              case 'right':
                ttPosition = {
                  top: position.top + position.height / 2 - ttHeight / 2,
                  left: position.left + position.width
                };
                break;
              case 'bottom':
                ttPosition = {
                  top: position.top + position.height,
                  left: position.left + position.width / 2 - ttWidth / 2
                };
                break;
              case 'left':
                ttPosition = {
                  top: position.top + position.height / 2 - ttHeight / 2,
                  left: position.left - ttWidth
                };
                break;
              default:
                ttPosition = {
                  top: position.top - ttHeight,
                  left: position.left + position.width / 2 - ttWidth / 2
                };
                break;
            }

            ttPosition.top += 'px';
            ttPosition.left += 'px';

            // Now set the calculated positioning.
            tooltip.css( ttPosition );
              
            // And show the tooltip.
            scope.tt_isOpen = true;
          }
          
          // Hide the tooltip popup element.
          function hide() {
            // First things first: we don't show it anymore.
            scope.tt_isOpen = false;

            //if tooltip is going to be shown after delay, we must cancel this
            $timeout.cancel( popupTimeout );
            
            // And now we remove it from the DOM. However, if we have animation, we 
            // need to wait for it to expire beforehand.
            // FIXME: this is a placeholder for a port of the transitions library.
            if ( angular.isDefined( scope.tt_animation ) && scope.tt_animation() ) {
              transitionTimeout = $timeout( function () { tooltip.remove(); }, 500 );
            } else {
              tooltip.remove();
            }
          }

          /**
           * Observe the relevant attributes.
           */
          attrs.$observe( type, function ( val ) {
            scope.tt_content = val;
          });

          attrs.$observe( prefix+'Title', function ( val ) {
            scope.tt_title = val;
          });

          attrs.$observe( prefix+'Placement', function ( val ) {
            scope.tt_placement = angular.isDefined( val ) ? val : options.placement;
          });

          attrs.$observe( prefix+'Animation', function ( val ) {
            scope.tt_animation = angular.isDefined( val ) ? $parse( val ) : function(){ return options.animation; };
          });

          attrs.$observe( prefix+'PopupDelay', function ( val ) {
            var delay = parseInt( val, 10 );
            scope.tt_popupDelay = ! isNaN(delay) ? delay : options.popupDelay;
          });

          attrs.$observe( prefix+'Trigger', function ( val ) {

            if (hasRegisteredTriggers) {
              element.unbind( triggers.show, showTooltipBind );
              element.unbind( triggers.hide, hideTooltipBind );
            }

            triggers = getTriggers( val );

            if ( triggers.show === triggers.hide ) {
              element.bind( triggers.show, toggleTooltipBind );
            } else {
              element.bind( triggers.show, showTooltipBind );
              element.bind( triggers.hide, hideTooltipBind );
            }

            hasRegisteredTriggers = true;
          });

          attrs.$observe( prefix+'AppendToBody', function ( val ) {
            appendToBody = angular.isDefined( val ) ? $parse( val )( scope ) : appendToBody;
          });

          // if a tooltip is attached to <body> we need to remove it on
          // location change as its parent scope will probably not be destroyed
          // by the change.
          if ( appendToBody ) {
            scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {
            if ( scope.tt_isOpen ) {
              hide();
            }
          });
          }

          // Make sure tooltip is destroyed and removed.
          scope.$on('$destroy', function onDestroyTooltip() {
            if ( scope.tt_isOpen ) {
              hide();
            } else {
              tooltip.remove();
            }
          });
        }
      };
    };
  }];
})

.directive( 'tooltipPopup', function () {
  return {
    restrict: 'E',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-popup.html'
  };
})

.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );
}])

.directive( 'tooltipHtmlUnsafePopup', function () {
  return {
    restrict: 'E',
    replace: true,
    scope: { content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
  };
})

.directive( 'tooltipHtmlUnsafe', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html popovers, and selector delegatation.
 */
angular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )
.directive( 'popoverPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { title: '@', content: '@', placement: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/popover/popover.html'
  };
})
.directive( 'popover', [ '$compile', '$timeout', '$parse', '$window', '$tooltip', function ( $compile, $timeout, $parse, $window, $tooltip ) {
  return $tooltip( 'popover', 'popover', 'click' );
}]);


angular.module('ui.bootstrap.progressbar', ['ui.bootstrap.transition'])

.constant('progressConfig', {
  animate: true,
  autoType: false,
  stackedTypes: ['success', 'info', 'warning', 'danger']
})

.controller('ProgressBarController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {

    // Whether bar transitions should be animated
    var animate = angular.isDefined($attrs.animate) ? $scope.$eval($attrs.animate) : progressConfig.animate;
    var autoType = angular.isDefined($attrs.autoType) ? $scope.$eval($attrs.autoType) : progressConfig.autoType;
    var stackedTypes = angular.isDefined($attrs.stackedTypes) ? $scope.$eval('[' + $attrs.stackedTypes + ']') : progressConfig.stackedTypes;

    // Create bar object
    this.makeBar = function(newBar, oldBar, index) {
        var newValue = (angular.isObject(newBar)) ? newBar.value : (newBar || 0);
        var oldValue =  (angular.isObject(oldBar)) ? oldBar.value : (oldBar || 0);
        var type = (angular.isObject(newBar) && angular.isDefined(newBar.type)) ? newBar.type : (autoType) ? getStackedType(index || 0) : null;

        return {
            from: oldValue,
            to: newValue,
            type: type,
            animate: animate
        };
    };

    function getStackedType(index) {
        return stackedTypes[index];
    }

    this.addBar = function(bar) {
        $scope.bars.push(bar);
        $scope.totalPercent += bar.to;
    };

    this.clearBars = function() {
        $scope.bars = [];
        $scope.totalPercent = 0;
    };
    this.clearBars();
}])

.directive('progress', function() {
    return {
        restrict: 'EA',
        replace: true,
        controller: 'ProgressBarController',
        scope: {
            value: '=percent',
            onFull: '&',
            onEmpty: '&'
        },
        templateUrl: 'template/progressbar/progress.html',
        link: function(scope, element, attrs, controller) {
            scope.$watch('value', function(newValue, oldValue) {
                controller.clearBars();

                if (angular.isArray(newValue)) {
                    // Stacked progress bar
                    for (var i=0, n=newValue.length; i < n; i++) {
                        controller.addBar(controller.makeBar(newValue[i], oldValue[i], i));
                    }
                } else {
                    // Simple bar
                    controller.addBar(controller.makeBar(newValue, oldValue));
                }
            }, true);

            // Total percent listeners
            scope.$watch('totalPercent', function(value) {
              if (value >= 100) {
                scope.onFull();
              } else if (value <= 0) {
                scope.onEmpty();
              }
            }, true);
        }
    };
})

.directive('progressbar', ['$transition', function($transition) {
    return {
        restrict: 'EA',
        replace: true,
        scope: {
            width: '=',
            old: '=',
            type: '=',
            animate: '='
        },
        templateUrl: 'template/progressbar/bar.html',
        link: function(scope, element) {
            scope.$watch('width', function(value) {
                if (scope.animate) {
                    element.css('width', scope.old + '%');
                    $transition(element, {width: value + '%'});
                } else {
                    element.css('width', value + '%');
                }
            });
        }
    };
}]);
angular.module('ui.bootstrap.rating', [])

.constant('ratingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null
})

.controller('RatingController', ['$scope', '$attrs', '$parse', 'ratingConfig', function($scope, $attrs, $parse, ratingConfig) {

  this.maxRange = angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max;
  this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
  this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;

  this.createDefaultRange = function(len) {
    var defaultStateObject = {
      stateOn: this.stateOn,
      stateOff: this.stateOff
    };

    var states = new Array(len);
    for (var i = 0; i < len; i++) {
      states[i] = defaultStateObject;
    }
    return states;
  };

  this.normalizeRange = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i].stateOn = states[i].stateOn || this.stateOn;
      states[i].stateOff = states[i].stateOff || this.stateOff;
    }
    return states;
  };

  // Get objects used in template
  $scope.range = angular.isDefined($attrs.ratingStates) ?  this.normalizeRange(angular.copy($scope.$parent.$eval($attrs.ratingStates))): this.createDefaultRange(this.maxRange);

  $scope.rate = function(value) {
    if ( $scope.readonly || $scope.value === value) {
      return;
    }

    $scope.value = value;
  };

  $scope.enter = function(value) {
    if ( ! $scope.readonly ) {
      $scope.val = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.val = angular.copy($scope.value);
    $scope.onLeave();
  };

  $scope.$watch('value', function(value) {
    $scope.val = value;
  });

  $scope.readonly = false;
  if ($attrs.readonly) {
    $scope.$parent.$watch($parse($attrs.readonly), function(value) {
      $scope.readonly = !!value;
    });
  }
}])

.directive('rating', function() {
  return {
    restrict: 'EA',
    scope: {
      value: '=',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'RatingController',
    templateUrl: 'template/rating/rating.html',
    replace: true
  };
});

/**
 * @ngdoc overview
 * @name ui.bootstrap.tabs
 *
 * @description
 * AngularJS version of the tabs directive.
 */

angular.module('ui.bootstrap.tabs', [])

.directive('tabs', function() {
  return function() {
    throw new Error("The `tabs` directive is deprecated, please migrate to `tabset`. Instructions can be found at http://github.com/angular-ui/bootstrap/tree/master/CHANGELOG.md");
  };
})

.controller('TabsetController', ['$scope', '$element',
function TabsetCtrl($scope, $element) {

  var ctrl = this,
    tabs = ctrl.tabs = $scope.tabs = [];

  ctrl.select = function(tab) {
    angular.forEach(tabs, function(tab) {
      tab.active = false;
    });
    tab.active = true;
  };

  ctrl.addTab = function addTab(tab) {
    tabs.push(tab);
    if (tabs.length === 1 || tab.active) {
      ctrl.select(tab);
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index = tabs.indexOf(tab);
    //Select a new tab if the tab to be removed is selected
    if (tab.active && tabs.length > 1) {
      //If this is the last tab, select the previous tab. else, the next tab.
      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
      ctrl.select(tabs[newActiveIndex]);
    }
    tabs.splice(index, 1);
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabset
 * @restrict EA
 *
 * @description
 * Tabset is the outer container for the tabs directive
 *
 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
 * @param {string=} direction  What direction the tabs should be rendered. Available:
 * 'right', 'left', 'below'.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab heading="Vertical Tab 1"><b>First</b> Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Content!</tab>
    </tabset>
    <hr />
    <tabset vertical="true">
      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
    </tabset>
  </file>
</example>
 */
.directive('tabset', function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    require: '^tabset',
    scope: {},
    controller: 'TabsetController',
    templateUrl: 'template/tabs/tabset.html',
    compile: function(elm, attrs, transclude) {
      return function(scope, element, attrs, tabsetCtrl) {
        scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
        scope.type = angular.isDefined(attrs.type) ? scope.$parent.$eval(attrs.type) : 'tabs';
        scope.direction = angular.isDefined(attrs.direction) ? scope.$parent.$eval(attrs.direction) : 'top';
        scope.tabsAbove = (scope.direction != 'below');
        tabsetCtrl.$scope = scope;
        tabsetCtrl.$transcludeFn = transclude;
      };
    }
  };
})

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tab
 * @restrict EA
 *
 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
 * @param {string=} select An expression to evaluate when the tab is selected.
 * @param {boolean=} active A binding, telling whether or not this tab is selected.
 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
 *
 * @description
 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <div ng-controller="TabsDemoCtrl">
      <button class="btn btn-small" ng-click="items[0].active = true">
        Select item 1, using active binding
      </button>
      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
        Enable/disable item 2, using disabled binding
      </button>
      <br />
      <tabset>
        <tab heading="Tab 1">First Tab</tab>
        <tab select="alertMe()">
          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
          Second Tab, with alert callback and html heading!
        </tab>
        <tab ng-repeat="item in items"
          heading="{{item.title}}"
          disabled="item.disabled"
          active="item.active">
          {{item.content}}
        </tab>
      </tabset>
    </div>
  </file>
  <file name="script.js">
    function TabsDemoCtrl($scope) {
      $scope.items = [
        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
      ];

      $scope.alertMe = function() {
        setTimeout(function() {
          alert("You've selected the alert tab!");
        });
      };
    };
  </file>
</example>
 */

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabHeading
 * @restrict EA
 *
 * @description
 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab>
        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
        And some content, too!
      </tab>
      <tab>
        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
        That's right.
      </tab>
    </tabset>
  </file>
</example>
 */
.directive('tab', ['$parse', '$http', '$templateCache', '$compile',
function($parse, $http, $templateCache, $compile) {
  return {
    require: '^tabset',
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/tabs/tab.html',
    transclude: true,
    scope: {
      heading: '@',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    compile: function(elm, attrs, transclude) {
      return function postLink(scope, elm, attrs, tabsetCtrl) {
        var getActive, setActive;
        if (attrs.active) {
          getActive = $parse(attrs.active);
          setActive = getActive.assign;
          scope.$parent.$watch(getActive, function updateActive(value) {
            scope.active = !!value;
          });
          scope.active = getActive(scope.$parent);
        } else {
          setActive = getActive = angular.noop;
        }

        scope.$watch('active', function(active) {
          setActive(scope.$parent, active);
          if (active) {
            tabsetCtrl.select(scope);
            scope.onSelect();
          } else {
            scope.onDeselect();
          }
        });

        scope.disabled = false;
        if ( attrs.disabled ) {
          scope.$parent.$watch($parse(attrs.disabled), function(value) {
            scope.disabled = !! value;
          });
        }

        scope.select = function() {
          if ( ! scope.disabled ) {
            scope.active = true;
          }
        };

        tabsetCtrl.addTab(scope);
        scope.$on('$destroy', function() {
          tabsetCtrl.removeTab(scope);
        });
        if (scope.active) {
          setActive(scope.$parent, true);
        }


        //We need to transclude later, once the content container is ready.
        //when this link happens, we're inside a tab heading.
        scope.$transcludeFn = transclude;
      };
    }
  };
}])

.directive('tabHeadingTransclude', [function() {
  return {
    restrict: 'A',
    require: '^tab',
    link: function(scope, elm, attrs, tabCtrl) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
}])

.directive('tabContentTransclude', ['$compile', '$parse', function($compile, $parse) {
  return {
    restrict: 'A',
    require: '^tabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.tabContentTransclude);

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isTabHeading(node) {
    return node.tagName &&  (
      node.hasAttribute('tab-heading') ||
      node.hasAttribute('data-tab-heading') ||
      node.tagName.toLowerCase() === 'tab-heading' ||
      node.tagName.toLowerCase() === 'data-tab-heading'
    );
  }
}])

.directive('tabsetTitles', ['$http', function($http) {
  return {
    restrict: 'A',
    require: '^tabset',
    templateUrl: 'template/tabs/tabset-titles.html',
    replace: true,
    link: function(scope, elm, attrs, tabsetCtrl) {
      if (!scope.$eval(attrs.tabsetTitles)) {
        elm.remove();
      } else {
        //now that tabs location has been decided, transclude the tab titles in
        tabsetCtrl.$transcludeFn(tabsetCtrl.$scope.$parent, function(node) {
          elm.append(node);
        });
      }
    }
  };
}])

;


angular.module('ui.bootstrap.timepicker', [])

.constant('timepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  showMeridian: true,
  meridians: ['AM', 'PM'],
  readonlyInput: false,
  mousewheel: true
})

.directive('timepicker', ['$parse', '$log', 'timepickerConfig', function ($parse, $log, timepickerConfig) {
  return {
    restrict: 'EA',
    require:'?^ngModel',
    replace: true,
    scope: {},
    templateUrl: 'template/timepicker/timepicker.html',
    link: function(scope, element, attrs, ngModel) {
      if ( !ngModel ) {
        return; // do nothing if no ng-model
      }

      var selected = new Date(), meridians = timepickerConfig.meridians;

      var hourStep = timepickerConfig.hourStep;
      if (attrs.hourStep) {
        scope.$parent.$watch($parse(attrs.hourStep), function(value) {
          hourStep = parseInt(value, 10);
        });
      }

      var minuteStep = timepickerConfig.minuteStep;
      if (attrs.minuteStep) {
        scope.$parent.$watch($parse(attrs.minuteStep), function(value) {
          minuteStep = parseInt(value, 10);
        });
      }

      // 12H / 24H mode
      scope.showMeridian = timepickerConfig.showMeridian;
      if (attrs.showMeridian) {
        scope.$parent.$watch($parse(attrs.showMeridian), function(value) {
          scope.showMeridian = !!value;

          if ( ngModel.$error.time ) {
            // Evaluate from template
            var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
            if (angular.isDefined( hours ) && angular.isDefined( minutes )) {
              selected.setHours( hours );
              refresh();
            }
          } else {
            updateTemplate();
          }
        });
      }

      // Get scope.hours in 24H mode if valid
      function getHoursFromTemplate ( ) {
        var hours = parseInt( scope.hours, 10 );
        var valid = ( scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
        if ( !valid ) {
          return undefined;
        }

        if ( scope.showMeridian ) {
          if ( hours === 12 ) {
            hours = 0;
          }
          if ( scope.meridian === meridians[1] ) {
            hours = hours + 12;
          }
        }
        return hours;
      }

      function getMinutesFromTemplate() {
        var minutes = parseInt(scope.minutes, 10);
        return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
      }

      function pad( value ) {
        return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value;
      }

      // Input elements
      var inputs = element.find('input'), hoursInputEl = inputs.eq(0), minutesInputEl = inputs.eq(1);

      // Respond on mousewheel spin
      var mousewheel = (angular.isDefined(attrs.mousewheel)) ? scope.$eval(attrs.mousewheel) : timepickerConfig.mousewheel;
      if ( mousewheel ) {

        var isScrollingUp = function(e) {
          if (e.originalEvent) {
            e = e.originalEvent;
          }
          //pick correct delta variable depending on event
          var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
          return (e.detail || delta > 0);
        };

        hoursInputEl.bind('mousewheel wheel', function(e) {
          scope.$apply( (isScrollingUp(e)) ? scope.incrementHours() : scope.decrementHours() );
          e.preventDefault();
        });

        minutesInputEl.bind('mousewheel wheel', function(e) {
          scope.$apply( (isScrollingUp(e)) ? scope.incrementMinutes() : scope.decrementMinutes() );
          e.preventDefault();
        });
      }

      scope.readonlyInput = (angular.isDefined(attrs.readonlyInput)) ? scope.$eval(attrs.readonlyInput) : timepickerConfig.readonlyInput;
      if ( ! scope.readonlyInput ) {

        var invalidate = function(invalidHours, invalidMinutes) {
          ngModel.$setViewValue( null );
          ngModel.$setValidity('time', false);
          if (angular.isDefined(invalidHours)) {
            scope.invalidHours = invalidHours;
          }
          if (angular.isDefined(invalidMinutes)) {
            scope.invalidMinutes = invalidMinutes;
          }
        };

        scope.updateHours = function() {
          var hours = getHoursFromTemplate();

          if ( angular.isDefined(hours) ) {
            selected.setHours( hours );
            refresh( 'h' );
          } else {
            invalidate(true);
          }
        };

        hoursInputEl.bind('blur', function(e) {
          if ( !scope.validHours && scope.hours < 10) {
            scope.$apply( function() {
              scope.hours = pad( scope.hours );
            });
          }
        });

        scope.updateMinutes = function() {
          var minutes = getMinutesFromTemplate();

          if ( angular.isDefined(minutes) ) {
            selected.setMinutes( minutes );
            refresh( 'm' );
          } else {
            invalidate(undefined, true);
          }
        };

        minutesInputEl.bind('blur', function(e) {
          if ( !scope.invalidMinutes && scope.minutes < 10 ) {
            scope.$apply( function() {
              scope.minutes = pad( scope.minutes );
            });
          }
        });
      } else {
        scope.updateHours = angular.noop;
        scope.updateMinutes = angular.noop;
      }

      ngModel.$render = function() {
        var date = ngModel.$modelValue ? new Date( ngModel.$modelValue ) : null;

        if ( isNaN(date) ) {
          ngModel.$setValidity('time', false);
          $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
        } else {
          if ( date ) {
            selected = date;
          }
          makeValid();
          updateTemplate();
        }
      };

      // Call internally when we know that model is valid.
      function refresh( keyboardChange ) {
        makeValid();
        ngModel.$setViewValue( new Date(selected) );
        updateTemplate( keyboardChange );
      }

      function makeValid() {
        ngModel.$setValidity('time', true);
        scope.invalidHours = false;
        scope.invalidMinutes = false;
      }

      function updateTemplate( keyboardChange ) {
        var hours = selected.getHours(), minutes = selected.getMinutes();

        if ( scope.showMeridian ) {
          hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
        }
        scope.hours =  keyboardChange === 'h' ? hours : pad(hours);
        scope.minutes = keyboardChange === 'm' ? minutes : pad(minutes);
        scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
      }

      function addMinutes( minutes ) {
        var dt = new Date( selected.getTime() + minutes * 60000 );
        selected.setHours( dt.getHours(), dt.getMinutes() );
        refresh();
      }

      scope.incrementHours = function() {
        addMinutes( hourStep * 60 );
      };
      scope.decrementHours = function() {
        addMinutes( - hourStep * 60 );
      };
      scope.incrementMinutes = function() {
        addMinutes( minuteStep );
      };
      scope.decrementMinutes = function() {
        addMinutes( - minuteStep );
      };
      scope.toggleMeridian = function() {
        addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );
      };
    }
  };
}]);

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('typeaheadParser', ['$parse', function ($parse) {

  //                      00000111000000000000022200000000000000003333333333333330000000000044000
  var TYPEAHEAD_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+(.*)$/;

  return {
    parse:function (input) {

      var match = input.match(TYPEAHEAD_REGEXP), modelMapper, viewMapper, source;
      if (!match) {
        throw new Error(
          "Expected typeahead specification in form of '_modelValue_ (as _label_)? for _item_ in _collection_'" +
            " but got '" + input + "'.");
      }

      return {
        itemName:match[3],
        source:$parse(match[4]),
        viewMapper:$parse(match[2] || match[1]),
        modelMapper:$parse(match[1])
      };
    }
  };
}])

  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',
    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {

  var HOT_KEYS = [9, 13, 27, 38, 40];

  return {
    require:'ngModel',
    link:function (originalScope, element, attrs, modelCtrl) {

      //SUPPORTED ATTRIBUTES (OPTIONS)

      //minimal no of characters that needs to be entered before typeahead kicks-in
      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;

      //minimal wait time after last character typed before typehead kicks-in
      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

      //should it restrict model values to the ones selected from the popup only?
      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

      //binding to a variable that indicates if matches are being retrieved asynchronously
      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

      //a callback executed when a match is selected
      var onSelectCallback = $parse(attrs.typeaheadOnSelect);

      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

      //INTERNAL VARIABLES

      //model setter executed upon match selection
      var $setModelValue = $parse(attrs.ngModel).assign;

      //expressions used by typeahead
      var parserResult = typeaheadParser.parse(attrs.typeahead);


      //pop-up element used to display matches
      var popUpEl = angular.element('<typeahead-popup></typeahead-popup>');
      popUpEl.attr({
        matches: 'matches',
        active: 'activeIdx',
        select: 'select(activeIdx)',
        query: 'query',
        position: 'position'
      });
      //custom item template
      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
      }

      //create a child scope for the typeahead directive so we are not polluting original scope
      //with typeahead-specific data (matches, query etc.)
      var scope = originalScope.$new();
      originalScope.$on('$destroy', function(){
        scope.$destroy();
      });

      var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
      };

      var getMatchesAsync = function(inputValue) {

        var locals = {$viewValue: inputValue};
        isLoadingSetter(originalScope, true);
        $q.when(parserResult.source(scope, locals)).then(function(matches) {

          //it might happen that several async queries were in progress if a user were typing fast
          //but we are interested only in responses that correspond to the current view value
          if (inputValue === modelCtrl.$viewValue) {
            if (matches.length > 0) {

              scope.activeIdx = 0;
              scope.matches.length = 0;

              //transform labels
              for(var i=0; i<matches.length; i++) {
                locals[parserResult.itemName] = matches[i];
                scope.matches.push({
                  label: parserResult.viewMapper(scope, locals),
                  model: matches[i]
                });
              }

              scope.query = inputValue;
              //position pop-up with matches - we need to re-calculate its position each time we are opening a window
              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
              //due to other elements being rendered
              scope.position = $position.position(element);
              scope.position.top = scope.position.top + element.prop('offsetHeight');

            } else {
              resetMatches();
            }
            isLoadingSetter(originalScope, false);
          }
        }, function(){
          resetMatches();
          isLoadingSetter(originalScope, false);
        });
      };

      resetMatches();

      //we need to propagate user's query so we can higlight matches
      scope.query = undefined;

      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later 
      var timeoutPromise;

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function (inputValue) {

        resetMatches();
        if (inputValue && inputValue.length >= minSearch) {
          if (waitTime > 0) {
            if (timeoutPromise) {
              $timeout.cancel(timeoutPromise);//cancel previous timeout
            }
            timeoutPromise = $timeout(function () {
              getMatchesAsync(inputValue);
            }, waitTime);
          } else {
            getMatchesAsync(inputValue);
          }
        }

        if (isEditable) {
          return inputValue;
        } else {
          modelCtrl.$setValidity('editable', false);
          return undefined;
        }
      });

      modelCtrl.$formatters.push(function (modelValue) {

        var candidateViewValue, emptyViewValue;
        var locals = {};

        if (inputFormatter) {

          locals['$model'] = modelValue;
          return inputFormatter(originalScope, locals);

        } else {

          //it might happen that we don't have enough info to properly render input value
          //we need to check for this situation and simply return model value if we can't apply custom formatting
          locals[parserResult.itemName] = modelValue;
          candidateViewValue = parserResult.viewMapper(originalScope, locals);
          locals[parserResult.itemName] = undefined;
          emptyViewValue = parserResult.viewMapper(originalScope, locals);

          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;
        }
      });

      scope.select = function (activeIdx) {
        //called from within the $digest() cycle
        var locals = {};
        var model, item;

        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity('editable', true);

        onSelectCallback(originalScope, {
          $item: item,
          $model: model,
          $label: parserResult.viewMapper(originalScope, locals)
        });

        resetMatches();

        //return focus to the input element if a mach was selected via a mouse click event
        element[0].focus();
      };

      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
      element.bind('keydown', function (evt) {

        //typeahead is open and an "interesting" key was pressed
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
          return;
        }

        evt.preventDefault();

        if (evt.which === 40) {
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();

        } else if (evt.which === 38) {
          scope.activeIdx = (scope.activeIdx ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();

        } else if (evt.which === 13 || evt.which === 9) {
          scope.$apply(function () {
            scope.select(scope.activeIdx);
          });

        } else if (evt.which === 27) {
          evt.stopPropagation();

          resetMatches();
          scope.$digest();
        }
      });

      // Keep reference to click handler to unbind it.
      var dismissClickHandler = function (evt) {
        if (element[0] !== evt.target) {
          resetMatches();
          scope.$digest();
        }
      };

      $document.bind('click', dismissClickHandler);

      originalScope.$on('$destroy', function(){
        $document.unbind('click', dismissClickHandler);
      });

      element.after($compile(popUpEl)(scope));
    }
  };

}])

  .directive('typeaheadPopup', function () {
    return {
      restrict:'E',
      scope:{
        matches:'=',
        query:'=',
        active:'=',
        position:'=',
        select:'&'
      },
      replace:true,
      templateUrl:'template/typeahead/typeahead-popup.html',
      link:function (scope, element, attrs) {

        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function () {
          return scope.matches.length > 0;
        };

        scope.isActive = function (matchIdx) {
          return scope.active == matchIdx;
        };

        scope.selectActive = function (matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function (activeIdx) {
          scope.select({activeIdx:activeIdx});
        };
      }
    };
  })

  .directive('typeaheadMatch', ['$http', '$templateCache', '$compile', '$parse', function ($http, $templateCache, $compile, $parse) {
    return {
      restrict:'E',
      scope:{
        index:'=',
        match:'=',
        query:'='
      },
      link:function (scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
        $http.get(tplUrl, {cache: $templateCache}).success(function(tplContent){
           element.replaceWith($compile(tplContent.trim())(scope));
        });
      }
    };
  }])

  .filter('typeaheadHighlight', function() {

    function escapeRegexp(queryToEscape) {
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }

    return function(matchItem, query) {
      return query ? matchItem.replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
    };
  });
angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion-group.html",
    "<div class=\"accordion-group\">\n" +
    "  <div class=\"accordion-heading\" ><a class=\"accordion-toggle\" ng-click=\"isOpen = !isOpen\" accordion-transclude=\"heading\">{{heading}}</a></div>\n" +
    "  <div class=\"accordion-body\" collapse=\"!isOpen\">\n" +
    "    <div class=\"accordion-inner\" ng-transclude></div>  </div>\n" +
    "</div>");
}]);

angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion.html",
    "<div class=\"accordion\" ng-transclude></div>");
}]);

angular.module("template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/alert/alert.html",
    "<div class='alert' ng-class='type && \"alert-\" + type'>\n" +
    "    <button ng-show='closeable' type='button' class='close' ng-click='close()'>&times;</button>\n" +
    "    <div ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/carousel.html",
    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\">\n" +
    "    <ol class=\"carousel-indicators\" ng-show=\"slides().length > 1\">\n" +
    "        <li ng-repeat=\"slide in slides()\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
    "    </ol>\n" +
    "    <div class=\"carousel-inner\" ng-transclude></div>\n" +
    "    <a ng-click=\"prev()\" class=\"carousel-control left\" ng-show=\"slides().length > 1\">&lsaquo;</a>\n" +
    "    <a ng-click=\"next()\" class=\"carousel-control right\" ng-show=\"slides().length > 1\">&rsaquo;</a>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/slide.html",
    "<div ng-class=\"{\n" +
    "    'active': leaving || (active && !entering),\n" +
    "    'prev': (next || active) && direction=='prev',\n" +
    "    'next': (next || active) && direction=='next',\n" +
    "    'right': direction=='prev',\n" +
    "    'left': direction=='next'\n" +
    "  }\" class=\"item\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/datepicker.html",
    "<table>\n" +
    "  <thead>\n" +
    "    <tr class=\"text-center\">\n" +
    "      <th><button type=\"button\" class=\"btn pull-left\" ng-click=\"move(-1)\"><i class=\"icon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"{{rows[0].length - 2 + showWeekNumbers}}\"><button type=\"button\" class=\"btn btn-block\" ng-click=\"toggleMode()\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn pull-right\" ng-click=\"move(1)\"><i class=\"icon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "    <tr class=\"text-center\" ng-show=\"labels.length > 0\">\n" +
    "      <th ng-show=\"showWeekNumbers\">#</th>\n" +
    "      <th ng-repeat=\"label in labels\">{{label}}</th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows\">\n" +
    "      <td ng-show=\"showWeekNumbers\" class=\"text-center\"><em>{{ getWeekNumber(row) }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row\" class=\"text-center\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn\" ng-class=\"{'btn-info': dt.selected}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\"><span ng-class=\"{muted: dt.secondary}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/popup.html",
    "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" class=\"dropdown-menu\">\n" +
    "	<li ng-transclude></li>\n" +
    "	<li class=\"divider\"></li>\n" +
    "	<li style=\"padding: 9px;\">\n" +
    "		<span class=\"btn-group\">\n" +
    "			<button class=\"btn btn-small btn-inverse\" ng-click=\"today()\">Today</button>\n" +
    "			<button class=\"btn btn-small btn-info\" ng-click=\"showWeeks = ! showWeeks\" ng-class=\"{active: showWeeks}\">Weeks</button>\n" +
    "			<button class=\"btn btn-small btn-danger\" ng-click=\"clear()\">Clear</button>\n" +
    "		</span>\n" +
    "		<button class=\"btn btn-small btn-success pull-right\" ng-click=\"isOpen = false\">Close</button>\n" +
    "	</li>\n" +
    "</ul>");
}]);

angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/backdrop.html",
    "<div class=\"modal-backdrop fade\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1040 + index*10}\" ng-click=\"close($event)\"></div>");
}]);

angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window.html",
    "<div class=\"modal fade {{ windowClass }}\" ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10}\" ng-transclude></div>");
}]);

angular.module("template/pagination/pager.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pager.html",
    "<div class=\"pager\">\n" +
    "  <ul>\n" +
    "    <li ng-repeat=\"page in pages\" ng-class=\"{disabled: page.disabled, previous: page.previous, next: page.next}\"><a ng-click=\"selectPage(page.number)\">{{page.text}}</a></li>\n" +
    "  </ul>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pagination.html",
    "<div class=\"pagination\"><ul>\n" +
    "  <li ng-repeat=\"page in pages\" ng-class=\"{active: page.active, disabled: page.disabled}\"><a ng-click=\"selectPage(page.number)\">{{page.text}}</a></li>\n" +
    "  </ul>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind-html-unsafe=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen(), fade: animation() }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/bar.html",
    "<div class=\"bar\" ng-class='type && \"bar-\" + type'></div>");
}]);

angular.module("template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progress.html",
    "<div class=\"progress\"><progressbar ng-repeat=\"bar in bars\" width=\"bar.to\" old=\"bar.from\" animate=\"bar.animate\" type=\"bar.type\"></progressbar></div>");
}]);

angular.module("template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\">\n" +
    "	<i ng-repeat=\"r in range\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" ng-class=\"$index < val && (r.stateOn || 'icon-star') || (r.stateOff || 'icon-star-empty')\"></i>\n" +
    "</span>");
}]);

angular.module("template/tabs/pane.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/pane.html",
    "<div class=\"tab-pane\" ng-class=\"{active: selected}\" ng-show=\"selected\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tab.html",
    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
    "  <a ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("template/tabs/tabs.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabs.html",
    "<div class=\"tabbable\">\n" +
    "  <ul class=\"nav nav-tabs\">\n" +
    "    <li ng-repeat=\"pane in panes\" ng-class=\"{active:pane.selected}\">\n" +
    "      <a ng-click=\"select(pane)\">{{pane.heading}}</a>\n" +
    "    </li>\n" +
    "  </ul>\n" +
    "  <div class=\"tab-content\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tabs/tabset-titles.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset-titles.html",
    "<ul class=\"nav {{type && 'nav-' + type}}\" ng-class=\"{'nav-stacked': vertical}\">\n" +
    "</ul>\n" +
    "");
}]);

angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset.html",
    "\n" +
    "<div class=\"tabbable\" ng-class=\"{'tabs-right': direction == 'right', 'tabs-left': direction == 'left', 'tabs-below': direction == 'below'}\">\n" +
    "  <div tabset-titles=\"tabsAbove\"></div>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\" \n" +
    "         ng-repeat=\"tab in tabs\" \n" +
    "         ng-class=\"{active: tab.active}\"\n" +
    "         tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "  <div tabset-titles=\"!tabsAbove\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/timepicker/timepicker.html",
    "<table class=\"form-inline\">\n" +
    "	<tr class=\"text-center\">\n" +
    "		<td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><i class=\"icon-chevron-up\"></i></a></td>\n" +
    "		<td>&nbsp;</td>\n" +
    "		<td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><i class=\"icon-chevron-up\"></i></a></td>\n" +
    "		<td ng-show=\"showMeridian\"></td>\n" +
    "	</tr>\n" +
    "	<tr>\n" +
    "		<td class=\"control-group\" ng-class=\"{'error': invalidHours}\"><input type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"span1 text-center\" ng-mousewheel=\"incrementHours()\" ng-readonly=\"readonlyInput\" maxlength=\"2\" /></td>\n" +
    "		<td>:</td>\n" +
    "		<td class=\"control-group\" ng-class=\"{'error': invalidMinutes}\"><input type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"span1 text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\"></td>\n" +
    "		<td ng-show=\"showMeridian\"><button type=\"button\" ng-click=\"toggleMeridian()\" class=\"btn text-center\">{{meridian}}</button></td>\n" +
    "	</tr>\n" +
    "	<tr class=\"text-center\">\n" +
    "		<td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><i class=\"icon-chevron-down\"></i></a></td>\n" +
    "		<td>&nbsp;</td>\n" +
    "		<td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><i class=\"icon-chevron-down\"></i></a></td>\n" +
    "		<td ng-show=\"showMeridian\"></td>\n" +
    "	</tr>\n" +
    "</table>");
}]);

angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-match.html",
    "<a tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>");
}]);

angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-popup.html",
    "<ul class=\"typeahead dropdown-menu\" ng-style=\"{display: isOpen()&&'block' || 'none', top: position.top+'px', left: position.left+'px'}\">\n" +
    "    <li ng-repeat=\"match in matches\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\">\n" +
    "        <typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></typeahead-match>\n" +
    "    </li>\n" +
    "</ul>");
}]);

angular.module("template/typeahead/typeahead.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead.html",
    "<ul class=\"typeahead dropdown-menu\" ng-style=\"{display: isOpen()&&'block' || 'none', top: position.top+'px', left: position.left+'px'}\">\n" +
    "    <li ng-repeat=\"match in matches\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\">\n" +
    "        <a tabindex=\"-1\" ng-click=\"selectMatch($index)\" ng-bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>\n" +
    "    </li>\n" +
    "</ul>");
}]);
},{}],21:[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.2.0
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] === "") continue;
    if (!second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params || !parents[i].params.length) continue;
    parentParams = parents[i].params;

    for (var j in parentParams) {
      if (inheritList.indexOf(parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

angular.module('ui.router.util', ['ng']);
angular.module('ui.router.router', ['ui.router.util']);
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);
angular.module('ui.router', ['ui.router.state']);
angular.module('ui.router.compat', ['ui.router']);


/**
 * Service (`ui-util`). Manages resolution of (acyclic) graphs of promises.
 * @module $resolve
 * @requires $q
 * @requires $injector
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * Studies a set of invocables that are likely to be used multiple times.
   *      $resolve.study(invocables)(locals, parent, self)
   * is equivalent to
   *      $resolve.resolve(invocables, locals, parent, self)
   * but the former is more efficient (in fact `resolve` just calls `study` internally).
   * See {@link module:$resolve/resolve} for details.
   * @function
   * @param {Object} invocables
   * @return {Function}
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, cycle.indexOf(key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(key); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = true; // keep for isResolve()
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }
      
      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      if (parent.$$values) {
        merged = merge(values, parent.$$values);
        done();
      } else {
        extend(promises, parent.$$promises);
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        params.forEach(function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * Resolves a set of invocables. An invocable is a function to be invoked via `$injector.invoke()`,
   * and can have an arbitrary number of dependencies. An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the resulting value will be
   * used instead. Dependencies of invocables are resolved (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` (or recursively
   *   from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises returned by injectables
   * have been resolved. If any invocable (or `$injector.invoke`) throws an exception, or if a promise
   * returned by an invocable is rejected, the `$resolve` promise is immediately rejected with the same error.
   * A rejection of a `parent` promise (if specified) will likewise be propagated immediately. Once the
   * `$resolve` promise has been rejected, no further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve` to throw an
   * error. As a special case, an injectable can depend on a parameter with the same name as the injectable,
   * which will be fulfilled from the `parent` injectable of the same name. This allows inherited values
   * to be decorated. Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an (asynchronous) rejection
   * of the `$resolve` promise rather than a (synchronous) exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. This is true even for
   * dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to be a service name
   * to be passed to `$injector.get()`. This is supported primarily for backwards-compatibility with the
   * `resolve` property of `$routeProvider` routes.
   *
   * @function
   * @param {Object.<string, Function|string>} invocables  functions to invoke or `$injector` services to fetch.
   * @param {Object.<string, *>} [locals]  values to make available to the injectables
   * @param {Promise.<Object>} [parent]  a promise returned by another call to `$resolve`.
   * @param {Object} [self]  the `this` for the invoked methods
   * @return {Promise.<Object>}  Promise for an object that contains the resolved return value
   *    of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * Service. Manages loading of templates.
 * @constructor
 * @name $templateFactory
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * Creates a template from a configuration object. 
   * @function
   * @name $templateFactory#fromConfig
   * @methodOf $templateFactory
   * @param {Object} config  Configuration object for which to load a template. The following
   *    properties are search in the specified order, and the first one that is defined is
   *    used to create the template:
   * @param {string|Function} config.template  html string template or function to load via
   *    {@link $templateFactory#fromString fromString}.
   * @param {string|Function} config.templateUrl  url to load or a function returning the url
   *    to load via {@link $templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider  function to invoke via
   *    {@link $templateFactory#fromProvider fromProvider}.
   * @param {Object} params  Parameters to pass to the template function.
   * @param {Object} [locals] Locals to pass to `invoke` if the template is loaded via a
   *      `templateProvider`. Defaults to `{ params: params }`.
   * @return {string|Promise.<string>}  The template html as a string, or a promise for that string,
   *      or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * Creates a template from a string or a function returning a string.
   * @function
   * @name $templateFactory#fromString
   * @methodOf $templateFactory
   * @param {string|Function} template  html template as a string or function that returns an html
   *      template as a string.
   * @param {Object} params  Parameters to pass to the template function.
   * @return {string|Promise.<string>}  The template html as a string, or a promise for that string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * Loads a template from the a URL via `$http` and `$templateCache`.
   * @function
   * @name $templateFactory#fromUrl
   * @methodOf $templateFactory
   * @param {string|Function} url  url of the template to load, or a function that returns a url.
   * @param {Object} params  Parameters to pass to the url function.
   * @return {string|Promise.<string>}  The template html as a string, or a promise for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache })
        .then(function(response) { return response.data; });
  };

  /**
   * Creates a template by invoking an injectable provider function.
   * @function
   * @name $templateFactory#fromUrl
   * @methodOf $templateFactory
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} [locals] Locals to pass to `invoke`. Defaults to `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

/**
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link UrlMatcher#exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * ':' name - colon placeholder
 * * '*' name - catch-all placeholder
 * * '{' name '}' - curly placeholder
 * * '{' name ':' regexp '}' - curly placeholder with regexp. Should the regexp itself contain
 *   curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * ### Examples
 * 
 * * '/hello/' - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * '/user/:id' - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * '/user/{id}' - Same as the previous example, but using curly brace syntax.
 * * '/user/{id:[^/]*}' - Same as the previous example.
 * * '/user/{id:[0-9a-fA-F]{1,8}}' - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * '/files/{path:.*}' - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * '/files/*path' - ditto.
 *
 * @constructor
 * @param {string} pattern  the pattern to compile into a matcher.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link UrlMatcher#exec exec()} returns
 *   non-null) will start with this prefix.
 */
function UrlMatcher(pattern) {

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])(\w+)               classic placeholder ($1 / $2)
  //    \{(\w+)(?:\:( ... ))?\}   curly brace placeholder ($3) with optional regexp ... ($4)
  //    (?: ... | ... | ... )+    the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                  - anything other than curly braces or backslash
  //    \\.                       - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}     - a matched set of curly braces containing other atoms
  var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      names = {}, compiled = '^', last = 0, m,
      segments = this.segments = [],
      params = this.params = [];

  function addParameter(id) {
    if (!/^\w+(-+\w+)*$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (names[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    names[id] = true;
    params.push(id);
  }

  function quoteRegExp(string) {
    return string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  var id, regexp, segment;
  while ((m = placeholder.exec(pattern))) {
    id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    regexp = m[4] || (m[1] == '*' ? '.*' : '[^/]*');
    segment = pattern.substring(last, m.index);
    if (segment.indexOf('?') >= 0) break; // we're into the search part
    compiled += quoteRegExp(segment) + '(' + regexp + ')';
    addParameter(id);
    segments.push(segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');
  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last+i);

    // Allow parameters to be separated by '?' as well as '&' to make concat() easier
    forEach(search.substring(1).split(/[&?]/), addParameter);
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + '$';
  segments.push(segment);
  this.regexp = new RegExp(compiled);
  this.prefix = segments[0];
}

/**
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * ### Example
 * The following two matchers are equivalent:
 * ```
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * ```
 *
 * @param {string} pattern  The pattern to append.
 * @return {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * ### Example
 * ```
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', { x:'1', q:'hello' });
 * // returns { id:'bob', q:'hello', r:null }
 * ```
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @return {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;

  var params = this.params, nTotal = params.length,
    nPath = this.segments.length-1,
    values = {}, i;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  for (i=0; i<nPath; i++) values[params[i]] = m[i+1];
  for (/**/; i<nTotal; i++) values[params[i]] = searchParams[params[i]];

  return values;
};

/**
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * @return {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function () {
  return this.params;
};

/**
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * ### Example
 * ```
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * ```
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @return {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  var segments = this.segments, params = this.params;
  if (!values) return segments.join('');

  var nPath = segments.length-1, nTotal = params.length,
    result = segments[0], i, search, value;

  for (i=0; i<nPath; i++) {
    value = values[params[i]];
    // TODO: Maybe we should throw on null here? It's not really good style to use '' and null interchangeabley
    if (value != null) result += encodeURIComponent(value);
    result += segments[i+1];
  }
  for (/**/; i<nTotal; i++) {
    value = values[params[i]];
    if (value != null) {
      result += (search ? '&' : '?') + params[i] + '=' + encodeURIComponent(value);
      search = true;
    }
  }

  return result;
};

/**
 * Service. Factory for {@link UrlMatcher} instances. The factory is also available to providers
 * under the name `$urlMatcherFactoryProvider`.
 * @constructor
 * @name $urlMatcherFactory
 */
function $UrlMatcherFactory() {
  /**
   * Creates a {@link UrlMatcher} for the specified pattern.
   * @function
   * @name $urlMatcherFactory#compile
   * @methodOf $urlMatcherFactory
   * @param {string} pattern  The URL pattern.
   * @return {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern) {
    return new UrlMatcher(pattern);
  };

  /**
   * Returns true if the specified object is a UrlMatcher, or false otherwise.
   * @function
   * @name $urlMatcherFactory#isMatcher
   * @methodOf $urlMatcherFactory
   * @param {Object} o
   * @return {boolean}
   */
  this.isMatcher = function (o) {
    return isObject(o) && isFunction(o.exec) && isFunction(o.format) && isFunction(o.concat);
  };

  this.$get = function () {
    return this;
  };
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);


$UrlRouterProvider.$inject = ['$urlMatcherFactoryProvider'];
function $UrlRouterProvider(  $urlMatcherFactory) {
  var rules = [], 
      otherwise = null;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  this.rule =
    function (rule) {
      if (!isFunction(rule)) throw new Error("'rule' must be a function");
      rules.push(rule);
      return this;
    };

  this.otherwise =
    function (rule) {
      if (isString(rule)) {
        var redirect = rule;
        rule = function () { return redirect; };
      }
      else if (!isFunction(rule)) throw new Error("'rule' must be a function");
      otherwise = rule;
      return this;
    };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  this.when =
    function (what, handler) {
      var redirect, handlerIsString = isString(handler);
      if (isString(what)) what = $urlMatcherFactory.compile(what);

      if (!handlerIsString && !isFunction(handler) && !isArray(handler))
        throw new Error("invalid 'handler' in when()");

      var strategies = {
        matcher: function (what, handler) {
          if (handlerIsString) {
            redirect = $urlMatcherFactory.compile(handler);
            handler = ['$match', function ($match) { return redirect.format($match); }];
          }
          return extend(function ($injector, $location) {
            return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
          }, {
            prefix: isString(what.prefix) ? what.prefix : ''
          });
        },
        regex: function (what, handler) {
          if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

          if (handlerIsString) {
            redirect = handler;
            handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
          }
          return extend(function ($injector, $location) {
            return handleIfMatch($injector, handler, what.exec($location.path()));
          }, {
            prefix: regExpPrefix(what)
          });
        }
      };

      var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

      for (var n in check) {
        if (check[n]) {
          return this.rule(strategies[n](what, handler));
        }
      }

      throw new Error("invalid 'what' in when()");
    };

  this.$get =
    [        '$location', '$rootScope', '$injector',
    function ($location,   $rootScope,   $injector) {
      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
      function update() {
        function check(rule) {
          var handled = rule($injector, $location);
          if (handled) {
            if (isString(handled)) $location.replace().url(handled);
            return true;
          }
          return false;
        }
        var n=rules.length, i;
        for (i=0; i<n; i++) {
          if (check(rules[i])) return;
        }
        // always check otherwise last to allow dynamic updates to the set of rules
        if (otherwise) check(otherwise);
      }

      $rootScope.$on('$locationChangeSuccess', update);
      return {};
    }];
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider', '$locationProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory,           $locationProvider) {

  var root, states = {}, $state;

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = angular.extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url;

      if (isString(url)) {
        if (url.charAt(0) == '^') {
          return $urlMatcherFactory.compile(url.substring(1));
        }
        return (state.parent.navigable || root).url.concat(url);
      }

      if ($urlMatcherFactory.isMatcher(url) || url == null) {
        return url;
      }
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      if (!state.params) {
        return state.url ? state.url.parameters() : state.parent.params;
      }
      if (!isArray(state.params)) throw new Error("Invalid params in state '" + state + "'");
      if (state.url) throw new Error("Both params and url specicified in state '" + state + "'");
      return state.params;
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    ownParams: function(state) {
      if (!state.parent) {
        return state.params;
      }
      var paramNames = {}; forEach(state.params, function (p) { paramNames[p] = true; });

      forEach(state.parent.params, function (p) {
        if (!paramNames[p]) {
          throw new Error("Missing required parameter '" + p + "' in state '" + state.name + "'");
        }
        paramNames[p] = false;
      });
      var ownParams = [];

      forEach(paramNames, function (own, p) {
        if (own) ownParams.push(p);
      });
      return ownParams;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    }
  };


  function findState(stateOrName, base) {
    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = name.indexOf(".") === 0 || name.indexOf("^") === 0;

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }


  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states[name]) throw new Error("State '" + name + "'' is already defined");

    for (var key in stateBuilder) {
      state[key] = stateBuilder[key](state);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state['abstract'] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, false);
        }
      }]);
    }
    return state;
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  // .state(state)
  // .state(name, state)
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  // $urlRouter is injected just to ensure it gets instantiated
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$location', '$urlRouter'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $location,   $urlRouter) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));

    root.locals = { resolve: null, globals: { $stateParams: {} } };
    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    $state.go = function go(to, params, options) {
      return this.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    $state.transitionTo = function transitionTo(to, toParams, options) {
      if (!isDefined(options)) options = (options === true || options === false) ? { location: options } : {};
      toParams = toParams || {};
      options = extend({ location: true, inherit: false, relative: null }, options);

      var toState = findState(to, options.relative);
      if (!isDefined(toState)) throw new Error("No such state " + toState);
      if (toState['abstract']) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      to = toState;

      var toPath = to.path,
          from = $state.$current, fromParams = $state.params, fromPath = from.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep, state, locals = root.locals, toLocals = [];
      for (keep = 0, state = toPath[keep];
           state && state === fromPath[keep] && equalForKeys(toParams, fromParams, state.ownParams);
           keep++, state = toPath[keep]) {
        locals = toLocals[keep] = state.locals;
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change that we've initiated ourselves,
      // because we might accidentally abort a legitimate transition initiated from code?
      if (to === from && locals === from.locals) {
        $state.transition = null;
        return $q.when($state.current);
      }

      // Normalize/filter parameters before we pass them to event handlers etc.
      toParams = normalize(to.params, toParams || {});

      // Broadcast start event and cancel the transition if requested
      var evt = $rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams);
      if (evt.defaultPrevented) return TransitionPrevented;

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);
      for (var l=keep; l<toPath.length; l++, state=toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state===to, resolved, locals);
      }

      // Once everything is resolved, wer are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l=fromPath.length-1; l>=keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l=keep; l<toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        // Update $location
        var toNav = to.navigable;
        if (options.location && toNav) {
          $location.url(toNav.url.format(toNav.locals.globals.$stateParams));
        }

        $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        return $q.reject(error);
      });

      return transition;
    };

    $state.is = function is(stateOrName) {
      var state = findState(stateOrName);
      return (isDefined(state)) ? $state.$current === state : undefined;
    };

    $state.includes = function includes(stateOrName) {
      var state = findState(stateOrName);
      return (isDefined(state)) ? isDefined($state.$current.includes[state.name]) : undefined;
    };

    $state.href = function href(stateOrName, params, options) {
      options = extend({ lossy: true, inherit: false, relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) return null;

      params = inheritParams($stateParams, params || {}, $state.$current, state);
      var nav = (state && options.lossy) ? state.navigable : state;
      var url = (nav && nav.url) ? nav.url.format(normalize(state.params, params || {})) : null;
      return !$locationProvider.html5Mode() && url ? "#" + url : url;
    };

    $state.get = function (stateOrName) {
      var state = findState(stateOrName);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params, params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [ dst.resolve.then(function (globals) {
        dst.globals = globals;
      }) ];
      if (inherited) promises.push(inherited);

      // Resolve template and dependencies for all views.
      forEach(state.views, function (view, name) {
        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
        injectables.$template = [ function () {
          return $view.load(name, { view: view, locals: locals, params: $stateParams, notify: false }) || '';
        }];

        promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
          // References to the controller (only instantiated at link time)
          result.$$controller = view.controller;
          // Provide access to the state itself for internal use
          result.$$state = state;
          dst[name] = result;
        }));
      });

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function normalize(keys, values) {
    var normalized = {};

    forEach(keys, function (name) {
      var value = values[name];
      normalized[name] = (value != null) ? String(value) : null;
    });
    return normalized;
  }

  function equalForKeys(a, b, keys) {
    // If keys not provided, assume keys from object 'a'
    if (!keys) {
      keys = [];
      for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
    }

    for (var i=0; i<keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
    }
    return true;
  }

  function filterByKeys(keys, values) {
    var filtered = {};

    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);


$ViewDirective.$inject = ['$state', '$compile', '$controller', '$injector', '$anchorScroll'];
function $ViewDirective(   $state,   $compile,   $controller,   $injector,   $anchorScroll) {
  // TODO: Change to $injector.has() when we version bump to Angular 1.1.5.
  // See: https://github.com/angular/angular.js/blob/master/CHANGELOG.md#115-triangle-squarification-2013-05-22
  var $animator; try { $animator = $injector.get('$animator'); } catch (e) { /* do nothing */ }
  var viewIsUpdating = false;

  var directive = {
    restrict: 'ECA',
    terminal: true,
    transclude: true,
    compile: function (element, attr, transclude) {
      return function(scope, element, attr) {
        var viewScope, viewLocals,
            name = attr[directive.name] || attr.name || '',
            onloadExp = attr.onload || '',
            animate = isDefined($animator) && $animator(scope, attr);

        // Returns a set of DOM manipulation functions based on whether animation
        // should be performed
        var renderer = function(doAnimate) {
          return ({
            "true": {
              remove: function(element) { animate.leave(element.contents(), element); },
              restore: function(compiled, element) { animate.enter(compiled, element); },
              populate: function(template, element) {
                var contents = angular.element('<div></div>').html(template).contents();
                animate.enter(contents, element);
                return contents;
              }
            },
            "false": {
              remove: function(element) { element.html(''); },
              restore: function(compiled, element) { element.append(compiled); },
              populate: function(template, element) {
                element.html(template);
                return element.contents();
              }
            }
          })[doAnimate.toString()];
        };

        // Put back the compiled initial view
        element.append(transclude(scope));

        // Find the details of the parent view directive (if any) and use it
        // to derive our own qualified view name, then hang our own details
        // off the DOM so child directives can find it.
        var parent = element.parent().inheritedData('$uiView');
        if (name.indexOf('@') < 0) name  = name + '@' + (parent ? parent.state.name : '');
        var view = { name: name, state: null };
        element.data('$uiView', view);

        var eventHook = function() {
          if (viewIsUpdating) return;
          viewIsUpdating = true;

          try { updateView(true); } catch (e) {
            viewIsUpdating = false;
            throw e;
          }
          viewIsUpdating = false;
        };

        scope.$on('$stateChangeSuccess', eventHook);
        scope.$on('$viewContentLoading', eventHook);
        updateView(false);

        function updateView(doAnimate) {
          var locals = $state.$current && $state.$current.locals[name];
          if (locals === viewLocals) return; // nothing to do
          var render = renderer(animate && doAnimate);

          // Remove existing content
          render.remove(element);

          // Destroy previous view scope
          if (viewScope) {
            viewScope.$destroy();
            viewScope = null;
          }

          if (!locals) {
            viewLocals = null;
            view.state = null;

            // Restore the initial view
            return render.restore(transclude(scope), element);
          }

          viewLocals = locals;
          view.state = locals.$$state;

          var link = $compile(render.populate(locals.$template, element));
          viewScope = scope.$new();

          if (locals.$$controller) {
            locals.$scope = viewScope;
            var controller = $controller(locals.$$controller, locals);
            element.children().data('$ngControllerController', controller);
          }
          link(viewScope);
          viewScope.$emit('$viewContentLoaded');
          if (onloadExp) viewScope.$eval(onloadExp);

          // TODO: This seems strange, shouldn't $anchorScroll listen for $viewContentLoaded if necessary?
          // $anchorScroll might listen on event...
          $anchorScroll();
        }
      };
    }
  };
  return directive;
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);

function parseStateRef(ref) {
  var parsed = ref.match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

$StateRefDirective.$inject = ['$state'];
function $StateRefDirective($state) {
  return {
    restrict: 'A',
    link: function(scope, element, attrs) {
      var ref = parseStateRef(attrs.uiSref);
      var params = null, url = null, base = $state.$current;
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : "href", nav = true;

      var stateData = element.parent().inheritedData('$uiView');

      if (stateData && stateData.state && stateData.state.name) {
        base = stateData.state;
      }

      var update = function(newVal) {
        if (newVal) params = newVal;
        if (!nav) return;

        var newHref = $state.href(ref.state, params, { relative: base });

        if (!newHref) {
          nav = false;
          return false;
        }
        element[0][attr] = newHref;
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== oldVal) update(newVal);
        }, true);
        params = scope.$eval(ref.paramExpr);
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        if ((e.which == 1) && !e.ctrlKey && !e.metaKey && !e.shiftKey) {
          $state.go(ref.state, params, { relative: base });
          scope.$apply();
          e.preventDefault();
        }
      });
    }
  };
}

angular.module('ui.router.state').directive('uiSref', $StateRefDirective);

$RouteProvider.$inject = ['$stateProvider', '$urlRouterProvider'];
function $RouteProvider(  $stateProvider,    $urlRouterProvider) {

  var routes = [];

  onEnterRoute.$inject = ['$$state'];
  function onEnterRoute(   $$state) {
    /*jshint validthis: true */
    this.locals = $$state.locals.globals;
    this.params = this.locals.$stateParams;
  }

  function onExitRoute() {
    /*jshint validthis: true */
    this.locals = null;
    this.params = null;
  }

  this.when = when;
  function when(url, route) {
    /*jshint validthis: true */
    if (route.redirectTo != null) {
      // Redirect, configure directly on $urlRouterProvider
      var redirect = route.redirectTo, handler;
      if (isString(redirect)) {
        handler = redirect; // leave $urlRouterProvider to handle
      } else if (isFunction(redirect)) {
        // Adapt to $urlRouterProvider API
        handler = function (params, $location) {
          return redirect(params, $location.path(), $location.search());
        };
      } else {
        throw new Error("Invalid 'redirectTo' in when()");
      }
      $urlRouterProvider.when(url, handler);
    } else {
      // Regular route, configure as state
      $stateProvider.state(inherit(route, {
        parent: null,
        name: 'route:' + encodeURIComponent(url),
        url: url,
        onEnter: onEnterRoute,
        onExit: onExitRoute
      }));
    }
    routes.push(route);
    return this;
  }

  this.$get = $get;
  $get.$inject = ['$state', '$rootScope', '$routeParams'];
  function $get(   $state,   $rootScope,   $routeParams) {

    var $route = {
      routes: routes,
      params: $routeParams,
      current: undefined
    };

    function stateAsRoute(state) {
      return (state.name !== '') ? state : undefined;
    }

    $rootScope.$on('$stateChangeStart', function (ev, to, toParams, from, fromParams) {
      $rootScope.$broadcast('$routeChangeStart', stateAsRoute(to), stateAsRoute(from));
    });

    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
      $route.current = stateAsRoute(to);
      $rootScope.$broadcast('$routeChangeSuccess', stateAsRoute(to), stateAsRoute(from));
      copy(toParams, $route.params);
    });

    $rootScope.$on('$stateChangeError', function (ev, to, toParams, from, fromParams, error) {
      $rootScope.$broadcast('$routeChangeError', stateAsRoute(to), stateAsRoute(from), error);
    });

    return $route;
  }
}

angular.module('ui.router.compat')
  .provider('$route', $RouteProvider)
  .directive('ngView', $ViewDirective);
})(window, window.angular);
},{}],22:[function(require,module,exports){
/**
 * @license AngularJS v1.2.0-rc.2
 * (c) 2010-2012 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc overview
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * Provides the {@link ngCookies.$cookies `$cookies`} and
 * {@link ngCookies.$cookieStore `$cookieStore`} services.
 *
 * {@installModule cookies}
 *
 * See {@link ngCookies.$cookies `$cookies`} and
 * {@link ngCookies.$cookieStore `$cookieStore`} for usage.
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc object
   * @name ngCookies.$cookies
   * @requires $browser
   *
   * @description
   * Provides read/write access to browser's cookies.
   *
   * Only a simple Object is exposed and by adding or removing properties to/from
   * this object, new cookies are created/deleted at the end of current $eval.
   *
   * Requires the {@link ngCookies `ngCookies`} module to be installed.
   *
   * @example
   <doc:example>
     <doc:source>
       <script>
         function ExampleController($cookies) {
           // Retrieving a cookie
           var favoriteCookie = $cookies.myFavorite;
           // Setting a cookie
           $cookies.myFavorite = 'oatmeal';
         }
       </script>
     </doc:source>
   </doc:example>
   */
   factory('$cookies', ['$rootScope', '$browser', function ($rootScope, $browser) {
      var cookies = {},
          lastCookies = {},
          lastBrowserCookies,
          runEval = false,
          copy = angular.copy,
          isUndefined = angular.isUndefined;

      //creates a poller fn that copies all cookies from the $browser to service & inits the service
      $browser.addPollFn(function() {
        var currentCookies = $browser.cookies();
        if (lastBrowserCookies != currentCookies) { //relies on browser.cookies() impl
          lastBrowserCookies = currentCookies;
          copy(currentCookies, lastCookies);
          copy(currentCookies, cookies);
          if (runEval) $rootScope.$apply();
        }
      })();

      runEval = true;

      //at the end of each eval, push cookies
      //TODO: this should happen before the "delayed" watches fire, because if some cookies are not
      //      strings or browser refuses to store some cookies, we update the model in the push fn.
      $rootScope.$watch(push);

      return cookies;


      /**
       * Pushes all the cookies from the service to the browser and verifies if all cookies were stored.
       */
      function push() {
        var name,
            value,
            browserCookies,
            updated;

        //delete any cookies deleted in $cookies
        for (name in lastCookies) {
          if (isUndefined(cookies[name])) {
            $browser.cookies(name, undefined);
          }
        }

        //update all cookies updated in $cookies
        for(name in cookies) {
          value = cookies[name];
          if (!angular.isString(value)) {
            if (angular.isDefined(lastCookies[name])) {
              cookies[name] = lastCookies[name];
            } else {
              delete cookies[name];
            }
          } else if (value !== lastCookies[name]) {
            $browser.cookies(name, value);
            updated = true;
          }
        }

        //verify what was actually stored
        if (updated){
          updated = false;
          browserCookies = $browser.cookies();

          for (name in cookies) {
            if (cookies[name] !== browserCookies[name]) {
              //delete or reset all cookies that the browser dropped from $cookies
              if (isUndefined(browserCookies[name])) {
                delete cookies[name];
              } else {
                cookies[name] = browserCookies[name];
              }
              updated = true;
            }
          }
        }
      }
    }]).


  /**
   * @ngdoc object
   * @name ngCookies.$cookieStore
   * @requires $cookies
   *
   * @description
   * Provides a key-value (string-object) storage, that is backed by session cookies.
   * Objects put or retrieved from this storage are automatically serialized or
   * deserialized by angular's toJson/fromJson.
   *
   * Requires the {@link ngCookies `ngCookies`} module to be installed.
   *
   * @example
   */
   factory('$cookieStore', ['$cookies', function($cookies) {

      return {
        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#get
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        get: function(key) {
          var value = $cookies[key];
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#put
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         */
        put: function(key, value) {
          $cookies[key] = angular.toJson(value);
        },

        /**
         * @ngdoc method
         * @name ngCookies.$cookieStore#remove
         * @methodOf ngCookies.$cookieStore
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         */
        remove: function(key) {
          delete $cookies[key];
        }
      };

    }]);


})(window, window.angular);
},{}],23:[function(require,module,exports){
/**
 * @license AngularJS v1.2.0-rc.2
 * (c) 2010-2012 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @returns {function(string, string, ...): Error} instance
 */

function minErr(module) {
  return function () {
    var code = arguments[0],
      prefix = '[' + (module ? module + ':' : '') + code + '] ',
      template = arguments[1],
      templateArgs = arguments,
      stringify = function (obj) {
        if (isFunction(obj)) {
          return obj.toString().replace(/ \{[\s\S]*$/, '');
        } else if (isUndefined(obj)) {
          return 'undefined';
        } else if (!isString(obj)) {
          return JSON.stringify(obj);
        }
        return obj;
      },
      message, i;

    message = prefix + template.replace(/\{\d+\}/g, function (match) {
      var index = +match.slice(1, -1), arg;

      if (index + 2 < templateArgs.length) {
        arg = templateArgs[index + 2];
        if (isFunction(arg)) {
          return arg.toString().replace(/ ?\{[\s\S]*$/, '');
        } else if (isUndefined(arg)) {
          return 'undefined';
        } else if (!isString(arg)) {
          return toJson(arg);
        }
        return arg;
      }
      return match;
    });

    message = message + '\nhttp://errors.angularjs.org/' + version.full + '/' +
      (module ? module + '/' : '') + code;
    for (i = 2; i < arguments.length; i++) {
      message = message + (i == 2 ? '?' : '&') + 'p' + (i-2) + '=' +
        encodeURIComponent(stringify(arguments[i]));
    }

    return new Error(message);
  };
}

////////////////////////////////////

/**
 * hasOwnProperty may be overwritten by a property of the same name, or entirely
 * absent from an object that does not inherit Object.prototype; this copy is
 * used instead
 */
var hasOwnPropertyFn = Object.prototype.hasOwnProperty;
var hasOwnPropertyLocal = function(obj, key) {
  return hasOwnPropertyFn.call(obj, key);
};

/**
 * @ngdoc function
 * @name angular.lowercase
 * @function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};


/**
 * @ngdoc function
 * @name angular.uppercase
 * @function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var /** holds major version number for IE or NaN for real browsers */
    msie,
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),


    _angular          = window.angular,
    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    nodeName_,
    uid               = ['0', '0', '0'];

/**
 * IE 11 changed the format of the UserAgent string.
 * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
 */
msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
if (isNaN(msie)) {
  msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
}


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments, ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }
  
  var length = obj.length;

  if (obj.nodeType === 1 && length) {
    return true;
  }

  return isArray(obj) || !isFunction(obj) && (
    length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj
  );
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
 * is the value of an object property or an array element and `key` is the object property key or
 * array element index. Specifying a `context` for the function is optional.
 *
 * Note: this function was previously known as `angular.foreach`.
 *
   <pre>
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key){
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender:male']);
   </pre>
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
function forEach(obj, iterator, context) {
  var key;
  if (obj) {
    if (isFunction(obj)){
      for (key in obj) {
        if (key != 'prototype' && key != 'length' && key != 'name' && obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
      obj.forEach(iterator, context);
    } else if (isArrayLike(obj)) {
      for (key = 0; key < obj.length; key++)
        iterator.call(context, obj[key], key);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key);
        }
      }
    }
  }
  return obj;
}

function sortedKeys(obj) {
  var keys = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      keys.push(key);
    }
  }
  return keys.sort();
}

function forEachSorted(obj, iterator, context) {
  var keys = sortedKeys(obj);
  for ( var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value) };
}

/**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns an unique alpha-numeric string
 */
function nextUid() {
  var index = uid.length;
  var digit;

  while(index) {
    index--;
    digit = uid[index].charCodeAt(0);
    if (digit == 57 /*'9'*/) {
      uid[index] = 'A';
      return uid.join('');
    }
    if (digit == 90  /*'Z'*/) {
      uid[index] = '0';
    } else {
      uid[index] = String.fromCharCode(digit + 1);
      return uid.join('');
    }
  }
  uid.unshift('0');
  return uid.join('');
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  }
  else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @function
 *
 * @description
 * Extends the destination object `dst` by copying all of the properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;
  forEach(arguments, function(obj){
    if (obj !== dst) {
      forEach(obj, function(value, key){
        dst[key] = value;
      });
    }
  });

  setHashKey(dst,h);
  return dst;
}

function int(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(new (extend(function() {}, {prototype:parent}))(), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   <pre>
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   </pre>
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   <pre>
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   </pre>
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value){return typeof value == 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value){return typeof value != 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value){return value != null && typeof value == 'object';}


/**
 * @ngdoc function
 * @name angular.isString
 * @function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value){return typeof value == 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value){return typeof value == 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value){
  return toString.apply(value) == '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
function isArray(value) {
  return toString.apply(value) == '[object Array]';
}


/**
 * @ngdoc function
 * @name angular.isFunction
 * @function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value){return typeof value == 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.apply(value) == '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.document && obj.location && obj.alert && obj.setInterval;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.apply(obj) === '[object File]';
}


function isBoolean(value) {
  return typeof value == 'boolean';
}


var trim = (function() {
  // native trim is way faster: http://jsperf.com/angular-trim-test
  // but IE doesn't have it... :-(
  // TODO: we should move this into IE/ES5 polyfill
  if (!String.prototype.trim) {
    return function(value) {
      return isString(value) ? value.replace(/^\s*/, '').replace(/\s*$/, '') : value;
    };
  }
  return function(value) {
    return isString(value) ? value.trim() : value;
  };
})();


/**
 * @ngdoc function
 * @name angular.isElement
 * @function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return node &&
    (node.nodeName  // we are a direct element
    || (node.on && node.find));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str){
  var obj = {}, items = str.split(","), i;
  for ( i = 0; i < items.length; i++ )
    obj[ items[i] ] = true;
  return obj;
}


if (msie < 9) {
  nodeName_ = function(element) {
    element = element.nodeName ? element : element[0];
    return (element.scopeName && element.scopeName != 'HTML')
      ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
  };
} else {
  nodeName_ = function(element) {
    return element.nodeName ? element.nodeName : element[0].nodeName;
  };
}


function map(obj, iterator, context) {
  var results = [];
  forEach(obj, function(value, index, list) {
    results.push(iterator.call(context, value, index, list));
  });
  return results;
}


/**
 * @description
 * Determines the number of elements in an array, the number of properties an object has, or
 * the length of a string.
 *
 * Note: This function is used to augment the Object type in Angular expressions. See
 * {@link angular.Object} for more information about Angular arrays.
 *
 * @param {Object|Array|string} obj Object, array, or string to inspect.
 * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
 * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
 */
function size(obj, ownPropsOnly) {
  var size = 0, key;

  if (isArray(obj) || isString(obj)) {
    return obj.length;
  } else if (isObject(obj)){
    for (key in obj)
      if (!ownPropsOnly || obj.hasOwnProperty(key))
        size++;
  }

  return size;
}


function includes(array, obj) {
  return indexOf(array, obj) != -1;
}

function indexOf(array, obj) {
  if (array.indexOf) return array.indexOf(obj);

  for ( var i = 0; i < array.length; i++) {
    if (obj === array[i]) return i;
  }
  return -1;
}

function arrayRemove(array, value) {
  var index = indexOf(array, value);
  if (index >=0)
    array.splice(index, 1);
  return value;
}

function isLeafNode (node) {
  if (node) {
    switch (node.nodeName) {
    case "OPTION":
    case "PRE":
    case "TITLE":
      return true;
    }
  }
  return false;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for array) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If  `source` is not an object or array, `source` is returned.
 *
 * Note: this function is used to augment the Object type in Angular expressions. See
 * {@link ng.$filter} for more information about Angular arrays.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 */
function copy(source, destination){
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws', "Can't copy! Making copies of Window or Scope instances is not supported.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, []);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source);
      } else if (isObject(source)) {
        destination = copy(source, {});
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
    if (isArray(source)) {
      destination.length = 0;
      for ( var i = 0; i < source.length; i++) {
        destination.push(copy(source[i]));
      }
    } else {
      var h = destination.$$hashKey;
      forEach(destination, function(value, key){
        delete destination[key];
      });
      for ( var key in source) {
        destination[key] = copy(source[key]);
      }
      setHashKey(destination,h);
    }
  }
  return destination;
}

/**
 * Create a shallow copy of an object
 */
function shallowCopy(src, dst) {
  dst = dst || {};

  for(var key in src) {
    if (src.hasOwnProperty(key) && key.substr(0, 2) !== '$$') {
      dst[key] = src[key];
    }
  }

  return dst;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and
 * objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties pass `===` comparison.
 * * Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavasScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for(key=0; key<length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        return isDate(o2) && o1.getTime() == o2.getTime();
      } else if (isRegExp(o1) && isRegExp(o2)) {
        return o1.toString() == o2.toString();
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2)) return false;
        keySet = {};
        for(key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for(key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}


function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/**
 * @ngdoc function
 * @name angular.bind
 * @function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [function currying](http://en.wikipedia.org/wiki/Currying).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (/^\$+/.test(key)) {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|Date|string|number} Deserialized thingy.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


function toBoolean(value) {
  if (value && value.length !== 0) {
    var v = lowercase("" + value);
    value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
  } else {
    value = false;
  }
  return value;
}

/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.html('');
  } catch(e) {}
  // As Per DOM Standards
  var TEXT_NODE = 3;
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch(e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch(e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns Object.<(string|boolean)>
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue){
    if ( keyValue ) {
      key_value = keyValue.split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if ( isDefined(key) ) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!obj[key]) {
          obj[key] = val;
        } else if(isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}


/**
 * @ngdoc directive
 * @name ng.directive:ngApp
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 *
 * @description
 *
 * Use this directive to auto-bootstrap an application. Only
 * one ngApp directive can be used per HTML document. The directive
 * designates the root of the application and is typically placed
 * at the root of the page.
 *
 * The first ngApp found in the document will be auto-bootstrapped. To use multiple applications in an
 * HTML document you must manually bootstrap them using {@link angular.bootstrap}.
 * Applications cannot be nested.
 *
 * In the example below if the `ngApp` directive would not be placed
 * on the `html` element then the document would not be compiled
 * and the `{{ 1+2 }}` would not be resolved to `3`.
 *
 * `ngApp` is the easiest way to bootstrap an application.
 *
 <doc:example>
   <doc:source>
    I can add: 1 + 2 =  {{ 1+2 }}
   </doc:source>
 </doc:example>
 *
 */
function angularInit(element, bootstrap) {
  var elements = [element],
      appElement,
      module,
      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
      NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;

  function append(element) {
    element && elements.push(element);
  }

  forEach(names, function(name) {
    names[name] = true;
    append(document.getElementById(name));
    name = name.replace(':', '\\:');
    if (element.querySelectorAll) {
      forEach(element.querySelectorAll('.' + name), append);
      forEach(element.querySelectorAll('.' + name + '\\:'), append);
      forEach(element.querySelectorAll('[' + name + ']'), append);
    }
  });

  forEach(elements, function(element) {
    if (!appElement) {
      var className = ' ' + element.className + ' ';
      var match = NG_APP_CLASS_REGEXP.exec(className);
      if (match) {
        appElement = element;
        module = (match[2] || '').replace(/\s+/g, ',');
      } else {
        forEach(element.attributes, function(attr) {
          if (!appElement && names[attr.name]) {
            appElement = element;
            module = attr.value;
          }
        });
      }
    }
  });
  if (appElement) {
    bootstrap(appElement, module ? [module] : []);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link api/ng.directive:ngApp ngApp}.
 *
 * @param {Element} element DOM element which is the root of angular application.
 * @param {Array<String|Function>=} modules an array of module declarations. See: {@link angular.module modules}
 * @returns {AUTO.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules) {
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      throw ngMinErr('btstrpd', "App Already Bootstrapped with this Element '{0}'", tag);
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);
    modules.unshift('ng');
    var injector = createInjector(modules);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animate',
       function(scope, element, compile, injector, animate) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
        animate.enabled(true);
      }]
    );
    return injector;
  };

  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    doBootstrap();
  };
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator){
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

function bindJQuery() {
  // bind to jQuery if present;
  jQuery = window.jQuery;
  // reset to jQuery or default to us.
  if (jQuery) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });
    // Method signature: JQLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
    JQLitePatchJQueryRemove('remove', true, true, false);
    JQLitePatchJQueryRemove('empty', false, false, false);
    JQLitePatchJQueryRemove('html', false, false, true);
  } else {
    jqLite = JQLite;
  }
  angular.element = jqLite;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {string} path path to traverse
 * @param {boolean=true} bindFnToScope
 * @returns value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * @ngdoc interface
 * @name angular.Module
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  return ensure(ensure(window, 'angular', Object), 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, filters, and configuration information.
     * `angular.module` is used to configure the {@link AUTO.$injector $injector}.
     *
     * <pre>
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * });
     * </pre>
     *
     * Then you can create an injector and load your modules like this:
     *
     * <pre>
     * var injector = angular.injector(['ng', 'MyModule'])
     * </pre>
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the
     *        the module is being retrieved for further configuration.
     * @param {Function} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw minErr('$injector')('nomod', "Module '{0}' is not available! You either misspelled the module name " +
              "or forgot to load it. If registering a module ensure that you specify the dependencies as the second " +
              "argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke');

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @propertyOf angular.Module
           * @returns {Array.<string>} List of module names which must be loaded before this module.
           * @description
           * Holds the list of modules which the injector will load before the current module is loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @propertyOf angular.Module
           * @returns {string} Name of the module.
           * @description
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the service.
           * @description
           * See {@link AUTO.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link AUTO.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link AUTO.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @methodOf angular.Module
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link AUTO.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @methodOf angular.Module
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link AUTO.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @methodOf angular.Module
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an animation.
           * @description
           *
           * **NOTE**: animations are take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with {@link ngAnimate.$animate $animate} service and
           * directives that use this service.
           *
           * <pre>
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * </pre>
           *
           * See {@link ngAnimate.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @methodOf angular.Module
           * @param {string} name Filter name.
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @methodOf angular.Module
           * @param {string} name Controller name.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @methodOf angular.Module
           * @param {string} name directive name
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @methodOf angular.Module
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @methodOf angular.Module
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return  moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod) {
          return function() {
            invokeQueue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          }
        }
      });
    };
  });

}

/**
 * @ngdoc property
 * @name angular.version
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` â€“ `{string}` â€“ Full version string, such as "0.9.18".
 * - `major` â€“ `{number}` â€“ Major version number, such as "0".
 * - `minor` â€“ `{number}` â€“ Minor version number, such as "9".
 * - `dot` â€“ `{number}` â€“ Dot version number, such as "18".
 * - `codeName` â€“ `{string}` â€“ Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.2.0-rc.2',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 2,
  dot: 0,
  codeName: 'barehand-atomsplitting'
};


function publishExternalAPI(angular){
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop':noop,
    'bind':bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity':identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    '$$minErr': minErr,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0}
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCsp: ngCspDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            ngValue: ngValueDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$urlUtils: $$UrlUtilsProvider
      });
    }
  ]);
}

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 * `angular.element` can be either an alias for [jQuery](http://api.jquery.com/jQuery/) function, if
 * jQuery is available, or a function that wraps the element or string in Angular's jQuery lite
 * implementation (commonly referred to as jqLite).
 *
 * Real jQuery always takes precedence over jqLite, provided it was loaded before `DOMContentLoaded`
 * event fired.
 *
 * jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM. jqLite implements only the most commonly needed functionality
 * within a very small footprint, so only a subset of the jQuery API - methods, arguments and
 * invocation styles - are supported.
 *
 * Note: All element references in Angular are always wrapped with jQuery or jqLite; they are never
 * raw DOM references.
 *
 * ## Angular's jqLite
 * Angular's lite version of jQuery provides only the following jQuery methods:
 *
 * - [addClass()](http://api.jquery.com/addClass/)
 * - [after()](http://api.jquery.com/after/)
 * - [append()](http://api.jquery.com/append/)
 * - [attr()](http://api.jquery.com/attr/)
 * - [bind()](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [children()](http://api.jquery.com/children/) - Does not support selectors
 * - [clone()](http://api.jquery.com/clone/)
 * - [contents()](http://api.jquery.com/contents/)
 * - [css()](http://api.jquery.com/css/)
 * - [data()](http://api.jquery.com/data/)
 * - [eq()](http://api.jquery.com/eq/)
 * - [find()](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [hasClass()](http://api.jquery.com/hasClass/)
 * - [html()](http://api.jquery.com/html/)
 * - [next()](http://api.jquery.com/next/) - Does not support selectors
 * - [on()](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [off()](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [parent()](http://api.jquery.com/parent/) - Does not support selectors
 * - [prepend()](http://api.jquery.com/prepend/)
 * - [prop()](http://api.jquery.com/prop/)
 * - [ready()](http://api.jquery.com/ready/)
 * - [remove()](http://api.jquery.com/remove/)
 * - [removeAttr()](http://api.jquery.com/removeAttr/)
 * - [removeClass()](http://api.jquery.com/removeClass/)
 * - [removeData()](http://api.jquery.com/removeData/)
 * - [replaceWith()](http://api.jquery.com/replaceWith/)
 * - [text()](http://api.jquery.com/text/)
 * - [toggleClass()](http://api.jquery.com/toggleClass/)
 * - [triggerHandler()](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [unbind()](http://api.jquery.com/off/) - Does not support namespaces
 * - [val()](http://api.jquery.com/val/)
 * - [wrap()](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up and 3rd party bindings to the DOM
 *    element before it is removed.
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link api/ng.$rootScope.Scope scope} of the current
 *   element or its parent.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

var jqCache = JQLite.cache = {},
    jqName = JQLite.expando = 'ng-' + new Date().getTime(),
    jqId = 1,
    addEventListenerFn = (window.document.addEventListener
      ? function(element, type, fn) {element.addEventListener(type, fn, false);}
      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),
    removeEventListenerFn = (window.document.removeEventListener
      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }
      : function(element, type, fn) {element.detachEvent('on' + type, fn); });

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

/////////////////////////////////////////////
// jQuery mutation patch
//
// In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
// $destroy event on all DOM nodes being removed.
//
/////////////////////////////////////////////

function JQLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
  var originalJqFn = jQuery.fn[name];
  originalJqFn = originalJqFn.$original || originalJqFn;
  removePatch.$original = originalJqFn;
  jQuery.fn[name] = removePatch;

  function removePatch(param) {
    var list = filterElems && param ? [this.filter(param)] : [this],
        fireEvent = dispatchThis,
        set, setIndex, setLength,
        element, childIndex, childLength, children;

    if (!getterIfNoArguments || param != null) {
      while(list.length) {
        set = list.shift();
        for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
          element = jqLite(set[setIndex]);
          if (fireEvent) {
            element.triggerHandler('$destroy');
          } else {
            fireEvent = !fireEvent;
          }
          for(childIndex = 0, childLength = (children = element.children()).length;
              childIndex < childLength;
              childIndex++) {
            list.push(jQuery(children[childIndex]));
          }
        }
      }
    }
    return originalJqFn.apply(this, arguments);
  }
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }
  if (!(this instanceof JQLite)) {
    if (isString(element) && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (isString(element)) {
    var div = document.createElement('div');
    // Read about the NoScope elements here:
    // http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx
    div.innerHTML = '<div>&#160;</div>' + element; // IE insanity to make NoScope elements work!
    div.removeChild(div.firstChild); // remove the superfluous div
    JQLiteAddNodes(this, div.childNodes);
    var fragment = jqLite(document.createDocumentFragment());
    fragment.append(this); // detach the elements from the temporary DOM div.
  } else {
    JQLiteAddNodes(this, element);
  }
}

function JQLiteClone(element) {
  return element.cloneNode(true);
}

function JQLiteDealoc(element){
  JQLiteRemoveData(element);
  for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {
    JQLiteDealoc(children[i]);
  }
}

function JQLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var events = JQLiteExpandoStore(element, 'events'),
      handle = JQLiteExpandoStore(element, 'handle');

  if (!handle) return; //no listeners registered

  if (isUndefined(type)) {
    forEach(events, function(eventHandler, type) {
      removeEventListenerFn(element, type, eventHandler);
      delete events[type];
    });
  } else {
    forEach(type.split(' '), function(type) {
      if (isUndefined(fn)) {
        removeEventListenerFn(element, type, events[type]);
        delete events[type];
      } else {
        arrayRemove(events[type] || [], fn);
      }
    });
  }
}

function JQLiteRemoveData(element, name) {
  var expandoId = element[jqName],
      expandoStore = jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete jqCache[expandoId].data[name];
      return;
    }

    if (expandoStore.handle) {
      expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
      JQLiteOff(element);
    }
    delete jqCache[expandoId];
    element[jqName] = undefined; // ie does not allow deletion of attributes on elements.
  }
}

function JQLiteExpandoStore(element, key, value) {
  var expandoId = element[jqName],
      expandoStore = jqCache[expandoId || -1];

  if (isDefined(value)) {
    if (!expandoStore) {
      element[jqName] = expandoId = jqNextId();
      expandoStore = jqCache[expandoId] = {};
    }
    expandoStore[key] = value;
  } else {
    return expandoStore && expandoStore[key];
  }
}

function JQLiteData(element, key, value) {
  var data = JQLiteExpandoStore(element, 'data'),
      isSetter = isDefined(value),
      keyDefined = !isSetter && isDefined(key),
      isSimpleGetter = keyDefined && !isObject(key);

  if (!data && !isSimpleGetter) {
    JQLiteExpandoStore(element, 'data', data = {});
  }

  if (isSetter) {
    data[key] = value;
  } else {
    if (keyDefined) {
      if (isSimpleGetter) {
        // don't create data in this case.
        return data && data[key];
      } else {
        extend(data, key);
      }
    } else {
      return data;
    }
  }
}

function JQLiteHasClass(element, selector) {
  return ((" " + element.className + " ").replace(/[\n\t]/g, " ").
      indexOf( " " + selector + " " ) > -1);
}

function JQLiteRemoveClass(element, cssClasses) {
  if (cssClasses) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.className = trim(
          (" " + element.className + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " ")
      );
    });
  }
}

function JQLiteAddClass(element, cssClasses) {
  if (cssClasses) {
    forEach(cssClasses.split(' '), function(cssClass) {
      if (!JQLiteHasClass(element, cssClass)) {
        element.className = trim(element.className + ' ' + trim(cssClass));
      }
    });
  }
}

function JQLiteAddNodes(root, elements) {
  if (elements) {
    elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))
      ? elements
      : [ elements ];
    for(var i=0; i < elements.length; i++) {
      root.push(elements[i]);
    }
  }
}

function JQLiteController(element, name) {
  return JQLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');
}

function JQLiteInheritedData(element, name, value) {
  element = jqLite(element);

  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if(element[0].nodeType == 9) {
    element = element.find('html');
  }

  while (element.length) {
    if ((value = element.data(name)) !== undefined) return value;
    element = element.parent();
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document already is loaded
    if (document.readyState === 'complete'){
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      JQLite(window).on('load', trigger); // fallback to window.onload for others
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e){ value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[uppercase(value)] = true;
});

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
}

forEach({
  data: JQLiteData,
  inheritedData: JQLiteInheritedData,

  scope: function(element) {
    return JQLiteInheritedData(element, '$scope');
  },

  controller: JQLiteController ,

  injector: function(element) {
    return JQLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element,name) {
    element.removeAttribute(name);
  },

  hasClass: JQLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      var val;

      if (msie <= 8) {
        // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
        val = element.currentStyle && element.currentStyle[name];
        if (val === '') val = 'auto';
      }

      val = val || element.style[name];

      if (msie <= 8) {
        // jquery weirdness :-/
        val = (val === '') ? undefined : val;
      }

      return  val;
    }
  },

  attr: function(element, name, value){
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name)|| noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    var NODE_TYPE_TEXT_PROPERTY = [];
    if (msie < 9) {
      NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';    /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';    /** Text **/
    } else {
      NODE_TYPE_TEXT_PROPERTY[1] =                 /** Element **/
      NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
    }
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType]
      if (isUndefined(value)) {
        return textProp ? element[textProp] : '';
      }
      element[textProp] = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (nodeName_(element) === 'SELECT' && element.multiple) {
        var result = [];
        forEach(element.options, function (option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      JQLiteDealoc(childNodes[i]);
    }
    element.innerHTML = value;
  }
}, function(fn, name){
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;

    // JQLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    if (((fn.length == 2 && (fn !== JQLiteHasClass && fn !== JQLiteController)) ? arg1 : arg2) === undefined) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for(i=0; i < this.length; i++) {
          if (fn === JQLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = value == undefined ? Math.min(this.length, 1) : this.length;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for(i=0; i < this.length; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function (event, type) {
    if (!event.preventDefault) {
      event.preventDefault = function() {
        event.returnValue = false; //ie
      };
    }

    if (!event.stopPropagation) {
      event.stopPropagation = function() {
        event.cancelBubble = true; //ie
      };
    }

    if (!event.target) {
      event.target = event.srcElement || document;
    }

    if (isUndefined(event.defaultPrevented)) {
      var prevent = event.preventDefault;
      event.preventDefault = function() {
        event.defaultPrevented = true;
        prevent.call(event);
      };
      event.defaultPrevented = false;
    }

    event.isDefaultPrevented = function() {
      return event.defaultPrevented || event.returnValue == false;
    };

    forEach(events[type || event.type], function(fn) {
      fn.call(element, event);
    });

    // Remove monkey-patched methods (IE),
    // as they would cause memory leaks in IE8.
    if (msie <= 8) {
      // IE7/8 does not allow to delete property on native object
      event.preventDefault = null;
      event.stopPropagation = null;
      event.isDefaultPrevented = null;
    } else {
      // It shouldn't affect normal browsers (native methods are defined on prototype).
      delete event.preventDefault;
      delete event.stopPropagation;
      delete event.isDefaultPrevented;
    }
  };
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: JQLiteRemoveData,

  dealoc: JQLiteDealoc,

  on: function onFn(element, type, fn, unsupported){
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    var events = JQLiteExpandoStore(element, 'events'),
        handle = JQLiteExpandoStore(element, 'handle');

    if (!events) JQLiteExpandoStore(element, 'events', events = {});
    if (!handle) JQLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));

    forEach(type.split(' '), function(type){
      var eventFns = events[type];

      if (!eventFns) {
        if (type == 'mouseenter' || type == 'mouseleave') {
          var contains = document.body.contains || document.body.compareDocumentPosition ?
          function( a, b ) {
            var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
            return a === bup || !!( bup && bup.nodeType === 1 && (
              adown.contains ?
              adown.contains( bup ) :
              a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
              ));
            } :
            function( a, b ) {
              if ( b ) {
                while ( (b = b.parentNode) ) {
                  if ( b === a ) {
                    return true;
                  }
                }
              }
              return false;
            };

          events[type] = [];

          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8
          var eventmap = { mouseleave : "mouseout", mouseenter : "mouseover"};

          onFn(element, eventmap[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if ( !related || (related !== target && !contains(target, related)) ){
              handle(event, type);
            }
          });

        } else {
          addEventListenerFn(element, type, handle);
          events[type] = [];
        }
        eventFns = events[type]
      }
      eventFns.push(fn);
    });
  },

  off: JQLiteOff,

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    JQLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node){
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element){
      if (element.nodeType === 1)
        children.push(element);
    });
    return children;
  },

  contents: function(element) {
    return element.childNodes || [];
  },

  append: function(element, node) {
    forEach(new JQLite(node), function(child){
      if (element.nodeType === 1 || element.nodeType === 11) {
        element.appendChild(child);
      }
    });
  },

  prepend: function(element, node) {
    if (element.nodeType === 1) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child){
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode)[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: function(element) {
    JQLiteDealoc(element);
    var parent = element.parentNode;
    if (parent) parent.removeChild(element);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    forEach(new JQLite(newElement), function(node){
      parent.insertBefore(node, index.nextSibling);
      index = node;
    });
  },

  addClass: JQLiteAddClass,
  removeClass: JQLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (isUndefined(condition)) {
      condition = !JQLiteHasClass(element, selector);
    }
    (condition ? JQLiteAddClass : JQLiteRemoveClass)(element, selector);
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== 11 ? parent : null;
  },

  next: function(element) {
    if (element.nextElementSibling) {
      return element.nextElementSibling;
    }

    // IE8 doesn't have nextElementSibling
    var elm = element.nextSibling;
    while (elm != null && elm.nodeType !== 1) {
      elm = elm.nextSibling;
    }
    return elm;
  },

  find: function(element, selector) {
    return element.getElementsByTagName(selector);
  },

  clone: JQLiteClone,

  triggerHandler: function(element, eventName, eventData) {
    var eventFns = (JQLiteExpandoStore(element, 'events') || {})[eventName];
    eventData = eventData || {
      preventDefault: noop,
      stopPropagation: noop
    };

    forEach(eventFns, function(fn) {
      fn.call(element, eventData);
    });
  }
}, function(fn, name){
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;
    for(var i=0; i < this.length; i++) {
      if (value == undefined) {
        value = fn(this[i], arg1, arg2, arg3);
        if (value !== undefined) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        JQLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return value == undefined ? this : value;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj) {
  var objType = typeof obj,
      key;

  if (objType == 'object' && obj !== null) {
    if (typeof (key = obj.$$hashKey) == 'function') {
      // must invoke on object to keep the right this
      key = obj.$$hashKey();
    } else if (key === undefined) {
      key = obj.$$hashKey = nextUid();
    }
  } else {
    key = obj;
  }

  return objType + ':' + key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array){
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key)] = value;
  },

  /**
   * @param key
   * @returns the value for the key
   */
  get: function(key) {
    return this[hashKey(key)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @name angular.injector
 * @function
 *
 * @description
 * Creates an injector function that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *

 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *        {@link angular.module}. The `ng` module must be explicitly added.
 * @returns {function()} Injector function. See {@link AUTO.$injector $injector}.
 *
 * @example
 * Typical usage
 * <pre>
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * </pre>
 */


/**
 * @ngdoc overview
 * @name AUTO
 * @description
 *
 * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');
function annotate(fn) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn == 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){
          arg.replace(FN_ARG, function(all, underscore, name){
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc object
 * @name AUTO.$injector
 * @function
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link AUTO.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * <pre>
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
 * </pre>
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * <pre>
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * </pre>
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition can then be
 * parsed and the function arguments can be extracted. *NOTE:* This does not work with minification, and obfuscation
 * tools since these tools change the argument names.
 *
 * ## `$inject` Annotation
 * By adding a `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#get
 * @methodOf AUTO.$injector
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#invoke
 * @methodOf AUTO.$injector
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!function} fn The function to invoke. The function arguments come form the function annotation.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before
 *   the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#has
 * @methodOf AUTO.$injector
 *
 * @description
 * Allows the user to query if the particular service exist.
 *
 * @param {string} Name of the service to query.
 * @returns {boolean} returns true if injector has given service.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#instantiate
 * @methodOf AUTO.$injector
 * @description
 * Create a new instance of JS type. The method takes a constructor function invokes the new operator and supplies
 * all of the arguments to the constructor function as specified by the constructor annotation.
 *
 * @param {function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before
 *   the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name AUTO.$injector#annotate
 * @methodOf AUTO.$injector
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is used by the injector
 * to determine which services need to be injected into the function when the function is invoked. There are three
 * ways in which the function can be annotated with the needed dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done by converting
 * the function into a string using `toString()` method and extracting the argument names.
 * <pre>
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * </pre>
 *
 * This method does not work with code minification / obfuscation. For this reason the following annotation strategies
 * are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings represent names of
 * services to be injected into the function.
 * <pre>
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController.$inject = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * </pre>
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property is very
 * inconvenient. In these situations using the array notation to specify the dependencies in a way that survives
 * minification is a better choice:
 *
 * <pre>
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * </pre>
 *
 * @param {function|Array.<string|Function>} fn Function for which dependent service names need to be retrieved as described
 *   above.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc object
 * @name AUTO.$provide
 *
 * @description
 *
 * Use `$provide` to register new providers with the `$injector`. The providers are the factories for the instance.
 * The providers share the same name as the instance they create with `Provider` suffixed to them.
 *
 * A provider is an object with a `$get()` method. The injector calls the `$get` method to create a new instance of
 * a service. The Provider can have additional methods which would allow for configuration of the provider.
 *
 * <pre>
 *   function GreetProvider() {
 *     var salutation = 'Hello';
 *
 *     this.salutation = function(text) {
 *       salutation = text;
 *     };
 *
 *     this.$get = function() {
 *       return function (name) {
 *         return salutation + ' ' + name + '!';
 *       };
 *     };
 *   }
 *
 *   describe('Greeter', function(){
 *
 *     beforeEach(module(function($provide) {
 *       $provide.provider('greet', GreetProvider);
 *     }));
 *
 *     it('should greet', inject(function(greet) {
 *       expect(greet('angular')).toEqual('Hello angular!');
 *     }));
 *
 *     it('should allow configuration of salutation', function() {
 *       module(function(greetProvider) {
 *         greetProvider.salutation('Ahoj');
 *       });
 *       inject(function(greet) {
 *         expect(greet('angular')).toEqual('Ahoj angular!');
 *       });
 *     });
 * </pre>
 */

/**
 * @ngdoc method
 * @name AUTO.$provide#provider
 * @methodOf AUTO.$provide
 * @description
 *
 * Register a provider for a service. The providers can be retrieved and can have additional configuration methods.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name + 'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *               {@link AUTO.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *               {@link AUTO.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance
 */

/**
 * @ngdoc method
 * @name AUTO.$provide#factory
 * @methodOf AUTO.$provide
 * @description
 *
 * A short hand for configuring services if only `$get` method is required.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand for
 * `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#service
 * @methodOf AUTO.$provide
 * @description
 *
 * A short hand for registering service of given class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#value
 * @methodOf AUTO.$provide
 * @description
 *
 * A short hand for configuring services if the `$get` method is a constant.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#constant
 * @methodOf AUTO.$provide
 * @description
 *
 * A constant value, but unlike {@link AUTO.$provide#value value} it can be injected
 * into configuration function (other modules) and it is not interceptable by
 * {@link AUTO.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 */


/**
 * @ngdoc method
 * @name AUTO.$provide#decorator
 * @methodOf AUTO.$provide
 * @description
 *
 * Decoration of service, allows the decorator to intercept the service instance creation. The
 * returned instance may be the original instance, or a new instance which delegates to the
 * original instance.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated. The function is called using the {@link AUTO.$injector#invoke
 *    injector.invoke} method and is therefore fully injectable. Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 */


function createInjector(modulesToLoad) {
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap(),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function() {
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(servicename) {
            var provider = providerInjector.get(servicename + providerSuffix);
            return instanceInjector.invoke(provider.$get, provider);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    }
  }

  function provider(name, provider_) {
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, value) { return factory(name, valueFn(value)); }

  function constant(name, value) {
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad){
    var runBlocks = [];
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      try {
        if (isString(module)) {
          var moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);

          for(var invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
            var invokeArgs = invokeQueue[i],
                provider = providerInjector.get(invokeArgs[0]);

            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
          }
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}', path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName);
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals){
      var args = [],
          $inject = annotate(fn),
          length, i,
          key;

      for(i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key)
        );
      }
      if (!fn.$inject) {
        // this means that we must be an array.
        fn = fn[length];
      }


      // Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke
      switch (self ? -1 : args.length) {
        case  0: return fn();
        case  1: return fn(args[0]);
        case  2: return fn(args[0], args[1]);
        case  3: return fn(args[0], args[1], args[2]);
        case  4: return fn(args[0], args[1], args[2], args[3]);
        case  5: return fn(args[0], args[1], args[2], args[3], args[4]);
        case  6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]);
        case  7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        case  8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        case  9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
        case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
        default: return fn.apply(self, args);
      }
    }

    function instantiate(Type, locals) {
      var Constructor = function() {},
          instance, returnedValue;

      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
      instance = new Constructor();
      returnedValue = invoke(Type, instance, locals);

      return isObject(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

/**
 * @ngdoc function
 * @name ng.$anchorScroll
 * @requires $window
 * @requires $location
 * @requires $rootScope
 *
 * @description
 * When called, it checks current value of `$location.hash()` and scroll to related element,
 * according to rules specified in
 * {@link http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document Html5 spec}.
 *
 * It also watches the `$location.hash()` and scroll whenever it changes to match any anchor.
 * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // helper function to get first anchor from a NodeList
    // can't use filter.filter, as it accepts only instances of Array
    // and IE can't convert NodeList to an array using [].slice
    // TODO(vojta): use filter if we change it to accept lists as well
    function getFirstAnchor(list) {
      var result = null;
      forEach(list, function(element) {
        if (!result && lowercase(element.nodeName) === 'a') result = element;
      });
      return result;
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) $window.scrollTo(0, 0);

      // element with given id
      else if ((elm = document.getElementById(hash))) elm.scrollIntoView();

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') $window.scrollTo(0, 0);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction() {
          $rootScope.$evalAsync(scroll);
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc object
 * @name ng.$animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {

  this.$$selectors = {};


  /**
   * @ngdoc function
   * @name ng.$animateProvider#register
   * @methodOf ng.$animateProvider
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the animation object which
   * contains callback functions for each event that is expected to be animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction` must be called once the
   *   element animation is complete. If a function is returned then the animation service will use this function to
   *   cancel the animation whenever a cancel event is triggered.
   *
   *
   *<pre>
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   *</pre>
   *
   * @param {string} name The name of the animation.
   * @param {function} factory The factory function that will be executed to return the animation object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  this.$get = ['$timeout', function($timeout) {

    /**
     * @ngdoc object
     * @name ng.$animate
     *
     * @description
     * The $animate service provides rudimentary DOM manipulation functions to insert, remove, move elements within
     * the DOM as well as adding and removing classes. This service is the core service used by the ngAnimate $animator
     * service which provides high-level animation hooks for CSS and JavaScript. 
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included to enable full out
     * animation support. Otherwise, $animate will only perform simple DOM manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate ngAnimate module page}
     * as well as the {@link ngAnimate.$animate ngAnimate $animate service page}.
     */
    return {

      /**
       * @ngdoc function
       * @name ng.$animate#enter
       * @methodOf ng.$animate
       * @function
       *
       * @description
       * Inserts the element into the DOM either after the `after` element or within the `parent` element. Once complete,
       * the done() callback will be fired (if provided).
       *
       * @param {jQuery/jqLite element} element the element which will be inserted into the DOM
       * @param {jQuery/jqLite element} parent the parent element which will append the element as a child (if the after element is not present)
       * @param {jQuery/jqLite element} after the sibling element which will append the element after itself
       * @param {function=} done callback function that will be called after the element has been inserted into the DOM
       */
      enter : function(element, parent, after, done) {
        var afterNode = after && after[after.length - 1];
        var parentNode = parent && parent[0] || afterNode && afterNode.parentNode;
        // IE does not like undefined so we have to pass null.
        var afterNextSibling = (afterNode && afterNode.nextSibling) || null;
        forEach(element, function(node) {
          parentNode.insertBefore(node, afterNextSibling);
        });
        done && $timeout(done, 0, false);
      },

      /**
       * @ngdoc function
       * @name ng.$animate#leave
       * @methodOf ng.$animate
       * @function
       *
       * @description
       * Removes the element from the DOM. Once complete, the done() callback will be fired (if provided).
       *
       * @param {jQuery/jqLite element} element the element which will be removed from the DOM
       * @param {function=} done callback function that will be called after the element has been removed from the DOM
       */
      leave : function(element, done) {
        element.remove();
        done && $timeout(done, 0, false);
      },

      /**
       * @ngdoc function
       * @name ng.$animate#move
       * @methodOf ng.$animate
       * @function
       *
       * @description
       * Moves the position of the provided element within the DOM to be placed either after the `after` element or inside of the `parent` element.
       * Once complete, the done() callback will be fired (if provided).
       *
       * @param {jQuery/jqLite element} element the element which will be moved around within the DOM
       * @param {jQuery/jqLite element} parent the parent element where the element will be inserted into (if the after element is not present)
       * @param {jQuery/jqLite element} after the sibling element where the element will be positioned next to
       * @param {function=} done the callback function (if provided) that will be fired after the element has been moved to it's new position
       */
      move : function(element, parent, after, done) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        this.enter(element, parent, after, done);
      },

      /**
       * @ngdoc function
       * @name ng.$animate#addClass
       * @methodOf ng.$animate
       * @function
       *
       * @description
       * Adds the provided className CSS class value to the provided element. Once complete, the done() callback will be fired (if provided).
       *
       * @param {jQuery/jqLite element} element the element which will have the className value added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {function=} done the callback function (if provided) that will be fired after the className value has been added to the element
       */
      addClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        element.addClass(className);
        done && $timeout(done, 0, false);
      },

      /**
       * @ngdoc function
       * @name ng.$animate#removeClass
       * @methodOf ng.$animate
       * @function
       *
       * @description
       * Removes the provided className CSS class value from the provided element. Once complete, the done() callback will be fired (if provided).
       *
       * @param {jQuery/jqLite element} element the element which will have the className value removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {function=} done the callback function (if provided) that will be fired after the className value has been removed from the element
       */
      removeClass : function(element, className, done) {
        className = isString(className) ?
                      className :
                      isArray(className) ? className.join(' ') : '';
        element.removeClass(className);
        done && $timeout(done, 0, false);
      },

      enabled : noop
    };
  }];
}];

/**
 * ! This is a private undocumented service !
 *
 * @name ng.$browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {function()} XHR XMLHttpRequest constructor.
 * @param {object} $log console.log or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while(outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn){ pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name ng.$browser#addPollFn
   * @methodOf ng.$browser
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn){ pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      replacedUrl = null;

  /**
   * @name ng.$browser#url
   * @methodOf ng.$browser
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record ?
   */
  self.url = function(url, replace) {
    // setter
    if (url) {
      if (lastBrowserUrl == url) return;
      lastBrowserUrl = url;
      if ($sniffer.history) {
        if (replace) history.replaceState(null, '', url);
        else {
          history.pushState(null, '', url);
          // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
          baseElement.attr('href', baseElement.attr('href'));
        }
      } else {
        if (replace) {
          location.replace(url);
          replacedUrl = url;
        } else {
          location.href = url;
          replacedUrl = null;
        }
      }
      return self;
    // getter
    } else {
      // - the replacedUrl is a workaround for an IE8-9 issue with location.replace method that doesn't update
      //   location.href synchronously
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return replacedUrl || location.href.replace(/%27/g,"'");
    }
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function fireUrlChange() {
    if (lastBrowserUrl == self.url()) return;

    lastBrowserUrl = self.url();
    forEach(urlChangeListeners, function(listener) {
      listener(self.url());
    });
  }

  /**
   * @name ng.$browser#onUrlChange
   * @methodOf ng.$browser
   * @TODO(vojta): refactor to use node's syntax for events
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed by outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', fireUrlChange);
      // hashchange event
      if ($sniffer.hashchange) jqLite(window).on('hashchange', fireUrlChange);
      // polling
      else self.addPollFn(fireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string=}
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^https?\:\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  /**
   * @name ng.$browser#cookies
   * @methodOf ng.$browser
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   * <ul>
   *   <li>cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify it</li>
   *   <li>cookies(name, value) -> set name to value, if value is undefined delete the cookie</li>
   *   <li>cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that way)</li>
   * </ul>
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = escape(name) + "=;path=" + cookiePath + ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '"+ name +"' possibly not set or overflowed because it was too large ("+
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            var name = unescape(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = unescape(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name ng.$browser#defer
   * @methodOf ng.$browser
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name ng.$browser#defer.cancel
   * @methodOf ng.$browser.defer
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider(){
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function( $window,   $log,   $sniffer,   $document){
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc object
 * @name ng.$cacheFactory
 *
 * @description
 * Factory that constructs cache objects and gives access to them.
 * 
 * <pre>
 * 
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 * 
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2}); // Since we've specified no options on creation
 * 
 * </pre>
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` â€” turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` â€” Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` â€” Puts a new key-value pair into the cache and returns it.
 * - `{{*}}` `get({string} key)` â€” Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` â€” Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` â€” Removes all cached values.
 * - `{void}` `destroy()` â€” Removes references to this cache from $cacheFactory.
 *
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      return caches[cacheId] = {

        put: function(key, value) {
          var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

          refresh(lruEntry);

          if (isUndefined(value)) return;
          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },


        get: function(key) {
          var lruEntry = lruHash[key];

          if (!lruEntry) return;

          refresh(lruEntry);

          return data[key];
        },


        remove: function(key) {
          var lruEntry = lruHash[key];

          if (!lruEntry) return;

          if (lruEntry == freshEnd) freshEnd = lruEntry.p;
          if (lruEntry == staleEnd) staleEnd = lruEntry.n;
          link(lruEntry.n,lruEntry.p);

          delete lruHash[key];
          delete data[key];
          size--;
        },


        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name ng.$cacheFactory#info
   * @methodOf ng.$cacheFactory
   *
   * @description
   * Get information about all the of the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name ng.$cacheFactory#get
   * @methodOf ng.$cacheFactory
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc object
 * @name ng.$templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You can
 * load templates directly into the cache in a `script` tag, or by consuming the `$templateCache`
 * service directly.
 * 
 * Adding via the `script` tag:
 * <pre>
 * <html ng-app>
 * <head>
 * <script type="text/ng-template" id="templateId.html">
 *   This is the content of the template
 * </script>
 * </head>
 *   ...
 * </html>
 * </pre>
 * 
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of the document, but 
 * it must be below the `ng-app` definition.
 * 
 * Adding via the $templateCache service:
 * 
 * <pre>
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * </pre>
 * 
 * To retrieve the template later, simply use it in your HTML:
 * <pre>
 * <div ng-include=" 'templateId.html' "></div>
 * </pre>
 * 
 * or get it via Javascript:
 * <pre>
 * $templateCache.get('templateId.html')
 * </pre>
 * 
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc function
 * @name ng.$compile
 * @function
 *
 * @description
 * Compiles a piece of HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope scope} and the template together.
 *
 * The compilation is a process of walking the DOM tree and trying to match DOM elements to
 * {@link ng.$compileProvider#directive directives}. For each match it
 * executes corresponding template function and collects the
 * instance functions into a single template function which is then returned.
 *
 * The template function can then be used once to produce the view or as it is the case with
 * {@link ng.directive:ngRepeat repeater} many-times, in which
 * case each call results in a view that is a DOM clone of the original template.
 *
 <doc:example module="compile">
   <doc:source>
    <script>
      // declare a new module, and inject the $compileProvider
      angular.module('compile', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        })
      });

      function Ctrl($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }
    </script>
    <div ng-controller="Ctrl">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </doc:source>
   <doc:scenario>
     it('should auto compile', function() {
       expect(element('div[compile]').text()).toBe('Hello Angular');
       input('html').enter('{{name}}!');
       expect(element('div[compile]').text()).toBe('Angular!');
     });
   </doc:scenario>
 </doc:example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope[, cloneAttachFn]} transclude function available to directives.
 * @param {number} maxPriority only apply directives lower then given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope[, cloneAttachFn])} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *               `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *               cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *               called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 * Calling the linking function returns the element of the template. It is either the original element
 * passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   <pre>
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   </pre>
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   <pre>
 *     var templateHTML = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateHTML)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clone`
 *   </pre>
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name ng.$compileProvider
 * @function
 *
 * @description
 */
$CompileProvider.$inject = ['$provide'];
function $CompileProvider($provide) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\d\w\-_]+)(?:\:([^;]+))?;?)/,
      aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|file):/,
      imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file):|data:image\//;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]*|formaction)$/;

  /**
   * @ngdoc function
   * @name ng.$compileProvider#directive
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string} name Name of the directive in camel-case. (ie <code>ngBind</code> which will match as
   *                <code>ng-bind</code>).
   * @param {function|Array} directiveFactory An injectable directive factory function. See {@link guide/directive} for more
   *                info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    if (isString(name)) {
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'A';
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc function
   * @name ng.$compileProvider#aHrefSanitizationWhitelist
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @ngdoc function
   * @name ng.$compileProvider#imgSrcSanitizationWhitelist
   * @methodOf ng.$compileProvider
   * @function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into an
   * absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist` regular
   * expression. If a match is found, the original url is written into the dom. Otherwise, the
   * absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };


  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$$urlUtils', '$animate',
    function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $$urlUtils, $animate) {

    var Attributes = function(element, attr) {
      this.$$element = element;
      this.$attr = attr || {};
    };

    Attributes.prototype = {
      $normalize: directiveNormalize,


      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$addClass
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc function
       * @name ng.$compile.directive.Attributes#$removeClass
       * @methodOf ng.$compile.directive.Attributes
       * @function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If animations
       * are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass : function(classVal) {
        if(classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        //special case for class attribute addition + removal
        //so that class changes can tap into the animation
        //hooks provided by the $animate service
        if(key == 'class') {
          value = value || '';
          var current = this.$$element.attr('class') || '';
          this.$removeClass(tokenDifference(current, value).join(' '));
          this.$addClass(tokenDifference(value, current).join(' '));
        } else {
          var booleanKey = getBooleanAttrName(this.$$element[0], key),
              normalizedVal,
              nodeName;

          if (booleanKey) {
            this.$$element.prop(key, value);
            attrName = booleanKey;
          }

          this[key] = value;

          // translate normalized key to actual key
          if (attrName) {
            this.$attr[key] = attrName;
          } else {
            attrName = this.$attr[key];
            if (!attrName) {
              this.$attr[key] = attrName = snake_case(key, '-');
            }
          }

          nodeName = nodeName_(this.$$element);

          // sanitize a[href] and img[src] values
          if ((nodeName === 'A' && key === 'href') ||
              (nodeName === 'IMG' && key === 'src')) {
            // NOTE: $$urlUtils.resolve() doesn't support IE < 8 so we don't sanitize for that case.
            if (!msie || msie >= 8 ) {
              normalizedVal = $$urlUtils.resolve(value);
              if (normalizedVal !== '') {
                if ((key === 'href' && !normalizedVal.match(aHrefSanitizationWhitelist)) ||
                    (key === 'src' && !normalizedVal.match(imgSrcSanitizationWhitelist))) {
                  this[key] = value = 'unsafe:' + normalizedVal;
                }
              }
            }
          }

          if (writeAttr !== false) {
            if (value === null || value === undefined) {
              this.$$element.removeAttr(attrName);
            } else {
              this.$$element.attr(attrName, value);
            }
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[key], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });

        function tokenDifference(str1, str2) {
          var values = [],
              tokens1 = str1.split(/\s+/),
              tokens2 = str2.split(/\s+/);

          outer:
          for(var i=0;i<tokens1.length;i++) {
            var token = tokens1[i];
            for(var j=0;j<tokens2.length;j++) {
              if(token == tokens2[j]) continue outer;
            }
            values.push(token);
          }
          return values;
        };
      },


      /**
       * Observe an interpolated attribute.
       * The observer will never be called, if given attribute is not interpolated.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(*)} fn Function that will be called whenever the attribute value changes.
       * @returns {function(*)} the `fn` Function passed in.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = {})),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });
        return fn;
      }
    };

    var urlSanitizationNode = $document[0].createElement('a'),
        startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;


    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index){
        if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective);
      return function publicLinkFn(scope, cloneConnectFn){
        assertArg(scope, 'scope');
        // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
        // and sometimes changes the structure of the DOM.
        var $linkNode = cloneConnectFn
          ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!
          : $compileNodes;

        // Attach scope only to non-text nodes.
        for(var i = 0, ii = $linkNode.length; i<ii; i++) {
          var node = $linkNode[i];
          if (node.nodeType == 1 /* element */ || node.nodeType == 9 /* document */) {
            $linkNode.eq(i).data('$scope', scope);
          }
        }
        safeAddClass($linkNode, 'ng-scope');
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);
        return $linkNode;
      };
    }

    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch(e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then the
     *        rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} max directive priority
     * @returns {?function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective) {
      var linkFns = [],
          nodeLinkFn, childLinkFn, directives, attrs, linkFnFound;

      for(var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i == 0 ? maxPriority : undefined, ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement)
            : null;

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal || !nodeList[i].childNodes || !nodeList[i].childNodes.length)
            ? null
            : compileNodes(nodeList[i].childNodes,
                 nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);

        linkFns.push(nodeLinkFn);
        linkFns.push(childLinkFn);
        linkFnFound = (linkFnFound || nodeLinkFn || childLinkFn);
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, childTranscludeFn, i, ii, n;

        // copy nodeList so that linking doesn't break due to live list updates.
        var stableNodeList = [];
        for (i = 0, ii = nodeList.length; i < ii; i++) {
          stableNodeList.push(nodeList[i]);
        }

        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
          node = stableNodeList[n];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new(isObject(nodeLinkFn.scope));
              jqLite(node).data('$scope', childScope);
            } else {
              childScope = scope;
            }
            childTranscludeFn = nodeLinkFn.transclude;
            if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {
              nodeLinkFn(childLinkFn, childScope, node, $rootElement,
                  (function(transcludeFn) {
                    return function(cloneFn) {
                      var transcludeScope = scope.$new();
                      transcludeScope.$$transcluded = true;

                      return transcludeFn(transcludeScope, cloneFn).
                          on('$destroy', bind(transcludeScope, transcludeScope.$destroy));
                    };
                  })(childTranscludeFn || transcludeFn)
              );
            } else {
              nodeLinkFn(childLinkFn, childScope, node, undefined, boundTranscludeFn);
            }
          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
          }
        }
      }
    }


    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch(nodeType) {
        case 1: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName;
            var attrEndName;
            var index;

            attr = nAttrs[j];
            if (!msie || msie >= 8 || attr.specified) {
              name = attr.name;
              // support ngAttr attribute binding
              ngAttrName = directiveNormalize(name);
              if (NG_ATTR_BINDING.test(ngAttrName)) {
                name = ngAttrName.substr(6).toLowerCase();
              }
              if ((index = ngAttrName.lastIndexOf('Start')) != -1 && index == ngAttrName.length - 5) {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }
              nName = directiveNormalize(name.toLowerCase());
              attrsMap[nName] = name;
              attrs[nName] = value = trim((msie && name == 'href')
                ? decodeURIComponent(node.getAttribute(name, 2))
                : attr.value);
              if (getBooleanAttrName(node, nName)) {
                attrs[nName] = true; // presence means true
              }
              addAttrInterpolateDirective(node, directives, value, nName);
              addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
            }
          }

          // use class as directive
          className = node.className;
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case 3: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case 8: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it find directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        var startNode = node;
        do {
          if (!node) {
            throw $compileMinErr('uterdir', "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
          }
          if (node.nodeType == 1 /** Element **/) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }
      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers);
      }
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *        argument has the root jqLite array so that we can replace nodes on it.
     * @returns linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective) {
      var terminalPriority = -Number.MAX_VALUE,
          preLinkFns = [],
          postLinkFns = [],
          newScopeDirective = null,
          newIsolateScopeDirective = null,
          templateDirective = null,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          transcludeDirective,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          controllerDirectives,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for(var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd)
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {
          assertNoDuplicate('isolated scope', newIsolateScopeDirective, directive, $compileNode);
          if (isObject(directiveValue)) {
            safeAddClass($compileNode, 'ng-isolate-scope');
            newIsolateScopeDirective = directive;
          }
          safeAddClass($compileNode, 'ng-scope');
          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        if (directiveValue = directive.controller) {
          controllerDirectives = controllerDirectives || {};
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          assertNoDuplicate('transclusion', transcludeDirective, directive, $compileNode);
          transcludeDirective = directive;
          terminalPriority = directive.priority;
          if (directiveValue == 'element') {
            $template = groupScan(compileNode, attrStart, attrEnd)
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name);
          } else {
            $template = jqLite(JQLiteClone(compileNode)).contents();
            $compileNode.html(''); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            $template = jqLite('<div>' +
                                 trim(directiveValue) +
                               '</div>').contents();
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}", directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that were already applied and those that weren't
            // - collect directives from the template, add them to the second group and sort them
            // - append the second group with new directives to the first group
            directives = directives.concat(
                collectDirectives(
                    compileNode,
                    directives.splice(i + 1, directives.length - (i + 1)),
                    newTemplateAttrs
                )
            );
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i),
              nodeLinkFn, $compileNode, templateAttrs, jqCollection, childTranscludeFn);
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope;
      nodeLinkFn.transclude = transcludeDirective && childTranscludeFn;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          postLinkFns.push(post);
        }
      }


      function getControllers(require, $element) {
        var value, retrievalMethod = 'data', optional = false;
        if (isString(require)) {
          while((value = require.charAt(0)) == '^' || value == '?') {
            require = require.substr(1);
            if (value == '^') {
              retrievalMethod = 'inheritedData';
            }
            optional = optional || value == '?';
          }
          value = $element[retrievalMethod]('$' + require + 'Controller');
          if (!value && !optional) {
            throw $compileMinErr('ctreq', "Controller '{0}', required by directive '{1}', can't be found!", require, directiveName);
          }
          return value;
        } else if (isArray(require)) {
          value = [];
          forEach(require, function(require) {
            value.push(getControllers(require, $element));
          });
        }
        return value;
      }


      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var attrs, $element, i, ii, linkFn, controller;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
        } else {
          attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
        }
        $element = attrs.$$element;

        if (newIsolateScopeDirective) {
          var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;

          var parentScope = scope.$parent || scope;

          forEach(newIsolateScopeDirective.scope, function(definition, scopeName) {
            var match = definition.match(LOCAL_REGEXP) || [],
                attrName = match[3] || scopeName,
                optional = (match[2] == '?'),
                mode = match[1], // @, =, or &
                lastValue,
                parentGet, parentSet;

            scope.$$isolateBindings[scopeName] = mode + attrName;

            switch (mode) {

              case '@': {
                attrs.$observe(attrName, function(value) {
                  scope[scopeName] = value;
                });
                attrs.$$observers[attrName].$$scope = parentScope;
                if( attrs[attrName] ) {
                  // If the attribute has been provided then we trigger an interpolation to ensure the value is there for use in the link fn
                  scope[scopeName] = $interpolate(attrs[attrName])(parentScope);
                }
                break;
              }

              case '=': {
                if (optional && !attrs[attrName]) {
                  return;
                }
                parentGet = $parse(attrs[attrName]);
                parentSet = parentGet.assign || function() {
                  // reset the change, or we will throw this exception on every $digest
                  lastValue = scope[scopeName] = parentGet(parentScope);
                  throw $compileMinErr('nonassign', "Expression '{0}' used with directive '{1}' is non-assignable!",
                      attrs[attrName], newIsolateScopeDirective.name);
                };
                lastValue = scope[scopeName] = parentGet(parentScope);
                scope.$watch(function parentValueWatch() {
                  var parentValue = parentGet(parentScope);

                  if (parentValue !== scope[scopeName]) {
                    // we are out of sync and need to copy
                    if (parentValue !== lastValue) {
                      // parent changed and it has precedence
                      lastValue = scope[scopeName] = parentValue;
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(parentScope, parentValue = lastValue = scope[scopeName]);
                    }
                  }
                  return parentValue;
                });
                break;
              }

              case '&': {
                parentGet = $parse(attrs[attrName]);
                scope[scopeName] = function(locals) {
                  return parentGet(parentScope, locals);
                };
                break;
              }

              default: {
                throw $compileMinErr('iscp', "Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}",
                    newIsolateScopeDirective.name, scopeName, definition);
              }
            }
          });
        }

        if (controllerDirectives) {
          forEach(controllerDirectives, function(directive) {
            var locals = {
              $scope: scope,
              $element: $element,
              $attrs: attrs,
              $transclude: boundTranscludeFn
            }, controllerInstance;

            controller = directive.controller;
            if (controller == '@') {
              controller = attrs[directive.name];
            }

            controllerInstance = $controller(controller, locals);
            $element.data(
                '$' + directive.name + 'Controller',
                controllerInstance);
            if (directive.controllerAs) {
              locals.$scope[directive.controllerAs] = controllerInstance;
            }
          });
        }

        // PRELINKING
        for(i = 0, ii = preLinkFns.length; i < ii; i++) {
          try {
            linkFn = preLinkFns[i];
            linkFn(scope, $element, attrs,
                linkFn.require && getControllers(linkFn.require, $element));
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }

        // RECURSION
        childLinkFn && childLinkFn(scope, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for(i = 0, ii = postLinkFns.length; i < ii; i++) {
          try {
            linkFn = postLinkFns[i];
            linkFn(scope, $element, attrs,
                linkFn.require && getControllers(linkFn.require, $element));
          } catch (e) {
            $exceptionHandler(e, startingTag($element));
          }
        }
      }
    }


    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for(var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i<ii; i++) {
          try {
            directive = directives[i];
            if ( (maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch(e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key]) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, beforeTemplateNodeLinkFn, $compileNode, tAttrs,
        $rootElement, childTranscludeFn) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          // The fact that we have to copy and patch the directive seems wrong!
          derivedSyncDirective = extend({}, origAsyncDirective, {
            controller: null, templateUrl: null, transclude: null, scope: null, replace: null
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl;

      $compileNode.html('');

      $http.get($sce.getTrustedResourceUrl(templateUrl), {cache: $templateCache}).
        success(function(content) {
          var compileNode, tempTemplateAttrs, $template;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            $template = jqLite('<div>' + trim(content) + '</div>').contents();
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== 1) {
              throw $compileMinErr('tplrt', "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            collectDirectives(compileNode, directives, tempTemplateAttrs);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);


          while(linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                controller = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              // it was cloned therefore we have to clone as well.
              linkNode = JQLiteClone(compileNode);
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
            }

            afterTemplateNodeLinkFn(
              beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, controller),
              scope, linkNode, $rootElement, controller
            );
          }
          linkQueue = null;
        }).
        error(function(response, code, headers, config) {
          throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, controller) {
        if (linkQueue) {
          linkQueue.push(scope);
          linkQueue.push(node);
          linkQueue.push(rootElement);
          linkQueue.push(controller);
        } else {
          afterTemplateNodeLinkFn(function() {
            beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, controller);
          }, scope, node, rootElement, controller);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      return b.priority - a.priority;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: valueFn(function textInterpolateLinkFn(scope, node) {
            var parent = node.parent(),
                bindings = parent.data('$binding') || [];
            bindings.push(interpolateFn);
            safeAddClass(parent.data('$binding', bindings), 'ng-binding');
            scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
              node[0].nodeValue = value;
            });
          })
        });
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (nodeName_(node) != "IMG" && (attrNormalizedName == "src" ||
                                        attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name) {
      var interpolateFn = $interpolate(value, true);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "SELECT") {
        throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: valueFn(function attrInterpolateLinkFn(scope, element, attr) {
          var $$observers = (attr.$$observers || (attr.$$observers = {}));

          if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
            throw $compileMinErr('nodomevents',
                "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- " +
                "versions (such as ng-click instead of onclick) instead.");
          }

          // we need to interpolate again, in case the attribute value has been updated
          // (e.g. by another directive's compile function)
          interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));

          // if attribute was updated so that there is no interpolation going on we don't want to
          // register any observers
          if (!interpolateFn) return;

          attr[name] = interpolateFn(scope);
          ($$observers[name] || ($$observers[name] = [])).$$inter = true;
          (attr.$$observers && attr.$$observers[name].$$scope || scope).
            $watch(interpolateFn, function interpolateFnWatchAction(value) {
              attr.$set(name, value);
            });
        })
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *    in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep the shell,
     *    but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for(i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);
      newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1
    }
  }];
}

var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * All of these will become 'myDirective':
 *   my:Directive
 *   my-directive
 *   x-my-directive
 *   data-my:directive
 *
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc object
 * @name ng.$compile.directive.Attributes
 * @description
 *
 * A shared object between directive compile / linking functions which contains normalized DOM element
 * attributes. The the values reflect current binding state `{{ }}`. The normalization is needed
 * since all of these are treated as equivalent in Angular:
 *
 *          <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 */

/**
 * @ngdoc property
 * @name ng.$compile.directive.Attributes#$attr
 * @propertyOf ng.$compile.directive.Attributes
 * @returns {object} A map of DOM element attribute names to the normalized name. This is
 *          needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc function
 * @name ng.$compile.directive.Attributes#$set
 * @methodOf ng.$compile.directive.Attributes
 * @function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          revers translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
){}

/**
 * @ngdoc object
 * @name ng.$controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


  /**
   * @ngdoc function
   * @name ng.$controllerProvider#register
   * @methodOf ng.$controllerProvider
   * @param {string} name Controller name
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    if (isObject(name)) {
      extend(controllers, name)
    } else {
      controllers[name] = constructor;
    }
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc function
     * @name ng.$controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * check `window[constructor]` on the global `window` object
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link AUTO.$injector $injector}, but extracted into
     * a service, so that one can override this service with {@link https://gist.github.com/1649788
     * BC version}.
     */
    return function(expression, locals) {
      var instance, match, constructor, identifier;

      if(isString(expression)) {
        match = expression.match(CNTRL_REG),
        constructor = match[1],
        identifier = match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);

        assertArgFn(expression, constructor, true);
      }

      instance = $injector.instantiate(expression, locals);

      if (identifier) {
        if (!(locals && typeof locals.$scope == 'object')) {
          throw minErr('$controller')('noscp', "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", constructor || expression.name, identifier);
        }

        locals.$scope[identifier] = instance;
      }

      return instance;
    };
  }];
}

/**
 * @ngdoc object
 * @name ng.$document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery (lite)}-wrapped reference to the browser's `window.document`
 * element.
 */
function $DocumentProvider(){
  this.$get = ['$window', function(window){
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc function
 * @name ng.$exceptionHandler
 * @requires $log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = {}, key, val, i;

  if (!headers) return parsed;

  forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = lowercase(trim(line.substr(0, i)));
    val = trim(line.substr(i + 1));

    if (key) {
      if (parsed[key]) {
        parsed[key] += ', ' + val;
      } else {
        parsed[key] = val;
      }
    }
  });

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj = isObject(headers) ? headers : undefined;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      return headersObj[lowercase(name)] || null;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers Http headers getter fn.
 * @param {(function|Array.<function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, fns) {
  if (isFunction(fns))
    return fns(data, headers);

  forEach(fns, function(fn) {
    data = fn(data, headers);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


function $HttpProvider() {
  var JSON_START = /^\s*(\[|\{[^\{])/,
      JSON_END = /[\}\]]\s*$/,
      PROTECTION_PREFIX = /^\)\]\}',?\n/,
      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};

  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [function(data) {
      if (isString(data)) {
        // strip json vulnerability protection prefix
        data = data.replace(PROTECTION_PREFIX, '');
        if (JSON_START.test(data) && JSON_END.test(data))
          data = fromJson(data);
      }
      return data;
    }],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   CONTENT_TYPE_APPLICATION_JSON,
      put:    CONTENT_TYPE_APPLICATION_JSON,
      patch:  CONTENT_TYPE_APPLICATION_JSON
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  /**
   * Are order by request. I.E. they are applied in the same order as
   * array on request, but revers order on response.
   */
  var interceptorFactories = this.interceptors = [];
  /**
   * For historical reasons, response interceptors ordered by the order in which
   * they are applied to response. (This is in revers to interceptorFactories)
   */
  var responseInterceptorFactories = this.responseInterceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector', '$$urlUtils',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector, $$urlUtils) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    forEach(responseInterceptorFactories, function(interceptorFactory, index) {
      var responseFn = isString(interceptorFactory)
          ? $injector.get(interceptorFactory)
          : $injector.invoke(interceptorFactory);

      /**
       * Response interceptors go before "around" interceptors (no real reason, just
       * had to pick one.) But they are already reversed, so we can't use unshift, hence
       * the splice.
       */
      reversedInterceptors.splice(index, 0, {
        response: function(response) {
          return responseFn($q.when(response));
        },
        responseError: function(response) {
          return responseFn($q.reject(response));
        }
      });
    });


    /**
     * @ngdoc function
     * @name ng.$http
     * @requires $httpBackend
     * @requires $browser
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's {@link https://developer.mozilla.org/en/xmlhttprequest
     * XMLHttpRequest} object or via {@link http://en.wikipedia.org/wiki/JSONP JSONP}.
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * # General usage
     * The `$http` service is a function which takes a single argument â€” a configuration object â€”
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * <pre>
     *   $http({method: 'GET', url: '/someUrl'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * </pre>
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument â€“
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * # Shortcut methods
     *
     * Since all invocations of the $http service require passing in an HTTP method and URL, and
     * POST/PUT requests require request data to be provided as well, shortcut methods
     * were created:
     *
     * <pre>
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * </pre>
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     *
     *
     * # Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get['My-Header']='value'`.
     *
     * Additionally, the defaults can be set at runtime via the `$http.defaults` object in the same
     * fashion.
     *
     *
     * # Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transform functions. By default, Angular
     * applies these transformations:
     *
     * Request transformations:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it into
     *   JSON format.
     *
     * Response transformations:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     * To globally augment or override the default transforms, modify the `$httpProvider.defaults.transformRequest` and
     * `$httpProvider.defaults.transformResponse` properties. These properties are by default an
     * array of transform functions, which allows you to `push` or `unshift` a new transformation function into the
     * transformation chain. You can also decide to completely override any default transformations by assigning your
     * transformation functions to these properties directly without the array wrapper.
     *
     * Similarly, to locally override the request/response transforms, augment the `transformRequest` and/or
     * `transformResponse` properties of the configuration object passed into `$http`.
     *
     *
     * # Caching
     *
     * To enable caching, set the configuration property `cache` to `true`. When the cache is
     * enabled, `$http` stores the response from the server in local cache. Next time the
     * response is served from the cache without sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * A custom default cache built with $cacheFactory can be provided in $http.defaults.cache.
     * To skip it, set configuration property `cache` to `false`.
     *
     *
     * # Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with http `config` object. The function is free to modify
     *     the `config` or create a new one. The function needs to return the `config` directly or as a
     *     promise.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or resolved
     *      with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to modify
     *     the `response` or create a new one. The function needs to return the `response` directly or as a
     *     promise.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or resolved
     *      with a rejection.
     *
     *
     * <pre>
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config || $q.when(config);
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response || $q.when(response);
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       };
     *     }
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *       'response': function(response) {
     *          // same as above
     *       }
     *   });
     * </pre>
     *
     * # Response interceptors (DEPRECATED)
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication or any kind of synchronous or
     * asynchronous preprocessing of received responses, it is desirable to be able to intercept
     * responses for http requests before they are handed over to the application code that
     * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
     *
     * The interceptors are service factories that are registered with the $httpProvider by
     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor  â€” a function that
     * takes a {@link ng.$q promise} and returns the original or a new promise.
     *
     * <pre>
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
     *
     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
     * </pre>
     *
     *
     * # Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx
     *   JSON vulnerability}
     * - {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF}
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ## JSON Vulnerability Protection
     *
     * A {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx
     * JSON vulnerability} allows third party website to turn your JSON resource URL into
     * {@link http://en.wikipedia.org/wiki/JSONP JSONP} request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * <pre>
     * ['one','two']
     * </pre>
     *
     * which is vulnerable to attack, your server can return:
     * <pre>
     * )]}',
     * ['one','two']
     * </pre>
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ## Cross Site Request Forgery (XSRF) Protection
     *
     * {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF} is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from making
     * up its own tokens). We recommend that the token is a digest of your site's authentication
     * cookie with a {@link https://en.wikipedia.org/wiki/Salt_(cryptography) salt} for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults, or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** â€“ `{string}` â€“ HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** â€“ `{string}` â€“ Absolute or relative URL of the resource that is being requested.
     *    - **params** â€“ `{Object.<string|Object>}` â€“ Map of strings or objects which will be turned to
     *      `?key1=value1&key2=value2` after the url. If the value is not a string, it will be JSONified.
     *    - **data** â€“ `{string|Object}` â€“ Data to be sent as the request message data.
     *    - **headers** â€“ `{Object}` â€“ Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the header will
     *      not be sent.
     *    - **xsrfHeaderName** â€“ `{string}` â€“ Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** â€“ `{string}` â€“ Name of cookie containing the XSRF token.
     *    - **transformRequest** â€“ `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` â€“
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *    - **transformResponse** â€“ `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` â€“
     *      transform function or an array of such functions. The transform function takes the http
     *      response body and headers and returns its transformed (typically deserialized) version.
     *    - **cache** â€“ `{boolean|Cache}` â€“ If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** â€“ `{number|Promise}` â€“ timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to to set the `withCredentials` flag on the
     *      XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5
     *      requests with credentials} for more information.
     *    - **responseType** - `{string}` - see {@link
     *      https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType requestType}.
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** â€“ `{string|Object}` â€“ The response body transformed with the transform functions.
     *   - **status** â€“ `{number}` â€“ HTTP status code of the response.
     *   - **headers** â€“ `{function([headerName])}` â€“ Header getter function.
     *   - **config** â€“ `{Object}` â€“ The configuration object that was used to generate the request.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
      <example>
        <file name="index.html">
          <div ng-controller="FetchCtrl">
            <select ng-model="method">
              <option>GET</option>
              <option>JSONP</option>
            </select>
            <input type="text" ng-model="url" size="80"/>
            <button ng-click="fetch()">fetch</button><br>
            <button ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
            <button ng-click="updateModel('JSONP', 'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">Sample JSONP</button>
            <button ng-click="updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')">Invalid JSONP</button>
            <pre>http status code: {{status}}</pre>
            <pre>http response data: {{data}}</pre>
          </div>
        </file>
        <file name="script.js">
          function FetchCtrl($scope, $http, $templateCache) {
            $scope.method = 'GET';
            $scope.url = 'http-hello.html';

            $scope.fetch = function() {
              $scope.code = null;
              $scope.response = null;

              $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
                success(function(data, status) {
                  $scope.status = status;
                  $scope.data = data;
                }).
                error(function(data, status) {
                  $scope.data = data || "Request failed";
                  $scope.status = status;
              });
            };

            $scope.updateModel = function(method, url) {
              $scope.method = method;
              $scope.url = url;
            };
          }
        </file>
        <file name="http-hello.html">
          Hello, $http!
        </file>
        <file name="scenario.js">
          it('should make an xhr GET request', function() {
            element(':button:contains("Sample GET")').click();
            element(':button:contains("fetch")').click();
            expect(binding('status')).toBe('200');
            expect(binding('data')).toMatch(/Hello, \$http!/);
          });

          it('should make a JSONP request to angularjs.org', function() {
            element(':button:contains("Sample JSONP")').click();
            element(':button:contains("fetch")').click();
            expect(binding('status')).toBe('200');
            expect(binding('data')).toMatch(/Super Hero!/);
          });

          it('should make JSONP request to invalid URL and invoke the error handler',
              function() {
            element(':button:contains("Invalid JSONP")').click();
            element(':button:contains("fetch")').click();
            expect(binding('status')).toBe('0');
            expect(binding('data')).toBe('Request failed');
          });
        </file>
      </example>
     */
    function $http(requestConfig) {
      var config = {
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      };
      var headers = mergeHeaders(requestConfig);

      extend(config, requestConfig);
      config.headers = headers;
      config.method = uppercase(config.method);

      var xsrfValue = $$urlUtils.isSameOrigin(config.url)
          ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
          : undefined;
      if (xsrfValue) {
        headers[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
      }


      var serverRequest = function(config) {
        headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(config.data)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while(chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response, {
          data: transformData(response.data, response.headers, config.transformResponse)
        });
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // execute if header value is function
        execHeaders(defHeaders);
        execHeaders(reqHeaders);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        return reqHeaders;

        function execHeaders(headers) {
          var headerContent;

          forEach(headers, function(headerFn, header) {
            if (isFunction(headerFn)) {
              headerContent = headerFn();
              if (headerContent != null) {
                headers[header] = headerContent;
              } else {
                delete headers[header];
              }
            }
          });
        }
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name ng.$http#get
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#delete
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#head
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#jsonp
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     Should contain `JSON_CALLBACK` string.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name ng.$http#post
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name ng.$http#put
     * @methodOf ng.$http
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethodsWithData('post', 'put');

        /**
         * @ngdoc property
         * @name ng.$http#defaults
         * @propertyOf ng.$http
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData, reqHeaders) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (cachedResp.then) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(removePendingReq, removePendingReq);
            return cachedResp;
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]));
            } else {
              resolvePromise(cachedResp, 200, {});
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }

      // if we won't have the response in cache, send the request to the backend
      if (isUndefined(cachedResp)) {
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString)]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        resolvePromise(response, status, headersString);
        if (!$rootScope.$$phase) $rootScope.$apply();
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config
        });
      }


      function removePendingReq() {
        var idx = indexOf($http.pendingRequests, config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
          if (!params) return url;
          var parts = [];
          forEachSorted(params, function(value, key) {
            if (value == null || value == undefined) return;
            if (!isArray(value)) value = [value];

            forEach(value, function(v) {
              if (isObject(v)) {
                v = toJson(v);
              }
              parts.push(encodeUriQuery(key) + '=' +
                         encodeUriQuery(v));
            });
          });
          return url + ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
        }


  }];
}

var XHR = window.XMLHttpRequest || function() {
  try { return new ActiveXObject("Msxml2.XMLHTTP.6.0"); } catch (e1) {}
  try { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); } catch (e2) {}
  try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch (e3) {}
  throw minErr('$httpBackend')('noxhr', "This browser does not support XMLHttpRequest.");
};


/**
 * @ngdoc object
 * @name ng.$httpBackend
 * @requires $browser
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, XHR, $browser.defer, $window.angular.callbacks,
        $document[0], $window.location.protocol.replace(':', ''));
  }];
}

function createHttpBackend($browser, XHR, $browserDefer, callbacks, rawDocument, locationProtocol) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    var status;
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          function() {
        if (callbacks[callbackId].data) {
          completeRequest(callback, 200, callbacks[callbackId].data);
        } else {
          completeRequest(callback, status || -2);
        }
        delete callbacks[callbackId];
      });
    } else {
      var xhr = new XHR();
      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (value) xhr.setRequestHeader(key, value);
      });

      // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
      // response is in the cache. the promise api will ensure that to the app code the api is
      // always async
      xhr.onreadystatechange = function() {
        if (xhr.readyState == 4) {
          var responseHeaders = xhr.getAllResponseHeaders();

          // TODO(vojta): remove once Firefox 21 gets released.
          // begin: workaround to overcome Firefox CORS http response headers bug
          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735
          // Firefox already patched in nightly. Should land in Firefox 21.

          // CORS "simple response headers" http://www.w3.org/TR/cors/
          var value,
              simpleHeaders = ["Cache-Control", "Content-Language", "Content-Type",
                                  "Expires", "Last-Modified", "Pragma"];
          if (!responseHeaders) {
            responseHeaders = "";
            forEach(simpleHeaders, function (header) {
              var value = xhr.getResponseHeader(header);
              if (value) {
                  responseHeaders += header + ": " + value + "\n";
              }
            });
          }
          // end of the workaround.

          // responseText is the old-school way of retrieving response (supported by IE8 & 9)
          // response and responseType properties were introduced in XHR Level2 spec (supported by IE10)
          completeRequest(callback,
              status || xhr.status,
              (xhr.responseType ? xhr.response : xhr.responseText),
              responseHeaders);
        }
      };

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        xhr.responseType = responseType;
      }

      xhr.send(post || '');
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (timeout && timeout.then) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      status = -1;
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString) {
      // URL_MATCH is defined in src/service/location.js
      var protocol = (url.match(SERVER_MATCH) || ['', locationProtocol])[1];

      // cancel timeout and subsequent timeout promise resolution
      timeoutId && $browserDefer.cancel(timeoutId);
      jsonpDone = xhr = null;

      // fix status code for file protocol (it's always 0)
      status = (protocol == 'file') ? (response ? 200 : 404) : status;

      // normalize IE bug (http://bugs.jquery.com/ticket/1450)
      status = status == 1223 ? 204 : status;

      callback(status, response, headersString);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'),
        doneWrapper = function() {
          rawDocument.body.removeChild(script);
          if (done) done();
        };

    script.type = 'text/javascript';
    script.src = url;

    if (msie) {
      script.onreadystatechange = function() {
        if (/loaded|complete/.test(script.readyState)) doneWrapper();
      };
    } else {
      script.onload = script.onerror = doneWrapper;
    }

    rawDocument.body.appendChild(script);
    return doneWrapper;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc object
 * @name ng.$interpolateProvider
 * @function
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
   <doc:example module="customInterpolationApp">
     <doc:source>
      <script>
        var customInterpolationApp = angular.module('customInterpolationApp', []);

        customInterpolationApp.config(function($interpolateProvider) {
          $interpolateProvider.startSymbol('//');
          $interpolateProvider.endSymbol('//');
        });


        customInterpolationApp.controller('DemoController', function DemoController() {
            this.label = "This bindings is brought you you by // interpolation symbols.";
        });
      </script>
      <div ng-app="App" ng-controller="DemoController as demo">
          //demo.label//
      </div>
     </doc:source>
     <doc:scenario>
       it('should interpolate binding with custom symbols', function() {
         expect(binding('demo.label')).toBe('This bindings is brought you you by // interpolation symbols.');
       });
 </doc:scenario>
   </doc:example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name ng.$interpolateProvider#startSymbol
   * @methodOf ng.$interpolateProvider
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value){
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name ng.$interpolateProvider#endSymbol
   * @methodOf ng.$interpolateProvider
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value){
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length;

    /**
     * @ngdoc function
     * @name ng.$interpolate
     * @function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
       <pre>
         var $interpolate = ...; // injected
         var exp = $interpolate('Hello {{name}}!');
         expect(exp({name:'Angular'}).toEqual('Hello Angular!');
       </pre>
     *
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @returns {function(context)} an interpolation function which is used to compute the interpolated
     *    string. The function has these parameters:
     *
     *    * `context`: an object against which any expressions embedded in the strings are evaluated
     *      against.
     *
     */
    function $interpolate(text, mustHaveExpression, trustedContext) {
      var startIndex,
          endIndex,
          index = 0,
          parts = [],
          length = text.length,
          hasInterpolation = false,
          fn,
          exp,
          concat = [];

      while(index < length) {
        if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {
          (index != startIndex) && parts.push(text.substring(index, startIndex));
          parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
          fn.exp = exp;
          index = endIndex + endSymbolLength;
          hasInterpolation = true;
        } else {
          // we did not find anything, so we have to add the remainder to the parts array
          (index != length) && parts.push(text.substring(index));
          index = length;
        }
      }

      if (!(length = parts.length)) {
        // we added, nothing, must have been an empty string.
        parts.push('');
        length = 1;
      }

      // Concatenating expressions makes it hard to reason about whether some combination of concatenated
      // values are unsafe to use and could easily lead to XSS.  By requiring that a single
      // expression be used for iframe[src], object[src], etc., we ensure that the value that's used
      // is assigned or constructed by some JS code somewhere that is more testable or make it
      // obvious that you bound the value to some user controlled value.  This helps reduce the load
      // when auditing for XSS issues.
      if (trustedContext && parts.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression  || hasInterpolation) {
        concat.length = length;
        fn = function(context) {
          try {
            for(var i = 0, ii = length, part; i<ii; i++) {
              if (typeof (part = parts[i]) == 'function') {
                part = part(context);
                if (trustedContext) {
                  part = $sce.getTrusted(trustedContext, part);
                } else {
                  part = $sce.valueOf(part);
                }
                if (part == null || part == undefined) {
                  part = '';
                } else if (typeof part != 'string') {
                  part = toJson(part);
                }
              }
              concat[i] = part;
            }
            return concat.join('');
          }
          catch(err) {
            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
            $exceptionHandler(newErr);
          }
        };
        fn.exp = text;
        fn.parts = parts;
        return fn;
      }
    }


    /**
     * @ngdoc method
     * @name ng.$interpolate#startSymbol
     * @methodOf ng.$interpolate
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    }


    /**
     * @ngdoc method
     * @name ng.$interpolate#endSymbol
     * @methodOf ng.$interpolate
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    }

    return $interpolate;
  }];
}

/**
 * @ngdoc object
 * @name ng.$locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` â€“ `{string}` â€“ locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider(){
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'
                .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        short: 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a'
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var SERVER_MATCH = /^([^:]+):\/\/(\w+:{0,1}\w*@)?(\{?[\w\.-]*\}?)(:([0-9]+))?(\/[^\?#]*)?(\?([^#]*))?(#(.*))?$/,
    PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function matchUrl(url, obj) {
  var match = SERVER_MATCH.exec(url);

  obj.$$protocol = match[1];
  obj.$$host = match[3];
  obj.$$port = int(match[5]) || DEFAULT_PORTS[match[1]] || null;
}

function matchAppUrl(url, obj) {
  var match = PATH_MATCH.exec(url);

  obj.$$path = decodeURIComponent(match[1]);
  obj.$$search = parseKeyValue(match[3]);
  obj.$$hash = decodeURIComponent(match[5] || '');

  // make sure path starts with '/';
  if (obj.$$path && obj.$$path.charAt(0) != '/') obj.$$path = '/' + obj.$$path;
}


function composeProtocolHostPort(protocol, host, port) {
  return protocol + '://' + host + (port == DEFAULT_PORTS[protocol] ? '' : ':' + port);
}

/**
 *
 * @param {string} begin
 * @param {string} whole
 * @param {string} otherwise
 * @returns {string} returns text from whole after begin or otherwise if it does not begin with expected string.
 */
function beginsWith(begin, whole, otherwise) {
  return whole.indexOf(begin) == 0 ? whole.substr(begin.length) : otherwise;
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} newAbsoluteUrl HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var parsed = {}
    matchUrl(url, parsed);
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
    }
    matchAppUrl(pathUrl, parsed);
    extend(this, parsed);
    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$rewrite = function(url) {
    var appUrl, prevAppUrl;

    if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {
      prevAppUrl = appUrl;
      if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {
        return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        return appBase + prevAppUrl;
      }
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {
      return appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      return appBaseNoFile;
    }
  }
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  matchUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl = withoutBaseUrl.charAt(0) == '#'
        ? beginsWith(hashPrefix, withoutBaseUrl)
        : (this.$$html5)
          ? withoutBaseUrl
          : '';

    if (!isString(withoutHashUrl)) {
      throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
    }
    matchAppUrl(withoutHashUrl, this);
    this.$$compose();
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$rewrite = function(url) {
    if(stripHash(appBase) == stripHash(url)) {
      return url;
    }
  }
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$rewrite = function(url) {
    var appUrl;

    if ( appBase == stripHash(url) ) {
      return url;
    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {
      return appBase + hashPrefix + appUrl;
    } else if ( appBaseNoFile === url + '/') {
      return appBaseNoFile;
    }
  }
}


LocationHashbangInHtml5Url.prototype =
  LocationHashbangUrl.prototype =
  LocationHtml5Url.prototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing ?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name ng.$location#absUrl
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}.
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name ng.$location#url
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @param {string=} replace The path that will be changed
   * @return {string} url
   */
  url: function(url, replace) {
    if (isUndefined(url))
      return this.$$url;

    var match = PATH_MATCH.exec(url);
    if (match[1]) this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1]) this.search(match[3] || '');
    this.hash(match[5] || '', replace);

    return this;
  },

  /**
   * @ngdoc method
   * @name ng.$location#protocol
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name ng.$location#host
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name ng.$location#port
   * @methodOf ng.$location
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name ng.$location#path
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   * @param {string=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name ng.$location#search
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or hash object. Hash object
   *    may contain an array of values, which will be decoded as duplicates in the url.
   * @param {string=} paramValue If `search` is a string, then `paramValue` will override only a
   *    single search parameter. If the value is `null`, the parameter will be deleted.
   *
   * @return {string} search
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search)) {
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (paramValue == undefined || paramValue == null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name ng.$location#hash
   * @methodOf ng.$location
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   * @param {string=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', identity),

  /**
   * @ngdoc method
   * @name ng.$location#replace
   * @methodOf ng.$location
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value))
      return this[property];

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc object
 * @name ng.$location
 *
 * @requires $browser
 * @requires $sniffer
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * {@link https://developer.mozilla.org/en/window.location window.location}) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/dev_guide.services.$location Developer Guide: Angular
 * Services: Using $location}
 */

/**
 * @ngdoc object
 * @name ng.$locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider(){
  var hashPrefix = '',
      html5Mode = false;

  /**
   * @ngdoc property
   * @name ng.$locationProvider#hashPrefix
   * @methodOf ng.$locationProvider
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc property
   * @name ng.$locationProvider#html5Mode
   * @methodOf ng.$locationProvider
   * @description
   * @param {string=} mode Use HTML5 strategy if available.
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isDefined(mode)) {
      html5Mode = mode;
      return this;
    } else {
      return html5Mode;
    }
  };

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',
      function( $rootScope,   $browser,   $sniffer,   $rootElement) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode) {
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parse($location.$$rewrite(initialUrl));

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (event.ctrlKey || event.metaKey || event.which == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (lowercase(elm[0].nodeName) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      var rewrittenUrl = $location.$$rewrite(absHref);

      if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
        event.preventDefault();
        if (rewrittenUrl != $browser.url()) {
          // update location manually
          $location.$$parse(rewrittenUrl);
          $rootScope.$apply();
          // hack to work around FF6 bug 684208 when scenario runner clicks on links
          window.angular['ff-684208-preventDefault'] = true;
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if ($location.absUrl() != initialUrl) {
      $browser.url($location.absUrl(), true);
    }

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl) {
      if ($location.absUrl() != newUrl) {
        if ($rootScope.$broadcast('$locationChangeStart', newUrl, $location.absUrl()).defaultPrevented) {
          $browser.url($location.absUrl());
          return;
        }
        $rootScope.$evalAsync(function() {
          var oldUrl = $location.absUrl();

          $location.$$parse(newUrl);
          afterLocationChange(oldUrl);
        });
        if (!$rootScope.$$phase) $rootScope.$digest();
      }
    });

    // update browser
    var changeCounter = 0;
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = $browser.url();
      var currentReplace = $location.$$replace;

      if (!changeCounter || oldUrl != $location.absUrl()) {
        changeCounter++;
        $rootScope.$evalAsync(function() {
          if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).
              defaultPrevented) {
            $location.$$parse(oldUrl);
          } else {
            $browser.url($location.absUrl(), currentReplace);
            afterLocationChange(oldUrl);
          }
        });
      }
      $location.$$replace = false;

      return changeCounter;
    });

    return $location;

    function afterLocationChange(oldUrl) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
    }
}];
}

/**
 * @ngdoc object
 * @name ng.$log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * @example
   <example>
     <file name="script.js">
       function LogCtrl($scope, $log) {
         $scope.$log = $log;
         $scope.message = 'Hello World!';
       }
     </file>
     <file name="index.html">
       <div ng-controller="LogCtrl">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc object
 * @name ng.$logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider(){
  var debug = true,
      self = this;
  
  /**
   * @ngdoc property
   * @name ng.$logProvider#debugEnabled
   * @methodOf ng.$logProvider
   * @description
   * @param {string=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
	  if (isDefined(flag)) {
		  debug = flag;
		  return this;
	  } else {
		  return debug;
	  }
  };
  
  this.$get = ['$window', function($window){
    return {
      /**
       * @ngdoc method
       * @name ng.$log#log
       * @methodOf ng.$log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name ng.$log#info
       * @methodOf ng.$log
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name ng.$log#warn
       * @methodOf ng.$log
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name ng.$log#error
       * @methodOf ng.$log
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),
      
      /**
       * @ngdoc method
       * @name ng.$log#debug
       * @methodOf ng.$log
       * 
       * @description
       * Write a debug message
       */
      debug: (function () {
    	var fn = consoleLog('debug');
    	
    	return function() {
    		if (debug) {
    			fn.apply(self, arguments);
    		}
    	}
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop;

      if (logFn.apply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2);
      }
    }
  }];
}

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct access to $scope and
// locals. However, one can obtain the ability to execute arbitrary JS code by obtaining a reference to native JS
// functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor(alert("evil JS code"))
//
// We want to prevent this type of access. For the sake of performance, during the lexing phase we disallow any "dotted"
// access to any member named "constructor".
//
// For reflective calls (a[b]) we check that the value of the lookup is not the Function constructor while evaluating
// the expression, which is a stronger but more expensive test. Since reflective calls are expensive anyway, this is not
// such a big deal compared to static dereferencing.
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits against the
// expression language, but not to prevent exploits that were enabled by exposing sensitive JavaScript or browser apis
// on Scope. Exposing such objects on a Scope is never a good practice and therefore we are not even trying to protect
// against interaction with an object explicitly exposed in this way.
//
// A developer could foil the name check by aliasing the Function constructor under a different name on the scope.
//
// In general, it is not possible to access a Window object from an angular expression unless a window or some DOM
// object that has a reference to window is published onto a Scope.

function ensureSafeMemberName(name, fullExpression) {
  if (name === "constructor") {
    throw $parseMinErr('isecfld',
        'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}', fullExpression);
  }
  return name;
};

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj && obj.constructor === obj) {
    throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
  } else {
    return obj;
  }
}


var OPERATORS = {
    'null':function(){return null;},
    'true':function(){return true;},
    'false':function(){return false;},
    undefined:noop,
    '+':function(self, locals, a,b){
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b)?b:undefined;},
    '-':function(self, locals, a,b){a=a(self, locals); b=b(self, locals); return (isDefined(a)?a:0)-(isDefined(b)?b:0);},
    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},
    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},
    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},
    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},
    '=':noop,
    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},
    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},
    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},
    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},
    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},
    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},
    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},
    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},
    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},
    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},
    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},
//    '|':function(self, locals, a,b){return a|b;},
    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},
    '!':function(self, locals, a){return !a(self, locals);}
};
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};

function lex(text, csp){
  var tokens = [],
      token,
      index = 0,
      json = [],
      ch,
      lastCh = ':'; // can start regexp

  while (index < text.length) {
    ch = text.charAt(index);
    if (is('"\'')) {
      readString(ch);
    } else if (isNumber(ch) || is('.') && isNumber(peek())) {
      readNumber();
    } else if (isIdent(ch)) {
      readIdent();
      // identifiers can only be if the preceding char was a { or ,
      if (was('{,') && json[0]=='{' &&
         (token=tokens[tokens.length-1])) {
        token.json = token.text.indexOf('.') == -1;
      }
    } else if (is('(){}[].,;:?')) {
      tokens.push({
        index:index,
        text:ch,
        json:(was(':[,') && is('{[')) || is('}]:,')
      });
      if (is('{[')) json.unshift(ch);
      if (is('}]')) json.shift();
      index++;
    } else if (isWhitespace(ch)) {
      index++;
      continue;
    } else {
      var ch2 = ch + peek(),
          ch3 = ch2 + peek(2),
          fn = OPERATORS[ch],
          fn2 = OPERATORS[ch2],
          fn3 = OPERATORS[ch3];
      if (fn3) {
        tokens.push({index:index, text:ch3, fn:fn3});
        index += 3;
      } else if (fn2) {
        tokens.push({index:index, text:ch2, fn:fn2});
        index += 2;
      } else if (fn) {
        tokens.push({index:index, text:ch, fn:fn, json: was('[,:') && is('+-')});
        index += 1;
      } else {
        throwError("Unexpected next character ", index, index+1);
      }
    }
    lastCh = ch;
  }
  return tokens;

  function is(chars) {
    return chars.indexOf(ch) != -1;
  }

  function was(chars) {
    return chars.indexOf(lastCh) != -1;
  }

  function peek(i) {
    var num = i || 1;
    return index + num < text.length ? text.charAt(index + num) : false;
  }
  function isNumber(ch) {
    return '0' <= ch && ch <= '9';
  }
  function isWhitespace(ch) {
    return ch == ' ' || ch == '\r' || ch == '\t' ||
           ch == '\n' || ch == '\v' || ch == '\u00A0'; // IE treats non-breaking space as \u00A0
  }
  function isIdent(ch) {
    return 'a' <= ch && ch <= 'z' ||
           'A' <= ch && ch <= 'Z' ||
           '_' == ch || ch == '$';
  }
  function isExpOperator(ch) {
    return ch == '-' || ch == '+' || isNumber(ch);
  }

  function throwError(error, start, end) {
    end = end || index;
    var colStr = (isDefined(start) ?
        "s " + start +  "-" + index + " [" + text.substring(start, end) + "]"
        : " " + end);
    throw $parseMinErr('lexerr', "Lexer Error: {0} at column{1} in expression [{2}].",
        error, colStr, text);
  }

  function readNumber() {
    var number = "";
    var start = index;
    while (index < text.length) {
      var ch = lowercase(text.charAt(index));
      if (ch == '.' || isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = peek();
        if (ch == 'e' && isExpOperator(peekCh)) {
          number += ch;
        } else if (isExpOperator(ch) &&
            peekCh && isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (isExpOperator(ch) &&
            (!peekCh || !isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          throwError('Invalid exponent');
        } else {
          break;
        }
      }
      index++;
    }
    number = 1 * number;
    tokens.push({index:start, text:number, json:true,
      fn:function() {return number;}});
  }
  function readIdent() {
    var ident = "",
        start = index,
        lastDot, peekIndex, methodName, ch;

    while (index < text.length) {
      ch = text.charAt(index);
      if (ch == '.' || isIdent(ch) || isNumber(ch)) {
        if (ch == '.') lastDot = index;
        ident += ch;
      } else {
        break;
      }
      index++;
    }

    //check if this is not a method invocation and if it is back out to last dot
    if (lastDot) {
      peekIndex = index;
      while(peekIndex < text.length) {
        ch = text.charAt(peekIndex);
        if (ch == '(') {
          methodName = ident.substr(lastDot - start + 1);
          ident = ident.substr(0, lastDot - start);
          index = peekIndex;
          break;
        }
        if(isWhitespace(ch)) {
          peekIndex++;
        } else {
          break;
        }
      }
    }


    var token = {
      index:start,
      text:ident
    };

    if (OPERATORS.hasOwnProperty(ident)) {
      token.fn = token.json = OPERATORS[ident];
    } else {
      var getter = getterFn(ident, csp, text);
      token.fn = extend(function(self, locals) {
        return (getter(self, locals));
      }, {
        assign: function(self, value) {
          return setter(self, ident, value, text);
        }
      });
    }

    tokens.push(token);

    if (methodName) {
      tokens.push({
        index:lastDot,
        text: '.',
        json: false
      });
      tokens.push({
        index: lastDot + 1,
        text: methodName,
        json: false
      });
    }
  }

  function readString(quote) {
    var start = index;
    index++;
    var string = "";
    var rawString = quote;
    var escape = false;
    while (index < text.length) {
      var ch = text.charAt(index);
      rawString += ch;
      if (escape) {
        if (ch == 'u') {
          var hex = text.substring(index + 1, index + 5);
          if (!hex.match(/[\da-f]{4}/i))
            throwError( "Invalid unicode escape [\\u" + hex + "]");
          index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          if (rep) {
            string += rep;
          } else {
            string += ch;
          }
        }
        escape = false;
      } else if (ch == '\\') {
        escape = true;
      } else if (ch == quote) {
        index++;
        tokens.push({
          index:start,
          text:rawString,
          string:string,
          json:true,
          fn:function() { return string; }
        });
        return;
      } else {
        string += ch;
      }
      index++;
    }
    throwError("Unterminated quote", start);
  }
}

/////////////////////////////////////////

function parser(text, json, $filter, csp){
  var ZERO = valueFn(0),
      value,
      tokens = lex(text, csp),
      assignment = _assignment,
      functionCall = _functionCall,
      fieldAccess = _fieldAccess,
      objectIndex = _objectIndex,
      filterChain = _filterChain;

  if(json){
    // The extra level of aliasing is here, just in case the lexer misses something, so that
    // we prevent any accidental execution in JSON.
    assignment = logicalOR;
    functionCall =
      fieldAccess =
      objectIndex =
      filterChain =
        function() { throwError("is not valid json", {text:text, index:0}); };
    value = primary();
  } else {
    value = statements();
  }
  if (tokens.length !== 0) {
    throwError("is an unexpected token", tokens[0]);
  }
  value.literal = !!value.literal;
  value.constant = !!value.constant;
  return value;

  ///////////////////////////////////
  function throwError(msg, token) {
    throw $parseMinErr('syntax',
        "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",
        token.text, msg, (token.index + 1), text, text.substring(token.index));
  }

  function peekToken() {
    if (tokens.length === 0)
      throw $parseMinErr('ueoe', "Unexpected end of expression: {0}", text);
    return tokens[0];
  }

  function peek(e1, e2, e3, e4) {
    if (tokens.length > 0) {
      var token = tokens[0];
      var t = token.text;
      if (t==e1 || t==e2 || t==e3 || t==e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  }

  function expect(e1, e2, e3, e4){
    var token = peek(e1, e2, e3, e4);
    if (token) {
      if (json && !token.json) {
        throwError("is not valid json", token);
      }
      tokens.shift();
      return token;
    }
    return false;
  }

  function consume(e1){
    if (!expect(e1)) {
      throwError("is unexpected, expecting [" + e1 + "]", peek());
    }
  }

  function unaryFn(fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, right);
    }, {
      constant:right.constant
    });
  }

  function ternaryFn(left, middle, right){
    return extend(function(self, locals){
      return left(self, locals) ? middle(self, locals) : right(self, locals);
    }, {
      constant: left.constant && middle.constant && right.constant
    });
  }

  function binaryFn(left, fn, right) {
    return extend(function(self, locals) {
      return fn(self, locals, left, right);
    }, {
      constant:left.constant && right.constant
    });
  }

  function statements() {
    var statements = [];
    while(true) {
      if (tokens.length > 0 && !peek('}', ')', ';', ']'))
        statements.push(filterChain());
      if (!expect(';')) {
        // optimize for the common case where there is only one statement.
        // TODO(size): maybe we should not support multiple statements?
        return statements.length == 1
          ? statements[0]
          : function(self, locals){
            var value;
            for ( var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement)
                value = statement(self, locals);
            }
            return value;
          };
      }
    }
  }

  function _filterChain() {
    var left = expression();
    var token;
    while(true) {
      if ((token = expect('|'))) {
        left = binaryFn(left, token.fn, filter());
      } else {
        return left;
      }
    }
  }

  function filter() {
    var token = expect();
    var fn = $filter(token.text);
    var argsFn = [];
    while(true) {
      if ((token = expect(':'))) {
        argsFn.push(expression());
      } else {
        var fnInvoke = function(self, locals, input){
          var args = [input];
          for ( var i = 0; i < argsFn.length; i++) {
            args.push(argsFn[i](self, locals));
          }
          return fn.apply(self, args);
        };
        return function() {
          return fnInvoke;
        };
      }
    }
  }

  function expression() {
    return assignment();
  }

  function _assignment() {
    var left = ternary();
    var right;
    var token;
    if ((token = expect('='))) {
      if (!left.assign) {
        throwError("implies assignment but [" +
          text.substring(0, token.index) + "] can not be assigned to", token);
      }
      right = ternary();
      return function(scope, locals){
        return left.assign(scope, right(scope, locals), locals);
      };
    } else {
      return left;
    }
  }

  function ternary() {
    var left = logicalOR();
    var middle;
    var token;
    if((token = expect('?'))){
      middle = ternary();
      if((token = expect(':'))){
        return ternaryFn(left, middle, ternary());
      }
      else {
        throwError('expected :', token);
      }
    }
    else {
      return left;
    }
  }

  function logicalOR() {
    var left = logicalAND();
    var token;
    while(true) {
      if ((token = expect('||'))) {
        left = binaryFn(left, token.fn, logicalAND());
      } else {
        return left;
      }
    }
  }

  function logicalAND() {
    var left = equality();
    var token;
    if ((token = expect('&&'))) {
      left = binaryFn(left, token.fn, logicalAND());
    }
    return left;
  }

  function equality() {
    var left = relational();
    var token;
    if ((token = expect('==','!=','===','!=='))) {
      left = binaryFn(left, token.fn, equality());
    }
    return left;
  }

  function relational() {
    var left = additive();
    var token;
    if ((token = expect('<', '>', '<=', '>='))) {
      left = binaryFn(left, token.fn, relational());
    }
    return left;
  }

  function additive() {
    var left = multiplicative();
    var token;
    while ((token = expect('+','-'))) {
      left = binaryFn(left, token.fn, multiplicative());
    }
    return left;
  }

  function multiplicative() {
    var left = unary();
    var token;
    while ((token = expect('*','/','%'))) {
      left = binaryFn(left, token.fn, unary());
    }
    return left;
  }

  function unary() {
    var token;
    if (expect('+')) {
      return primary();
    } else if ((token = expect('-'))) {
      return binaryFn(ZERO, token.fn, unary());
    } else if ((token = expect('!'))) {
      return unaryFn(token.fn, unary());
    } else {
      return primary();
    }
  }


  function primary() {
    var primary;
    if (expect('(')) {
      primary = filterChain();
      consume(')');
    } else if (expect('[')) {
      primary = arrayDeclaration();
    } else if (expect('{')) {
      primary = object();
    } else {
      var token = expect();
      primary = token.fn;
      if (!primary) {
        throwError("not a primary expression", token);
      }
      if (token.json) {
        primary.constant = primary.literal = true;
      }
    }

    var next, context;
    while ((next = expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = functionCall(primary, context);
        context = null;
      } else if (next.text === '[') {
        context = primary;
        primary = objectIndex(primary);
      } else if (next.text === '.') {
        context = primary;
        primary = fieldAccess(primary);
      } else {
        throwError("IMPOSSIBLE");
      }
    }
    return primary;
  }

  function _fieldAccess(object) {
    var field = expect().text;
    var getter = getterFn(field, csp, text);
    return extend(
        function(scope, locals, self) {
          return getter(self || object(scope, locals), locals);
        },
        {
          assign:function(scope, value, locals) {
            return setter(object(scope, locals), field, value, text);
          }
        }
    );
  }

  function _objectIndex(obj) {
    var indexFn = expression();
    consume(']');
    return extend(
      function(self, locals){
        var o = obj(self, locals),
            i = indexFn(self, locals),
            v, p;

        if (!o) return undefined;
        v = ensureSafeObject(o[i], text);
        if (v && v.then) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function(val) { p.$$v = val; });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign:function(self, value, locals){
          var key = indexFn(self, locals);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          return ensureSafeObject(obj(self, locals), text)[key] = value;
        }
      });
  }

  function _functionCall(fn, contextGetter) {
    var argsFn = [];
    if (peekToken().text != ')') {
      do {
        argsFn.push(expression());
      } while (expect(','));
    }
    consume(')');
    return function(scope, locals){
      var args = [],
          context = contextGetter ? contextGetter(scope, locals) : scope;

      for ( var i = 0; i < argsFn.length; i++) {
        args.push(argsFn[i](scope, locals));
      }
      var fnPtr = fn(scope, locals, context) || noop;
      // IE stupidity!
      var v = fnPtr.apply
          ? fnPtr.apply(context, args)
          : fnPtr(args[0], args[1], args[2], args[3], args[4]);

      // Check for promise
      if (v && v.then) {
        var p = v;
        if (!('$$v' in v)) {
          p.$$v = undefined;
          p.then(function(val) { p.$$v = val; });
        }
        v = v.$$v;
      }

      return v;
    };
  }

  // This is used with json array declaration
  function arrayDeclaration () {
    var elementFns = [];
    var allConstant = true;
    if (peekToken().text != ']') {
      do {
        var elementFn = expression();
        elementFns.push(elementFn);
        if (!elementFn.constant) {
          allConstant = false;
        }
      } while (expect(','));
    }
    consume(']');
    return extend(function(self, locals){
      var array = [];
      for ( var i = 0; i < elementFns.length; i++) {
        array.push(elementFns[i](self, locals));
      }
      return array;
    }, {
      literal:true,
      constant:allConstant
    });
  }

  function object () {
    var keyValues = [];
    var allConstant = true;
    if (peekToken().text != '}') {
      do {
        var token = expect(),
        key = token.string || token.text;
        consume(":");
        var value = expression();
        keyValues.push({key:key, value:value});
        if (!value.constant) {
          allConstant = false;
        }
      } while (expect(','));
    }
    consume('}');
    return extend(function(self, locals){
      var object = {};
      for ( var i = 0; i < keyValues.length; i++) {
        var keyValue = keyValues[i];
        object[keyValue.key] = keyValue.value(self, locals);
      }
      return object;
    }, {
      literal:true,
      constant:allConstant
    });
  }
}

//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, path, setValue, fullExp) {
  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = obj[key];
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = propertyObj;
    if (obj.then) {
      if (!("$$v" in obj)) {
        (function(promise) {
          promise.then(function(val) { promise.$$v = val; }); }
        )(obj);
      }
      if (obj.$$v === undefined) {
        obj.$$v = {};
      }
      obj = obj.$$v;
    }
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCache = {};

/**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);
  ensureSafeMemberName(key2, fullExp);
  ensureSafeMemberName(key3, fullExp);
  ensureSafeMemberName(key4, fullExp);
  return function(scope, locals) {
    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
        promise;

    if (pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key0];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key1 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key1];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key2 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key2];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key3 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key3];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key4 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key4];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    return pathVal;
  };
}

function getterFn(path, csp, fullExp) {
  if (getterFnCache.hasOwnProperty(path)) {
    return getterFnCache[path];
  }

  var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length,
      fn;

  if (csp) {
    fn = (pathKeysLength < 6)
        ? cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp)
        : function(scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(
                    pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp
                  )(scope, locals);

            locals = undefined; // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        }
  } else {
    var code = 'var l, fn, p;\n';
    forEach(pathKeys, function(key, index) {
      ensureSafeMemberName(key, fullExp);
      code += 'if(s === null || s === undefined) return s;\n' +
              'l=s;\n' +
              's='+ (index
                      // we simply dereference 's' on any .dot notation
                      ? 's'
                      // but if we are first then we check locals first, and if so read it first
                      : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' +
              'if (s && s.then) {\n' +
                ' if (!("$$v" in s)) {\n' +
                  ' p=s;\n' +
                  ' p.$$v = undefined;\n' +
                  ' p.then(function(v) {p.$$v=v;});\n' +
                  '}\n' +
                ' s=s.$$v\n' +
              '}\n';
    });
    code += 'return s;';
    fn = Function('s', 'k', code); // s=scope, k=locals
    fn.toString = function() { return code; };
  }

  return getterFnCache[path] = fn;
}

///////////////////////////////////

/**
 * @ngdoc function
 * @name ng.$parse
 * @function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * <pre>
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * </pre>
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` â€“ `{boolean}` â€“ whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` â€“ `{boolean}` â€“ whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` â€“ `{?function(context, value)}` â€“ if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */
function $ParseProvider() {
  var cache = {};
  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {
    return function(exp) {
      switch(typeof exp) {
        case 'string':
          return cache.hasOwnProperty(exp)
            ? cache[exp]
            : cache[exp] =  parser(exp, false, $filter, $sniffer.csp);
        case 'function':
          return exp;
        default:
          return noop;
      }
    };
  }];
}

/**
 * @ngdoc service
 * @name ng.$q
 * @requires $rootScope
 *
 * @description
 * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * <pre>
 *   // for the purpose of this example let's assume that variables `$q` and `scope` are
 *   // available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       // since this fn executes async in a future turn of the event loop, we need to wrap
 *       // our code into an $apply call so that the model changes are properly observed.
 *       scope.$apply(function() {
 *         deferred.notify('About to greet ' + name + '.');
 *
 *         if (okToGreet(name)) {
 *           deferred.resolve('Hello, ' + name + '!');
 *         } else {
 *           deferred.reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       });
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * </pre>
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of
 * [guarantees that promise and deferred APIs make](https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md).
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` â€“ resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` â€“ rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promises execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise â€“ `{Promise}` â€“ promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` â€“ regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the `notifyCallback`
 *   method. The promise can not be resolved or rejected from the notifyCallback method.
 *
 * - `catch(errorCallback)` â€“ shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback)` â€“ allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
 *   make your code IE8 compatible.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily possible
 * to create a chain of promises:
 *
 * <pre>
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * </pre>
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are three main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - $q promises are recognized by the templating engine in angular, which means that in templates
 *   you can treat promises attached to a scope as if they were the resulting values.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  <pre>
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    });
 *  </pre>
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}


/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {

  /**
   * @ngdoc
   * @name ng.$q#defer
   * @methodOf ng.$q
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    var pending = [],
        value, deferred;

    deferred = {

      resolve: function(val) {
        if (pending) {
          var callbacks = pending;
          pending = undefined;
          value = ref(val);

          if (callbacks.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                value.then(callback[0], callback[1], callback[2]);
              }
            });
          }
        }
      },


      reject: function(reason) {
        deferred.resolve(reject(reason));
      },


      notify: function(progress) {
        if (pending) {
          var callbacks = pending;

          if (pending.length) {
            nextTick(function() {
              var callback;
              for (var i = 0, ii = callbacks.length; i < ii; i++) {
                callback = callbacks[i];
                callback[2](progress);
              }
            });
          }
        }
      },


      promise: {
        then: function(callback, errback, progressback) {
          var result = defer();

          var wrappedCallback = function(value) {
            try {
              result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedErrback = function(reason) {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch(e) {
              result.reject(e);
              exceptionHandler(e);
            }
          };

          var wrappedProgressback = function(progress) {
            try {
              result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
            } catch(e) {
              exceptionHandler(e);
            }
          };

          if (pending) {
            pending.push([wrappedCallback, wrappedErrback, wrappedProgressback]);
          } else {
            value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
          }

          return result.promise;
        },

        "catch": function(callback) {
          return this.then(null, callback);
        },

        "finally": function(callback) {

          function makePromise(value, resolved) {
            var result = defer();
            if (resolved) {
              result.resolve(value);
            } else {
              result.reject(value);
            }
            return result.promise;
          }

          function handleCallback(value, isResolved) {
            var callbackOutput = null;
            try {
              callbackOutput = (callback ||defaultCallback)();
            } catch(e) {
              return makePromise(e, false);
            }
            if (callbackOutput && isFunction(callbackOutput.then)) {
              return callbackOutput.then(function() {
                return makePromise(value, isResolved);
              }, function(error) {
                return makePromise(error, false);
              });
            } else {
              return makePromise(value, isResolved);
            }
          }

          return this.then(function(value) {
            return handleCallback(value, true);
          }, function(error) {
            return handleCallback(error, false);
          });
        }
      }
    };

    return deferred;
  };


  var ref = function(value) {
    if (value && isFunction(value.then)) return value;
    return {
      then: function(callback) {
        var result = defer();
        nextTick(function() {
          result.resolve(callback(value));
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc
   * @name ng.$q#reject
   * @methodOf ng.$q
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * <pre>
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * </pre>
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    return {
      then: function(callback, errback) {
        var result = defer();
        nextTick(function() {
          try {
            result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
          } catch(e) {
            result.reject(e);
            exceptionHandler(e);
          }
        });
        return result.promise;
      }
    };
  };


  /**
   * @ngdoc
   * @name ng.$q#when
   * @methodOf ng.$q
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var when = function(value, callback, errback, progressback) {
    var result = defer(),
        done;

    var wrappedCallback = function(value) {
      try {
        return (isFunction(callback) ? callback : defaultCallback)(value);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedErrback = function(reason) {
      try {
        return (isFunction(errback) ? errback : defaultErrback)(reason);
      } catch (e) {
        exceptionHandler(e);
        return reject(e);
      }
    };

    var wrappedProgressback = function(progress) {
      try {
        return (isFunction(progressback) ? progressback : defaultCallback)(progress);
      } catch (e) {
        exceptionHandler(e);
      }
    };

    nextTick(function() {
      ref(value).then(function(value) {
        if (done) return;
        done = true;
        result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
      }, function(reason) {
        if (done) return;
        done = true;
        result.resolve(wrappedErrback(reason));
      }, function(progress) {
        if (done) return;
        result.notify(wrappedProgressback(progress));
      });
    });

    return result.promise;
  };


  function defaultCallback(value) {
    return value;
  }


  function defaultErrback(reason) {
    return reject(reason);
  }


  /**
   * @ngdoc
   * @name ng.$q#all
   * @methodOf ng.$q
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash. If any of
   *   the promises is resolved with a rejection, this resulting promise will be resolved with the
   *   same rejection.
   */
  function all(promises) {
    var deferred = defer(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      ref(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  return {
    defer: defer,
    reject: reject,
    when: when,
    all: all
  };
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (shift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc object
 * @name ng.$rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc function
 * @name ng.$rootScopeProvider#digestTtl
 * @methodOf ng.$rootScopeProvider
 * @description
 *
 * Sets the number of digest iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc object
 * @name ng.$rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are child scopes of the root scope. Scopes provide mechanism for watching the model and provide
 * event processing life-cycle. See {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider(){
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function( $injector,   $exceptionHandler,   $parse,   $browser) {

    /**
     * @ngdoc function
     * @name ng.$rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link AUTO.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * <pre>
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * </pre>
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * <pre>
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * </pre>
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be provided
     *     for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *     append/override services provided by `providers`. This is handy when unit-testing and having
     *     the need to override a default service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this['this'] = this.$root =  this;
      this.$$destroyed = false;
      this.$$asyncQueue = [];
      this.$$postDigestQueue = [];
      this.$$listeners = {};
      this.$$isolateBindings = {};
    }

    /**
     * @ngdoc property
     * @name ng.$rootScope.Scope#$id
     * @propertyOf ng.$rootScope.Scope
     * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for
     *   debugging.
     */


    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$new
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and
       * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the scope
       * hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is desired for
       * the scope and its child scopes to be permanently detached from the parent and thus stop
       * participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate if true then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate) {
        var Child,
            child;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
          // ensure that there is just one async queue per $rootScope and it's children
          child.$$asyncQueue = this.$$asyncQueue;
          child.$$postDigestQueue = this.$$postDigestQueue;
        } else {
          Child = function() {}; // should be anonymous; This is so that when the minifier munges
            // the name it does not become random set of chars. These will then show up as class
            // name in the debugger.
          Child.prototype = this;
          child = new Child();
          child.$id = nextUid();
        }
        child['this'] = child;
        child.$$listeners = {};
        child.$parent = this;
        child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null;
        child.$$prevSibling = this.$$childTail;
        if (this.$$childHead) {
          this.$$childTail.$$nextSibling = child;
          this.$$childTail = child;
        } else {
          this.$$childHead = this.$$childTail = child;
        }
        return child;
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$watch
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest $digest()} and
       *   should return the value which will be watched. (Since {@link ng.$rootScope.Scope#$digest $digest()}
       *   reruns when it detects changes the `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). The inequality is determined according to
       *   {@link angular.equals} function. To save the value of the object for later comparison, the
       *   {@link angular.copy} function is used. It also means that watching complex options will
       *   have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire. This
       *   is achieved by rerunning the watchers until no changes are detected. The rerun iteration
       *   limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a change is
       * detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       * # Example
       * <pre>
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) { scope.counter = scope.counter + 1; });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // no variable change
           expect(scope.counter).toEqual(0);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(1);
       * </pre>
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers a
       *    call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {(function()|string)=} listener Callback called whenever the return value of
       *   the `watchExpression` changes.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(newValue, oldValue, scope)`: called with current and previous values as parameters.
       *
       * @param {boolean=} objectEquality Compare object for equality rather than for reference.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality) {
        var scope = this,
            get = compileToFn(watchExp, 'watch'),
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: watchExp,
              eq: !!objectEquality
            };

        // in the case user pass string, we need to compile it, do we really need this ?
        if (!isFunction(listener)) {
          var listenFn = compileToFn(listener || noop, 'listener');
          watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};
        }

        if (typeof watchExp == 'string' && get.constant) {
          var originalFn = watcher.fn;
          watcher.fn = function(newVal, oldVal, scope) {
            originalFn.call(this, newVal, oldVal, scope);
            arrayRemove(array, watcher);
          };
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);

        return function() {
          arrayRemove(array, watcher);
        };
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$watchCollection
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays this implies watching the array items, for object maps this implies watching the properties).
       * If a change is detected the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every call to $digest() to
       *   see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include adding new items
       *   into the object or array, removing and moving items around.
       *
       *
       * # Example
       * <pre>
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * </pre>
       *
       *
       * @param {string|Function(scope)} obj Evaluated as {@link guide/expression expression}. The expression value
       *    should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the collection will trigger
       *    a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function that is fired with both
       *    the `newCollection` and `oldCollection` as parameters.
       *    The `newCollection` object is the newly modified data obtained from the `obj` expression and the
       *    `oldCollection` object is a copy of the former collection data.
       *    The `scope` refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the de-registration function is executed
       * then the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        var self = this;
        var oldValue;
        var newValue;
        var changeDetected = 0;
        var objGetter = $parse(obj);
        var internalArray = [];
        var internalObject = {};
        var oldLength = 0;

        function $watchCollectionWatch() {
          newValue = objGetter(self);
          var newLength, key;

          if (!isObject(newValue)) {
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              if (oldValue[i] !== newValue[i]) {
                changeDetected++;
                oldValue[i] = newValue[i];
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                if (oldValue.hasOwnProperty(key)) {
                  if (oldValue[key] !== newValue[key]) {
                    changeDetected++;
                    oldValue[key] = newValue[key];
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newValue[key];
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for(key in oldValue) {
                if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          listener(newValue, oldValue, self);
        }

        return this.$watch($watchCollectionWatch, $watchCollectionAction);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$digest
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and its children.
       * Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change the model, the
       * `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers} until no more listeners are
       * firing. This means that it is possible to get into an infinite loop. This function will throw
       * `'Maximum iteration limit exceeded.'` if the number of iterations exceeds 10.
       *
       * Usually you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead a call to {@link ng.$rootScope.Scope#$apply $apply()} (typically from within a
       * {@link ng.$compileProvider#directive directives}) will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function  with {@link ng.$rootScope.Scope#$watch $watch()}
       * with no `listener`.
       *
       * You may have a need to call `$digest()` from within unit-tests, to simulate the scope
       * life-cycle.
       *
       * # Example
       * <pre>
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // no variable change
           expect(scope.counter).toEqual(0);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(1);
       * </pre>
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            asyncQueue = this.$$asyncQueue,
            postDigestQueue = this.$$postDigestQueue,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg;

        beginPhase('$digest');

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while(asyncQueue.length) {
            try {
              current.$eval(asyncQueue.shift());
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch && (value = watch.get(current)) !== (last = watch.last) &&
                      !(watch.eq
                          ? equals(value, last)
                          : (typeof value == 'number' && typeof last == 'number'
                             && isNaN(value) && isNaN(last)))) {
                    dirty = true;
                    watch.last = watch.eq ? copy(value) : value;
                    watch.fn(value, ((last === initWatchVal) ? value : last), current);
                    if (ttl < 5) {
                      logIdx = 4 - ttl;
                      if (!watchLog[logIdx]) watchLog[logIdx] = [];
                      logMsg = (isFunction(watch.exp))
                          ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                          : watch.exp;
                      logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                      watchLog[logIdx].push(logMsg);
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {
              while(current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          if(dirty && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}',
                TTL, toJson(watchLog));
          }
        } while (dirty || asyncQueue.length);

        clearPhase();

        while(postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name ng.$rootScope.Scope#$destroy
       * @eventOf ng.$rootScope.Scope
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$destroy
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if ($rootScope == this || this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;

        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // This is bogus code that works around Chrome's GC leak
        // see: https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = null;
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$eval
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Executes the `expression` on the current scope returning the result. Any exceptions in the
       * expression are propagated (uncaught). This is useful when evaluating Angular expressions.
       *
       * # Example
       * <pre>
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * </pre>
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$evalAsync
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only that:
       *
       *   - it will execute after the function that schedule the evaluation is done running (preferably before DOM rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of `$digest` cycle, a new $digest cycle will be scheduled.
       * It is however encouraged to always call code that changes the model from withing an `$apply` call.
       * That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       */
      $evalAsync: function(expr) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async task also schedule
        // async auto-flush
        if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
          $browser.defer(function() {
            if ($rootScope.$$asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        this.$$asyncQueue.push(expr);
      },

      $$postDigest : function(expr) {
        this.$$postDigestQueue.push(expr);
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$apply
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular framework.
       * (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life-cycle
       * of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * <pre>
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * </pre>
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the expression
       *    was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$on
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for discussion of
       * event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the current scope which is handling the event.
       *   - `name` - `{string}`: Name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel further event
       *     propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, args...)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        return function() {
          namedListeners[indexOf(namedListeners, listener)] = null;
        };
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$emit
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.
       * Afterwards, the event traverses upwards toward the root scope and calls all registered
       * listeners along the way. The event will stop propagating if one of the listeners cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i=0, length=namedListeners.length; i<length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              namedListeners[i].apply(null, listenerArgs);
              if (stopPropagation) return event;
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        return event;
      },


      /**
       * @ngdoc function
       * @name ng.$rootScope.Scope#$broadcast
       * @methodOf ng.$rootScope.Scope
       * @function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.
       * Afterwards, the event propagates to all direct and indirect scopes of the current scope and
       * calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        do {
          current = next;
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i=0, length = listeners.length; i<length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch(e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {
            while(current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        } while ((current = next));

        return event;
      }
    };

    var $rootScope = new Scope();

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function compileToFn(exp, name) {
      var fn = $parse(exp);
      assertArgFn(fn, name);
      return fn;
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}
  }];
}

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};


/**
 * @ngdoc service
 * @name ng.$sceDelegate
 * @function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc object
 * @name ng.$sceDelegateProvider
 * @description
 *
 * The $sceDelegateProvider provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc function
   * @name ng.sceDelegateProvider#resourceUrlWhitelist
   * @methodOf ng.$sceDelegateProvider
   * @function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array.
   *
   *     Each element of this array must either be a regex or the special string `'self'`.
   *
   *     When a regex is used, it is matched against the normalized / absolute URL of the resource
   *     being tested.
   *
   *     The **special string** `'self'` can be used to match against all URLs of the same domain as the
   *     application document with the same protocol (allows sourcing https resources from http documents.)
   *
   *     Please note that **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']`.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function (value) {
    if (arguments.length) {
      resourceUrlWhitelist = value;
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc function
   * @name ng.sceDelegateProvider#resourceUrlBlacklist
   * @methodOf ng.$sceDelegateProvider
   * @function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array.
   *
   *     Each element of this array must either be a regex or the special string `'self'` (see
   *     `resourceUrlWhitelist` for meaning - it's only really useful there.)
   *
   *     When a regex is used, it is matched against the normalized / absolute URL of the resource
   *     being tested.
   *
   *     The typical usage for the blacklist is to **block [open redirects](http://cwe.mitre.org/data/definitions/601.html)**
   *     served by your domain as these would otherwise be trusted but actually return content from the redirected
   *     domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there is
   * no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function (value) {
    if (arguments.length) {
      resourceUrlBlacklist = value;
    }
    return resourceUrlBlacklist;
  };

  // Helper functions for matching resource urls by policy.
  function isCompatibleProtocol(documentProtocol, resourceProtocol) {
    return ((documentProtocol === resourceProtocol) ||
            (documentProtocol === "http:" && resourceProtocol === "https:"));
  }

  this.$get = ['$log', '$document', '$injector', '$$urlUtils', function(
                $log,   $document,   $injector,   $$urlUtils) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return $$urlUtils.isSameOrigin(parsedUrl);
      } else {
        return !!parsedUrl.href.match(matcher);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = $$urlUtils.resolve(url.toString(), true);
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (base) {
        holderType.prototype = new base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      }
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      }
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#trustAs
     * @methodOf ng.$sceDelegate
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-html-bind-unsafe, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!constructor) {
        throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#valueOf
     * @methodOf ng.$sceDelegate
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns `value`
     *     unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name ng.$sceDelegate#getTrusted
     * @methodOf ng.$sceDelegate
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.  If
     * this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc object
 * @name ng.$sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/**
 * @ngdoc service
 * @name ng.$sce
 * @function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context One example of such
 * a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer to these
 * contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * <pre class="prettyprint">
 *     <input ng-model="userHtml">
 *     <div ng-bind-html="{{userHtml}}">
 * </pre>
 *
 * Notice that `ng-bind-html` is bound to `{{userHtml}}` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs} (and shorthand
 * methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to obtain values that will be
 * accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * <pre class="prettyprint">
 *   var ngBindHtmlDirective = ['$sce', function($sce) {
 *     return function(scope, element, attr) {
 *       scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *         element.html(value || '');
 *       });
 *     };
 *   }];
 * </pre>
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * {@link https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest
 * Same Origin Policy} and {@link http://www.w3.org/TR/cors/ Cross-Origin Resource Sharing (CORS)}
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead for the developer?
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them.  (e.g.
 * `<div ng-html-bind-unsafe="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * ## What trusted context types are supported?<a name="contexts"></a>
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't consititute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contens are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Show me an example.
 *
 *
 *
 * @example
 <example module="mySceApp">
  <file name="index.html">
    <div ng-controller="myAppController as myCtrl">
      <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
      <b>User comments</b><br>
      By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when $sanitize is available.  If $sanitize isn't available, this results in an error instead of an exploit.
      <div class="well">
        <div ng-repeat="userComment in myCtrl.userComments">
          <b>{{userComment.name}}</b>:
          <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
          <br>
        </div>
      </div>
    </div>
  </file>

  <file name="script.js">
    var mySceApp = angular.module('mySceApp', ['ngSanitize']);

    mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
      var self = this;
      $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
        self.userComments = userComments;
      });
      self.explicitlyTrustedHtml = $sce.trustAsHtml(
          '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
          'sanitization.&quot;">Hover over this text.</span>');
    });
  </file>

  <file name="test_data.json">
    [
      { "name": "Alice",
        "htmlComment": "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
      },
      { "name": "Bob",
        "htmlComment": "<i>Yes!</i>  Am I the only other one?"
      }
    ]
  </file>

  <file name="scenario.js">
    describe('SCE doc demo', function() {
      it('should sanitize untrusted values', function() {
        expect(element('.htmlComment').html()).toBe('<span>Is <i>anyone</i> reading this?</span>');
      });
      it('should NOT sanitize explicitly trusted values', function() {
        expect(element('#explicitlyTrustedHtml').html()).toBe(
            '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
            'sanitization.&quot;">Hover over this text.</span>');
      });
    });
  </file>
 </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * <pre class="prettyprint">
 *   angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *     // Completely disable SCE.  For demonstration purposes only!
 *     // Do not use in new projects.
 *     $sceProvider.enabled(false);
 *   });
 * </pre>
 *
 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc function
   * @name ng.sceProvider#enabled
   * @methodOf ng.$sceProvider
   * @function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function (value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be opaque
   * or wrapped in some holder object.  That happens to be an implementation detail.  For instance,
   * an implementation could maintain a registry of all trusted objects by context.  In such a case,
   * trustAs() would return the same object that was passed in.  getTrusted() would return the same
   * object passed in if it was found in the registry under a compatible context or throw an
   * exception otherwise.  An implementation might only wrap values some of the time based on
   * some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$document', '$sceDelegate', function(
                $parse,   $document,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie) {
      var documentMode = $document[0].documentMode;
      if (documentMode !== undefined && documentMode < 8) {
        throw $sceMinErr('iequirks',
          'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' +
          'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
          'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
      }
    }

    var sce = copy(SCE_CONTEXTS);

    /**
     * @ngdoc function
     * @name ng.sce#isEnabled
     * @methodOf ng.$sce
     * @function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function () {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; },
      sce.valueOf = identity
    }

    /**
     * @ngdoc method
     * @name ng.$sce#parse
     * @methodOf ng.$sce
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return function sceParseAsTrusted(self, locals) {
          return sce.getTrusted(type, parsed(self, locals));
        }
      }
    };

    /**
     * @ngdoc method
     * @name ng.$sce#trustAs
     * @methodOf ng.$sce
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such, returns an object
     * that is trusted by angular for use in specified strict contextual escaping contexts (such as
     * ng-html-bind-unsafe, ng-include, any src attribute interpolation, any dom event binding
     * attribute interpolation such as for onclick,  etc.) that uses the provided value.  See *
     * {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` â†’ {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` â†’ {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` â†’ {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#trustAsJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` â†’ {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrusted
     * @methodOf ng.$sce
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such, takes
     * the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the originally supplied
     * value if the queried context type is a supertype of the created type.  If this condition
     * isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sce#trustAs `$sce.trustAs`} if
     *     valid in this context.  Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` â†’ {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedCss
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` â†’ {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` â†’ {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` â†’ {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#getTrustedJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` â†’ {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsHtml
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` â†’ {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsCss
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` â†’ {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` â†’ {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsResourceUrl
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` â†’ {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name ng.$sce#parseAsJs
     * @methodOf ng.$sce
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` â†’ {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` â€“ `{object}` â€“ an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` â€“ `{object=}` â€“ local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    angular.forEach(SCE_CONTEXTS, function (enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function (expr) {
        return parse(enumValue, expr);
      }
      sce[camelCase("get_trusted_" + lName)] = function (value) {
        return getTrusted(enumValue, value);
      }
      sce[camelCase("trust_as_" + lName)] = function (value) {
        return trustAs(enumValue, value);
      }
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name ng.$sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} hashchange Does the browser support hashchange event ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for(var prop in bodyStyle) {
        if(match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if(!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions||!animations)) {
        transitions = isString(document.body.style.webkitTransition);
        animations = isString(document.body.style.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      hashchange: 'onhashchange' in $window &&
                  // IE8 compatible mode lies
                  (!document.documentMode || document.documentMode > 7),
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        if (event == 'input' && msie == 9) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: document.securityPolicy ? document.securityPolicy.isActive : false,
      vendorPrefix: vendorPrefix,
      transitions : transitions,
      animations : animations
    };
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $exceptionHandler) {
    var deferreds = {};


     /**
      * @ngdoc function
      * @name ng.$timeout
      * @requires $browser
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      */
    function timeout(fn, delay, invokeApply) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch(e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc function
      * @name ng.$timeout#cancel
      * @methodOf ng.$timeout
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

function $$UrlUtilsProvider() {
  this.$get = [function() {
    var urlParsingNode = document.createElement("a"),
        // NOTE:  The usage of window and document instead of $window and $document here is
        // deliberate.  This service depends on the specific behavior of anchor nodes created by the
        // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
        // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
        // doesn't know about mocked locations and resolves URLs to the real document - which is
        // exactly the behavior needed here.  There is little value is mocking these our for this
        // service.
        originUrl = resolve(window.location.href, true);

    /**
     * @description
     * Normalizes and optionally parses a URL.
     *
     * NOTE:  This is a private service.  The API is subject to change unpredictably in any commit.
     *
     * Implementation Notes for non-IE browsers
     * ----------------------------------------
     * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
     * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
     * URL will be resolved into an absolute URL in the context of the application document.
     * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
     * properties are all populated to reflect the normalized URL.  This approach has wide
     * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
     * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *
     * Implementation Notes for IE
     * ---------------------------
     * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
     * browsers.  However, the parsed components will not be set if the URL assigned did not specify
     * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
     * work around that by performing the parsing in a 2nd step by taking a previously normalized
     * URL (e.g. by assining to a.href) and assigning it a.href again.  This correctly populates the
     * properties such as protocol, hostname, port, etc.
     *
     * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
     * uses the inner HTML approach to assign the URL as part of an HTML snippet -
     * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
     * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
     * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
     * method and IE < 8 is unsupported.
     *
     * References:
     *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
     *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
     *   http://url.spec.whatwg.org/#urlutils
     *   https://github.com/angular/angular.js/pull/2902
     *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
     *
     * @param {string} url The URL to be parsed.
     * @param {boolean=} parse When true, returns an object for the parsed URL.  Otherwise, returns
     *   a single string that is the normalized URL.
     * @returns {object|string} When parse is true, returns the normalized URL as a string.
     * Otherwise, returns an object with the following members.
     *
     *   | member name   | Description    |
     *   |---------------|----------------|
     *   | href          | A normalized version of the provided URL if it was not an absolute URL |
     *   | protocol      | The protocol including the trailing colon                              |
     *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
     *
     * These fields from the UrlUtils interface are currently not needed and hence not returned.
     *
     *   | member name   | Description    |
     *   |---------------|----------------|
     *   | hostname      | The host without the port of the normalizedUrl                         |
     *   | pathname      | The path following the host in the normalizedUrl                       |
     *   | hash          | The URL hash if present                                                |
     *   | search        | The query string                                                       |
     *
     */
    function resolve(url, parse) {
      var href = url;
      if (msie <= 11) {
        // Normalize before parse.  Refer Implementation Notes on why this is
        // done in two steps on IE.
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute('href', href);

      if (!parse) {
        return urlParsingNode.href;
      }
      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol,
        host: urlParsingNode.host
        // Currently unused and hence commented out.
        // hostname: urlParsingNode.hostname,
        // port: urlParsingNode.port,
        // pathname: urlParsingNode.pathname,
        // hash: urlParsingNode.hash,
        // search: urlParsingNode.search
      };
    }

    return {
      resolve: resolve,
      /**
       * Parse a request URL and determine whether this is a same-origin request as the application document.
       *
       * @param {string|object} requestUrl The url of the request as a string that will be resolved
       * or a parsed URL object.
       * @returns {boolean} Whether the request is for the same origin as the application document.
       */
      isSameOrigin: function isSameOrigin(requestUrl) {
        var parsed = (typeof requestUrl === 'string') ? resolve(requestUrl, true) : requestUrl;
        return (parsed.protocol === originUrl.protocol &&
                parsed.host === originUrl.host);
      }
    };
  }];
}

/**
 * @ngdoc object
 * @name ng.$window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope, $window) {
           $scope.$window = $window;
           $scope.greeting = 'Hello, World!';
         }
       </script>
       <div ng-controller="Ctrl">
         <input type="text" ng-model="greeting" />
         <button ng-click="$window.alert(greeting)">ALERT</button>
       </div>
     </doc:source>
     <doc:scenario>
      it('should display the greeting in the input box', function() {
       input('greeting').enter('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </doc:scenario>
   </doc:example>
 */
function $WindowProvider(){
  this.$get = valueFn(window);
}

/**
 * @ngdoc object
 * @name ng.$filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To
 * achieve this a filter definition consists of a factory function which is annotated with dependencies and is
 * responsible for creating a filter function.
 *
 * <pre>
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * </pre>
 *
 * The filter function is registered with the `$injector` under the filter name suffix with `Filter`.
 * <pre>
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * </pre>
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/dev_guide.templates.filters Understanding Angular Filters} in the angular Developer
 * Guide.
 */
/**
 * @ngdoc method
 * @name ng.$filterProvider#register
 * @methodOf ng.$filterProvider
 * @description
 * Register filter factory function.
 *
 * @param {String} name Name of the filter.
 * @param {function} fn The filter factory function which is injectable.
 */


/**
 * @ngdoc function
 * @name ng.$filter
 * @function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  function register(name, factory) {
    return $provide.factory(name + suffix, factory);
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    }
  }];

  ////////////////////////////////////////

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name ng.filter:filter
 * @function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * Note: This function is used to augment the `Array` type in Angular expressions. See
 * {@link ng.$filter} for more information about Angular arrays.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: Predicate that results in a substring match using the value of `expression`
 *     string. All strings or objects with string properties in `array` that contain this string
 *     will be returned. The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object. That's equivalent to the simple substring match with a `string`
 *     as described above.
 *
 *   - `function`: A predicate function can be used to write arbitrary filters. The function is
 *     called for each element of `array`. The final result is an array of those elements that
 *     the predicate returned true for.
 *
 * @param {function(expected, actual)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *     - `function(expected, actual)`:
 *       The function will be given the object value and the predicate value to compare and
 *       should return true if the item should be included in filtered result.
 *
 *     - `true`: A shorthand for `function(expected, actual) { return angular.equals(expected, actual)}`.
 *       this is essentially strict comparison of expected and actual.
 *
 *     - `false|undefined`: A short hand for a function which will look for a substring match in case
 *       insensitive way.
 *
 * @example
   <doc:example>
     <doc:source>
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:search:strict">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
     </doc:source>
     <doc:scenario>
       it('should search across all fields when filtering with a string', function() {
         input('searchText').enter('m');
         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Mike', 'Adam']);

         input('searchText').enter('76');
         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).
           toEqual(['John', 'Julie']);
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         input('search.$').enter('i');
         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Mike', 'Julie', 'Juliette']);
       });
       it('should use a equal comparison when comparator is true', function() {
         input('search.name').enter('Julie');
         input('strict').check();
         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).
           toEqual(['Julie']);
       });
     </doc:scenario>
   </doc:example>
 */
function filterFilter() {
  return function(array, expression, comperator) {
    if (!isArray(array)) return array;
    var predicates = [];
    predicates.check = function(value) {
      for (var j = 0; j < predicates.length; j++) {
        if(!predicates[j](value)) {
          return false;
        }
      }
      return true;
    };
    switch(typeof comperator) {
      case "function":
        break;
      case "boolean":
        if(comperator == true) {
          comperator = function(obj, text) {
            return angular.equals(obj, text);
          }
          break;
        }
      default:
        comperator = function(obj, text) {
          text = (''+text).toLowerCase();
          return (''+obj).toLowerCase().indexOf(text) > -1
        };
    }
    var search = function(obj, text){
      if (typeof text == 'string' && text.charAt(0) === '!') {
        return !search(obj, text.substr(1));
      }
      switch (typeof obj) {
        case "boolean":
        case "number":
        case "string":
          return comperator(obj, text);
        case "object":
          switch (typeof text) {
            case "object":
              return comperator(obj, text);
              break;
            default:
              for ( var objKey in obj) {
                if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                  return true;
                }
              }
              break;
          }
          return false;
        case "array":
          for ( var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
      }
    };
    switch (typeof expression) {
      case "boolean":
      case "number":
      case "string":
        expression = {$:expression};
      case "object":
        for (var key in expression) {
          if (key == '$') {
            (function() {
              if (!expression[key]) return;
              var path = key
              predicates.push(function(value) {
                return search(value, expression[path]);
              });
            })();
          } else {
            (function() {
              if (typeof(expression[key]) == 'undefined') { return; }
              var path = key;
              predicates.push(function(value) {
                return search(getter(value,path), expression[path]);
              });
            })();
          }
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
    }
    var filtered = [];
    for ( var j = 0; j < array.length; j++) {
      var value = array[j];
      if (predicates.check(value)) {
        filtered.push(value);
      }
    }
    return filtered;
  }
}

/**
 * @ngdoc filter
 * @name ng.filter:currency
 * @function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @returns {string} Formatted number.
 *
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.amount = 1234.56;
         }
       </script>
       <div ng-controller="Ctrl">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): {{amount | currency}}<br>
         custom currency identifier (USD$): {{amount | currency:"USD$"}}
       </div>
     </doc:source>
     <doc:scenario>
       it('should init with 1234.56', function() {
         expect(binding('amount | currency')).toBe('$1,234.56');
         expect(binding('amount | currency:"USD$"')).toBe('USD$1,234.56');
       });
       it('should update', function() {
         input('amount').enter('-1234');
         expect(binding('amount | currency')).toBe('($1,234.00)');
         expect(binding('amount | currency:"USD$"')).toBe('(USD$1,234.00)');
       });
     </doc:scenario>
   </doc:example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol){
    if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;
    return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).
                replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name ng.filter:number
 * @function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a â€œ,â€ after each third digit.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.val = 1234.56789;
         }
       </script>
       <div ng-controller="Ctrl">
         Enter number: <input ng-model='val'><br>
         Default formatting: {{val | number}}<br>
         No fractions: {{val | number:0}}<br>
         Negative number: {{-val | number:4}}
       </div>
     </doc:source>
     <doc:scenario>
       it('should format numbers', function() {
         expect(binding('val | number')).toBe('1,234.568');
         expect(binding('val | number:0')).toBe('1,235');
         expect(binding('-val | number:4')).toBe('-1,234.5679');
       });

       it('should update', function() {
         input('val').enter('3374.333');
         expect(binding('val | number')).toBe('3,374.333');
         expect(binding('val | number:0')).toBe('3,374');
         expect(binding('-val | number:4')).toBe('-3,374.3330');
       });
     </doc:scenario>
   </doc:example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {
    return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
      fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (isNaN(number) || !isFinite(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);
  var numStr = number + '',
      formatedText = '',
      parts = [];

  var hasExponent = false;
  if (numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      numStr = '0';
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    var pow = Math.pow(10, fractionSize);
    number = Math.round(number * pow) / pow;
    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (var i = 0; i < pos; i++) {
        if ((pos - i)%group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i)%lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while(fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {

    if (fractionSize > 0 && number > -1 && number < 1) {
      formatedText = number.toFixed(fractionSize);
    }
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre);
  parts.push(formatedText);
  parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while(num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset)
      value += offset;
    if (value === 0 && offset == -12 ) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date) {
  var zone = -1 * date.getTimezoneOffset();
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,
    NUMBER_STRING = /^\d+$/;

/**
 * @ngdoc filter
 * @name ng.filter:date
 * @function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in am/pm, padded (01-12)
 *   * `'h'`: Hour in am/pm, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: am/pm marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 pm)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
 *
 *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output single quote, use two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <doc:example>
     <doc:source>
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           {{1288323623006 | date:'medium'}}<br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          {{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}<br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          {{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}<br>
     </doc:source>
     <doc:scenario>
       it('should format date', function() {
         expect(binding("1288323623006 | date:'medium'")).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
       });
     </doc:scenario>
   </doc:example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = int(match[9] + match[10]);
        tzMin = int(match[9] + match[11]);
      }
      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
      var h = int(match[4]||0) - tzHour;
      var m = int(match[5]||0) - tzMin
      var s = int(match[6]||0);
      var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      if (NUMBER_STRING.test(date)) {
        date = int(date);
      } else {
        date = jsonStringToDate(date);
      }
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date)) {
      return date;
    }

    while(format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    forEach(parts, function(value){
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name ng.filter:json
 * @function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @returns {string} JSON string.
 *
 *
 * @example:
   <doc:example>
     <doc:source>
       <pre>{{ {'name':'value'} | json }}</pre>
     </doc:source>
     <doc:scenario>
       it('should jsonify filtered objects', function() {
         expect(binding("{'name':'value'}")).toMatch(/\{\n  "name": ?"value"\n}/);
       });
     </doc:scenario>
   </doc:example>
 *
 */
function jsonFilter() {
  return function(object) {
    return toJson(object, true);
  };
}


/**
 * @ngdoc filter
 * @name ng.filter:lowercase
 * @function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name ng.filter:uppercase
 * @function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc function
 * @name ng.filter:limitTo
 * @function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array or string, as specified by
 * the value and sign (positive or negative) of `limit`.
 *
 * Note: This function is used to augment the `Array` type in Angular expressions. See
 * {@link ng.$filter} for more information about Angular arrays.
 *
 * @param {Array|string} input Source array or string to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number 
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string 
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.numbers = [1,2,3,4,5,6,7,8,9];
           $scope.letters = "abcdefghi";
           $scope.numLimit = 3;
           $scope.letterLimit = 3;
         }
       </script>
       <div ng-controller="Ctrl">
         Limit {{numbers}} to: <input type="integer" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="integer" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
       </div>
     </doc:source>
     <doc:scenario>
       it('should limit the number array to first three items', function() {
         expect(element('.doc-example-live input[ng-model=numLimit]').val()).toBe('3');
         expect(element('.doc-example-live input[ng-model=letterLimit]').val()).toBe('3');
         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('abc');
       });

       it('should update the output when -3 is entered', function() {
         input('numLimit').enter(-3);
         input('letterLimit').enter(-3);
         expect(binding('numbers | limitTo:numLimit')).toEqual('[7,8,9]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('ghi');
       });

       it('should not exceed the maximum size of input array', function() {
         input('numLimit').enter(100);
         input('letterLimit').enter(100);
         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3,4,5,6,7,8,9]');
         expect(binding('letters | limitTo:letterLimit')).toEqual('abcdefghi');
       });
     </doc:scenario>
   </doc:example>
 */
function limitToFilter(){
  return function(input, limit) {
    if (!isArray(input) && !isString(input)) return input;
    
    limit = int(limit);

    if (isString(input)) {
      //NaN check on limit
      if (limit) {
        return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
      } else {
        return "";
      }
    }

    var out = [],
      i, n;

    // if abs(limit) exceeds maximum length, trim it
    if (limit > input.length)
      limit = input.length;
    else if (limit < -input.length)
      limit = -input.length;

    if (limit > 0) {
      i = 0;
      n = limit;
    } else {
      i = input.length + limit;
      n = input.length;
    }

    for (; i<n; i++) {
      out.push(input[i]);
    }

    return out;
  }
}

/**
 * @ngdoc function
 * @name ng.filter:orderBy
 * @function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate.
 *
 * Note: this function is used to augment the `Array` type in Angular expressions. See
 * {@link ng.$filter} for more information about Angular arrays.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'
 *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control
 *      ascending or descending sort order (for example, +name or -name).
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 * @param {boolean=} reverse Reverse the order the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}]
           $scope.predicate = '-age';
         }
       </script>
       <div ng-controller="Ctrl">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </doc:source>
     <doc:scenario>
       it('should be reverse ordered by aged', function() {
         expect(binding('predicate')).toBe('-age');
         expect(repeater('table.friend', 'friend in friends').column('friend.age')).
           toEqual(['35', '29', '21', '19', '10']);
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);
       });

       it('should reorder the table when user selects different predicate', function() {
         element('.doc-example-live a:contains("Name")').click();
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);
         expect(repeater('table.friend', 'friend in friends').column('friend.age')).
           toEqual(['35', '10', '29', '19', '21']);

         element('.doc-example-live a:contains("Phone")').click();
         expect(repeater('table.friend', 'friend in friends').column('friend.phone')).
           toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);
         expect(repeater('table.friend', 'friend in friends').column('friend.name')).
           toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);
       });
     </doc:scenario>
   </doc:example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse){
  return function(array, sortPredicate, reverseOrder) {
    if (!isArray(array)) return array;
    if (!sortPredicate) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];
    sortPredicate = map(sortPredicate, function(predicate){
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        get = $parse(predicate);
      }
      return reverseComparator(function(a,b){
        return compare(get(a),get(b));
      }, descending);
    });
    var arrayCopy = [];
    for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }
    return arrayCopy.sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2){
      for ( var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return toBoolean(descending)
          ? function(a,b){return comp(b,a);}
          : comp;
    }
    function compare(v1, v2){
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 == t2) {
        if (t1 == "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  }
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    }
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name ng.directive:a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of html A tag, so that the default action is prevented when href
 * attribute is empty.
 *
 * The reasoning for this change is to allow easy creation of action links with `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="model.$save()">Save</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {

    if (msie <= 8) {

      // turn <a href ng-click="..">link</a> into a stylable link in IE
      // but only if it doesn't have name attribute, in which case it's an anchor
      if (!attr.href && !attr.name) {
        attr.$set('href', '');
      }

      // add a comment node to anchors to workaround IE bug that causes element content to be reset
      // to new attribute content if attribute is updated with value containing @ and element also
      // contains value with @
      // see issue #1949
      element.append(document.createComment('IE fix'));
    }

    return function(scope, element) {
      element.on('click', function(event){
        // if we have no href url, then don't navigate anywhere.
        if (!element.attr('href')) {
          event.preventDefault();
        }
      });
    }
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngHref
 * @restrict A
 *
 * @description
 * Using Angular markup like {{hash}} in an href attribute makes
 * the page open to a wrong URL, if the user clicks that link before
 * angular has a chance to replace the {{hash}} with actual URL, the
 * link will be broken and will most likely return a 404 error.
 * The `ngHref` directive solves this problem.
 *
 * The buggy way to write it:
 * <pre>
 * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example uses `link` variable inside `href` attribute:
    <doc:example>
      <doc:source>
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </doc:source>
      <doc:scenario>
        it('should execute ng-click but not reload when href without value', function() {
          element('#link-1').click();
          expect(input('value').val()).toEqual('1');
          expect(element('#link-1').attr('href')).toBe("");
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element('#link-2').click();
          expect(input('value').val()).toEqual('2');
          expect(element('#link-2').attr('href')).toBe("");
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element('#link-3').attr('href')).toBe("/123");

          element('#link-3').click();
          expect(browser().window().path()).toEqual('/123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element('#link-4').click();
          expect(input('value').val()).toEqual('4');
          expect(element('#link-4').attr('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element('#link-5').click();
          expect(input('value').val()).toEqual('5');
          expect(element('#link-5').attr('href')).toBe(undefined);
        });

        it('should only change url when only ng-href', function() {
          input('value').enter('6');
          expect(element('#link-6').attr('href')).toBe('6');

          element('#link-6').click();
          expect(browser().location().url()).toEqual('/6');
        });
      </doc:scenario>
    </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngSrc
 * @restrict A
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * <pre>
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * </pre>
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngSrcset
 * @restrict A
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * <pre>
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * </pre>
 *
 * The correct way to write it:
 * <pre>
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * </pre>
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngDisabled
 * @restrict A
 *
 * @description
 *
 * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * <pre>
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * </pre>
 *
 * The HTML specs do not require browsers to preserve the special attributes such as disabled.
 * (The presence of them means true and absence means false)
 * This prevents the angular compiler from correctly retrieving the binding expression.
 * To solve this problem, we introduce the `ngDisabled` directive.
 *
 * @example
    <doc:example>
      <doc:source>
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </doc:source>
      <doc:scenario>
        it('should toggle button', function() {
          expect(element('.doc-example-live :button').prop('disabled')).toBeFalsy();
          input('checked').check();
          expect(element('.doc-example-live :button').prop('disabled')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {expression} ngDisabled Angular expression that will be evaluated.
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngChecked
 * @restrict A
 *
 * @description
 * The HTML specs do not require browsers to preserve the special attributes such as checked.
 * (The presence of them means true and absence means false)
 * This prevents the angular compiler from correctly retrieving the binding expression.
 * To solve this problem, we introduce the `ngChecked` directive.
 * @example
    <doc:example>
      <doc:source>
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </doc:source>
      <doc:scenario>
        it('should check both checkBoxes', function() {
          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeFalsy();
          input('master').check();
          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {expression} ngChecked Angular expression that will be evaluated.
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngReadonly
 * @restrict A
 *
 * @description
 * The HTML specs do not require browsers to preserve the special attributes such as readonly.
 * (The presence of them means true and absence means false)
 * This prevents the angular compiler from correctly retrieving the binding expression.
 * To solve this problem, we introduce the `ngReadonly` directive.
 * @example
    <doc:example>
      <doc:source>
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </doc:source>
      <doc:scenario>
        it('should toggle readonly attr', function() {
          expect(element('.doc-example-live :text').prop('readonly')).toBeFalsy();
          input('checked').check();
          expect(element('.doc-example-live :text').prop('readonly')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element INPUT
 * @param {string} expression Angular expression that will be evaluated.
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngSelected
 * @restrict A
 *
 * @description
 * The HTML specs do not require browsers to preserve the special attributes such as selected.
 * (The presence of them means true and absence means false)
 * This prevents the angular compiler from correctly retrieving the binding expression.
 * To solve this problem, we introduced the `ngSelected` directive.
 * @example
    <doc:example>
      <doc:source>
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </doc:source>
      <doc:scenario>
        it('should select Greetings!', function() {
          expect(element('.doc-example-live #greet').prop('selected')).toBeFalsy();
          input('selected').check();
          expect(element('.doc-example-live #greet').prop('selected')).toBeTruthy();
        });
      </doc:scenario>
    </doc:example>
 *
 * @element OPTION
 * @param {string} expression Angular expression that will be evaluated.
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngOpen
 * @restrict A
 *
 * @description
 * The HTML specs do not require browsers to preserve the special attributes such as open.
 * (The presence of them means true and absence means false)
 * This prevents the angular compiler from correctly retrieving the binding expression.
 * To solve this problem, we introduce the `ngOpen` directive.
 *
 * @example
     <doc:example>
       <doc:source>
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </doc:source>
       <doc:scenario>
         it('should toggle open', function() {
           expect(element('#details').prop('open')).toBeFalsy();
           input('open').check();
           expect(element('#details').prop('open')).toBeTruthy();
         });
       </doc:scenario>
     </doc:example>
 *
 * @element DETAILS
 * @param {string} expression Angular expression that will be evaluated.
 */

var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 100,
      compile: function() {
        return function(scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        };
      }
    };
  };
});


// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        attr.$observe(normalized, function(value) {
          if (!value)
             return;

          attr.$set(attrName, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie) element.prop(attrName, attr[attrName]);
        });
      }
    };
  };
});

var nullFormCtrl = {
  $addControl: noop,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop
};

/**
 * @ngdoc object
 * @name ng.directive:form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 *
 * @property {Object} $error Is an object hash, containing references to all invalid controls or
 *  forms, where:
 *
 *  - keys are validation tokens (error names) â€” such as `required`, `url` or `email`),
 *  - values are arrays of controls or forms that are invalid with given error.
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope'];
function FormController(element, attrs) {
  var form = this,
      parentForm = element.parent().controller('form') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      errors = form.$error = {},
      controls = [];

  // init state
  form.$name = attrs.name || attrs.ngForm;
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;

  parentForm.$addControl(form);

  // Setup initial state of the control
  element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    element.
      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).
      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$addControl
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    controls.push(control);

    if (control.$name && !form.hasOwnProperty(control.$name)) {
      form[control.$name] = control;
    }
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$removeControl
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(errors, function(queue, validationToken) {
      form.$setValidity(validationToken, true, control);
    });

    arrayRemove(controls, control);
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setValidity
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  form.$setValidity = function(validationToken, isValid, control) {
    var queue = errors[validationToken];

    if (isValid) {
      if (queue) {
        arrayRemove(queue, control);
        if (!queue.length) {
          invalidCount--;
          if (!invalidCount) {
            toggleValidCss(isValid);
            form.$valid = true;
            form.$invalid = false;
          }
          errors[validationToken] = false;
          toggleValidCss(true, validationToken);
          parentForm.$setValidity(validationToken, true, form);
        }
      }

    } else {
      if (!invalidCount) {
        toggleValidCss(isValid);
      }
      if (queue) {
        if (includes(queue, control)) return;
      } else {
        errors[validationToken] = queue = [];
        invalidCount++;
        toggleValidCss(false, validationToken);
        parentForm.$setValidity(validationToken, false, form);
      }
      queue.push(control);

      form.$valid = false;
      form.$invalid = true;
    }
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setDirty
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc function
   * @name ng.directive:form.FormController#$setPristine
   * @methodOf ng.directive:form.FormController
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function () {
    element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };
}


/**
 * @ngdoc directive
 * @name ng.directive:ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * @param {string=} name|ngForm Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name ng.directive:form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link ng.directive:form.FormController FormController}.
 *
 * If `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However browsers do not allow nesting of `<form>` elements, for this
 * reason angular provides {@link ng.directive:ngForm `ngForm`} alias
 * which behaves identical to `<form>` but allows form nesting.
 *
 *
 * # CSS classes
 *  - `ng-valid` Is set if the form is valid.
 *  - `ng-invalid` Is set if the form is invalid.
 *  - `ng-pristine` Is set if the form is pristine.
 *  - `ng-dirty` Is set if the form is dirty.
 *
 *
 * # Submitting a form and preventing default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in application specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of ngSubmit or ngClick directives. This
 * is because of the following form submission rules coming from the html spec:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.userType = 'guest';
         }
       </script>
       <form name="myForm" ng-controller="Ctrl">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
         expect(binding('userType')).toEqual('guest');
         expect(binding('myForm.input.$valid')).toEqual('true');
        });

        it('should be invalid if empty', function() {
         input('userType').enter('');
         expect(binding('userType')).toEqual('');
         expect(binding('myForm.input.$valid')).toEqual('false');
        });
      </doc:scenario>
    </doc:example>
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: 'E',
      controller: FormController,
      compile: function() {
        return {
          pre: function(scope, formElement, attr, controller) {
            if (!attr.action) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var preventDefaultListener = function(event) {
                event.preventDefault
                  ? event.preventDefault()
                  : event.returnValue = false; // IE
              };

              addEventListenerFn(formElement[0], 'submit', preventDefaultListener);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                }, 0, false);
              });
            }

            var parentFormCtrl = formElement.parent().controller('form'),
                alias = attr.name || attr.ngForm;

            if (alias) {
              setter(scope, alias, controller, alias);
            }
            if (parentFormCtrl) {
              formElement.on('$destroy', function() {
                parentFormCtrl.$removeControl(controller);
                if (alias) {
                  setter(scope, alias, undefined, alias);
                }
                extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
              });
            }
          }
        };
      }
    };

    return isNgForm ? extend(copy(formDirective), {restrict: 'EAC'}) : formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$/;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;

var inputType = {

  /**
   * @ngdoc inputType
   * @name ng.directive:input.text
   *
   * @description
   * Standard HTML text input with angular data binding.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trimming the
   *    input.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'guest';
             $scope.word = /^\s*\w*\s*$/;
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Single word: <input type="text" name="input" ng-model="text"
                               ng-pattern="word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('guest');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if multi word', function() {
            input('text').enter('hello world');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should not be trimmed', function() {
            input('text').enter('untrimmed ');
            expect(binding('text')).toEqual('untrimmed ');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });
        </doc:scenario>
      </doc:example>
   */
  'text': textInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.number
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.value = 12;
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Number: <input type="number" name="input" ng-model="value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
           expect(binding('value')).toEqual('12');
           expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
           input('value').enter('');
           expect(binding('value')).toEqual('');
           expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if over max', function() {
           input('value').enter('123');
           expect(binding('value')).toEqual('');
           expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'number': numberInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.url
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'http://google.com';
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           URL: <input type="url" name="input" ng-model="text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('http://google.com');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if not url', function() {
            input('text').enter('xxx');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'url': urlInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.email
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength.
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
   *    patterns defined as scope expressions.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.text = 'me@example.com';
           }
         </script>
           <form name="myForm" ng-controller="Ctrl">
             Email: <input type="email" name="input" ng-model="text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
        </doc:source>
        <doc:scenario>
          it('should initialize to model', function() {
            expect(binding('text')).toEqual('me@example.com');
            expect(binding('myForm.input.$valid')).toEqual('true');
          });

          it('should be invalid if empty', function() {
            input('text').enter('');
            expect(binding('text')).toEqual('');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });

          it('should be invalid if not email', function() {
            input('text').enter('xxx');
            expect(binding('myForm.input.$valid')).toEqual('false');
          });
        </doc:scenario>
      </doc:example>
   */
  'email': emailInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.radio
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.color = 'blue';
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           <input type="radio" ng-model="color" value="red">  Red <br/>
           <input type="radio" ng-model="color" value="green"> Green <br/>
           <input type="radio" ng-model="color" value="blue"> Blue <br/>
           <tt>color = {{color}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should change state', function() {
            expect(binding('color')).toEqual('blue');

            input('color').select('red');
            expect(binding('color')).toEqual('red');
          });
        </doc:scenario>
      </doc:example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc inputType
   * @name ng.directive:input.checkbox
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngTrueValue The value to which the expression should be set when selected.
   * @param {string=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <doc:example>
        <doc:source>
         <script>
           function Ctrl($scope) {
             $scope.value1 = true;
             $scope.value2 = 'YES'
           }
         </script>
         <form name="myForm" ng-controller="Ctrl">
           Value1: <input type="checkbox" ng-model="value1"> <br/>
           Value2: <input type="checkbox" ng-model="value2"
                          ng-true-value="YES" ng-false-value="NO"> <br/>
           <tt>value1 = {{value1}}</tt><br/>
           <tt>value2 = {{value2}}</tt><br/>
          </form>
        </doc:source>
        <doc:scenario>
          it('should change state', function() {
            expect(binding('value1')).toEqual('true');
            expect(binding('value2')).toEqual('YES');

            input('value1').check();
            input('value2').check();
            expect(binding('value1')).toEqual('false');
            expect(binding('value2')).toEqual('NO');
          });
        </doc:scenario>
      </doc:example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop
};


function isEmpty(value) {
  return isUndefined(value) || value === '' || value === null || value !== value;
}


function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {

  var listener = function() {
    var value = element.val();

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // e.g. <input ng-model="foo" ng-trim="false">
    if (toBoolean(attr.ngTrim || 'T')) {
      value = trim(value);
    }

    if (ctrl.$viewValue !== value) {
      scope.$apply(function() {
        ctrl.$setViewValue(value);
      });
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function() {
      if (!timeout) {
        timeout = $browser.defer(function() {
          listener();
          timeout = null;
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener();
    });

    // if user paste into input using mouse, we need "change" event to catch it
    element.on('change', listener);

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }


  ctrl.$render = function() {
    element.val(isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };

  // pattern validator
  var pattern = attr.ngPattern,
      patternValidator,
      match;

  var validate = function(regexp, value) {
    if (isEmpty(value) || regexp.test(value)) {
      ctrl.$setValidity('pattern', true);
      return value;
    } else {
      ctrl.$setValidity('pattern', false);
      return undefined;
    }
  };

  if (pattern) {
    match = pattern.match(/^\/(.*)\/([gim]*)$/);
    if (match) {
      pattern = new RegExp(match[1], match[2]);
      patternValidator = function(value) {
        return validate(pattern, value)
      };
    } else {
      patternValidator = function(value) {
        var patternObj = scope.$eval(pattern);

        if (!patternObj || !patternObj.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern,
            patternObj, startingTag(element));
        }
        return validate(patternObj, value);
      };
    }

    ctrl.$formatters.push(patternValidator);
    ctrl.$parsers.push(patternValidator);
  }

  // min length validator
  if (attr.ngMinlength) {
    var minlength = int(attr.ngMinlength);
    var minLengthValidator = function(value) {
      if (!isEmpty(value) && value.length < minlength) {
        ctrl.$setValidity('minlength', false);
        return undefined;
      } else {
        ctrl.$setValidity('minlength', true);
        return value;
      }
    };

    ctrl.$parsers.push(minLengthValidator);
    ctrl.$formatters.push(minLengthValidator);
  }

  // max length validator
  if (attr.ngMaxlength) {
    var maxlength = int(attr.ngMaxlength);
    var maxLengthValidator = function(value) {
      if (!isEmpty(value) && value.length > maxlength) {
        ctrl.$setValidity('maxlength', false);
        return undefined;
      } else {
        ctrl.$setValidity('maxlength', true);
        return value;
      }
    };

    ctrl.$parsers.push(maxLengthValidator);
    ctrl.$formatters.push(maxLengthValidator);
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$parsers.push(function(value) {
    var empty = isEmpty(value);
    if (empty || NUMBER_REGEXP.test(value)) {
      ctrl.$setValidity('number', true);
      return value === '' ? null : (empty ? value : parseFloat(value));
    } else {
      ctrl.$setValidity('number', false);
      return undefined;
    }
  });

  ctrl.$formatters.push(function(value) {
    return isEmpty(value) ? '' : '' + value;
  });

  if (attr.min) {
    var min = parseFloat(attr.min);
    var minValidator = function(value) {
      if (!isEmpty(value) && value < min) {
        ctrl.$setValidity('min', false);
        return undefined;
      } else {
        ctrl.$setValidity('min', true);
        return value;
      }
    };

    ctrl.$parsers.push(minValidator);
    ctrl.$formatters.push(minValidator);
  }

  if (attr.max) {
    var max = parseFloat(attr.max);
    var maxValidator = function(value) {
      if (!isEmpty(value) && value > max) {
        ctrl.$setValidity('max', false);
        return undefined;
      } else {
        ctrl.$setValidity('max', true);
        return value;
      }
    };

    ctrl.$parsers.push(maxValidator);
    ctrl.$formatters.push(maxValidator);
  }

  ctrl.$formatters.push(function(value) {

    if (isEmpty(value) || isNumber(value)) {
      ctrl.$setValidity('number', true);
      return value;
    } else {
      ctrl.$setValidity('number', false);
      return undefined;
    }
  });
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var urlValidator = function(value) {
    if (isEmpty(value) || URL_REGEXP.test(value)) {
      ctrl.$setValidity('url', true);
      return value;
    } else {
      ctrl.$setValidity('url', false);
      return undefined;
    }
  };

  ctrl.$formatters.push(urlValidator);
  ctrl.$parsers.push(urlValidator);
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  textInputType(scope, element, attr, ctrl, $sniffer, $browser);

  var emailValidator = function(value) {
    if (isEmpty(value) || EMAIL_REGEXP.test(value)) {
      ctrl.$setValidity('email', true);
      return value;
    } else {
      ctrl.$setValidity('email', false);
      return undefined;
    }
  };

  ctrl.$formatters.push(emailValidator);
  ctrl.$parsers.push(emailValidator);
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  element.on('click', function() {
    if (element[0].checked) {
      scope.$apply(function() {
        ctrl.$setViewValue(attr.value);
      });
    }
  });

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function checkboxInputType(scope, element, attr, ctrl) {
  var trueValue = attr.ngTrueValue,
      falseValue = attr.ngFalseValue;

  if (!isString(trueValue)) trueValue = true;
  if (!isString(falseValue)) falseValue = false;

  element.on('click', function() {
    scope.$apply(function() {
      ctrl.$setViewValue(element[0].checked);
    });
  });

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  ctrl.$formatters.push(function(value) {
    return value === trueValue;
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name ng.directive:textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 */


/**
 * @ngdoc directive
 * @name ng.directive:input
 * @restrict E
 *
 * @description
 * HTML input element control with angular data-binding. Input control follows HTML5 input types
 * and polyfills the HTML5 validation behavior for older browsers.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.user = {name: 'guest', last: 'visitor'};
         }
       </script>
       <div ng-controller="Ctrl">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
          expect(binding('user')).toEqual('{"name":"guest","last":"visitor"}');
          expect(binding('myForm.userName.$valid')).toEqual('true');
          expect(binding('myForm.$valid')).toEqual('true');
        });

        it('should be invalid if empty when required', function() {
          input('user.name').enter('');
          expect(binding('user')).toEqual('{"last":"visitor"}');
          expect(binding('myForm.userName.$valid')).toEqual('false');
          expect(binding('myForm.$valid')).toEqual('false');
        });

        it('should be valid if empty when min length is set', function() {
          input('user.last').enter('');
          expect(binding('user')).toEqual('{"name":"guest","last":""}');
          expect(binding('myForm.lastName.$valid')).toEqual('true');
          expect(binding('myForm.$valid')).toEqual('true');
        });

        it('should be invalid if less than required min length', function() {
          input('user.last').enter('xx');
          expect(binding('user')).toEqual('{"name":"guest"}');
          expect(binding('myForm.lastName.$valid')).toEqual('false');
          expect(binding('myForm.lastName.$error')).toMatch(/minlength/);
          expect(binding('myForm.$valid')).toEqual('false');
        });

        it('should be invalid if longer than max length', function() {
          input('user.last').enter('some ridiculously long name');
          expect(binding('user'))
            .toEqual('{"name":"guest"}');
          expect(binding('myForm.lastName.$valid')).toEqual('false');
          expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);
          expect(binding('myForm.$valid')).toEqual('false');
        });
      </doc:scenario>
    </doc:example>
 */
var inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {
  return {
    restrict: 'E',
    require: '?ngModel',
    link: function(scope, element, attr, ctrl) {
      if (ctrl) {
        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,
                                                            $browser);
      }
    }
  };
}];

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty';

/**
 * @ngdoc object
 * @name ng.directive:ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model, that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM.  Each function is called, in turn, passing the value
       through to the next. Used to sanitize / convert the value as well as validation.
       For validation, the parsers should update the validity state using
       {@link ng.directive:ngModel.NgModelController#$setValidity $setValidity()},
       and return `undefined` for invalid values.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. Each function is called, in turn, passing the value through to the
       next. Used to format / convert values for display in the control and validation.
 *      <pre>
 *      function formatter(value) {
 *        if (value) {
 *          return value.toUpperCase();
 *        }
 *      }
 *      ngModel.$formatters.push(formatter);
 *      </pre>
 * @property {Object} $error An object hash with all errors as keys.
 *
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 *
 * @description
 *
 * `NgModelController` provides API for the `ng-model` directive. The controller contains
 * services for data-binding, validation, CSS update, value formatting and parsing. It
 * specifically does not contain any logic which deals with DOM rendering or listening to
 * DOM events. The `NgModelController` is meant to be extended by other directives where, the
 * directive provides DOM manipulation and the `NgModelController` provides the data-binding.
 * Note that you cannot use `NgModelController` in a directive with an isolated scope,
 * as, in that case, the `ng-model` value gets put into the isolated scope and does not get
 * propogated to the parent scope.
 *
 *
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * <example module="customControl">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', []).
        directive('contenteditable', function() {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html(ngModel.$viewValue || '');
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        });
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="scenario.js">
      it('should data-bind and become invalid', function() {
        var contentEditable = element('[contenteditable]');

        expect(contentEditable.text()).toEqual('Change me!');
        input('userContent').enter('');
        expect(contentEditable.text()).toEqual('');
        expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);
      });
    </file>
 * </example>
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',
    function($scope, $exceptionHandler, $attr, $element, $parse) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$name = $attr.name;

  var ngModelGet = $parse($attr.ngModel),
      ngModelSet = ngModelGet.assign;

  if (!ngModelSet) {
    throw minErr('ngModel')('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
        $attr.ngModel, startingTag($element));
  }

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$render
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   */
  this.$render = noop;

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      invalidCount = 0, // used to easily determine if we are valid
      $error = this.$error = {}; // keep invalid keys here


  // Setup initial state of the control
  $element.addClass(PRISTINE_CLASS);
  toggleValidCss(true);

  // convenience method for easy toggling of classes
  function toggleValidCss(isValid, validationErrorKey) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
    $element.
      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).
      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
  }

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setValidity
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Change the validity state, and notifies the form when the control changes validity. (i.e. it
   * does not notify form if given validator is already marked as invalid).
   *
   * This method should be called by validators - i.e. the parser or formatter functions.
   *
   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
   *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
   */
  this.$setValidity = function(validationErrorKey, isValid) {
    if ($error[validationErrorKey] === !isValid) return;

    if (isValid) {
      if ($error[validationErrorKey]) invalidCount--;
      if (!invalidCount) {
        toggleValidCss(true);
        this.$valid = true;
        this.$invalid = false;
      }
    } else {
      toggleValidCss(false);
      this.$invalid = true;
      this.$valid = false;
      invalidCount++;
    }

    $error[validationErrorKey] = !isValid;
    toggleValidCss(isValid, validationErrorKey);

    parentForm.$setValidity(validationErrorKey, isValid, this);
  };

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setPristine
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
   * state (ng-pristine class).
   */
  this.$setPristine = function () {
    this.$dirty = false;
    this.$pristine = true;
    $element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);
  };

  /**
   * @ngdoc function
   * @name ng.directive:ngModel.NgModelController#$setViewValue
   * @methodOf ng.directive:ngModel.NgModelController
   *
   * @description
   * Read a value from view.
   *
   * This method should be called from within a DOM event handler.
   * For example {@link ng.directive:input input} or
   * {@link ng.directive:select select} directives call it.
   *
   * It internally calls all `$parsers` (including validators) and updates the `$modelValue` and the actual model path.
   * Lastly it calls all registered change listeners.
   *
   * @param {string} value Value from the view.
   */
  this.$setViewValue = function(value) {
    this.$viewValue = value;

    // change to dirty
    if (this.$pristine) {
      this.$dirty = true;
      this.$pristine = false;
      $element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
      parentForm.$setDirty();
    }

    forEach(this.$parsers, function(fn) {
      value = fn(value);
    });

    if (this.$modelValue !== value) {
      this.$modelValue = value;
      ngModelSet($scope, value);
      forEach(this.$viewChangeListeners, function(listener) {
        try {
          listener();
        } catch(e) {
          $exceptionHandler(e);
        }
      })
    }
  };

  // model -> value
  var ctrl = this;

  $scope.$watch(function ngModelWatch() {
    var value = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    if (ctrl.$modelValue !== value) {

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      ctrl.$modelValue = value;
      while(idx--) {
        value = formatters[idx](value);
      }

      if (ctrl.$viewValue !== value) {
        ctrl.$viewValue = value;
        ctrl.$render();
      }
    }
  });
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngModel
 *
 * @element input
 *
 * @description
 * Is a directive that tells Angular to do two-way data binding. It works together with `input`,
 * `select`, `textarea` and even custom form controls that use {@link ng.directive:ngModel.NgModelController
 * NgModelController} exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require,
 * - providing validation behavior (i.e. required, number, email, url),
 * - keeping state of the control (valid/invalid, dirty/pristine, validation errors),
 * - setting related css class onto the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`),
 * - register the control with parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link ng.directive:input.text text}
 *    - {@link ng.directive:input.checkbox checkbox}
 *    - {@link ng.directive:input.radio radio}
 *    - {@link ng.directive:input.number number}
 *    - {@link ng.directive:input.email email}
 *    - {@link ng.directive:input.url url}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 */
var ngModelDirective = function() {
  return {
    require: ['ngModel', '^?form'],
    controller: NgModelController,
    link: function(scope, element, attr, ctrls) {
      // notify others, especially parent forms

      var modelCtrl = ctrls[0],
          formCtrl = ctrls[1] || nullFormCtrl;

      formCtrl.$addControl(modelCtrl);

      element.on('$destroy', function() {
        formCtrl.$removeControl(modelCtrl);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ng.directive:ngChange
 * @restrict E
 *
 * @description
 * Evaluate given expression when user changes the input.
 * The expression is not evaluated when the value change is coming from the model.
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 *
 * @example
 * <doc:example>
 *   <doc:source>
 *     <script>
 *       function Controller($scope) {
 *         $scope.counter = 0;
 *         $scope.change = function() {
 *           $scope.counter++;
 *         };
 *       }
 *     </script>
 *     <div ng-controller="Controller">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       debug = {{confirmed}}<br />
 *       counter = {{counter}}
 *     </div>
 *   </doc:source>
 *   <doc:scenario>
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(binding('counter')).toEqual('0');
 *       element('#ng-change-example1').click();
 *       expect(binding('counter')).toEqual('1');
 *       expect(binding('confirmed')).toEqual('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element('#ng-change-example2').click();
 *       expect(binding('counter')).toEqual('0');
 *       expect(binding('confirmed')).toEqual('true');
 *     });
 *   </doc:scenario>
 * </doc:example>
 */
var ngChangeDirective = valueFn({
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});


var requiredDirective = function() {
  return {
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      var validator = function(value) {
        if (attr.required && (isEmpty(value) || value === false)) {
          ctrl.$setValidity('required', false);
          return;
        } else {
          ctrl.$setValidity('required', true);
          return value;
        }
      };

      ctrl.$formatters.push(validator);
      ctrl.$parsers.unshift(validator);

      attr.$observe('required', function() {
        validator(ctrl.$viewValue);
      });
    }
  };
};


/**
 * @ngdoc directive
 * @name ng.directive:ngList
 *
 * @description
 * Text input that converts between comma-separated string into an array of strings.
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value. If
 *   specified in form `/something/` then the value will be converted into a regular expression.
 *
 * @example
    <doc:example>
      <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.names = ['igor', 'misko', 'vojta'];
         }
       </script>
       <form name="myForm" ng-controller="Ctrl">
         List: <input name="namesInput" ng-model="names" ng-list required>
         <span class="error" ng-show="myForm.namesInput.$error.required">
           Required!</span>
         <br>
         <tt>names = {{names}}</tt><br/>
         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
        </form>
      </doc:source>
      <doc:scenario>
        it('should initialize to model', function() {
          expect(binding('names')).toEqual('["igor","misko","vojta"]');
          expect(binding('myForm.namesInput.$valid')).toEqual('true');
          expect(element('span.error').css('display')).toBe('none');
        });

        it('should be invalid if empty', function() {
          input('names').enter('');
          expect(binding('names')).toEqual('[]');
          expect(binding('myForm.namesInput.$valid')).toEqual('false');
          expect(element('span.error').css('display')).not().toBe('none');
        });
      </doc:scenario>
    </doc:example>
 */
var ngListDirective = function() {
  return {
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      var match = /\/(.*)\//.exec(attr.ngList),
          separator = match && new RegExp(match[1]) || attr.ngList || ',';

      var parse = function(viewValue) {
        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trim(value));
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(', ');
        }

        return undefined;
      });
    }
  };
};


var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;

var ngValueDirective = function() {
  return {
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ng.directive:ngBind
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferrable to use `ngBind` instead of `{{ expression }}` when a template is momentarily 
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an 
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.name = 'Whirled';
         }
       </script>
       <div ng-controller="Ctrl">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </doc:source>
     <doc:scenario>
       it('should check ng-bind', function() {
         expect(using('.doc-example-live').binding('name')).toBe('Whirled');
         using('.doc-example-live').input('name').enter('world');
         expect(using('.doc-example-live').binding('name')).toBe('world');
       });
     </doc:scenario>
   </doc:example>
 */
var ngBindDirective = ngDirective(function(scope, element, attr) {
  element.addClass('ng-binding').data('$binding', attr.ngBind);
  scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
    element.text(value == undefined ? '' : value);
  });
});


/**
 * @ngdoc directive
 * @name ng.directive:ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <doc:example>
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.salutation = 'Hello';
           $scope.name = 'World';
         }
       </script>
       <div ng-controller="Ctrl">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </doc:source>
     <doc:scenario>
       it('should check ng-bind', function() {
         expect(using('.doc-example-live').binding('salutation')).
           toBe('Hello');
         expect(using('.doc-example-live').binding('name')).
           toBe('World');
         using('.doc-example-live').input('salutation').enter('Greetings');
         using('.doc-example-live').input('name').enter('user');
         expect(using('.doc-example-live').binding('salutation')).
           toBe('Greetings');
         expect(using('.doc-example-live').binding('name')).
           toBe('user');
       });
     </doc:scenario>
   </doc:example>
 */
var ngBindTemplateDirective = ['$interpolate', function($interpolate) {
  return function(scope, element, attr) {
    // TODO: move this to scenario runner
    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
    element.addClass('ng-binding').data('$binding', interpolateFn);
    attr.$observe('ngBindTemplate', function(value) {
      element.text(value);
    });
  }
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngBindHtml
 *
 * @description
 * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
 * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
 * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
 * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
 * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 */
var ngBindHtmlDirective = ['$sce', function($sce) {
  return function(scope, element, attr) {
    element.addClass('ng-binding').data('$binding', attr.ngBindHtml);
    scope.$watch(attr.ngBindHtml, function ngBindHtmlWatchAction(value) {
      element.html($sce.getTrustedHtml(value) || '');
    });
  };
}];

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return function() {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal = undefined;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            var mod = $index & 1;
            if (mod !== old$index & 1) {
              if (mod === selector) {
                addClass(scope.$eval(attr[name]));
              } else {
                removeClass(scope.$eval(attr[name]));
              }
            }
          });
        }


        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            if (oldVal && !equals(newVal,oldVal)) {
              removeClass(oldVal);
            }
            addClass(newVal);
          }
          oldVal = copy(newVal);
        }


        function removeClass(classVal) {
          attr.$removeClass(flattenClasses(classVal));
        }


        function addClass(classVal) {
          attr.$addClass(flattenClasses(classVal));
        }

        function flattenClasses(classVal) {
          if(isArray(classVal)) {
            return classVal.join(' ');
          } else if (isObject(classVal)) {
            var classes = [], i = 0;
            forEach(classVal, function(v, k) {
              if (v) {
                classes.push(k);
              }
            });
            return classes.join(' ');
          }

          return classVal;
        };
      }
    };
  };
}

/**
 * @ngdoc directive
 * @name ng.directive:ngClass
 *
 * @description
 * The `ngClass` allows you to set CSS classes on HTML an element, dynamically, by databinding
 * an expression that represents all classes to be added.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * add - happens just before the class is applied to the element
 * remove - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demostrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: strike, bold: bold, red: red}">Map Syntax Example</p>
       <input type="checkbox" ng-model="bold"> bold
       <input type="checkbox" ng-model="strike"> strike
       <input type="checkbox" ng-model="red"> red
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold"><br>
       <input ng-model="style2" placeholder="Type: strike"><br>
       <input ng-model="style3" placeholder="Type: red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="scenario.js">
       it('should let you toggle the class', function() {

         expect(element('.doc-example-live p:first').prop('className')).not().toMatch(/bold/);
         expect(element('.doc-example-live p:first').prop('className')).not().toMatch(/red/);

         input('bold').check();
         expect(element('.doc-example-live p:first').prop('className')).toMatch(/bold/);

         input('red').check();
         expect(element('.doc-example-live p:first').prop('className')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(element('.doc-example-live p:nth-of-type(2)').prop('className')).toBe('');
         input('style').enter('red');
         expect(element('.doc-example-live p:nth-of-type(2)').prop('className')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(element('.doc-example-live p:last').prop('className')).toBe('');
         input('style1').enter('bold');
         input('style2').enter('strike');
         input('style3').enter('red');
         expect(element('.doc-example-live p:last').prop('className')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example animations="true">
     <file name="index.html">
      <input type="button" value="set" ng-click="myVar='my-class'">
      <input type="button" value="clear" ng-click="myVar=''">
      <br>
      <span ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .my-class-add, .my-class-remove {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .my-class,
       .my-class-add.my-class-add-active {
         color: red;
         font-size:3em;
       }

       .my-class-remove.my-class-remove-active {
         font-size:1.0em;
         color:black;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class', function() {
         expect(element('.doc-example-live span').prop('className')).not().
           toMatch(/my-class/);

         using('.doc-example-live').element(':button:first').click();

         expect(element('.doc-example-live span').prop('className')).
           toMatch(/my-class/);

         using('.doc-example-live').element(':button:last').click();

         expect(element('.doc-example-live span').prop('className')).not().
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Therefore, if any CSS3 Transition/Animation styles (outside of ngAnimate) are set on the element, then, if a ngClass animation
   is triggered, the ngClass animation will be skipped so that ngAnimate can allow for the pre-existing transition or animation to
   take over. This restriction allows for ngClass to still work with standard CSS3 Transitions/Animations that are defined
   outside of ngAnimate.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ng.directive:ngClassOdd
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except it works in
 * conjunction with `ngRepeat` and takes affect only on odd (even) rows.
 *
 * This directive can be applied only within a scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element('.doc-example-live li:first span').prop('className')).
           toMatch(/odd/);
         expect(element('.doc-example-live li:last span').prop('className')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ng.directive:ngClassEven
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except it works in
 * conjunction with `ngRepeat` and takes affect only on odd (even) rows.
 *
 * This directive can be applied only within a scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element('.doc-example-live li:first span').prop('className')).
           toMatch(/odd/);
         expect(element('.doc-example-live li:last span').prop('className')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ng.directive:ngCloak
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but typically a fine-grained application is
 * preferred in order to benefit from progressive rendering of the browser view.
 *
 * `ngCloak` works in cooperation with a css rule that is embedded within `angular.js` and
 *  `angular.min.js` files. Following is the css rule:
 *
 * <pre>
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * </pre>
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ng-cloak` directive are hidden. When Angular comes across this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, which
 * makes the compiled element visible.
 *
 * For the best result, `angular.js` script must be loaded in the head section of the html file;
 * alternatively, the css rule (above) must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ngCloak` in addition to `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <doc:example>
     <doc:source>
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </doc:source>
     <doc:scenario>
       it('should remove the template directive and css class', function() {
         expect(element('.doc-example-live #template1').attr('ng-cloak')).
           not().toBeDefined();
         expect(element('.doc-example-live #template2').attr('ng-cloak')).
           not().toBeDefined();
       });
     </doc:scenario>
   </doc:example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngController
 *
 * @description
 * The `ngController` directive assigns behavior to a scope. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model â€” The Model is data in scope properties; scopes are attached to the DOM.
 * * View â€” The template (HTML with data bindings) is rendered into the View.
 * * Controller â€” The `ngController` directive specifies a Controller class; the class has
 *   methods that typically express the business logic behind the application.
 *
 * Note that an alternative way to define controllers is via the {@link ngRoute.$route $route} service.
 *
 * @element ANY
 * @scope
 * @param {expression} ngController Name of a globally accessible constructor function or an
 *     {@link guide/expression expression} that on the current scope evaluates to a
 *     constructor function. The controller instance can further be published into the scope
 *     by adding `as localName` the controller name attribute.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Notice that the scope becomes the `this` for the
 * controller's instance. This allows for easy access to the view data from the controller. Also
 * notice that any changes to the data are automatically reflected in the View without the need
 * for a manual update. The example is included in two different declaration styles based on
 * your style preferences.
   <doc:example>
     <doc:source>
      <script>
        function SettingsController1() {
          this.name = "John Smith";
          this.contacts = [
            {type: 'phone', value: '408 555 1212'},
            {type: 'email', value: 'john.smith@example.org'} ];
          };

        SettingsController1.prototype.greet = function() {
          alert(this.name);
        };

        SettingsController1.prototype.addContact = function() {
          this.contacts.push({type: 'email', value: 'yourname@example.org'});
        };

        SettingsController1.prototype.removeContact = function(contactToRemove) {
         var index = this.contacts.indexOf(contactToRemove);
          this.contacts.splice(index, 1);
        };

        SettingsController1.prototype.clearContact = function(contact) {
          contact.type = 'phone';
          contact.value = '';
        };
      </script>
      <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
        Name: <input type="text" ng-model="settings.name"/>
        [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
        Contact:
        <ul>
          <li ng-repeat="contact in settings.contacts">
            <select ng-model="contact.type">
               <option>phone</option>
               <option>email</option>
            </select>
            <input type="text" ng-model="contact.value"/>
            [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
            | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
          </li>
          <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
       </ul>
      </div>
     </doc:source>
     <doc:scenario>
       it('should check controller as', function() {
         expect(element('#ctrl-as-exmpl>:input').val()).toBe('John Smith');
         expect(element('#ctrl-as-exmpl li:nth-child(1) input').val())
           .toBe('408 555 1212');
         expect(element('#ctrl-as-exmpl li:nth-child(2) input').val())
           .toBe('john.smith@example.org');

         element('#ctrl-as-exmpl li:first a:contains("clear")').click();
         expect(element('#ctrl-as-exmpl li:first input').val()).toBe('');

         element('#ctrl-as-exmpl li:last a:contains("add")').click();
         expect(element('#ctrl-as-exmpl li:nth-child(3) input').val())
           .toBe('yourname@example.org');
       });
     </doc:scenario>
   </doc:example>
    <doc:example>
     <doc:source>
      <script>
        function SettingsController2($scope) {
          $scope.name = "John Smith";
          $scope.contacts = [
            {type:'phone', value:'408 555 1212'},
            {type:'email', value:'john.smith@example.org'} ];

          $scope.greet = function() {
           alert(this.name);
          };

          $scope.addContact = function() {
           this.contacts.push({type:'email', value:'yourname@example.org'});
          };

          $scope.removeContact = function(contactToRemove) {
           var index = this.contacts.indexOf(contactToRemove);
           this.contacts.splice(index, 1);
          };

          $scope.clearContact = function(contact) {
           contact.type = 'phone';
           contact.value = '';
          };
        }
      </script>
      <div id="ctrl-exmpl" ng-controller="SettingsController2">
        Name: <input type="text" ng-model="name"/>
        [ <a href="" ng-click="greet()">greet</a> ]<br/>
        Contact:
        <ul>
          <li ng-repeat="contact in contacts">
            <select ng-model="contact.type">
               <option>phone</option>
               <option>email</option>
            </select>
            <input type="text" ng-model="contact.value"/>
            [ <a href="" ng-click="clearContact(contact)">clear</a>
            | <a href="" ng-click="removeContact(contact)">X</a> ]
          </li>
          <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
       </ul>
      </div>
     </doc:source>
     <doc:scenario>
       it('should check controller', function() {
         expect(element('#ctrl-exmpl>:input').val()).toBe('John Smith');
         expect(element('#ctrl-exmpl li:nth-child(1) input').val())
           .toBe('408 555 1212');
         expect(element('#ctrl-exmpl li:nth-child(2) input').val())
           .toBe('john.smith@example.org');

         element('#ctrl-exmpl li:first a:contains("clear")').click();
         expect(element('#ctrl-exmpl li:first input').val()).toBe('');

         element('#ctrl-exmpl li:last a:contains("add")').click();
         expect(element('#ctrl-exmpl li:nth-child(3) input').val())
           .toBe('yourname@example.org');
       });
     </doc:scenario>
   </doc:example>

 */
var ngControllerDirective = [function() {
  return {
    scope: true,
    controller: '@'
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngCsp
 * @priority 1000
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 * 
 * This is necessary when developing things like Google Chrome Extensions.
 * 
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For us to be compatible, we just need to implement the "getterFn" in $parse without violating
 * any of these restrictions.
 * 
 * AngularJS uses `Function(string)` generated functions as a speed optimization. By applying `ngCsp`
 * it is be possible to opt into the CSP compatible mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 * 
 * In order to use this feature put `ngCsp` directive on the root element of the application.
 * 
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   <pre>
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   </pre>
 */

var ngCspDirective = ['$sniffer', function($sniffer) {
  return {
    priority: 1000,
    compile: function() {
      $sniffer.csp = true;
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngClick
 *
 * @description
 * The ngClick allows you to specify custom behavior when
 * element is clicked.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      count: {{count}}
     </doc:source>
     <doc:scenario>
       it('should check ng-click', function() {
         expect(binding('count')).toBe('0');
         element('.doc-example-live :button').click();
         expect(binding('count')).toBe('1');
       });
     </doc:scenario>
   </doc:example>
 */
/*
 * A directive that allows creation of custom onclick handlers that are defined as angular
 * expressions and are compiled and executed within the current scope.
 *
 * Events that are handled via these handler are always configured not to propagate further.
 */
var ngEventDirectives = {};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur'.split(' '),
  function(name) {
    var directiveName = directiveNormalize('ng-' + name);
    ngEventDirectives[directiveName] = ['$parse', function($parse) {
      return function(scope, element, attr) {
        var fn = $parse(attr[directiveName]);
        element.on(lowercase(name), function(event) {
          scope.$apply(function() {
            fn(scope, {$event:event});
          });
        });
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ng.directive:ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on dblclick event.
 *
 * @element ANY
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * dblclick. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */


/**
 * @ngdoc directive
 * @name ng.directive:ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page) **but only if the form does not contain an `action`
 * attribute**.
 *
 * @element form
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval. (Event object is available as `$event`)
 *
 * @example
   <doc:example>
     <doc:source>
      <script>
        function Ctrl($scope) {
          $scope.list = [];
          $scope.text = 'hello';
          $scope.submit = function() {
            if (this.text) {
              this.list.push(this.text);
              this.text = '';
            }
          };
        }
      </script>
      <form ng-submit="submit()" ng-controller="Ctrl">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </doc:source>
     <doc:scenario>
       it('should check ng-submit', function() {
         expect(binding('list')).toBe('[]');
         element('.doc-example-live #submit').click();
         expect(binding('list')).toBe('["hello"]');
         expect(input('text').val()).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(binding('list')).toBe('[]');
         element('.doc-example-live #submit').click();
         element('.doc-example-live #submit').click();
         expect(binding('list')).toBe('["hello"]');
       });
     </doc:scenario>
   </doc:example>
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * @element window, input, select, textarea, a
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. (Event object is available as `$event`)
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ng.directive:ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes and recreates a portion of the DOM tree (HTML)
 * conditionally based on **"falsy"** and **"truthy"** values, respectively, evaluated within
 * an {expression}. In other words, if the expression assigned to **ngIf evaluates to a false
 * value** then **the element is removed from the DOM** and **if true** then **a clone of the
 * element is reinserted into the DOM**.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM (HTML), such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that **when an element is removed using ngIf its scope is destroyed** and **a new scope
 * is created when the element is restored**.  The scope created within `ngIf` inherits from 
 * its parent scope using
 * {@link https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance prototypal inheritance}.
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example scenario of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like 
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the ngAnimate module to animate the **enter**
 * and **leave** effects.
 *
 * @animations
 * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
 * leave - happens just before the ngIf contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree (HTML).
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        I'm removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-enter.ng-enter-active,
      .animate-if.ng-leave {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    restrict: 'A',
    compile: function (element, attr, transclude) {
      return function ($scope, $element, $attr) {
        var childElement, childScope;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
          if (childElement) {
            $animate.leave(childElement);
            childElement = undefined;
          }
          if (childScope) {
            childScope.$destroy();
            childScope = undefined;
          }
          if (toBoolean(value)) {
            childScope = $scope.$new();
            transclude(childScope, function (clone) {
              childElement = clone;
              $animate.enter(clone, $element.parent(), $element);
            });
          }
        });
      }
    }
  }
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * Keep in mind that:
 *
 * -    by default, the template URL is restricted to the same domain and protocol as the
 *      application document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 *      $sce.getTrustedResourceUrl} on it.  To load templates from other domains and/or protocols,
 *      you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 *      {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.  Refer Angular's {@link
 *      ng.$sce Strict Contextual Escaping}.
 * -    in addition, the browser's
 *      {@link https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest
 *      Same Origin Policy} and {@link http://www.w3.org/TR/cors/ Cross-Origin Resource Sharing
 *      (CORS)} policy apply that may further restrict whether the template is successfully loaded.
 *      (e.g.  ngInclude won't work for cross-domain requests on all browsers and for `file://`
 *      access on some browsers)
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example animations="true">
    <file name="index.html">
     <div ng-controller="Ctrl">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <tt>{{template.url}}</tt>
       <hr/>
       <div class="example-animate-container">
         <div class="include-example" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      function Ctrl($scope) {
        $scope.templates =
          [ { name: 'template1.html', url: 'template1.html'}
          , { name: 'template2.html', url: 'template2.html'} ];
        $scope.template = $scope.templates[0];
      }
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .example-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .example-animate-container > div {
        padding:10px;
      }

      .include-example.ng-enter, .include-example.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .include-example.ng-enter {
        top:-50px;
      }
      .include-example.ng-enter.ng-enter-active {
        top:0;
      }

      .include-example.ng-leave {
        top:0;
      }
      .include-example.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="scenario.js">
      it('should load template1.html', function() {
       expect(element('.doc-example-live [ng-include]').text()).
         toMatch(/Content of template1.html/);
      });
      it('should load template2.html', function() {
       select('template').option('1');
       expect(element('.doc-example-live [ng-include]').text()).
         toMatch(/Content of template2.html/);
      });
      it('should change to blank', function() {
       select('template').option('');
       expect(element('.doc-example-live [ng-include]')).toBe(undefined);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ng.directive:ngInclude#$includeContentRequested
 * @eventOf ng.directive:ngInclude
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 */


/**
 * @ngdoc event
 * @name ng.directive:ngInclude#$includeContentLoaded
 * @eventOf ng.directive:ngInclude
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 */
var ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$compile', '$animate', '$sce',
                  function($http,   $templateCache,   $anchorScroll,   $compile,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    terminal: true,
    transclude: 'element',
    compile: function(element, attr, transclusion) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element) {
        var changeCounter = 0,
            currentScope,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if(currentElement) {
            $animate.leave(currentElement);
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var thisChangeId = ++changeCounter;

          if (src) {
            $http.get(src, {cache: $templateCache}).success(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();

              transclusion(newScope, function(clone) {
                cleanupLastIncludeContent();

                currentScope = newScope;
                currentElement = clone;

                currentElement.html(response);
                $animate.enter(currentElement, null, $element);
                $compile(currentElement.contents())(currentScope);

                if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }

                currentScope.$emit('$includeContentLoaded');
                scope.$eval(onloadExp);
              });
            }).error(function() {
              if (thisChangeId === changeCounter) cleanupLastIncludeContent();
            });
            scope.$emit('$includeContentRequested');
          } else {
            cleanupLastIncludeContent();
          }
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngInit
 *
 * @description
 * The `ngInit` directive specifies initialization tasks to be executed
 *  before the template enters execution mode during bootstrap.
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <doc:example>
     <doc:source>
    <div ng-init="greeting='Hello'; person='World'">
      {{greeting}} {{person}}!
    </div>
     </doc:source>
     <doc:scenario>
       it('should check greeting', function() {
         expect(binding('greeting')).toBe('Hello');
         expect(binding('person')).toBe('World');
       });
     </doc:scenario>
   </doc:example>
 */
var ngInitDirective = ngDirective({
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    }
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngNonBindable
 * @priority 1000
 *
 * @description
 * Sometimes it is necessary to write code which looks like bindings but which should be left alone
 * by angular. Use `ngNonBindable` to make angular ignore a chunk of HTML.
 *
 * @element ANY
 *
 * @example
 * In this example there are two location where a simple binding (`{{}}`) is present, but the one
 * wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <doc:example>
      <doc:source>
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </doc:source>
      <doc:scenario>
       it('should check ng-non-bindable', function() {
         expect(using('.doc-example-live').binding('1 + 2')).toBe('3');
         expect(using('.doc-example-live').element('div:last').text()).
           toMatch(/1 \+ 2/);
       });
      </doc:scenario>
    </doc:example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/**
 * @ngdoc directive
 * @name ng.directive:ngPluralize
 * @restrict EA
 *
 * @description
 * # Overview
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 * plural categories} and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 * plural categories} in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * <pre>
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *</pre>
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces(`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * <pre>
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * </pre>
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Marry and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bounded to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <doc:example>
      <doc:source>
        <script>
          function Ctrl($scope) {
            $scope.person1 = 'Igor';
            $scope.person2 = 'Misko';
            $scope.personCount = 1;
          }
        </script>
        <div ng-controller="Ctrl">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </doc:source>
      <doc:scenario>
        it('should show correct pluralized string', function() {
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                             toBe('1 person is viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                                                toBe('Igor is viewing.');

          using('.doc-example-live').input('personCount').enter('0');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                               toBe('Nobody is viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                                              toBe('Nobody is viewing.');

          using('.doc-example-live').input('personCount').enter('2');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('2 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor and Misko are viewing.');

          using('.doc-example-live').input('personCount').enter('3');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('3 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor, Misko and one other person are viewing.');

          using('.doc-example-live').input('personCount').enter('4');
          expect(element('.doc-example-live ng-pluralize:first').text()).
                                            toBe('4 people are viewing.');
          expect(element('.doc-example-live ng-pluralize:last').text()).
                              toBe('Igor, Misko and 2 other people are viewing.');
        });

        it('should show data-binded names', function() {
          using('.doc-example-live').input('personCount').enter('4');
          expect(element('.doc-example-live ng-pluralize:last').text()).
              toBe('Igor, Misko and 2 other people are viewing.');

          using('.doc-example-live').input('person1').enter('Di');
          using('.doc-example-live').input('person2').enter('Vojta');
          expect(element('.doc-example-live ng-pluralize:last').text()).
              toBe('Di, Vojta and 2 other people are viewing.');
        });
      </doc:scenario>
    </doc:example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
  var BRACE = /{}/g;
  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          isWhen = /^when(Minus)?(.+)$/;

      forEach(attr, function(expression, attributeName) {
        if (isWhen.test(attributeName)) {
          whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] =
            element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] =
          $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +
            offset + endSymbol));
      });

      scope.$watch(function ngPluralizeWatch() {
        var value = parseFloat(scope.$eval(numberExp));

        if (!isNaN(value)) {
          //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
          //check it against pluralization rules in $locale service
          if (!(value in whens)) value = $locale.pluralCat(value - offset);
           return whensExpFns[value](scope, element, true);
        } else {
          return '';
        }
      }, function ngPluralizeWatchAction(newVal) {
        element.text(newVal);
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * <pre>
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * </pre>
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * <pre>
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * </pre>
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * enter - when a new item is added to the list or when an item is revealed after a filter
 * leave - when an item is removed from the list or when an item is filtered out
 * move - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` â€“ where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` â€“ where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` â€“ You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)'. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way ian the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0;
      }

      .example-animate-container > li {
        padding:10px;
        list-style:none;
      }

      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave,
      .animate-repeat.ng-move {
        -webkit-transition:all linear 0.5s;
        -moz-transition:all linear 0.5s;
        -o-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-enter {
        line-height:0;
        opacity:0;
        padding-top:0;
        padding-bottom:0;
      }
      .animate-repeat.ng-enter.ng-enter-active {
        line-height:20px;
        opacity:1;
        padding:10px;
      }

      .animate-repeat.ng-leave {
        opacity:1;
        line-height:20px;
        padding:10px;
      }
      .animate-repeat.ng-leave.ng-leave-active {
        opacity:0;
        line-height:0;
        padding-top:0;
        padding-bottom:0;
      }

      .animate-repeat.ng-move { }
      .animate-repeat.ng-move.ng-move-active { }
    </file>
    <file name="scenario.js">
       it('should render initial data set', function() {
         var r = using('.doc-example-live').repeater('ul li');
         expect(r.count()).toBe(10);
         expect(r.row(0)).toEqual(["1","John","25"]);
         expect(r.row(1)).toEqual(["2","Jessie","30"]);
         expect(r.row(9)).toEqual(["10","Samantha","60"]);
         expect(binding('friends.length')).toBe("10");
       });

       it('should update repeater when filter predicate changes', function() {
         var r = using('.doc-example-live').repeater('ul li');
         expect(r.count()).toBe(10);

         input('q').enter('ma');

         expect(r.count()).toBe(2);
         expect(r.row(0)).toEqual(["1","Mary","28"]);
         expect(r.row(1)).toEqual(["2","Samantha","60"]);
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    compile: function(element, attr, linker) {
      return function($scope, $element, $attr){
        var expression = $attr.ngRepeat;
        var match = expression.match(/^\s*(.+)\s+in\s+(.*?)\s*(\s+track\s+by\s+(.+)\s*)?$/),
          trackByExp, trackByExpGetter, trackByIdFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier,
          hashFnLocals = {$id: hashKey};

        if (!match) {
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
        }

        lhs = match[1];
        rhs = match[2];
        trackByExp = match[4];

        if (trackByExp) {
          trackByExpGetter = $parse(trackByExp);
          trackByIdFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        } else {
          trackByIdArrayFn = function(key, value) {
            return hashKey(value);
          }
          trackByIdObjFn = function(key) {
            return key;
          }
        }

        match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
        if (!match) {
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
                                                                    lhs);
        }
        valueIdentifier = match[3] || match[1];
        keyIdentifier = match[2];

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        var lastBlockMap = {};

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection){
          var index, length,
              previousNode = $element[0],     // current position of the node
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = {},
              arrayLength,
              childScope,
              key, value, // key/value of iteration
              trackById,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder = [];


          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (key in collection) {
              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                collectionKeys.push(key);
              }
            }
            collectionKeys.sort();
          }

          arrayLength = collectionKeys.length;

          // locate existing items
          length = nextBlockOrder.length = collectionKeys.length;
          for(index = 0; index < length; index++) {
           key = (collection === collectionKeys) ? index : collectionKeys[index];
           value = collection[key];
           trackById = trackByIdFn(key, value, index);
           if(lastBlockMap.hasOwnProperty(trackById)) {
             block = lastBlockMap[trackById]
             delete lastBlockMap[trackById];
             nextBlockMap[trackById] = block;
             nextBlockOrder[index] = block;
           } else if (nextBlockMap.hasOwnProperty(trackById)) {
             // restore lastBlockMap
             forEach(nextBlockOrder, function(block) {
               if (block && block.startNode) lastBlockMap[block.id] = block;
             });
             // This is a duplicate and we need to throw an error
             throw ngRepeatMinErr('dupes', "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}",
                                                                                                                                                    expression,       trackById);
           } else {
             // new never before seen block
             nextBlockOrder[index] = { id: trackById };
             nextBlockMap[trackById] = false;
           }
         }

          // remove existing items
          for (key in lastBlockMap) {
            if (lastBlockMap.hasOwnProperty(key)) {
              block = lastBlockMap[key];
              $animate.leave(block.elements);
              forEach(block.elements, function(element) { element[NG_REMOVED] = true});
              block.scope.$destroy();
            }
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0, length = collectionKeys.length; index < length; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.startNode) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element
              childScope = block.scope;

              nextNode = previousNode;
              do {
                nextNode = nextNode.nextSibling;
              } while(nextNode && nextNode[NG_REMOVED]);

              if (block.startNode == nextNode) {
                // do nothing
              } else {
                // existing item which got moved
                $animate.move(block.elements, null, jqLite(previousNode));
              }
              previousNode = block.endNode;
            } else {
              // new item which we don't know about
              childScope = $scope.$new();
            }

            childScope[valueIdentifier] = value;
            if (keyIdentifier) childScope[keyIdentifier] = key;
            childScope.$index = index;
            childScope.$first = (index === 0);
            childScope.$last = (index === (arrayLength - 1));
            childScope.$middle = !(childScope.$first || childScope.$last);
            childScope.$odd = !(childScope.$even = index%2==0);

            if (!block.startNode) {
              linker(childScope, function(clone) {
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = clone;
                block.scope = childScope;
                block.startNode = clone[0];
                block.elements = clone;
                block.endNode = clone[clone.length - 1];
                nextBlockMap[block.id] = block;
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngShow
 *
 * @description
 * The `ngShow` directive shows and hides the given HTML element conditionally based on the expression
 * provided to the ngShow attribute. The show and hide mechanism is a achieved by removing and adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is a predefined CSS class present
 * in AngularJS which sets the display style to none (using an !important flag).
 *
 * <pre>
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * </pre>
 *
 * When the ngShow expression evaluates to false then the ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When true, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by
 * restating the styles for the .ng-hide class in CSS:
 * <pre>
 * .ng-hide {
 *   //!annotate CSS Specificity|Not to worry, this will override the AngularJS default...
 *   display:block!important;
 *
 *   //this is just another form of hiding an element
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * </pre>
 *
 * Just remember to include the important flag so the CSS override will function.
 *
 * ## A note about animations with ngShow
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works similar to the animation system present with ngClass, however, the
 * only difference is that you must also include the !important flag to override the display property so
 * that you can perform an animation when the element is hidden during the time of the animation.
 *
 * <pre>
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 *   display:block!important;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * </pre>
 *
 * @animations
 * addClass: .ng-hide - happens after the ngShow expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: .ng-hide - happens after the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="icon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="icon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="animations.css">
      .animate-show.ng-hide-add, 
      .animate-show.ng-hide-remove {
        -webkit-transition:all linear 0.5s;
        -moz-transition:all linear 0.5s;
        -o-transition:all linear 0.5s;
        transition:all linear 0.5s;
        display:block!important;
      }

      .animate-show.ng-hide-add.ng-hide-add-active,
      .animate-show.ng-hide-remove {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .animate-show.ng-hide-add,
      .animate-show.ng-hide-remove.ng-hide-remove-active {
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="scenario.js">
       it('should check ng-show / ng-hide', function() {
         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);
         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);

         input('checked').check();

         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);
         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);
       });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngShow, function ngShowWatchAction(value){
      $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
    });
  };
}];


/**
 * @ngdoc directive
 * @name ng.directive:ngHide
 *
 * @description
 * The `ngHide` directive shows and hides the given HTML element conditionally based on the expression
 * provided to the ngHide attribute. The show and hide mechanism is a achieved by removing and adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is a predefined CSS class present
 * in AngularJS which sets the display style to none (using an !important flag).
 *
 * <pre>
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 * </pre>
 *
 * When the ngHide expression evaluates to true then the .ng-hide CSS class is added to the class attribute
 * on the element causing it to become hidden. When false, the ng-hide CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the .ng-hide CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding .ng-hide
 *
 * If you wish to change the hide behavior with ngShow/ngHide then this can be achieved by
 * restating the styles for the .ng-hide class in CSS:
 * <pre>
 * .ng-hide {
 *   //!annotate CSS Specificity|Not to worry, this will override the AngularJS default...
 *   display:block!important;
 *
 *   //this is just another form of hiding an element
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * </pre>
 *
 * Just remember to include the important flag so the CSS override will function.
 *
 * ## A note about animations with ngHide
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works similar to the animation system present with ngClass, however, the
 * only difference is that you must also include the !important flag to override the display property so
 * that you can perform an animation when the element is hidden during the time of the animation.
 *
 * <pre>
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 *   display:block!important;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * </pre>
 *
 * @animations
 * removeClass: .ng-hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: .ng-hide - happens after the ngHide expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="icon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="icon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="animations.css">
      .animate-hide.ng-hide-add, 
      .animate-hide.ng-hide-remove {
        -webkit-transition:all linear 0.5s;
        -moz-transition:all linear 0.5s;
        -o-transition:all linear 0.5s;
        transition:all linear 0.5s;
        display:block!important;
      }

      .animate-hide.ng-hide-add.ng-hide-add-active,
      .animate-hide.ng-hide-remove {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .animate-hide.ng-hide-add,
      .animate-hide.ng-hide-remove.ng-hide-remove-active {
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="scenario.js">
       it('should check ng-show / ng-hide', function() {
         expect(element('.doc-example-live .check-element:first:hidden').count()).toEqual(1);
         expect(element('.doc-example-live .check-element:last:visible').count()).toEqual(1);

         input('checked').check();

         expect(element('.doc-example-live .check-element:first:visible').count()).toEqual(1);
         expect(element('.doc-example-live .check-element:last:hidden').count()).toEqual(1);
       });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return function(scope, element, attr) {
    scope.$watch(attr.ngHide, function ngHideWatchAction(value){
      $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
    });
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:ngStyle
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle {@link guide/expression Expression} which evals to an
 *      object whose keys are CSS style names and values are corresponding values for those CSS
 *      keys.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set" ng-click="myStyle={color:'red'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="scenario.js">
       it('should check ng-style', function() {
         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');
         element('.doc-example-live :button[value=set]').click();
         expect(element('.doc-example-live span').css('color')).toBe('rgb(255, 0, 0)');
         element('.doc-example-live :button[value=clear]').click();
         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ng.directive:ngSwitch
 * @restrict EA
 *
 * @description
 * The ngSwitch directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within ngSwitch but without ngSwitchWhen or ngSwitchDefault directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), ngSwitch simply choses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **on="..." attribute**
 * (or the **ng-switch="..." attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * @animations
 * enter - happens after the ngSwtich contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 *
 * @scope
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * @paramDescription
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example animations="true">
    <file name="index.html">
      <div ng-controller="Ctrl">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div ng-switch-when="settings">Settings Div</div>
            <div ng-switch-when="home">Home Span</div>
            <div ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      function Ctrl($scope) {
        $scope.items = ['settings', 'home', 'other'];
        $scope.selection = $scope.items[0];
      }
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch-container > div {
        padding:10px;
      }

      .animate-switch-container > .ng-enter,
      .animate-switch-container > .ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch-container > .ng-enter {
        top:-50px;
      }
      .animate-switch-container > .ng-enter.ng-enter-active {
        top:0;
      }

      .animate-switch-container > .ng-leave {
        top:0;
      }
      .animate-switch-container > .ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="scenario.js">
      it('should start in settings', function() {
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select('selection').option('home');
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select('selection').option('other');
        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    restrict: 'EA',
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes,
          selectedElements,
          selectedScopes = [];

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        for (var i= 0, ii=selectedScopes.length; i<ii; i++) {
          selectedScopes[i].$destroy();
          $animate.leave(selectedElements[i]);
        }

        selectedElements = [];
        selectedScopes = [];

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          scope.$eval(attr.change);
          forEach(selectedTranscludes, function(selectedTransclude) {
            var selectedScope = scope.$new();
            selectedScopes.push(selectedScope);
            selectedTransclude.transclude(selectedScope, function(caseElement) {
              var anchor = selectedTransclude.element;

              selectedElements.push(caseElement);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  }
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 500,
  require: '^ngSwitch',
  compile: function(element, attrs, transclude) {
    return function(scope, element, attr, ctrl) {
      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: transclude, element: element });
    };
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 500,
  require: '^ngSwitch',
  compile: function(element, attrs, transclude) {
    return function(scope, element, attr, ctrl) {
      ctrl.cases['?'] = (ctrl.cases['?'] || []);
      ctrl.cases['?'].push({ transclude: transclude, element: element });
    };
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:ngTransclude
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <doc:example module="transclude">
     <doc:source>
       <script>
         function Ctrl($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }

         angular.module('transclude', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<div ng-transclude></div>' +
                         '</div>'
             };
         });
       </script>
       <div ng-controller="Ctrl">
         <input ng-model="title"><br>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </doc:source>
     <doc:scenario>
        it('should have transcluded', function() {
          input('title').enter('TITLE');
          input('text').enter('TEXT');
          expect(binding('title')).toEqual('TITLE');
          expect(binding('text')).toEqual('TEXT');
        });
     </doc:scenario>
   </doc:example>
 *
 */
var ngTranscludeDirective = ngDirective({
  controller: ['$transclude', function($transclude) {
    // remember the transclusion fn but call it during linking so that we don't process transclusion before directives on
    // the parent element even when the transclusion replaces the current element. (we can't use priority here because
    // that applies only to compile fns and not controllers
    this.$transclude = $transclude;
  }],

  link: function($scope, $element, $attrs, controller) {
    controller.$transclude(function(clone) {
      $element.html('');
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name ng.directive:script
 *
 * @description
 * Load content of a script tag, with type `text/ng-template`, into `$templateCache`, so that the
 * template can be used by `ngInclude`, `ngView` or directive templates.
 *
 * @restrict E
 * @param {'text/ng-template'} type must be set to `'text/ng-template'`
 *
 * @example
  <doc:example>
    <doc:source>
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </doc:source>
    <doc:scenario>
      it('should load template defined inside script tag', function() {
        element('#tpl-link').click();
        expect(element('#tpl-content').text()).toMatch(/Content of the template/);
      });
    </doc:scenario>
  </doc:example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ng.directive:select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * Optionally `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for a `<select>` element using an array or an object obtained by evaluating the
 * `ngOptions` expression.
 *
 * When an item in the `<select>` menu is selected, the value of array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive of the parent select element.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent `null` or "not selected"
 * option. See example below for demonstration.
 *
 * Note: `ngOptions` provides iterator facility for `<option>` element which should be used instead
 * of {@link ng.directive:ngRepeat ngRepeat} when you want the
 * `select` model to be bound to a non-string value. This is because an option element can currently
 * be bound to string values only.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`).
 *
 * @example
    <doc:example>
      <doc:source>
        <script>
        function MyCntrl($scope) {
          $scope.colors = [
            {name:'black', shade:'dark'},
            {name:'white', shade:'light'},
            {name:'red', shade:'dark'},
            {name:'blue', shade:'dark'},
            {name:'yellow', shade:'light'}
          ];
          $scope.color = $scope.colors[2]; // red
        }
        </script>
        <div ng-controller="MyCntrl">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="color" ng-options="c.name for c in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="color" ng-options="c.name for c in colors">
              <option value="">-- chose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="color" ng-options="c.name group by c.shade for c in colors">
          </select><br/>


          Select <a href ng-click="color={name:'not in list'}">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:color}  }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':color.name}">
          </div>
        </div>
      </doc:source>
      <doc:scenario>
         it('should check ng-options', function() {
           expect(binding('{selected_color:color}')).toMatch('red');
           select('color').option('0');
           expect(binding('{selected_color:color}')).toMatch('black');
           using('.nullable').select('color').option('');
           expect(binding('{selected_color:color}')).toMatch('null');
         });
      </doc:scenario>
    </doc:example>
 */

var ngOptionsDirective = valueFn({ terminal: true });
var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
                         //0000111110000000000022220000000000000000000000333300000000000000444444444444444440000000005555555555555555500000006666666666666666600000000000000007777000000000000000000088888
  var NG_OPTIONS_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w\d]*)|(?:\(\s*([\$\w][\$\w\d]*)\s*,\s*([\$\w][\$\w\d]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/,
      nullModelCtrl = {$setViewValue: noop};

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
      var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


      self.databound = $attrs.ngModel;


      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
        ngModelCtrl = ngModelCtrl_;
        nullOption = nullOption_;
        unknownOption = unknownOption_;
      }


      self.addOption = function(value) {
        optionsMap[value] = true;

        if (ngModelCtrl.$viewValue == value) {
          $element.val(value);
          if (unknownOption.parent()) unknownOption.remove();
        }
      };


      self.removeOption = function(value) {
        if (this.hasOption(value)) {
          delete optionsMap[value];
          if (ngModelCtrl.$viewValue == value) {
            this.renderUnknownOption(value);
          }
        }
      };


      self.renderUnknownOption = function(val) {
        var unknownVal = '? ' + hashKey(val) + ' ?';
        unknownOption.val(unknownVal);
        $element.prepend(unknownOption);
        $element.val(unknownVal);
        unknownOption.prop('selected', true); // needed for IE
      }


      self.hasOption = function(value) {
        return optionsMap.hasOwnProperty(value);
      }

      $scope.$on('$destroy', function() {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop;
      });
    }],

    link: function(scope, element, attr, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      if (!ctrls[1]) return;

      var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
          // we can't just jqLite('<option>') since jqLite is not smart enough
          // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

      // find "null" option
      for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
        if (children[i].value == '') {
          emptyOption = nullOption = children.eq(i);
          break;
        }
      }

      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

      // required validator
      if (multiple && (attr.required || attr.ngRequired)) {
        var requiredValidator = function(value) {
          ngModelCtrl.$setValidity('required', !attr.required || (value && value.length));
          return value;
        };

        ngModelCtrl.$parsers.push(requiredValidator);
        ngModelCtrl.$formatters.unshift(requiredValidator);

        attr.$observe('required', function() {
          requiredValidator(ngModelCtrl.$viewValue);
        });
      }

      if (optionsExp) Options(scope, element, ngModelCtrl);
      else if (multiple) Multiple(scope, element, ngModelCtrl);
      else Single(scope, element, ngModelCtrl, selectCtrl);


      ////////////////////////////



      function Single(scope, selectElement, ngModelCtrl, selectCtrl) {
        ngModelCtrl.$render = function() {
          var viewValue = ngModelCtrl.$viewValue;

          if (selectCtrl.hasOption(viewValue)) {
            if (unknownOption.parent()) unknownOption.remove();
            selectElement.val(viewValue);
            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (isUndefined(viewValue) && emptyOption) {
              selectElement.val('');
            } else {
              selectCtrl.renderUnknownOption(viewValue);
            }
          }
        };

        selectElement.on('change', function() {
          scope.$apply(function() {
            if (unknownOption.parent()) unknownOption.remove();
            ngModelCtrl.$setViewValue(selectElement.val());
          });
        });
      }

      function Multiple(scope, selectElement, ctrl) {
        var lastView;
        ctrl.$render = function() {
          var items = new HashMap(ctrl.$viewValue);
          forEach(selectElement.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ctrl.$viewValue)) {
            lastView = copy(ctrl.$viewValue);
            ctrl.$render();
          }
        });

        selectElement.on('change', function() {
          scope.$apply(function() {
            var array = [];
            forEach(selectElement.find('option'), function(option) {
              if (option.selected) {
                array.push(option.value);
              }
            });
            ctrl.$setViewValue(array);
          });
        });
      }

      function Options(scope, selectElement, ctrl) {
        var match;

        if (! (match = optionsExp.match(NG_OPTIONS_REGEXP))) {
          throw minErr('ngOptions')('iexp',
            "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",
            optionsExp, startingTag(selectElement));
        }

        var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
            // This is an array of array of existing option groups in DOM. We try to reuse these if possible
            // optionGroupsCache[0] is the options with no option group
            // optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]];

        if (nullOption) {
          // compile the element since there might be bindings in it
          $compile(nullOption)(scope);

          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          nullOption.removeClass('ng-scope');

          // we need to remove it before calling selectElement.html('') because otherwise IE will
          // remove the label from the element. wtf?
          nullOption.remove();
        }

        // clear contents, we'll add what's needed based on the model
        selectElement.html('');

        selectElement.on('change', function() {
          scope.$apply(function() {
            var optionGroup,
                collection = valuesFn(scope) || [],
                locals = {},
                key, value, optionElement, index, groupIndex, length, groupLength;

            if (multiple) {
              value = [];
              for (groupIndex = 0, groupLength = optionGroupsCache.length;
                   groupIndex < groupLength;
                   groupIndex++) {
                // list of options for that group. (first item has the parent)
                optionGroup = optionGroupsCache[groupIndex];

                for(index = 1, length = optionGroup.length; index < length; index++) {
                  if ((optionElement = optionGroup[index].element)[0].selected) {
                    key = optionElement.val();
                    if (keyName) locals[keyName] = key;
                    if (trackFn) {
                      for (var trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                        locals[valueName] = collection[trackIndex];
                        if (trackFn(scope, locals) == key) break;
                      }
                    } else {
                      locals[valueName] = collection[key];
                    }
                    value.push(valueFn(scope, locals));
                  }
                }
              }
            } else {
              key = selectElement.val();
              if (key == '?') {
                value = undefined;
              } else if (key == ''){
                value = null;
              } else {
                if (trackFn) {
                  for (var trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                    locals[valueName] = collection[trackIndex];
                    if (trackFn(scope, locals) == key) {
                      value = valueFn(scope, locals);
                      break;
                    }
                  }
                } else {
                  locals[valueName] = collection[key];
                  if (keyName) locals[keyName] = key;
                  value = valueFn(scope, locals);
                }
              }
            }
            ctrl.$setViewValue(value);
          });
        });

        ctrl.$render = render;

        // TODO(vojta): can't we optimize this ?
        scope.$watch(render);

        function render() {
          var optionGroups = {'':[]}, // Temporary location for the option groups before we render them
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              modelValue = ctrl.$modelValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              groupLength, length,
              groupIndex, index,
              locals = {},
              selected,
              selectedSet = false, // nothing is selected yet
              lastElement,
              element,
              label;

          if (multiple) {
            if (trackFn && isArray(modelValue)) {
              selectedSet = new HashMap([]);
              for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                locals[valueName] = modelValue[trackIndex];
                selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
              }
            } else {
              selectedSet = new HashMap(modelValue);
            }
          }

          // We now build up the list of options we need (we merge later)
          for (index = 0; length = keys.length, index < length; index++) {
               locals[valueName] = values[keyName ? locals[keyName]=keys[index]:index];
               optionGroupName = groupByFn(scope, locals) || '';
            if (!(optionGroup = optionGroups[optionGroupName])) {
              optionGroup = optionGroups[optionGroupName] = [];
              optionGroupNames.push(optionGroupName);
            }
            if (multiple) {
              selected = selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals)) != undefined;
            } else {
              if (trackFn) {
                var modelCast = {};
                modelCast[valueName] = modelValue;
                selected = trackFn(scope, modelCast) === trackFn(scope, locals);
              } else {
                selected = modelValue === valueFn(scope, locals);
              }
              selectedSet = selectedSet || selected; // see if at least one item is selected
            }
            label = displayFn(scope, locals); // what will be seen by the user
            label = label === undefined ? '' : label; // doing displayFn(scope, locals) || '' overwrites zero values
            optionGroup.push({
              id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),   // either the index into array or key from object
              label: label,
              selected: selected                   // determine if we should be selected
            });
          }
          if (!multiple) {
            if (nullOption || modelValue === null) {
              // insert null option if we have a placeholder, or the model is null
              optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});
            } else if (!selectedSet) {
              // option could not be found, we have to insert the undefined item
              optionGroups[''].unshift({id:'?', label:'', selected:true});
            }
          }

          // Now we need to update the list of DOM nodes to match the optionGroups we computed above
          for (groupIndex = 0, groupLength = optionGroupNames.length;
               groupIndex < groupLength;
               groupIndex++) {
            // current option group name or '' if no group
            optionGroupName = optionGroupNames[groupIndex];

            // list of options for that group. (first item has the parent)
            optionGroup = optionGroups[optionGroupName];

            if (optionGroupsCache.length <= groupIndex) {
              // we need to grow the optionGroups
              existingParent = {
                element: optGroupTemplate.clone().attr('label', optionGroupName),
                label: optionGroup.label
              };
              existingOptions = [existingParent];
              optionGroupsCache.push(existingOptions);
              selectElement.append(existingParent.element);
            } else {
              existingOptions = optionGroupsCache[groupIndex];
              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

              // update the OPTGROUP label if not the same.
              if (existingParent.label != optionGroupName) {
                existingParent.element.attr('label', existingParent.label = optionGroupName);
              }
            }

            lastElement = null;  // start at the beginning
            for(index = 0, length = optionGroup.length; index < length; index++) {
              option = optionGroup[index];
              if ((existingOption = existingOptions[index+1])) {
                // reuse elements
                lastElement = existingOption.element;
                if (existingOption.label !== option.label) {
                  lastElement.text(existingOption.label = option.label);
                }
                if (existingOption.id !== option.id) {
                  lastElement.val(existingOption.id = option.id);
                }
                // lastElement.prop('selected') provided by jQuery has side-effects
                if (lastElement[0].selected !== option.selected) {
                  lastElement.prop('selected', (existingOption.selected = option.selected));
                }
              } else {
                // grow elements

                // if it's a null option
                if (option.id === '' && nullOption) {
                  // put back the pre-compiled element
                  element = nullOption;
                } else {
                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                  // in this version of jQuery on some browser the .text() returns a string
                  // rather then the element.
                  (element = optionTemplate.clone())
                      .val(option.id)
                      .attr('selected', option.selected)
                      .text(option.label);
                }

                existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                });
                if (lastElement) {
                  lastElement.after(element);
                } else {
                  existingParent.element.append(element);
                }
                lastElement = element;
              }
            }
            // remove any excessive OPTIONs in a group
            index++; // increment since the existingOptions[0] is parent element not OPTION
            while(existingOptions.length > index) {
              existingOptions.pop().element.remove();
            }
          }
          // remove any excessive OPTGROUPs from select
          while(optionGroupsCache.length > groupIndex) {
            optionGroupsCache.pop()[0].element.remove();
          }
        }
      }
    }
  }
}];

var optionDirective = ['$interpolate', function($interpolate) {
  var nullSelectCtrl = {
    addOption: noop,
    removeOption: noop
  };

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function (scope, element, attr) {
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (selectCtrl && selectCtrl.databound) {
          // For some reason Opera defaults to true and if not overridden this messes up the repeater.
          // We don't want the view to drive the initialization of the model anyway.
          element.prop('selected', false);
        } else {
          selectCtrl = nullSelectCtrl;
        }

        if (interpolateFn) {
          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
            attr.$set('value', newVal);
            if (newVal !== oldVal) selectCtrl.removeOption(oldVal);
            selectCtrl.addOption(newVal);
          });
        } else {
          selectCtrl.addOption(attr.value);
        }

        element.on('$destroy', function() {
          selectCtrl.removeOption(attr.value);
        });
      };
    }
  }
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: true
});

  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);
angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}</style>');
},{}],24:[function(require,module,exports){
;(function (exports) {

//List from node-htmlparser
var singleTags = {
  area: 1,
  base: 1,
  basefont: 1,
  br: 1,
  col: 1,
  frame: 1,
  hr: 1,
  img: 1,
  input: 1,
  isindex: 1,
  link: 1,
  meta: 1,
  param: 1,
  embed: 1
};

var expr = {
  upperCaseChars: /([A-Z])/g,
  breakBetweenTags: /(<(\/?\w+).*?>)(?=<(?!\/\2))/gi,
  singleTag: (function() {
    var tags = [];
    for (var i in singleTags) {
      tags.push(i);
    }
    return new RegExp('<' + tags.join('|<'), 'i');
  })()
};

var uncanon = function(str, letter) {
  return '-' + letter.toLowerCase();
};

var HTMLEncode = function(text) { return text; }; // Noop

exports.stringifyElement = function stringifyElement(element) {
  var tagName = element.tagName.toLowerCase(),
      ret = {
        start: "<" + tagName,
        end:''
      },
      attributes = [],
      i,
      attribute = null;

  if (element.attributes.length) {
    ret.start += " ";
    for (i = 0; i<element.attributes.length; i++) {
      attribute = element.attributes.item(i);
      attributes.push(attribute.name + '="' +
                      HTMLEncode(attribute.nodeValue, true) + '"');
    }
  }
  ret.start += attributes.join(" ");

  if (singleTags[tagName]) {
    ret.start += " />";
    ret.end = '';
  } else {
    ret.start += ">";
    ret.end = "</" + tagName + ">";
  }

  return ret;
};

var rawTextElements = /SCRIPT|STYLE/i;

function stringifyDoctype (doctype) {
  if (doctype.ownerDocument && doctype.ownerDocument.fullDT) {
    return doctype.ownerDocument.fullDT;
  }

  var dt = '<!DOCTYPE ' + doctype.name;
  if (doctype.publicId) {
    // Public ID may never contain double quotes, so this is always safe.
    dt += ' PUBLIC "' + doctype.publicId + '" ';
  }
  if (!doctype.publicId && doctype.systemId) {
    dt += ' SYSTEM ';
  }
  if (doctype.systemId) {
    // System ID may contain double quotes OR single quotes, not never both.
    if (doctype.systemId.indexOf('"') > -1) {
      dt += "'" + doctype.systemId + "'";
    } else {
      dt += '"' + doctype.systemId + '"';
    }
  }
  dt += '>';
  return dt;
}

exports.makeHtmlGenerator = function makeHtmlGenerator(indentUnit, eol) {
  indentUnit = indentUnit || "";
  eol = eol || "";

  return function generateHtmlRecursive(node, rawText, curIndent) {
    var ret = "", parent, current, i, children;
    curIndent = curIndent || "";
    if (node) {
      if (node.nodeType &&
          node.nodeType === node.ENTITY_REFERENCE_NODE) {
        node = node.entity;
      }

      var childNodesRawText = rawText || rawTextElements.test(node.nodeName);
      
      switch (node.nodeType) {
        case node.ELEMENT_NODE:
          if (node.tagName === "TEMPLATE") {
            children = node.content.childNodes;
            childNodesRawText = true;
          } else {
            children = node.childNodes;
          }
          
          current = exports.stringifyElement(node);
          
          if (childNodesRawText) {
            ret += curIndent + current.start;
          } else {
            ret += curIndent + current.start;
          }
          
          if (node.nodeName === "HTML") ret += eol;

          if (children.length > 0) {
            if (children[0].nodeType !== node.TEXT_NODE) {
              ret += eol;
            }
            for (i=0; i<children.length; i++) {
              ret += generateHtmlRecursive(children[i], childNodesRawText, curIndent + indentUnit) || (i === 0 && children.length > 1 ? eol : "");
            }
            if (children[children.length - 1].nodeType !== node.TEXT_NODE || ret.charAt(ret.length - 1) === eol) {
              ret += curIndent;
            }
            ret += current.end + eol;
          } else {
            ret += ((rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '') + current.end + eol;
          }
          
          if (node.nodeName === "HEAD" || node.nodeName === "BODY") ret += eol;
          
          break;
        case node.TEXT_NODE:
          // Skip pure whitespace nodes if we're indenting
          if (!indentUnit || !/^[\s\n]*$/.test(node.nodeValue)) {
            ret += (rawText ? node.nodeValue : HTMLEncode(node.nodeValue, false)) || '';
          }
          break;
        case node.COMMENT_NODE:
          ret += curIndent + '<!--' + node.nodeValue + '-->' + eol;
          break;
        case node.DOCUMENT_NODE:
          for (i=0; i<node.childNodes.length; i++) {
            ret += generateHtmlRecursive(node.childNodes[i], childNodesRawText, curIndent);
          }
          break;
        case node.DOCUMENT_TYPE_NODE:
          ret += stringifyDoctype(node);
          ret += eol; // Two newlines after doctype
        break;
      }
    }
    return ret;
  };
};

exports.domToHtml = function(dom, noformat, raw) {
  var htmlGenerator = exports.makeHtmlGenerator(noformat ? "" : "  ",
                                                noformat ? "" : "\n");
  if (dom.toArray) {
    // node list
    dom = dom.toArray();
  }
  if (typeof dom.length !== 'undefined') {
    var ret = "";
    for (var i=0,len=dom.length; i<len; i++) {
      ret += htmlGenerator(dom[i], raw);
    }
    return ret;
  } else {
    // single node
    return htmlGenerator(dom, raw);
  }
};


})(typeof exports === "object" ? exports : dominatrix = {});
},{}],25:[function(require,module,exports){
/**
 * Operative
 * ---
 * Operative is a small JS utility for seamlessly creating Web Worker scripts.
 * ---
 * @author James Padolsey http://james.padolsey.com
 * @repo http://github.com/padolsey/operative
 * @version 0.2.1
 * @license MIT
 */
(function() {

	if (typeof window == 'undefined' && self.importScripts) {
		// I'm a worker! Run the boiler-script:
		// (Operative itself is called in IE10 as a worker,
		//  to avoid SecurityErrors)
		workerBoilerScript();
		return;
	}

	var slice = [].slice;
	var hasOwn = {}.hasOwnProperty;

	var scripts = document.getElementsByTagName('script');
	var opScript = scripts[scripts.length - 1];
	var opScriptURL = /operative/.test(opScript.src) && opScript.src;

	// Default base URL (to be prepended to relative dependency URLs)
	// is current page's parent dir:
	var baseURL = (
		location.protocol + '//' +
		location.hostname +
		(location.port?':'+location.port:'') +
		location.pathname
	).replace(/[^\/]+$/, '');

	var URL = window.URL || window.webkitURL;
	var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;

	var workerViaBlobSupport = (function() {
		try {
			new Worker(makeBlobURI(';'));
		} catch(e) {
			return false;
		}
		return true;
	}());

	/**
	 * Provide Object.create shim
	 */
	var objCreate = Object.create || function(o) {
		function F() {}
		F.prototype = o;
		return new F();
	};

	function makeBlobURI(script) {
		var blob;

		try {
			blob = new Blob([script], { type: 'text/javascript' });
		} catch (e) { 
			blob = new BlobBuilder();
			blob.append(script);
			blob = blob.getBlob();
		}

		return URL.createObjectURL(blob);
	}

	// Indicates whether operatives will run within workers:
	operative.hasWorkerSupport = !!window.Worker;

	operative.Promise = window.Promise;

	// Expose:
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = operative;
	} else {
		window.operative = operative;
	}
	

	operative.setSelfURL = function(url) {
		opScriptURL = url;
	};

	operative.setBaseURL = function(base) {
		baseURL = base;
	};

	operative.getBaseURL = function() {
		return baseURL;
	};

	/**
	 * Operative: Exposed Operative Constructor
	 * @param {Object} module Object containing methods/properties
	 */
	function Operative(module, dependencies) {

		var _self = this;

		module.get = module.get || function(prop) {
			return this[prop];
		};

		module.set = module.set || function(prop, value) {
			return this[prop] = value;
		};

		this._curToken = 0;
		this._queue = [];

		this.isDestroyed = false;
		this.isContextReady = false;

		this.module = module;
		this.dependencies = dependencies || [];

		this.dataProperties = {};
		this.api = {};
		this.callbacks = {};
		this.deferreds = {};

		this._fixDependencyURLs();
		this._setup();

		for (var methodName in module) {
			if (hasOwn.call(module, methodName)) {
				this._createExposedMethod(methodName);
			}
		}

		this.api.__operative__ = this;

		// Provide the instance's destroy method on the exposed API:
		this.api.destroy = function() {
			return _self.destroy();
		};

	}

	Operative.prototype = {

		_marshal: function(v) {
			return v;
		},

		_demarshal: function(v) {
			return v;
		},

		_enqueue: function(fn) {
			this._queue.push(fn);
		},

		_fixDependencyURLs: function() {
			var deps = this.dependencies;
			for (var i = 0, l = deps.length; i < l; ++i) {
				var dep = deps[i];
				if (!/\/\//.test(dep)) {
					deps[i] = dep.replace(/^\/?/, baseURL);
				}
			}
		},

		_dequeueAll: function() {
			for (var i = 0, l = this._queue.length; i < l; ++i) {
				this._queue[i].call(this);
			}
			this._queue = [];
		},

		_buildContextScript: function(boilerScript) {

			var script = [];
			var module = this.module;
			var dataProperties = this.dataProperties;
			var property;

			for (var i in module) {
				property = module[i];
				if (typeof property == 'function') {
					script.push('   self["' + i.replace(/"/g, '\\"') + '"] = ' + property.toString() + ';');
				} else {
					dataProperties[i] = property;
				}
			}

			return script.join('\n') + (
				boilerScript ? '\n(' + boilerScript.toString() + '());' : ''
			);

		},

		_createExposedMethod: function(methodName) {

			var self = this;

			this.api[methodName] = function() {

				if (self.isDestroyed) {
					throw new Error('Operative: Cannot run method. Operative has already been destroyed');
				}

				var token = ++self._curToken;
				var args = slice.call(arguments);
				var cb = typeof args[args.length - 1] == 'function' && args.pop();

				if (!cb && !operative.Promise) {
					throw new Error(
						'Operative: No callback has been passed. Assumed that you want a promise. ' +
						'But `operative.Promise` is null. Please provide Promise polyfill/lib.'
					);
				}

				if (cb) {

					self.callbacks[token] = cb;

					// Ensure either context runs the method async:
					setTimeout(function() {
						runMethod();
					}, 1);

				} else if (operative.Promise) {

					// No Callback -- Promise used:

					return new operative.Promise(function(deferred) {
						deferred.fulfil = deferred.fulfill;
						self.deferreds[token] = deferred;
						runMethod();
					});

				}

				function runMethod() {
					if (self.isContextReady) {
						self._runMethod(methodName, token, args);
					} else {
						self._enqueue(runMethod);
					}
				}

			};

		},

		destroy: function() {
			this.isDestroyed = true;
		}
	};


	/**
	 * Operative Worker
	 */
	Operative.Worker = function Worker(module) {
		this._msgQueue = [];
		Operative.apply(this, arguments);
	};

	var WorkerProto = Operative.Worker.prototype = objCreate(Operative.prototype);

	WorkerProto._onWorkerMessage = function(e) {
		var data = e.data;

		if (typeof data === 'string' && data.indexOf('pingback') === 0) {
			if (data === 'pingback:structuredCloningSupport=NO') {
				// No structuredCloningSupport support (marshal JSON from now on):
				this._marshal = function(o) { return JSON.stringify(o); };
				this._demarshal = function(o) { return JSON.parse(o); };
			}

			this.isContextReady = true;
			this._postMessage({
				definitions: this.dataProperties
			});
			this._dequeueAll();
			return;

		}

		data = this._demarshal(data);

		switch (data.cmd) {
			case 'console':
				window.console && window.console[data.method].apply(window.console, data.args);
				break;
			case 'result':

				var callback = this.callbacks[data.token];
				var deferred = this.deferreds[data.token];

				delete this.callbacks[data.token];
				delete this.deferreds[data.token];

				var deferredAction = data.result && data.result.isDeferred && data.result.action;

				if (deferred && deferredAction) {
					deferred[deferredAction](data.result.args[0]);
				} else if (callback) {
					callback.apply(this, data.result.args);
				}

				break;
		}
	};

	WorkerProto._setup = function() {
		var self = this;

		var worker;
		var script = this._buildContextScript(
			// The script is not included if we're Eval'ing this file directly:
			workerViaBlobSupport ? workerBoilerScript : ''
		);

		if (this.dependencies.length) {
			script = 'importScripts("' + this.dependencies.join('", "') + '");\n' + script;
		}

		if (workerViaBlobSupport) {
			worker = this.worker = new Worker( makeBlobURI(script) );
		}  else {
			if (!opScriptURL) {
				throw new Error('Operaritve: No operative.js URL available. Please set via operative.setSelfURL(...)');
			}
			worker = this.worker = new Worker( opScriptURL );
			// Marshal-agnostic initial message is boiler-code:
			// (We don't yet know if structured-cloning is supported so we send a string)
			worker.postMessage('EVAL|' + script);
		}

		worker.postMessage(['PING']); // Initial PING

		worker.addEventListener('message', function(e) {
			self._onWorkerMessage(e);
		});
	};

	WorkerProto._postMessage = function(msg) {
		return this.worker.postMessage(this._marshal(msg));
	};

	WorkerProto._runMethod = function(methodName, token, args) {
		this._postMessage({
			method: methodName,
			args: args,
			token: token
		});
	};

	WorkerProto.destroy = function() {
		this.worker.terminate();
		Operative.prototype.destroy.call(this);
	};


	/**
	 * Operative IFrame
	 */
	Operative.Iframe = function Iframe(module) {
		Operative.apply(this, arguments);
	};

	var IframeProto = Operative.Iframe.prototype = objCreate(Operative.prototype);

	var _loadedMethodNameI = 0;

	IframeProto._setup = function() {

		var self = this;
		var loadedMethodName = '__operativeIFrameLoaded' + ++_loadedMethodNameI;

		this.module.isWorker = false;

		var iframe = this.iframe = document.body.appendChild(
			document.createElement('iframe')
		);

		iframe.style.display = 'none';

		var iWin = this.iframeWindow = iframe.contentWindow;
		var iDoc = iWin.document;

		// Cross browser (tested in IE8,9) way to call method from within
		// IFRAME after all <Script>s have loaded:
		window[loadedMethodName] = function() {

			window[loadedMethodName] = null;

			var script = iDoc.createElement('script');
			var js = self._buildContextScript(iframeBoilerScript);

			if (script.text !== void 0) {
				script.text = js;
			} else {
				script.innerHTML = js;
			}

			iDoc.documentElement.appendChild(script);

			for (var i in self.dataProperties) {
				iWin[i] = self.dataProperties[i];
			}

			self.isContextReady = true;
			self._dequeueAll();

		};

		iDoc.open();
		if (this.dependencies.length) {
			iDoc.write(
				'<script src="' + this.dependencies.join('"></script><script src="') + '"></script>'
			);
		}
		// Place <script> at bottom to tell parent-page when dependencies are loaded:
		iDoc.write('<script>window.top.' + loadedMethodName + '();</script>');
		iDoc.close();

	};

	IframeProto._runMethod = function(methodName, token, args) {
		var self = this;
		var callback = this.callbacks[token];
		var deferred = this.deferreds[token];
		delete this.callbacks[token];
		delete this.deferreds[token];
		this.iframeWindow.__run__(methodName, args, function() {
			var cb = callback;
			if (cb) {
				callback = null;
				cb.apply(self, arguments);
			} else {
				throw new Error('Operative: You have already returned.');
			}
		}, deferred);
	};

	IframeProto.destroy = function() {
		this.iframe.parentNode.removeChild(this.iframe);
		Operative.prototype.destroy.call(this);
	};

	operative.Operative = Operative;

	/**
	 * Exposed operative factory
	 */
	function operative(module, dependencies) {

		var OperativeContext = operative.hasWorkerSupport ?
			Operative.Worker : Operative.Iframe;

		if (typeof module == 'function') {
			// Allow a single function to be passed.
			var o = new OperativeContext({ main: module }, dependencies);
			return function() {
				return o.api.main.apply(o, arguments);
			};
		}

		return new OperativeContext(module, dependencies).api;

	}

/**
 * The boilerplate for the Iframe Context
 * NOTE:
 *  this'll be executed within an iframe, not here.
 *  Indented @ Zero to make nicer debug code within worker
 */
function iframeBoilerScript() {

	// Called from parent-window:
	window.__run__ = function(methodName, args, cb, deferred) {

		var isAsync = false;
		var isDeferred = false;

		window.async = function() {
			isAsync = true;
			return cb;
		};

		window.deferred = function() {
			isDeferred = true;
			return deferred;
		};

		if (cb) {
			args.push(cb);
		}

		var result = window[methodName].apply(window, args);

		window.async = function() {
			throw new Error('Operative: async() called at odd time');
		};

		window.deferred = function() {
			throw new Error('Operative: deferred() called at odd time');
		};


		if (!isDeferred && !isAsync && result !== void 0) {
			// Deprecated direct-returning as of 0.2.0
			cb(result);
		}
	};
}

/**
 * The boilerplate for the Worker Blob
 * NOTE:
 *  this'll be executed within an iframe, not here.
 *  Indented @ Zero to make nicer debug code within worker
 */
function workerBoilerScript() {

	var postMessage = self.postMessage;
	var structuredCloningSupport = null;

	self.console = {};
	self.isWorker = true;

	// Provide basic console interface:
	['log', 'debug', 'error', 'info', 'warn', 'time', 'timeEnd'].forEach(function(meth) {
		self.console[meth] = function() {
			postMessage({
				cmd: 'console',
				method: meth,
				args: [].slice.call(arguments)
			});
		};
	});

	self.addEventListener('message', function(e) {

		var data = e.data;

		if (typeof data == 'string' && data.indexOf('EVAL|') === 0) {
			eval(data.substring(5));
			return;
		}

		if (structuredCloningSupport == null) {

			// e.data of ['PING'] (An array) indicates transferrableObjSupport
			// e.data of '"PING"' (A string) indicates no support (Array has been serialized)
			structuredCloningSupport = e.data[0] === 'PING';

			// Pingback to parent page:
			self.postMessage(
				structuredCloningSupport ?
					'pingback:structuredCloningSupport=YES' :
					'pingback:structuredCloningSupport=NO'
			);

			if (!structuredCloningSupport) {
				postMessage = function(msg) {
					// Marshal before sending
					return self.postMessage(JSON.stringify(msg));
				};
			}

			return;
		}

		if (!structuredCloningSupport) {
			// Demarshal:
			data = JSON.parse(data);
		}

		var defs = data.definitions;
		var isDeferred = false;
		var isAsync = false;
		var args = data.args;

		if (defs) {
			// Initial definitions:
			for (var i in defs) {
				self[i] = defs[i];
			}
			return;
		}

		args.push(function() {
			// Callback function to be passed to operative method
			returnResult({
				args: [].slice.call(arguments)
			});
		});

		self.async = function() { // Async deprecated as of 0.2.0
			isAsync = true;
			return function() { returnResult({ args: [].slice.call(arguments) }); };
		};

		self.deferred = function() {
			isDeferred = true;
			var def = {};
			function fulfill(r) {
				returnResult({
					isDeferred: true,
					action: 'fulfill',
					args: [r]
				});
				return def;
			}
			function reject(r) {
				returnResult({
					isDeferred: true,
					action: 'reject',
					args: [r]
				});
			}
			def.fulfil = def.fulfill = fulfill;
			def.reject = reject;
			return def;
		};

		// Call actual operative method:
		var result = self[data.method].apply(self, args);

		if (!isDeferred && !isAsync && result !== void 0) {
			// Deprecated direct-returning as of 0.2.0
			returnResult({
				args: [result]
			});
		}

		self.deferred = function() {
			throw new Error('Operative: deferred() called at odd time');
		};

		self.async = function() { // Async deprecated as of 0.2.0
			throw new Error('Operative: async() called at odd time');
		};

		function returnResult(res) {
			postMessage({
				cmd: 'result',
				token: data.token,
				result: res
			});
			// Override with error-thrower if we've already returned:
			returnResult = function() {
				throw new Error('Operative: You have already returned.');
			};
		}
	});
}

}());
},{}],26:[function(require,module,exports){
(function(){
function e() {
  return function() {
  }
}
function m(a) {
  return function(b) {
    this[a] = b
  }
}
function aa(a) {
  return function() {
    return this[a]
  }
}
function ba(a) {
  return function() {
    return a
  }
}
var p, ca = ca || {}, q = this;
function da(a) {
  a = a.split(".");
  for(var b = q, c;c = a.shift();) {
    if(null != b[c]) {
      b = b[c]
    }else {
      return null
    }
  }
  return b
}
function ea() {
}
function fa(a) {
  var b = typeof a;
  if("object" == b) {
    if(a) {
      if(a instanceof Array) {
        return"array"
      }
      if(a instanceof Object) {
        return b
      }
      var c = Object.prototype.toString.call(a);
      if("[object Window]" == c) {
        return"object"
      }
      if("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) {
        return"array"
      }
      if("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if("function" == b && "undefined" == typeof a.call) {
      return"object"
    }
  }
  return b
}
function s(a) {
  return"array" == fa(a)
}
function ga(a) {
  var b = fa(a);
  return"array" == b || "object" == b && "number" == typeof a.length
}
function u(a) {
  return"string" == typeof a
}
function ha(a) {
  return"function" == fa(a)
}
function v(a) {
  return a[ia] || (a[ia] = ++ja)
}
var ia = "closure_uid_" + (1E9 * Math.random() >>> 0), ja = 0;
function ka(a, b, c) {
  return a.call.apply(a.bind, arguments)
}
function la(a, b, c) {
  if(!a) {
    throw Error();
  }
  if(2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function() {
      var c = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(c, d);
      return a.apply(b, c)
    }
  }
  return function() {
    return a.apply(b, arguments)
  }
}
function w(a, b, c) {
  w = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ka : la;
  return w.apply(null, arguments)
}
var x = Date.now || function() {
  return+new Date
};
function y(a, b) {
  function c() {
  }
  c.prototype = b.prototype;
  a.ra = b.prototype;
  a.prototype = new c
}
;function ma(a, b) {
  for(var c = 1;c < arguments.length;c++) {
    var d = String(arguments[c]).replace(/\$/g, "$$$$");
    a = a.replace(/\%s/, d)
  }
  return a
}
function na(a) {
  if(!oa.test(a)) {
    return a
  }
  -1 != a.indexOf("&") && (a = a.replace(pa, "&amp;"));
  -1 != a.indexOf("<") && (a = a.replace(qa, "&lt;"));
  -1 != a.indexOf(">") && (a = a.replace(ra, "&gt;"));
  -1 != a.indexOf('"') && (a = a.replace(sa, "&quot;"));
  return a
}
var pa = /&/g, qa = /</g, ra = />/g, sa = /\"/g, oa = /[&<>\"]/;
var z, ta, ua, va;
function wa() {
  return q.navigator ? q.navigator.userAgent : null
}
va = ua = ta = z = !1;
var xa;
if(xa = wa()) {
  var ya = q.navigator;
  z = 0 == xa.indexOf("Opera");
  ta = !z && -1 != xa.indexOf("MSIE");
  ua = !z && -1 != xa.indexOf("WebKit");
  va = !z && !ua && "Gecko" == ya.product
}
var za = z, A = ta, Aa = va, B = ua, Ba = q.navigator, Ca = -1 != (Ba && Ba.platform || "").indexOf("Mac");
function Da() {
  var a = q.document;
  return a ? a.documentMode : void 0
}
var Ea;
a: {
  var Fa = "", Ga;
  if(za && q.opera) {
    var Ha = q.opera.version, Fa = "function" == typeof Ha ? Ha() : Ha
  }else {
    if(Aa ? Ga = /rv\:([^\);]+)(\)|;)/ : A ? Ga = /MSIE\s+([^\);]+)(\)|;)/ : B && (Ga = /WebKit\/(\S+)/), Ga) {
      var Ia = Ga.exec(wa()), Fa = Ia ? Ia[1] : ""
    }
  }
  if(A) {
    var Ja = Da();
    if(Ja > parseFloat(Fa)) {
      Ea = String(Ja);
      break a
    }
  }
  Ea = Fa
}
var Ka = {};
function C(a) {
  var b;
  if(!(b = Ka[a])) {
    b = 0;
    for(var c = String(Ea).replace(/^[\s\xa0]+|[\s\xa0]+$/g, "").split("."), d = String(a).replace(/^[\s\xa0]+|[\s\xa0]+$/g, "").split("."), f = Math.max(c.length, d.length), g = 0;0 == b && g < f;g++) {
      var h = c[g] || "", n = d[g] || "", k = RegExp("(\\d*)(\\D*)", "g"), t = RegExp("(\\d*)(\\D*)", "g");
      do {
        var l = k.exec(h) || ["", "", ""], r = t.exec(n) || ["", "", ""];
        if(0 == l[0].length && 0 == r[0].length) {
          break
        }
        b = ((0 == l[1].length ? 0 : parseInt(l[1], 10)) < (0 == r[1].length ? 0 : parseInt(r[1], 10)) ? -1 : (0 == l[1].length ? 0 : parseInt(l[1], 10)) > (0 == r[1].length ? 0 : parseInt(r[1], 10)) ? 1 : 0) || ((0 == l[2].length) < (0 == r[2].length) ? -1 : (0 == l[2].length) > (0 == r[2].length) ? 1 : 0) || (l[2] < r[2] ? -1 : l[2] > r[2] ? 1 : 0)
      }while(0 == b)
    }
    b = Ka[a] = 0 <= b
  }
  return b
}
var La = q.document, Ma = La && A ? Da() || ("CSS1Compat" == La.compatMode ? parseInt(Ea, 10) : 5) : void 0;
function Na(a) {
  Error.captureStackTrace ? Error.captureStackTrace(this, Na) : this.stack = Error().stack || "";
  a && (this.message = String(a))
}
y(Na, Error);
Na.prototype.name = "CustomError";
function Oa(a, b) {
  b.unshift(a);
  Na.call(this, ma.apply(null, b));
  b.shift();
  this.Jc = a
}
y(Oa, Na);
Oa.prototype.name = "AssertionError";
function Pa(a, b) {
  throw new Oa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
}
;var Qa = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$");
function Ra(a) {
  var b = Sa, c;
  for(c in b) {
    a.call(void 0, b[c], c, b)
  }
}
function Ta(a) {
  var b = [], c = 0, d;
  for(d in a) {
    b[c++] = a[d]
  }
  return b
}
function Ua(a) {
  var b = [], c = 0, d;
  for(d in a) {
    b[c++] = d
  }
  return b
}
var Va = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Wa(a, b) {
  for(var c, d, f = 1;f < arguments.length;f++) {
    d = arguments[f];
    for(c in d) {
      a[c] = d[c]
    }
    for(var g = 0;g < Va.length;g++) {
      c = Va[g], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c])
    }
  }
}
;var D = Array.prototype, Xa = D.indexOf ? function(a, b, c) {
  return D.indexOf.call(a, b, c)
} : function(a, b, c) {
  c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
  if(u(a)) {
    return u(b) && 1 == b.length ? a.indexOf(b, c) : -1
  }
  for(;c < a.length;c++) {
    if(c in a && a[c] === b) {
      return c
    }
  }
  return-1
}, Ya = D.forEach ? function(a, b, c) {
  D.forEach.call(a, b, c)
} : function(a, b, c) {
  for(var d = a.length, f = u(a) ? a.split("") : a, g = 0;g < d;g++) {
    g in f && b.call(c, f[g], g, a)
  }
};
function Za(a) {
  return D.concat.apply(D, arguments)
}
function $a(a) {
  var b = a.length;
  if(0 < b) {
    for(var c = Array(b), d = 0;d < b;d++) {
      c[d] = a[d]
    }
    return c
  }
  return[]
}
;function ab(a) {
  if("function" == typeof a.N) {
    return a.N()
  }
  if(u(a)) {
    return a.split("")
  }
  if(ga(a)) {
    for(var b = [], c = a.length, d = 0;d < c;d++) {
      b.push(a[d])
    }
    return b
  }
  return Ta(a)
}
function E(a, b, c) {
  if("function" == typeof a.forEach) {
    a.forEach(b, c)
  }else {
    if(ga(a) || u(a)) {
      Ya(a, b, c)
    }else {
      var d;
      if("function" == typeof a.ka) {
        d = a.ka()
      }else {
        if("function" != typeof a.N) {
          if(ga(a) || u(a)) {
            d = [];
            for(var f = a.length, g = 0;g < f;g++) {
              d.push(g)
            }
          }else {
            d = Ua(a)
          }
        }else {
          d = void 0
        }
      }
      for(var f = ab(a), g = f.length, h = 0;h < g;h++) {
        b.call(c, f[h], d && d[h], a)
      }
    }
  }
}
;function bb(a, b) {
  this.O = {};
  this.j = [];
  var c = arguments.length;
  if(1 < c) {
    if(c % 2) {
      throw Error("Uneven number of arguments");
    }
    for(var d = 0;d < c;d += 2) {
      this.set(arguments[d], arguments[d + 1])
    }
  }else {
    if(a) {
      a instanceof bb ? (c = a.ka(), d = a.N()) : (c = Ua(a), d = Ta(a));
      for(var f = 0;f < c.length;f++) {
        this.set(c[f], d[f])
      }
    }
  }
}
p = bb.prototype;
p.f = 0;
p.bc = 0;
p.N = function() {
  cb(this);
  for(var a = [], b = 0;b < this.j.length;b++) {
    a.push(this.O[this.j[b]])
  }
  return a
};
p.ka = function() {
  cb(this);
  return this.j.concat()
};
p.ia = function(a) {
  return db(this.O, a)
};
p.remove = function(a) {
  return db(this.O, a) ? (delete this.O[a], this.f--, this.bc++, this.j.length > 2 * this.f && cb(this), !0) : !1
};
function cb(a) {
  if(a.f != a.j.length) {
    for(var b = 0, c = 0;b < a.j.length;) {
      var d = a.j[b];
      db(a.O, d) && (a.j[c++] = d);
      b++
    }
    a.j.length = c
  }
  if(a.f != a.j.length) {
    for(var f = {}, c = b = 0;b < a.j.length;) {
      d = a.j[b], db(f, d) || (a.j[c++] = d, f[d] = 1), b++
    }
    a.j.length = c
  }
}
p.get = function(a, b) {
  return db(this.O, a) ? this.O[a] : b
};
p.set = function(a, b) {
  db(this.O, a) || (this.f++, this.j.push(a), this.bc++);
  this.O[a] = b
};
p.n = function() {
  return new bb(this)
};
function db(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b)
}
;function F(a, b) {
  var c;
  if(a instanceof F) {
    this.D = void 0 !== b ? b : a.D, eb(this, a.qa), c = a.ab, H(this), this.ab = c, fb(this, a.ja), gb(this, a.Ba), hb(this, a.H), ib(this, a.R.n()), c = a.Ma, H(this), this.Ma = c
  }else {
    if(a && (c = String(a).match(Qa))) {
      this.D = !!b;
      eb(this, c[1] || "", !0);
      var d = c[2] || "";
      H(this);
      this.ab = d ? decodeURIComponent(d) : "";
      fb(this, c[3] || "", !0);
      gb(this, c[4]);
      hb(this, c[5] || "", !0);
      ib(this, c[6] || "", !0);
      c = c[7] || "";
      H(this);
      this.Ma = c ? decodeURIComponent(c) : ""
    }else {
      this.D = !!b, this.R = new jb(null, 0, this.D)
    }
  }
}
p = F.prototype;
p.qa = "";
p.ab = "";
p.ja = "";
p.Ba = null;
p.H = "";
p.Ma = "";
p.mc = !1;
p.D = !1;
p.toString = function() {
  var a = [], b = this.qa;
  b && a.push(kb(b, lb), ":");
  if(b = this.ja) {
    a.push("//");
    var c = this.ab;
    c && a.push(kb(c, lb), "@");
    a.push(encodeURIComponent(String(b)));
    b = this.Ba;
    null != b && a.push(":", String(b))
  }
  if(b = this.H) {
    this.ja && "/" != b.charAt(0) && a.push("/"), a.push(kb(b, "/" == b.charAt(0) ? mb : nb))
  }
  (b = this.R.toString()) && a.push("?", b);
  (b = this.Ma) && a.push("#", kb(b, ob));
  return a.join("")
};
p.n = function() {
  return new F(this)
};
function eb(a, b, c) {
  H(a);
  a.qa = c ? b ? decodeURIComponent(b) : "" : b;
  a.qa && (a.qa = a.qa.replace(/:$/, ""))
}
function fb(a, b, c) {
  H(a);
  a.ja = c ? b ? decodeURIComponent(b) : "" : b
}
function gb(a, b) {
  H(a);
  if(b) {
    b = Number(b);
    if(isNaN(b) || 0 > b) {
      throw Error("Bad port number " + b);
    }
    a.Ba = b
  }else {
    a.Ba = null
  }
}
function hb(a, b, c) {
  H(a);
  a.H = c ? b ? decodeURIComponent(b) : "" : b
}
function ib(a, b, c) {
  H(a);
  b instanceof jb ? (a.R = b, a.R.qb(a.D)) : (c || (b = kb(b, pb)), a.R = new jb(b, 0, a.D))
}
function I(a, b, c) {
  H(a);
  a.R.set(b, c)
}
function qb(a, b, c) {
  H(a);
  s(c) || (c = [String(c)]);
  rb(a.R, b, c)
}
function J(a) {
  H(a);
  I(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ x()).toString(36));
  return a
}
function H(a) {
  if(a.mc) {
    throw Error("Tried to modify a read-only Uri");
  }
}
p.qb = function(a) {
  this.D = a;
  this.R && this.R.qb(a);
  return this
};
function sb(a, b, c, d) {
  var f = new F(null, void 0);
  a && eb(f, a);
  b && fb(f, b);
  c && gb(f, c);
  d && hb(f, d);
  return f
}
function kb(a, b) {
  return u(a) ? encodeURI(a).replace(b, tb) : null
}
function tb(a) {
  a = a.charCodeAt(0);
  return"%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16)
}
var lb = /[#\/\?@]/g, nb = /[\#\?:]/g, mb = /[\#\?]/g, pb = /[\#\?@]/g, ob = /#/g;
function jb(a, b, c) {
  this.C = a || null;
  this.D = !!c
}
function K(a) {
  if(!a.i && (a.i = new bb, a.f = 0, a.C)) {
    for(var b = a.C.split("&"), c = 0;c < b.length;c++) {
      var d = b[c].indexOf("="), f = null, g = null;
      0 <= d ? (f = b[c].substring(0, d), g = b[c].substring(d + 1)) : f = b[c];
      f = decodeURIComponent(f.replace(/\+/g, " "));
      f = L(a, f);
      a.add(f, g ? decodeURIComponent(g.replace(/\+/g, " ")) : "")
    }
  }
}
p = jb.prototype;
p.i = null;
p.f = null;
p.add = function(a, b) {
  K(this);
  this.C = null;
  a = L(this, a);
  var c = this.i.get(a);
  c || this.i.set(a, c = []);
  c.push(b);
  this.f++;
  return this
};
p.remove = function(a) {
  K(this);
  a = L(this, a);
  return this.i.ia(a) ? (this.C = null, this.f -= this.i.get(a).length, this.i.remove(a)) : !1
};
p.ia = function(a) {
  K(this);
  a = L(this, a);
  return this.i.ia(a)
};
p.ka = function() {
  K(this);
  for(var a = this.i.N(), b = this.i.ka(), c = [], d = 0;d < b.length;d++) {
    for(var f = a[d], g = 0;g < f.length;g++) {
      c.push(b[d])
    }
  }
  return c
};
p.N = function(a) {
  K(this);
  var b = [];
  if(a) {
    this.ia(a) && (b = Za(b, this.i.get(L(this, a))))
  }else {
    a = this.i.N();
    for(var c = 0;c < a.length;c++) {
      b = Za(b, a[c])
    }
  }
  return b
};
p.set = function(a, b) {
  K(this);
  this.C = null;
  a = L(this, a);
  this.ia(a) && (this.f -= this.i.get(a).length);
  this.i.set(a, [b]);
  this.f++;
  return this
};
p.get = function(a, b) {
  var c = a ? this.N(a) : [];
  return 0 < c.length ? String(c[0]) : b
};
function rb(a, b, c) {
  a.remove(b);
  0 < c.length && (a.C = null, a.i.set(L(a, b), $a(c)), a.f += c.length)
}
p.toString = function() {
  if(this.C) {
    return this.C
  }
  if(!this.i) {
    return""
  }
  for(var a = [], b = this.i.ka(), c = 0;c < b.length;c++) {
    for(var d = b[c], f = encodeURIComponent(String(d)), d = this.N(d), g = 0;g < d.length;g++) {
      var h = f;
      "" !== d[g] && (h += "=" + encodeURIComponent(String(d[g])));
      a.push(h)
    }
  }
  return this.C = a.join("&")
};
p.n = function() {
  var a = new jb;
  a.C = this.C;
  this.i && (a.i = this.i.n(), a.f = this.f);
  return a
};
function L(a, b) {
  var c = String(b);
  a.D && (c = c.toLowerCase());
  return c
}
p.qb = function(a) {
  a && !this.D && (K(this), this.C = null, E(this.i, function(a, c) {
    var d = c.toLowerCase();
    c != d && (this.remove(c), rb(this, d, a))
  }, this));
  this.D = a
};
function ub() {
}
ub.prototype.Ga = null;
var vb;
function wb() {
}
y(wb, ub);
function xb(a) {
  return(a = yb(a)) ? new ActiveXObject(a) : new XMLHttpRequest
}
function zb(a) {
  var b = {};
  yb(a) && (b[0] = !0, b[1] = !0);
  return b
}
function yb(a) {
  if(!a.Gb && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
    for(var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0;c < b.length;c++) {
      var d = b[c];
      try {
        return new ActiveXObject(d), a.Gb = d
      }catch(f) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
  }
  return a.Gb
}
vb = new wb;
function M() {
  0 != Ab && (this.Gc = Error().stack, Bb[v(this)] = this)
}
var Ab = 0, Bb = {};
M.prototype.yb = !1;
M.prototype.Ia = function() {
  if(!this.yb && (this.yb = !0, this.u(), 0 != Ab)) {
    var a = v(this);
    delete Bb[a]
  }
};
M.prototype.u = function() {
  if(this.Nb) {
    for(;this.Nb.length;) {
      this.Nb.shift()()
    }
  }
};
function N(a, b) {
  this.type = a;
  this.currentTarget = this.target = b
}
p = N.prototype;
p.u = e();
p.Ia = e();
p.na = !1;
p.defaultPrevented = !1;
p.Wa = !0;
p.preventDefault = function() {
  this.defaultPrevented = !0;
  this.Wa = !1
};
var Cb = 0;
function Db() {
}
p = Db.prototype;
p.key = 0;
p.ea = !1;
p.Ha = !1;
p.Oa = function(a, b, c, d, f, g) {
  if(ha(a)) {
    this.Ib = !0
  }else {
    if(a && a.handleEvent && ha(a.handleEvent)) {
      this.Ib = !1
    }else {
      throw Error("Invalid listener argument");
    }
  }
  this.W = a;
  this.Ub = b;
  this.src = c;
  this.type = d;
  this.capture = !!f;
  this.lb = g;
  this.Ha = !1;
  this.key = ++Cb;
  this.ea = !1
};
p.handleEvent = function(a) {
  return this.Ib ? this.W.call(this.lb || this.src, a) : this.W.handleEvent.call(this.W, a)
};
var Eb = !A || A && 9 <= Ma, Fb = A && !C("9");
!B || C("528");
Aa && C("1.9b") || A && C("8") || za && C("9.5") || B && C("528");
Aa && !C("8") || A && C("9");
function Gb(a) {
  Gb[" "](a);
  return a
}
Gb[" "] = ea;
function Hb(a, b) {
  a && this.Oa(a, b)
}
y(Hb, N);
p = Hb.prototype;
p.target = null;
p.relatedTarget = null;
p.offsetX = 0;
p.offsetY = 0;
p.clientX = 0;
p.clientY = 0;
p.screenX = 0;
p.screenY = 0;
p.button = 0;
p.keyCode = 0;
p.charCode = 0;
p.ctrlKey = !1;
p.altKey = !1;
p.shiftKey = !1;
p.metaKey = !1;
p.yc = !1;
p.zb = null;
p.Oa = function(a, b) {
  var c = this.type = a.type;
  N.call(this, c);
  this.target = a.target || a.srcElement;
  this.currentTarget = b;
  var d = a.relatedTarget;
  if(d) {
    if(Aa) {
      var f;
      a: {
        try {
          Gb(d.nodeName);
          f = !0;
          break a
        }catch(g) {
        }
        f = !1
      }
      f || (d = null)
    }
  }else {
    "mouseover" == c ? d = a.fromElement : "mouseout" == c && (d = a.toElement)
  }
  this.relatedTarget = d;
  this.offsetX = B || void 0 !== a.offsetX ? a.offsetX : a.layerX;
  this.offsetY = B || void 0 !== a.offsetY ? a.offsetY : a.layerY;
  this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX;
  this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY;
  this.screenX = a.screenX || 0;
  this.screenY = a.screenY || 0;
  this.button = a.button;
  this.keyCode = a.keyCode || 0;
  this.charCode = a.charCode || ("keypress" == c ? a.keyCode : 0);
  this.ctrlKey = a.ctrlKey;
  this.altKey = a.altKey;
  this.shiftKey = a.shiftKey;
  this.metaKey = a.metaKey;
  this.yc = Ca ? a.metaKey : a.ctrlKey;
  this.state = a.state;
  this.zb = a;
  a.defaultPrevented && this.preventDefault();
  delete this.na
};
p.preventDefault = function() {
  Hb.ra.preventDefault.call(this);
  var a = this.zb;
  if(a.preventDefault) {
    a.preventDefault()
  }else {
    if(a.returnValue = !1, Fb) {
      try {
        if(a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) {
          a.keyCode = -1
        }
      }catch(b) {
      }
    }
  }
};
p.u = e();
var Sa = {}, O = {}, P = {}, Ib = {};
function Jb(a, b, c, d, f) {
  if(s(b)) {
    for(var g = 0;g < b.length;g++) {
      Jb(a, b[g], c, d, f)
    }
    return null
  }
  a: {
    if(!b) {
      throw Error("Invalid event type");
    }
    d = !!d;
    var h = O;
    b in h || (h[b] = {f:0, t:0});
    h = h[b];
    d in h || (h[d] = {f:0, t:0}, h.f++);
    var h = h[d], g = v(a), n;
    h.t++;
    if(h[g]) {
      n = h[g];
      for(var k = 0;k < n.length;k++) {
        if(h = n[k], h.W == c && h.lb == f) {
          if(h.ea) {
            break
          }
          n[k].Ha = !1;
          a = n[k];
          break a
        }
      }
    }else {
      n = h[g] = [], h.f++
    }
    k = Kb();
    h = new Db;
    h.Oa(c, k, a, b, d, f);
    h.Ha = !1;
    k.src = a;
    k.W = h;
    n.push(h);
    P[g] || (P[g] = []);
    P[g].push(h);
    a.addEventListener ? a != q && a.wb || a.addEventListener(b, k, d) : a.attachEvent(b in Ib ? Ib[b] : Ib[b] = "on" + b, k);
    a = h
  }
  b = a.key;
  Sa[b] = a;
  return b
}
function Kb() {
  var a = Lb, b = Eb ? function(c) {
    return a.call(b.src, b.W, c)
  } : function(c) {
    c = a.call(b.src, b.W, c);
    if(!c) {
      return c
    }
  };
  return b
}
function Mb(a, b, c, d, f) {
  if(s(b)) {
    for(var g = 0;g < b.length;g++) {
      Mb(a, b[g], c, d, f)
    }
  }else {
    d = !!d;
    a: {
      g = O;
      if(b in g && (g = g[b], d in g && (g = g[d], a = v(a), g[a]))) {
        a = g[a];
        break a
      }
      a = null
    }
    if(a) {
      for(g = 0;g < a.length;g++) {
        if(a[g].W == c && a[g].capture == d && a[g].lb == f) {
          Nb(a[g].key);
          break
        }
      }
    }
  }
}
function Nb(a) {
  var b = Sa[a];
  if(!b || b.ea) {
    return!1
  }
  var c = b.src, d = b.type, f = b.Ub, g = b.capture;
  c.removeEventListener ? c != q && c.wb || c.removeEventListener(d, f, g) : c.detachEvent && c.detachEvent(d in Ib ? Ib[d] : Ib[d] = "on" + d, f);
  c = v(c);
  if(P[c]) {
    var f = P[c], h = Xa(f, b);
    0 <= h && D.splice.call(f, h, 1);
    0 == f.length && delete P[c]
  }
  b.ea = !0;
  if(b = O[d][g][c]) {
    b.Mb = !0, Ob(d, g, c, b)
  }
  delete Sa[a];
  return!0
}
function Ob(a, b, c, d) {
  if(!d.Qa && d.Mb) {
    for(var f = 0, g = 0;f < d.length;f++) {
      d[f].ea ? d[f].Ub.src = null : (f != g && (d[g] = d[f]), g++)
    }
    d.length = g;
    d.Mb = !1;
    0 == g && (delete O[a][b][c], O[a][b].f--, 0 == O[a][b].f && (delete O[a][b], O[a].f--), 0 == O[a].f && delete O[a])
  }
}
function Pb(a) {
  var b = 0;
  if(null != a) {
    if(a = v(a), P[a]) {
      a = P[a];
      for(var c = a.length - 1;0 <= c;c--) {
        Nb(a[c].key), b++
      }
    }
  }else {
    Ra(function(a, c) {
      Nb(c);
      b++
    })
  }
}
function Qb(a, b, c, d, f) {
  var g = 1;
  b = v(b);
  if(a[b]) {
    var h = --a.t, n = a[b];
    n.Qa ? n.Qa++ : n.Qa = 1;
    try {
      for(var k = n.length, t = 0;t < k;t++) {
        var l = n[t];
        l && !l.ea && (g &= !1 !== Rb(l, f))
      }
    }finally {
      a.t = Math.max(h, a.t), n.Qa--, Ob(c, d, b, n)
    }
  }
  return Boolean(g)
}
function Rb(a, b) {
  a.Ha && Nb(a.key);
  return a.handleEvent(b)
}
function Lb(a, b) {
  if(a.ea) {
    return!0
  }
  var c = a.type, d = O;
  if(!(c in d)) {
    return!0
  }
  var d = d[c], f, g;
  if(!Eb) {
    f = b || da("window.event");
    var h = !0 in d, n = !1 in d;
    if(h) {
      if(0 > f.keyCode || void 0 != f.returnValue) {
        return!0
      }
      a: {
        var k = !1;
        if(0 == f.keyCode) {
          try {
            f.keyCode = -1;
            break a
          }catch(t) {
            k = !0
          }
        }
        if(k || void 0 == f.returnValue) {
          f.returnValue = !0
        }
      }
    }
    k = new Hb;
    k.Oa(f, this);
    f = !0;
    try {
      if(h) {
        for(var l = [], r = k.currentTarget;r;r = r.parentNode) {
          l.push(r)
        }
        g = d[!0];
        g.t = g.f;
        for(var G = l.length - 1;!k.na && 0 <= G && g.t;G--) {
          k.currentTarget = l[G], f &= Qb(g, l[G], c, !0, k)
        }
        if(n) {
          for(g = d[!1], g.t = g.f, G = 0;!k.na && G < l.length && g.t;G++) {
            k.currentTarget = l[G], f &= Qb(g, l[G], c, !1, k)
          }
        }
      }else {
        f = Rb(a, k)
      }
    }finally {
      l && (l.length = 0)
    }
    return f
  }
  c = new Hb(b, this);
  return f = Rb(a, c)
}
;function Sb() {
  M.call(this)
}
y(Sb, M);
p = Sb.prototype;
p.wb = !0;
p.pb = null;
p.addEventListener = function(a, b, c, d) {
  Jb(this, a, b, c, d)
};
p.removeEventListener = function(a, b, c, d) {
  Mb(this, a, b, c, d)
};
p.dispatchEvent = function(a) {
  var b = a.type || a, c = O;
  if(b in c) {
    if(u(a)) {
      a = new N(a, this)
    }else {
      if(a instanceof N) {
        a.target = a.target || this
      }else {
        var d = a;
        a = new N(b, this);
        Wa(a, d)
      }
    }
    var d = 1, f, c = c[b], b = !0 in c, g;
    if(b) {
      f = [];
      for(g = this;g;g = g.pb) {
        f.push(g)
      }
      g = c[!0];
      g.t = g.f;
      for(var h = f.length - 1;!a.na && 0 <= h && g.t;h--) {
        a.currentTarget = f[h], d &= Qb(g, f[h], a.type, !0, a) && !1 != a.Wa
      }
    }
    if(!1 in c) {
      if(g = c[!1], g.t = g.f, b) {
        for(h = 0;!a.na && h < f.length && g.t;h++) {
          a.currentTarget = f[h], d &= Qb(g, f[h], a.type, !1, a) && !1 != a.Wa
        }
      }else {
        for(f = this;!a.na && f && g.t;f = f.pb) {
          a.currentTarget = f, d &= Qb(g, f, a.type, !1, a) && !1 != a.Wa
        }
      }
    }
    a = Boolean(d)
  }else {
    a = !0
  }
  return a
};
p.u = function() {
  Sb.ra.u.call(this);
  Pb(this);
  this.pb = null
};
function Tb(a, b) {
  M.call(this);
  this.da = a || 1;
  this.Ea = b || q;
  this.eb = w(this.Ec, this);
  this.ob = x()
}
y(Tb, Sb);
p = Tb.prototype;
p.enabled = !1;
p.r = null;
p.setInterval = function(a) {
  this.da = a;
  this.r && this.enabled ? (this.stop(), this.start()) : this.r && this.stop()
};
p.Ec = function() {
  if(this.enabled) {
    var a = x() - this.ob;
    0 < a && a < 0.8 * this.da ? this.r = this.Ea.setTimeout(this.eb, this.da - a) : (this.dispatchEvent(Ub), this.enabled && (this.r = this.Ea.setTimeout(this.eb, this.da), this.ob = x()))
  }
};
p.start = function() {
  this.enabled = !0;
  this.r || (this.r = this.Ea.setTimeout(this.eb, this.da), this.ob = x())
};
p.stop = function() {
  this.enabled = !1;
  this.r && (this.Ea.clearTimeout(this.r), this.r = null)
};
p.u = function() {
  Tb.ra.u.call(this);
  this.stop();
  delete this.Ea
};
var Ub = "tick";
function Vb(a) {
  M.call(this);
  this.e = a;
  this.j = []
}
y(Vb, M);
var Wb = [];
function Xb(a, b, c, d) {
  s(c) || (Wb[0] = c, c = Wb);
  for(var f = 0;f < c.length;f++) {
    var g = Jb(b, c[f], d || a, !1, a.e || a);
    a.j.push(g)
  }
}
Vb.prototype.u = function() {
  Vb.ra.u.call(this);
  Ya(this.j, Nb);
  this.j.length = 0
};
Vb.prototype.handleEvent = function() {
  throw Error("EventHandler.handleEvent not implemented");
};
function Yb(a, b, c) {
  M.call(this);
  this.nc = a;
  this.da = b;
  this.e = c;
  this.hc = w(this.tc, this)
}
y(Yb, M);
p = Yb.prototype;
p.Xa = !1;
p.Tb = 0;
p.r = null;
p.stop = function() {
  this.r && (q.clearTimeout(this.r), this.r = null, this.Xa = !1)
};
p.u = function() {
  Yb.ra.u.call(this);
  this.stop()
};
p.tc = function() {
  this.r = null;
  this.Xa && !this.Tb && (this.Xa = !1, Zb(this))
};
function Zb(a) {
  var b;
  b = a.hc;
  var c = a.da;
  if(!ha(b)) {
    if(b && "function" == typeof b.handleEvent) {
      b = w(b.handleEvent, b)
    }else {
      throw Error("Invalid listener argument");
    }
  }
  b = 2147483647 < c ? -1 : q.setTimeout(b, c || 0);
  a.r = b;
  a.nc.call(a.e)
}
;function Q(a, b, c, d, f) {
  this.b = a;
  this.a = b;
  this.Z = c;
  this.B = d;
  this.Ca = f || 1;
  this.Da = $b;
  this.jb = new Vb(this);
  this.Sa = new Tb;
  this.Sa.setInterval(ac)
}
p = Q.prototype;
p.v = null;
p.J = !1;
p.ua = null;
p.sb = null;
p.pa = null;
p.sa = null;
p.T = null;
p.w = null;
p.X = null;
p.l = null;
p.Fa = 0;
p.K = null;
p.ta = null;
p.p = null;
p.h = -1;
p.Xb = !0;
p.aa = !1;
p.oa = 0;
p.Ta = null;
var $b = 45E3, ac = 250;
function bc(a, b) {
  switch(a) {
    case 0:
      return"Non-200 return code (" + b + ")";
    case 1:
      return"XMLHTTP failure (no data)";
    case 2:
      return"HttpConnection timeout";
    default:
      return"Unknown error"
  }
}
var cc = {}, dc = {};
function ec() {
  return!A || A && 10 <= Ma
}
p = Q.prototype;
p.Y = m("v");
p.setTimeout = m("Da");
p.$b = m("oa");
function fc(a, b, c) {
  a.sa = 1;
  a.T = J(b.n());
  a.X = c;
  a.xb = !0;
  gc(a, null)
}
function hc(a, b, c, d, f) {
  a.sa = 1;
  a.T = J(b.n());
  a.X = null;
  a.xb = c;
  f && (a.Xb = !1);
  gc(a, d)
}
function gc(a, b) {
  a.pa = x();
  ic(a);
  a.w = a.T.n();
  qb(a.w, "t", a.Ca);
  a.Fa = 0;
  a.l = a.b.hb(a.b.Ya() ? b : null);
  0 < a.oa && (a.Ta = new Yb(w(a.dc, a, a.l), a.oa));
  Xb(a.jb, a.l, "readystatechange", a.Ac);
  var c;
  if(a.v) {
    c = a.v;
    var d = {}, f;
    for(f in c) {
      d[f] = c[f]
    }
    c = d
  }else {
    c = {}
  }
  a.X ? (a.ta = "POST", c["Content-Type"] = "application/x-www-form-urlencoded", a.l.send(a.w, a.ta, a.X, c)) : (a.ta = "GET", a.Xb && !B && (c.Connection = "close"), a.l.send(a.w, a.ta, null, c));
  a.b.G(jc);
  if(d = a.X) {
    for(c = "", d = d.split("&"), f = 0;f < d.length;f++) {
      var g = d[f].split("=");
      if(1 < g.length) {
        var h = g[0], g = g[1], n = h.split("_");
        c = 2 <= n.length && "type" == n[1] ? c + (h + "=" + g + "&") : c + (h + "=redacted&")
      }
    }
  }else {
    c = null
  }
  a.a.info("XMLHTTP REQ (" + a.B + ") [attempt " + a.Ca + "]: " + a.ta + "\n" + a.w + "\n" + c)
}
p.Ac = function(a) {
  a = a.target;
  var b = this.Ta;
  b && 3 == R(a) ? (this.a.debug("Throttling readystatechange."), b.r || b.Tb ? b.Xa = !0 : Zb(b)) : this.dc(a)
};
p.dc = function(a) {
  try {
    if(a == this.l) {
      a: {
        var b = R(this.l), c = this.l.la, d = kc(this.l);
        if(!ec() || B && !C("420+")) {
          if(4 > b) {
            break a
          }
        }else {
          if(3 > b || 3 == b && !za && !lc(this.l)) {
            break a
          }
        }
        this.aa || (4 != b || c == mc) || (c == nc || 0 >= d ? this.b.G(oc) : this.b.G(pc));
        qc(this);
        var f = kc(this.l);
        this.h = f;
        var g = lc(this.l);
        g || this.a.debug("No response text for uri " + this.w + " status " + f);
        this.J = 200 == f;
        this.a.info("XMLHTTP RESP (" + this.B + ") [ attempt " + this.Ca + "]: " + this.ta + "\n" + this.w + "\n" + b + " " + f);
        this.J ? (4 == b && S(this), this.xb ? (rc(this, b, g), za && 3 == b && (Xb(this.jb, this.Sa, Ub, this.zc), this.Sa.start())) : (sc(this.a, this.B, g, null), tc(this, g)), this.J && !this.aa && (4 == b ? this.b.ma(this) : (this.J = !1, ic(this)))) : (400 == f && 0 < g.indexOf("Unknown SID") ? (this.p = 3, T(uc), this.a.$("XMLHTTP Unknown SID (" + this.B + ")")) : (this.p = 0, T(vc), this.a.$("XMLHTTP Bad status " + f + " (" + this.B + ")")), S(this), wc(this))
      }
    }else {
      this.a.$("Called back with an unexpected xmlhttp")
    }
  }catch(h) {
    this.a.debug("Failed call to OnXmlHttpReadyStateChanged_"), this.l && lc(this.l) ? xc(this.a, h, "ResponseText: " + lc(this.l)) : xc(this.a, h, "No response text")
  }finally {
  }
};
function rc(a, b, c) {
  for(var d = !0;!a.aa && a.Fa < c.length;) {
    var f = yc(a, c);
    if(f == dc) {
      4 == b && (a.p = 4, T(zc), d = !1);
      sc(a.a, a.B, null, "[Incomplete Response]");
      break
    }else {
      if(f == cc) {
        a.p = 4;
        T(Ac);
        sc(a.a, a.B, c, "[Invalid Chunk]");
        d = !1;
        break
      }else {
        sc(a.a, a.B, f, null), tc(a, f)
      }
    }
  }
  4 == b && 0 == c.length && (a.p = 1, T(Bc), d = !1);
  a.J = a.J && d;
  d || (sc(a.a, a.B, c, "[Invalid Chunked Response]"), S(a), wc(a))
}
p.zc = function() {
  var a = R(this.l), b = lc(this.l);
  this.Fa < b.length && (qc(this), rc(this, a, b), this.J && 4 != a && ic(this))
};
function yc(a, b) {
  var c = a.Fa, d = b.indexOf("\n", c);
  if(-1 == d) {
    return dc
  }
  c = Number(b.substring(c, d));
  if(isNaN(c)) {
    return cc
  }
  d += 1;
  if(d + c > b.length) {
    return dc
  }
  var f = b.substr(d, c);
  a.Fa = d + c;
  return f
}
function Cc(a, b) {
  a.pa = x();
  ic(a);
  var c = b ? window.location.hostname : "";
  a.w = a.T.n();
  I(a.w, "DOMAIN", c);
  I(a.w, "t", a.Ca);
  try {
    a.K = new ActiveXObject("htmlfile")
  }catch(d) {
    a.a.I("ActiveX blocked");
    S(a);
    a.p = 7;
    T(Dc);
    wc(a);
    return
  }
  var f = "<html><body>";
  b && (f += '<script>document.domain="' + c + '"\x3c/script>');
  f += "</body></html>";
  a.K.open();
  a.K.write(f);
  a.K.close();
  a.K.parentWindow.m = w(a.wc, a);
  a.K.parentWindow.d = w(a.Sb, a, !0);
  a.K.parentWindow.rpcClose = w(a.Sb, a, !1);
  c = a.K.createElement("div");
  a.K.parentWindow.document.body.appendChild(c);
  c.innerHTML = '<iframe src="' + a.w + '"></iframe>';
  a.a.info("TRIDENT REQ (" + a.B + ") [ attempt " + a.Ca + "]: GET\n" + a.w);
  a.b.G(jc)
}
p.wc = function(a) {
  U(w(this.vc, this, a), 0)
};
p.vc = function(a) {
  if(!this.aa) {
    var b = this.a;
    b.info("TRIDENT TEXT (" + this.B + "): " + Ec(b, a));
    qc(this);
    tc(this, a);
    ic(this)
  }
};
p.Sb = function(a) {
  U(w(this.uc, this, a), 0)
};
p.uc = function(a) {
  this.aa || (this.a.info("TRIDENT TEXT (" + this.B + "): " + a ? "success" : "failure"), S(this), this.J = a, this.b.ma(this), this.b.G(Fc))
};
p.lc = function() {
  qc(this);
  this.b.ma(this)
};
p.cancel = function() {
  this.aa = !0;
  S(this)
};
function ic(a) {
  a.sb = x() + a.Da;
  Gc(a, a.Da)
}
function Gc(a, b) {
  if(null != a.ua) {
    throw Error("WatchDog timer not null");
  }
  a.ua = U(w(a.xc, a), b)
}
function qc(a) {
  a.ua && (q.clearTimeout(a.ua), a.ua = null)
}
p.xc = function() {
  this.ua = null;
  var a = x();
  0 <= a - this.sb ? (this.J && this.a.I("Received watchdog timeout even though request loaded successfully"), this.a.info("TIMEOUT: " + this.w), 2 != this.sa && this.b.G(oc), S(this), this.p = 2, T(Hc), wc(this)) : (this.a.$("WatchDog timer called too early"), Gc(this, this.sb - a))
};
function wc(a) {
  a.b.Hb() || a.aa || a.b.ma(a)
}
function S(a) {
  qc(a);
  var b = a.Ta;
  b && "function" == typeof b.Ia && b.Ia();
  a.Ta = null;
  a.Sa.stop();
  b = a.jb;
  Ya(b.j, Nb);
  b.j.length = 0;
  a.l && (b = a.l, a.l = null, b.abort(), b.Ia());
  a.K && (a.K = null)
}
p.Eb = aa("p");
function tc(a, b) {
  try {
    a.b.Pb(a, b), a.b.G(Fc)
  }catch(c) {
    xc(a.a, c, "Error in httprequest callback")
  }
}
;function Ic(a) {
  a = String(a);
  if(/^\s*$/.test(a) ? 0 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))) {
    try {
      return eval("(" + a + ")")
    }catch(b) {
    }
  }
  throw Error("Invalid JSON string: " + a);
}
function Jc(a) {
  return eval("(" + a + ")")
}
function Kc(a) {
  var b = [];
  Lc(new Mc(void 0), a, b);
  return b.join("")
}
function Mc(a) {
  this.Va = a
}
function Lc(a, b, c) {
  switch(typeof b) {
    case "string":
      Nc(b, c);
      break;
    case "number":
      c.push(isFinite(b) && !isNaN(b) ? b : "null");
      break;
    case "boolean":
      c.push(b);
      break;
    case "undefined":
      c.push("null");
      break;
    case "object":
      if(null == b) {
        c.push("null");
        break
      }
      if(s(b)) {
        var d = b.length;
        c.push("[");
        for(var f = "", g = 0;g < d;g++) {
          c.push(f), f = b[g], Lc(a, a.Va ? a.Va.call(b, String(g), f) : f, c), f = ","
        }
        c.push("]");
        break
      }
      c.push("{");
      d = "";
      for(g in b) {
        Object.prototype.hasOwnProperty.call(b, g) && (f = b[g], "function" != typeof f && (c.push(d), Nc(g, c), c.push(":"), Lc(a, a.Va ? a.Va.call(b, g, f) : f, c), d = ","))
      }
      c.push("}");
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof b);
  }
}
var Oc = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"}, Pc = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
function Nc(a, b) {
  b.push('"', a.replace(Pc, function(a) {
    if(a in Oc) {
      return Oc[a]
    }
    var b = a.charCodeAt(0), f = "\\u";
    16 > b ? f += "000" : 256 > b ? f += "00" : 4096 > b && (f += "0");
    return Oc[a] = f + b.toString(16)
  }), '"')
}
;function Qc(a) {
  return Rc(a || arguments.callee.caller, [])
}
function Rc(a, b) {
  var c = [];
  if(0 <= Xa(b, a)) {
    c.push("[...circular reference...]")
  }else {
    if(a && 50 > b.length) {
      c.push(Sc(a) + "(");
      for(var d = a.arguments, f = 0;f < d.length;f++) {
        0 < f && c.push(", ");
        var g;
        g = d[f];
        switch(typeof g) {
          case "object":
            g = g ? "object" : "null";
            break;
          case "string":
            break;
          case "number":
            g = String(g);
            break;
          case "boolean":
            g = g ? "true" : "false";
            break;
          case "function":
            g = (g = Sc(g)) ? g : "[fn]";
            break;
          default:
            g = typeof g
        }
        40 < g.length && (g = g.substr(0, 40) + "...");
        c.push(g)
      }
      b.push(a);
      c.push(")\n");
      try {
        c.push(Rc(a.caller, b))
      }catch(h) {
        c.push("[exception trying to get caller]\n")
      }
    }else {
      a ? c.push("[...long stack...]") : c.push("[end]")
    }
  }
  return c.join("")
}
function Sc(a) {
  if(Tc[a]) {
    return Tc[a]
  }
  a = String(a);
  if(!Tc[a]) {
    var b = /function ([^\(]+)/.exec(a);
    Tc[a] = b ? b[1] : "[Anonymous]"
  }
  return Tc[a]
}
var Tc = {};
function Uc(a, b, c, d, f) {
  this.reset(a, b, c, d, f)
}
Uc.prototype.Cc = 0;
Uc.prototype.Bb = null;
Uc.prototype.Ab = null;
var Vc = 0;
Uc.prototype.reset = function(a, b, c, d, f) {
  this.Cc = "number" == typeof f ? f : Vc++;
  this.Qc = d || x();
  this.za = a;
  this.oc = b;
  this.Ic = c;
  delete this.Bb;
  delete this.Ab
};
Uc.prototype.Yb = m("za");
function V(a) {
  this.pc = a
}
V.prototype.Ra = null;
V.prototype.za = null;
V.prototype.fb = null;
V.prototype.Fb = null;
function Wc(a, b) {
  this.name = a;
  this.value = b
}
Wc.prototype.toString = aa("name");
var Xc = new Wc("SEVERE", 1E3), Yc = new Wc("WARNING", 900), Zc = new Wc("INFO", 800), $c = new Wc("CONFIG", 700), ad = new Wc("FINE", 500);
p = V.prototype;
p.getParent = aa("Ra");
p.Yb = m("za");
function bd(a) {
  if(a.za) {
    return a.za
  }
  if(a.Ra) {
    return bd(a.Ra)
  }
  Pa("Root logger has no level set.");
  return null
}
p.log = function(a, b, c) {
  if(a.value >= bd(this).value) {
    for(a = this.kc(a, b, c), b = "log:" + a.oc, q.console && (q.console.timeStamp ? q.console.timeStamp(b) : q.console.markTimeline && q.console.markTimeline(b)), q.msWriteProfilerMark && q.msWriteProfilerMark(b), b = this;b;) {
      c = b;
      var d = a;
      if(c.Fb) {
        for(var f = 0, g = void 0;g = c.Fb[f];f++) {
          g(d)
        }
      }
      b = b.getParent()
    }
  }
};
p.kc = function(a, b, c) {
  var d = new Uc(a, String(b), this.pc);
  if(c) {
    d.Bb = c;
    var f;
    var g = arguments.callee.caller;
    try {
      var h;
      var n = da("window.location.href");
      if(u(c)) {
        h = {message:c, name:"Unknown error", lineNumber:"Not available", fileName:n, stack:"Not available"}
      }else {
        var k, t, l = !1;
        try {
          k = c.lineNumber || c.Hc || "Not available"
        }catch(r) {
          k = "Not available", l = !0
        }
        try {
          t = c.fileName || c.filename || c.sourceURL || q.$googDebugFname || n
        }catch(G) {
          t = "Not available", l = !0
        }
        h = !l && c.lineNumber && c.fileName && c.stack ? c : {message:c.message, name:c.name, lineNumber:k, fileName:t, stack:c.stack || "Not available"}
      }
      f = "Message: " + na(h.message) + '\nUrl: <a href="view-source:' + h.fileName + '" target="_new">' + h.fileName + "</a>\nLine: " + h.lineNumber + "\n\nBrowser stack:\n" + na(h.stack + "-> ") + "[end]\n\nJS stack traversal:\n" + na(Qc(g) + "-> ")
    }catch(Sd) {
      f = "Exception trying to expose exception! You win, we lose. " + Sd
    }
    d.Ab = f
  }
  return d
};
p.I = function(a, b) {
  this.log(Xc, a, b)
};
p.$ = function(a, b) {
  this.log(Yc, a, b)
};
p.info = function(a, b) {
  this.log(Zc, a, b)
};
function W(a, b) {
  a.log(ad, b, void 0)
}
var cd = {}, dd = null;
function ed(a) {
  dd || (dd = new V(""), cd[""] = dd, dd.Yb($c));
  var b;
  if(!(b = cd[a])) {
    b = new V(a);
    var c = a.lastIndexOf("."), d = a.substr(c + 1), c = ed(a.substr(0, c));
    c.fb || (c.fb = {});
    c.fb[d] = b;
    b.Ra = c;
    cd[a] = b
  }
  return b
}
;function X() {
  this.q = ed("goog.net.BrowserChannel")
}
function sc(a, b, c, d) {
  a.info("XMLHTTP TEXT (" + b + "): " + Ec(a, c) + (d ? " " + d : ""))
}
X.prototype.debug = function(a) {
  this.info(a)
};
function xc(a, b, c) {
  a.I((c || "Exception") + b)
}
X.prototype.info = function(a) {
  this.q.info(a)
};
X.prototype.$ = function(a) {
  this.q.$(a)
};
X.prototype.I = function(a) {
  this.q.I(a)
};
function Ec(a, b) {
  if(!b || b == fd) {
    return b
  }
  try {
    var c = Jc(b);
    if(c) {
      for(var d = 0;d < c.length;d++) {
        if(s(c[d])) {
          var f = c[d];
          if(!(2 > f.length)) {
            var g = f[1];
            if(s(g) && !(1 > g.length)) {
              var h = g[0];
              if("noop" != h && "stop" != h) {
                for(var n = 1;n < g.length;n++) {
                  g[n] = ""
                }
              }
            }
          }
        }
      }
    }
    return Kc(c)
  }catch(k) {
    return a.debug("Exception parsing expected JS array - probably was not JS"), b
  }
}
;function gd(a, b) {
  this.Oc = new Mc(a);
  this.P = b ? Jc : Ic
}
gd.prototype.parse = function(a) {
  return this.P(a)
};
var mc = 7, nc = 8;
function hd(a) {
  M.call(this);
  this.headers = new bb;
  this.va = a || null
}
y(hd, Sb);
hd.prototype.q = ed("goog.net.XhrIo");
var id = /^https?$/i;
p = hd.prototype;
p.S = !1;
p.g = null;
p.bb = null;
p.Pa = "";
p.Jb = "";
p.la = 0;
p.p = "";
p.ib = !1;
p.Na = !1;
p.mb = !1;
p.ca = !1;
p.$a = 0;
p.fa = null;
p.Wb = "";
p.cc = !1;
p.send = function(a, b, c, d) {
  if(this.g) {
    throw Error("[goog.net.XhrIo] Object is active with another request=" + this.Pa + "; newUri=" + a);
  }
  b = b ? b.toUpperCase() : "GET";
  this.Pa = a;
  this.p = "";
  this.la = 0;
  this.Jb = b;
  this.ib = !1;
  this.S = !0;
  this.g = this.va ? xb(this.va) : xb(vb);
  this.bb = this.va ? this.va.Ga || (this.va.Ga = zb(this.va)) : vb.Ga || (vb.Ga = zb(vb));
  this.g.onreadystatechange = w(this.Ob, this);
  try {
    W(this.q, Y(this, "Opening Xhr")), this.mb = !0, this.g.open(b, a, !0), this.mb = !1
  }catch(f) {
    W(this.q, Y(this, "Error opening Xhr: " + f.message));
    jd(this, f);
    return
  }
  a = c || "";
  var g = this.headers.n();
  d && E(d, function(a, b) {
    g.set(b, a)
  });
  d = q.FormData && a instanceof q.FormData;
  "POST" != b || (g.ia("Content-Type") || d) || g.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  E(g, function(a, b) {
    this.g.setRequestHeader(b, a)
  }, this);
  this.Wb && (this.g.responseType = this.Wb);
  "withCredentials" in this.g && (this.g.withCredentials = this.cc);
  try {
    this.fa && (q.clearTimeout(this.fa), this.fa = null), 0 < this.$a && (W(this.q, Y(this, "Will abort after " + this.$a + "ms if incomplete")), this.fa = q.setTimeout(w(this.Da, this), this.$a)), W(this.q, Y(this, "Sending request")), this.Na = !0, this.g.send(a), this.Na = !1
  }catch(h) {
    W(this.q, Y(this, "Send error: " + h.message)), jd(this, h)
  }
};
p.Da = function() {
  "undefined" != typeof ca && this.g && (this.p = "Timed out after " + this.$a + "ms, aborting", this.la = nc, W(this.q, Y(this, this.p)), this.dispatchEvent("timeout"), this.abort(nc))
};
function jd(a, b) {
  a.S = !1;
  a.g && (a.ca = !0, a.g.abort(), a.ca = !1);
  a.p = b;
  a.la = 5;
  kd(a);
  ld(a)
}
function kd(a) {
  a.ib || (a.ib = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"))
}
p.abort = function(a) {
  this.g && this.S && (W(this.q, Y(this, "Aborting")), this.S = !1, this.ca = !0, this.g.abort(), this.ca = !1, this.la = a || mc, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ld(this))
};
p.u = function() {
  this.g && (this.S && (this.S = !1, this.ca = !0, this.g.abort(), this.ca = !1), ld(this, !0));
  hd.ra.u.call(this)
};
p.Ob = function() {
  this.mb || this.Na || this.ca ? md(this) : this.sc()
};
p.sc = function() {
  md(this)
};
function md(a) {
  if(a.S && "undefined" != typeof ca) {
    if(a.bb[1] && 4 == R(a) && 2 == kc(a)) {
      W(a.q, Y(a, "Local request error detected and ignored"))
    }else {
      if(a.Na && 4 == R(a)) {
        q.setTimeout(w(a.Ob, a), 0)
      }else {
        if(a.dispatchEvent("readystatechange"), 4 == R(a)) {
          W(a.q, Y(a, "Request complete"));
          a.S = !1;
          try {
            var b = kc(a), c, d;
            a: {
              switch(b) {
                case 200:
                ;
                case 201:
                ;
                case 202:
                ;
                case 204:
                ;
                case 206:
                ;
                case 304:
                ;
                case 1223:
                  d = !0;
                  break a;
                default:
                  d = !1
              }
            }
            if(!(c = d)) {
              var f;
              if(f = 0 === b) {
                var g = String(a.Pa).match(Qa)[1] || null;
                if(!g && self.location) {
                  var h = self.location.protocol, g = h.substr(0, h.length - 1)
                }
                f = !id.test(g ? g.toLowerCase() : "")
              }
              c = f
            }
            if(c) {
              a.dispatchEvent("complete"), a.dispatchEvent("success")
            }else {
              a.la = 6;
              var n;
              try {
                n = 2 < R(a) ? a.g.statusText : ""
              }catch(k) {
                W(a.q, "Can not get status: " + k.message), n = ""
              }
              a.p = n + " [" + kc(a) + "]";
              kd(a)
            }
          }finally {
            ld(a)
          }
        }
      }
    }
  }
}
function ld(a, b) {
  if(a.g) {
    var c = a.g, d = a.bb[0] ? ea : null;
    a.g = null;
    a.bb = null;
    a.fa && (q.clearTimeout(a.fa), a.fa = null);
    b || a.dispatchEvent("ready");
    try {
      c.onreadystatechange = d
    }catch(f) {
      a.q.I("Problem encountered resetting onreadystatechange: " + f.message)
    }
  }
}
p.isActive = function() {
  return!!this.g
};
function R(a) {
  return a.g ? a.g.readyState : 0
}
function kc(a) {
  try {
    return 2 < R(a) ? a.g.status : -1
  }catch(b) {
    return a.q.$("Can not get status: " + b.message), -1
  }
}
function lc(a) {
  try {
    return a.g ? a.g.responseText : ""
  }catch(b) {
    return W(a.q, "Can not get responseText: " + b.message), ""
  }
}
p.Eb = function() {
  return u(this.p) ? this.p : String(this.p)
};
function Y(a, b) {
  return b + " [" + a.Jb + " " + a.Pa + " " + kc(a) + "]"
}
;function nd() {
  this.Vb = x()
}
new nd;
nd.prototype.set = m("Vb");
nd.prototype.reset = function() {
  this.set(x())
};
nd.prototype.get = aa("Vb");
function od(a, b, c, d, f) {
  (new X).debug("TestLoadImageWithRetries: " + f);
  if(0 == d) {
    c(!1)
  }else {
    var g = f || 0;
    d--;
    pd(a, b, function(f) {
      f ? c(!0) : q.setTimeout(function() {
        od(a, b, c, d, g)
      }, g)
    })
  }
}
function pd(a, b, c) {
  function d(a, b) {
    return function() {
      try {
        f.debug("TestLoadImage: " + b), g.onload = null, g.onerror = null, g.onabort = null, g.ontimeout = null, q.clearTimeout(h), c(a)
      }catch(d) {
        xc(f, d)
      }
    }
  }
  var f = new X;
  f.debug("TestLoadImage: loading " + a);
  var g = new Image, h = null;
  g.onload = d(!0, "loaded");
  g.onerror = d(!1, "error");
  g.onabort = d(!1, "abort");
  g.ontimeout = d(!1, "timeout");
  h = q.setTimeout(function() {
    if(g.ontimeout) {
      g.ontimeout()
    }
  }, b);
  g.src = a
}
;function qd(a, b) {
  this.b = a;
  this.a = b;
  this.P = new gd(null, !0)
}
p = qd.prototype;
p.v = null;
p.A = null;
p.Ua = !1;
p.ac = null;
p.Ka = null;
p.nb = null;
p.H = null;
p.c = null;
p.h = -1;
p.L = null;
p.wa = null;
p.Y = m("v");
p.Zb = m("P");
p.gb = function(a) {
  this.H = a;
  a = rd(this.b, this.H);
  T(sd);
  this.ac = x();
  var b = this.b.Cb;
  null != b ? (this.L = this.b.correctHostPrefix(b[0]), (this.wa = b[1]) ? (this.c = 1, td(this)) : (this.c = 2, ud(this))) : (qb(a, "MODE", "init"), this.A = new Q(this, this.a, void 0, void 0, void 0), this.A.Y(this.v), hc(this.A, a, !1, null, !0), this.c = 0)
};
function td(a) {
  var b = vd(a.b, a.wa, "/mail/images/cleardot.gif");
  J(b);
  od(b.toString(), 5E3, w(a.ic, a), 3, 2E3);
  a.G(jc)
}
p.ic = function(a) {
  if(a) {
    this.c = 2, ud(this)
  }else {
    T(wd);
    var b = this.b;
    b.a.debug("Test Connection Blocked");
    b.h = b.U.h;
    Z(b, 9)
  }
  a && this.G(pc)
};
function ud(a) {
  a.a.debug("TestConnection: starting stage 2");
  a.A = new Q(a, a.a, void 0, void 0, void 0);
  a.A.Y(a.v);
  var b = xd(a.b, a.L, a.H);
  T(yd);
  if(ec()) {
    qb(b, "TYPE", "xmlhttp"), hc(a.A, b, !1, a.L, !1)
  }else {
    qb(b, "TYPE", "html");
    var c = a.A;
    a = Boolean(a.L);
    c.sa = 3;
    c.T = J(b.n());
    Cc(c, a)
  }
}
p.hb = function(a) {
  return this.b.hb(a)
};
p.abort = function() {
  this.A && (this.A.cancel(), this.A = null);
  this.h = -1
};
p.Hb = ba(!1);
p.Pb = function(a, b) {
  this.h = a.h;
  if(0 == this.c) {
    if(this.a.debug("TestConnection: Got data for stage 1"), b) {
      try {
        var c = this.P.parse(b)
      }catch(d) {
        xc(this.a, d);
        zd(this.b, this);
        return
      }
      this.L = this.b.correctHostPrefix(c[0]);
      this.wa = c[1]
    }else {
      this.a.debug("TestConnection: Null responseText"), zd(this.b, this)
    }
  }else {
    if(2 == this.c) {
      if(this.Ua) {
        T(Ad), this.nb = x()
      }else {
        if("11111" == b) {
          if(T(Bd), this.Ua = !0, this.Ka = x(), c = this.Ka - this.ac, ec() || 500 > c) {
            this.h = 200, this.A.cancel(), this.a.debug("Test connection succeeded; using streaming connection"), T(Cd), Dd(this.b, this, !0)
          }
        }else {
          T(Ed), this.Ka = this.nb = x(), this.Ua = !1
        }
      }
    }
  }
};
p.ma = function() {
  this.h = this.A.h;
  if(!this.A.J) {
    this.a.debug("TestConnection: request failed, in state " + this.c), 0 == this.c ? T(Fd) : 2 == this.c && T(Gd), zd(this.b, this)
  }else {
    if(0 == this.c) {
      this.a.debug("TestConnection: request complete for initial check"), this.wa ? (this.c = 1, td(this)) : (this.c = 2, ud(this))
    }else {
      if(2 == this.c) {
        this.a.debug("TestConnection: request complete for stage 2");
        var a = !1;
        (a = ec() ? this.Ua : 200 > this.nb - this.Ka ? !1 : !0) ? (this.a.debug("Test connection succeeded; using streaming connection"), T(Cd), Dd(this.b, this, !0)) : (this.a.debug("Test connection failed; not using streaming"), T(Hd), Dd(this.b, this, !1))
      }
    }
  }
};
p.Ya = function() {
  return this.b.Ya()
};
p.isActive = function() {
  return this.b.isActive()
};
p.G = function(a) {
  this.b.G(a)
};
function Id(a, b) {
  this.vb = a || null;
  this.c = Jd;
  this.s = [];
  this.Q = [];
  this.a = new X;
  this.P = new gd(null, !0);
  this.Cb = b || null
}
function Kd(a, b) {
  this.Lb = a;
  this.map = b;
  this.Fc = null
}
p = Id.prototype;
p.v = null;
p.xa = null;
p.o = null;
p.k = null;
p.H = null;
p.La = null;
p.ub = null;
p.L = null;
p.fc = !0;
p.Aa = 0;
p.qc = 0;
p.Ja = !1;
p.e = null;
p.F = null;
p.M = null;
p.ba = null;
p.U = null;
p.rb = null;
p.ec = !0;
p.ya = -1;
p.Kb = -1;
p.h = -1;
p.V = 0;
p.ga = 0;
p.gc = 5E3;
p.Bc = 1E4;
p.kb = 2;
p.Db = 2E4;
p.oa = 0;
p.Za = !1;
p.ha = 8;
var Jd = 1, Ld = new Sb;
function Md(a, b) {
  N.call(this, "statevent", a);
  this.Pc = b
}
y(Md, N);
function Nd(a, b, c, d) {
  N.call(this, "timingevent", a);
  this.size = b;
  this.Nc = c;
  this.Mc = d
}
y(Nd, N);
var jc = 1, pc = 2, oc = 3, Fc = 4;
function Od(a, b) {
  N.call(this, "serverreachability", a);
  this.Lc = b
}
y(Od, N);
var sd = 3, wd = 4, yd = 5, Bd = 6, Ad = 7, Ed = 8, Fd = 9, Gd = 10, Hd = 11, Cd = 12, uc = 13, vc = 14, zc = 15, Ac = 16, Bc = 17, Hc = 18, Dc = 22, fd = "y2f%";
p = Id.prototype;
p.gb = function(a, b, c, d, f) {
  this.a.debug("connect()");
  T(0);
  this.H = b;
  this.xa = c || {};
  d && void 0 !== f && (this.xa.OSID = d, this.xa.OAID = f);
  this.a.debug("connectTest_()");
  Pd(this) && (this.U = new qd(this, this.a), this.U.Y(this.v), this.U.Zb(this.P), this.U.gb(a))
};
p.disconnect = function() {
  this.a.debug("disconnect()");
  Qd(this);
  if(3 == this.c) {
    var a = this.Aa++, b = this.La.n();
    I(b, "SID", this.Z);
    I(b, "RID", a);
    I(b, "TYPE", "terminate");
    Rd(this, b);
    a = new Q(this, this.a, this.Z, a, void 0);
    a.sa = 2;
    a.T = J(b.n());
    b = new Image;
    b.src = a.T;
    b.onload = b.onerror = w(a.lc, a);
    a.pa = x();
    ic(a)
  }
  Td(this)
};
function Qd(a) {
  a.U && (a.U.abort(), a.U = null);
  a.k && (a.k.cancel(), a.k = null);
  a.M && (q.clearTimeout(a.M), a.M = null);
  Ud(a);
  a.o && (a.o.cancel(), a.o = null);
  a.F && (q.clearTimeout(a.F), a.F = null)
}
p.Y = m("v");
p.$b = m("oa");
p.Hb = function() {
  return 0 == this.c
};
p.Zb = m("P");
function Vd(a) {
  a.o || a.F || (a.F = U(w(a.Rb, a), 0), a.V = 0)
}
p.Rb = function(a) {
  this.F = null;
  this.a.debug("startForwardChannel_");
  if(Pd(this)) {
    if(this.c == Jd) {
      if(a) {
        this.a.I("Not supposed to retry the open")
      }else {
        this.a.debug("open_()");
        this.Aa = Math.floor(1E5 * Math.random());
        a = this.Aa++;
        var b = new Q(this, this.a, "", a, void 0);
        b.Y(this.v);
        var c = Wd(this), d = this.La.n();
        I(d, "RID", a);
        this.vb && I(d, "CVER", this.vb);
        Rd(this, d);
        fc(b, d, c);
        this.o = b;
        this.c = 2
      }
    }else {
      3 == this.c && (a ? Xd(this, a) : 0 == this.s.length ? this.a.debug("startForwardChannel_ returned: nothing to send") : this.o ? this.a.I("startForwardChannel_ returned: connection already in progress") : (Xd(this), this.a.debug("startForwardChannel_ finished, sent request")))
    }
  }
};
function Xd(a, b) {
  var c, d;
  b ? 6 < a.ha ? (a.s = a.Q.concat(a.s), a.Q.length = 0, c = a.Aa - 1, d = Wd(a)) : (c = b.B, d = b.X) : (c = a.Aa++, d = Wd(a));
  var f = a.La.n();
  I(f, "SID", a.Z);
  I(f, "RID", c);
  I(f, "AID", a.ya);
  Rd(a, f);
  c = new Q(a, a.a, a.Z, c, a.V + 1);
  c.Y(a.v);
  c.setTimeout(Math.round(0.5 * a.Db) + Math.round(0.5 * a.Db * Math.random()));
  a.o = c;
  fc(c, f, d)
}
function Rd(a, b) {
  if(a.e) {
    var c = a.e.getAdditionalParams(a);
    c && E(c, function(a, c) {
      I(b, c, a)
    })
  }
}
function Wd(a) {
  var b = Math.min(a.s.length, 1E3), c = ["count=" + b], d;
  6 < a.ha && 0 < b ? (d = a.s[0].Lb, c.push("ofs=" + d)) : d = 0;
  for(var f = 0;f < b;f++) {
    var g = a.s[f].Lb, h = a.s[f].map, g = 6 >= a.ha ? f : g - d;
    try {
      E(h, function(a, b) {
        c.push("req" + g + "_" + b + "=" + encodeURIComponent(a))
      })
    }catch(n) {
      c.push("req" + g + "_type=" + encodeURIComponent("_badmap")), a.e && a.e.badMapError(a, h)
    }
  }
  a.Q = a.Q.concat(a.s.splice(0, b));
  return c.join("&")
}
function Yd(a) {
  a.k || a.M || (a.tb = 1, a.M = U(w(a.Qb, a), 0), a.ga = 0)
}
function Zd(a) {
  if(a.k || a.M) {
    return a.a.I("Request already in progress"), !1
  }
  if(3 <= a.ga) {
    return!1
  }
  a.a.debug("Going to retry GET");
  a.tb++;
  a.M = U(w(a.Qb, a), $d(a, a.ga));
  a.ga++;
  return!0
}
p.Qb = function() {
  this.M = null;
  if(Pd(this)) {
    this.a.debug("Creating new HttpRequest");
    this.k = new Q(this, this.a, this.Z, "rpc", this.tb);
    this.k.Y(this.v);
    this.k.$b(this.oa);
    var a = this.ub.n();
    I(a, "RID", "rpc");
    I(a, "SID", this.Z);
    I(a, "CI", this.rb ? "0" : "1");
    I(a, "AID", this.ya);
    Rd(this, a);
    if(ec()) {
      I(a, "TYPE", "xmlhttp"), hc(this.k, a, !0, this.L, !1)
    }else {
      I(a, "TYPE", "html");
      var b = this.k, c = Boolean(this.L);
      b.sa = 3;
      b.T = J(a.n());
      Cc(b, c)
    }
    this.a.debug("New Request created")
  }
};
function Pd(a) {
  if(a.e) {
    var b = a.e.okToMakeRequest(a);
    if(0 != b) {
      return a.a.debug("Handler returned error code from okToMakeRequest"), Z(a, b), !1
    }
  }
  return!0
}
function Dd(a, b, c) {
  a.a.debug("Test Connection Finished");
  a.rb = a.ec && c;
  a.h = b.h;
  a.a.debug("connectChannel_()");
  a.jc(Jd, 0);
  a.La = rd(a, a.H);
  Vd(a)
}
function zd(a, b) {
  a.a.debug("Test Connection Failed");
  a.h = b.h;
  Z(a, 2)
}
p.Pb = function(a, b) {
  if(0 != this.c && (this.k == a || this.o == a)) {
    if(this.h = a.h, this.o == a && 3 == this.c) {
      if(7 < this.ha) {
        var c;
        try {
          c = this.P.parse(b)
        }catch(d) {
          c = null
        }
        if(s(c) && 3 == c.length) {
          var f = c;
          if(0 == f[0]) {
            a: {
              if(this.a.debug("Server claims our backchannel is missing."), this.M) {
                this.a.debug("But we are currently starting the request.")
              }else {
                if(this.k) {
                  if(this.k.pa + 3E3 < this.o.pa) {
                    Ud(this), this.k.cancel(), this.k = null
                  }else {
                    break a
                  }
                }else {
                  this.a.$("We do not have a BackChannel established")
                }
                Zd(this);
                T(19)
              }
            }
          }else {
            this.Kb = f[1], c = this.Kb - this.ya, 0 < c && (f = f[2], this.a.debug(f + " bytes (in " + c + " arrays) are outstanding on the BackChannel"), 37500 > f && (this.rb && 0 == this.ga) && !this.ba && (this.ba = U(w(this.rc, this), 6E3)))
          }
        }else {
          this.a.debug("Bad POST response data returned"), Z(this, 11)
        }
      }else {
        b != fd && (this.a.debug("Bad data returned - missing/invald magic cookie"), Z(this, 11))
      }
    }else {
      if(this.k == a && Ud(this), !/^[\s\xa0]*$/.test(b)) {
        c = this.P.parse(b);
        for(var f = this.e && this.e.channelHandleMultipleArrays ? [] : null, g = 0;g < c.length;g++) {
          var h = c[g];
          this.ya = h[0];
          h = h[1];
          2 == this.c ? "c" == h[0] ? (this.Z = h[1], this.L = this.correctHostPrefix(h[2]), h = h[3], this.ha = null != h ? h : 6, this.c = 3, this.e && this.e.channelOpened(this), this.ub = xd(this, this.L, this.H), Yd(this)) : "stop" == h[0] && Z(this, 7) : 3 == this.c && ("stop" == h[0] ? (f && f.length && (this.e.channelHandleMultipleArrays(this, f), f.length = 0), Z(this, 7)) : "noop" != h[0] && (f ? f.push(h) : this.e && this.e.channelHandleArray(this, h)), this.ga = 0)
        }
        f && f.length && this.e.channelHandleMultipleArrays(this, f)
      }
    }
  }
};
p.correctHostPrefix = function(a) {
  return this.fc ? this.e ? this.e.correctHostPrefix(a) : a : null
};
p.rc = function() {
  null != this.ba && (this.ba = null, this.k.cancel(), this.k = null, Zd(this), T(20))
};
function Ud(a) {
  null != a.ba && (q.clearTimeout(a.ba), a.ba = null)
}
p.ma = function(a) {
  this.a.debug("Request complete");
  var b;
  if(this.k == a) {
    Ud(this), this.k = null, b = 2
  }else {
    if(this.o == a) {
      this.o = null, b = 1
    }else {
      return
    }
  }
  this.h = a.h;
  if(0 != this.c) {
    if(a.J) {
      1 == b ? (b = x() - a.pa, Ld.dispatchEvent(new Nd(Ld, a.X ? a.X.length : 0, b, this.V)), Vd(this), this.Q.length = 0) : Yd(this)
    }else {
      var c = a.Eb();
      if(3 == c || 7 == c || 0 == c && 0 < this.h) {
        this.a.debug("Not retrying due to error type")
      }else {
        this.a.debug("Maybe retrying, last error: " + bc(c, this.h));
        var d;
        if(d = 1 == b) {
          this.o || this.F ? (this.a.I("Request already in progress"), d = !1) : this.c == Jd || this.V >= (this.Ja ? 0 : this.kb) ? d = !1 : (this.a.debug("Going to retry POST"), this.F = U(w(this.Rb, this, a), $d(this, this.V)), this.V++, d = !0)
        }
        if(d || 2 == b && Zd(this)) {
          return
        }
        this.a.debug("Exceeded max number of retries")
      }
      this.a.debug("Error: HTTP request failed");
      switch(c) {
        case 1:
          Z(this, 5);
          break;
        case 4:
          Z(this, 10);
          break;
        case 3:
          Z(this, 6);
          break;
        case 7:
          Z(this, 12);
          break;
        default:
          Z(this, 2)
      }
    }
  }
};
function $d(a, b) {
  var c = a.gc + Math.floor(Math.random() * a.Bc);
  a.isActive() || (a.a.debug("Inactive channel"), c *= 2);
  return c * b
}
p.jc = function(a) {
  if(!(0 <= Xa(arguments, this.c))) {
    throw Error("Unexpected channel state: " + this.c);
  }
};
function Z(a, b) {
  a.a.info("Error code " + b);
  if(2 == b || 9 == b) {
    var c = null;
    a.e && (c = a.e.getNetworkTestImageUri(a));
    var d = w(a.Dc, a);
    c || (c = new F("//www.google.com/images/cleardot.gif"), J(c));
    pd(c.toString(), 1E4, d)
  }else {
    T(2)
  }
  ae(a, b)
}
p.Dc = function(a) {
  a ? (this.a.info("Successfully pinged google.com"), T(2)) : (this.a.info("Failed to ping google.com"), T(1), ae(this, 8))
};
function ae(a, b) {
  a.a.debug("HttpChannel: error - " + b);
  a.c = 0;
  a.e && a.e.channelError(a, b);
  Td(a);
  Qd(a)
}
function Td(a) {
  a.c = 0;
  a.h = -1;
  if(a.e) {
    if(0 == a.Q.length && 0 == a.s.length) {
      a.e.channelClosed(a)
    }else {
      a.a.debug("Number of undelivered maps, pending: " + a.Q.length + ", outgoing: " + a.s.length);
      var b = $a(a.Q), c = $a(a.s);
      a.Q.length = 0;
      a.s.length = 0;
      a.e.channelClosed(a, b, c)
    }
  }
}
function rd(a, b) {
  var c = vd(a, null, b);
  a.a.debug("GetForwardChannelUri: " + c);
  return c
}
function xd(a, b, c) {
  b = vd(a, a.Ya() ? b : null, c);
  a.a.debug("GetBackChannelUri: " + b);
  return b
}
function vd(a, b, c) {
  var d = c instanceof F ? c.n() : new F(c, void 0);
  if("" != d.ja) {
    b && fb(d, b + "." + d.ja), gb(d, d.Ba)
  }else {
    var f = window.location, d = sb(f.protocol, b ? b + "." + f.hostname : f.hostname, f.port, c)
  }
  a.xa && E(a.xa, function(a, b) {
    I(d, b, a)
  });
  I(d, "VER", a.ha);
  Rd(a, d);
  return d
}
p.hb = function(a) {
  if(a && !this.Za) {
    throw Error("Can't create secondary domain capable XhrIo object.");
  }
  a = new hd;
  a.cc = this.Za;
  return a
};
p.isActive = function() {
  return!!this.e && this.e.isActive(this)
};
function U(a, b) {
  if(!ha(a)) {
    throw Error("Fn must not be null and must be a function");
  }
  return q.setTimeout(function() {
    a()
  }, b)
}
p.G = function(a) {
  Ld.dispatchEvent(new Od(Ld, a))
};
function T(a) {
  Ld.dispatchEvent(new Md(Ld, a))
}
p.Ya = function() {
  return this.Za || !ec()
};
function be() {
}
p = be.prototype;
p.channelHandleMultipleArrays = null;
p.okToMakeRequest = ba(0);
p.channelOpened = e();
p.channelHandleArray = e();
p.channelError = e();
p.channelClosed = e();
p.getAdditionalParams = function() {
  return{}
};
p.getNetworkTestImageUri = ba(null);
p.isActive = ba(!0);
p.badMapError = e();
p.correctHostPrefix = function(a) {
  return a
};
var $, ce, de = [].slice;
ce = {0:"Ok", 4:"User is logging out", 6:"Unknown session ID", 7:"Stopped by server", 8:"General network error", 2:"Request failed", 9:"Blocked by a network administrator", 5:"No data from server", 10:"Got bad data from the server", 11:"Got a bad response from the server"};
$ = function(a, b) {
  var c, d, f, g, h, n, k, t, l, r;
  t = this;
  a || (a = "channel");
  a.match(/:\/\//) && a.replace(/^ws/, "http");
  b || (b = {});
  s(b || "string" === typeof b) && (b = {});
  n = b.reconnectTime || 3E3;
  r = function(a) {
    t.readyState = t.readyState = a
  };
  r(this.CLOSED);
  l = null;
  g = b.Kc;
  c = function() {
    var a, b;
    b = arguments[0];
    a = 2 <= arguments.length ? de.call(arguments, 1) : [];
    try {
      return"function" === typeof t[b] ? t[b].apply(t, a) : void 0
    }catch(c) {
      throw a = c, "undefined" !== typeof console && null !== console && console.error(a.stack), a;
    }
  };
  d = new be;
  d.channelOpened = function() {
    g = l;
    r($.OPEN);
    return c("onopen")
  };
  f = null;
  d.channelError = function(a, b) {
    var d;
    d = ce[b];
    f = b;
    r($.cb);
    try {
      return c("onerror", d, b)
    }catch(g) {
    }
  };
  k = null;
  d.channelClosed = function(a, d, g) {
    if(t.readyState !== $.CLOSED) {
      l = null;
      a = f ? ce[f] : "Closed";
      r($.CLOSED);
      try {
        c("onclose", a, d, g)
      }catch(ee) {
      }
      b.reconnect && (7 !== f && 0 !== f) && (d = 6 === f ? 0 : n, clearTimeout(k), k = setTimeout(h, d));
      return f = null
    }
  };
  d.channelHandleArray = function(a, b) {
    return c("onmessage", b)
  };
  h = function() {
    if(l) {
      throw Error("Reconnect() called from invalid state");
    }
    r($.CONNECTING);
    c("onconnecting");
    clearTimeout(k);
    l = new Id(b.appVersion, null != g ? g.Cb : void 0);
    b.crossDomainXhr && (l.Za = !0);
    l.e = d;
    f = null;
    if(b.failFast) {
      var h = l;
      h.Ja = !0;
      h.a.info("setFailFast: true");
      (h.o || h.F) && h.V > (h.Ja ? 0 : h.kb) && (h.a.info("Retry count " + h.V + " > new maxRetries " + (h.Ja ? 0 : h.kb) + ". Fail immediately!"), h.o ? (h.o.cancel(), h.ma(h.o)) : (q.clearTimeout(h.F), h.F = null, Z(h, 2)))
    }
    return l.gb("" + a + "/test", "" + a + "/bind", b.extraParams, null != g ? g.Z : void 0, null != g ? g.ya : void 0)
  };
  this.open = function() {
    if(t.readyState !== t.CLOSED) {
      throw Error("Already open");
    }
    return h()
  };
  this.close = function() {
    clearTimeout(k);
    f = 0;
    if(t.readyState !== $.CLOSED) {
      return r($.cb), l.disconnect()
    }
  };
  this.sendMap = function(a) {
    var b;
    if((b = t.readyState) === $.cb || b === $.CLOSED) {
      throw Error("Cannot send to a closed connection");
    }
    b = l;
    if(0 == b.c) {
      throw Error("Invalid operation: sending map when state is closed");
    }
    1E3 == b.s.length && b.a.I("Already have 1000 queued maps upon queueing " + Kc(a));
    b.s.push(new Kd(b.qc++, a));
    2 != b.c && 3 != b.c || Vd(b)
  };
  this.send = function(a) {
    return this.sendMap({JSON:Kc(a)})
  };
  h();
  return this
};
$.prototype.CONNECTING = $.CONNECTING = $.CONNECTING = 0;
$.prototype.OPEN = $.OPEN = $.OPEN = 1;
$.prototype.CLOSING = $.CLOSING = $.cb = 2;
$.prototype.CLOSED = $.CLOSED = $.CLOSED = 3;
("undefined" !== typeof exports && null !== exports ? exports : window).BCSocket = $;

})();

},{}],27:[function(require,module,exports){
(function(){
(function(){var r={exports:{}},e=r.exports;e.name="text",e.uri="http://sharejs.org/types/textv1",e.create=function(r){if(null!=r&&"string"!=typeof r)throw Error("Initial data must be a string");return r||""};var t=Array.isArray||function(r){return"[object Array]"===Object.prototype.toString.call(r)},n=function(r){if(!t(r))throw Error("Op must be an array of components");for(var e=null,n=0;r.length>n;n++){var o=r[n];switch(typeof o){case"object":if(!("number"==typeof o.d&&o.d>0))throw Error("Object components must be deletes of size > 0");break;case"string":if(!(o.length>0))throw Error("Inserts cannot be empty");break;case"number":if(!(o>0))throw Error("Skip components must be >0");if("number"==typeof e)throw Error("Adjacent skip components should be combined")}e=o}if("number"==typeof e)throw Error("Op has a trailing skip")},o=function(r){return function(e){return e&&0!==e.d?0===r.length?r.push(e):typeof e==typeof r[r.length-1]?"object"==typeof e?r[r.length-1].d+=e.d:r[r.length-1]+=e:r.push(e):void 0}},s=function(r){var e=0,t=0,n=function(n,o){if(e===r.length)return-1===n?null:n;var s,i=r[e];return"number"==typeof i?-1===n||n>=i-t?(s=i-t,++e,t=0,s):(t+=n,n):"string"==typeof i?-1===n||"i"===o||n>=i.length-t?(s=i.slice(t),++e,t=0,s):(s=i.slice(t,t+n),t+=n,s):-1===n||"d"===o||n>=i.d-t?(s={d:i.d-t},++e,t=0,s):(t+=n,{d:n})},o=function(){return r[e]};return[n,o]},i=function(r){return"number"==typeof r?r:r.length||r.d},a=function(r){return r.length>0&&"number"==typeof r[r.length-1]&&r.pop(),r};e.normalize=function(r){for(var e=[],t=o(e),n=0;r.length>n;n++)t(r[n]);return a(e)},e.apply=function(r,e){if("string"!=typeof r)throw Error("Snapshot should be a string");n(e);for(var t=[],o=0;e.length>o;o++){var s=e[o];switch(typeof s){case"number":if(s>r.length)throw Error("The op is too long for this document");t.push(r.slice(0,s)),r=r.slice(s);break;case"string":t.push(s);break;case"object":r=r.slice(s.d)}}return t.join("")+r},e.transform=function(r,e,t){if("left"!=t&&"right"!=t)throw Error("side ("+t+") must be 'left' or 'right'");n(r),n(e);for(var c=[],f=o(c),u=s(r),h=u[0],p=u[1],b=0;e.length>b;b++){var l,g,m=e[b];switch(typeof m){case"number":for(l=m;l>0;)g=h(l,"i"),f(g),"string"!=typeof g&&(l-=i(g));break;case"string":"left"===t&&"string"==typeof p()&&f(h(-1)),f(m.length);break;case"object":for(l=m.d;l>0;)switch(g=h(l,"i"),typeof g){case"number":l-=g;break;case"string":f(g);break;case"object":l-=g.d}}}for(;m=h(-1);)f(m);return a(c)},e.compose=function(r,e){n(r),n(e);for(var t=[],c=o(t),f=s(r)[0],u=0;e.length>u;u++){var h,p,b=e[u];switch(typeof b){case"number":for(h=b;h>0;)p=f(h,"d"),c(p),"object"!=typeof p&&(h-=i(p));break;case"string":c(b);break;case"object":for(h=b.d;h>0;)switch(p=f(h,"d"),typeof p){case"number":c({d:p}),h-=p;break;case"string":h-=p.length;break;case"object":c(p)}}}for(;b=f(-1);)c(b);return a(t)};var c=function(r,e){for(var t=0,n=0;e.length>n;n++){var o=e[n];if(t>=r)break;switch(typeof o){case"number":if(t+o>=r)return r;t+=o;break;case"string":t+=o.length,r+=o.length;break;case"object":r-=Math.min(o.d,r-t)}}return r};e.transformCursor=function(r,e,t){var n=0;if(t){for(var o=0;e.length>o;o++){var s=e[o];switch(typeof s){case"number":n+=s;break;case"string":n+=s.length}}return[n,n]}return[c(r[0],e),c(r[1],e)]};var f=window.ottypes=window.ottypes||{},u=r.exports;f[u.name]=u,u.uri&&(f[u.uri]=u)})();// Text document API for the 'text' type.

// The API implements the standard text API methods. In particular:
//
// - getLength() returns the length of the document in characters
// - getText() returns a string of the document
// - insert(pos, text, [callback]) inserts text at position pos in the document
// - remove(pos, length, [callback]) removes length characters at position pos
//
// Events are implemented by just adding the appropriate methods to your
// context object.
// onInsert(pos, text): Called when text is inserted.
// onRemove(pos, length): Called when text is removed.

var _types = (typeof brequire !== 'undefined') ?
  brequire('ottypes') : window.ottypes;

_types['http://sharejs.org/types/textv1'].api = {
  provides: {text: true},

  // Returns the number of characters in the string
  getLength: function() { return this.getSnapshot().length; },


  // Returns the text content of the document
  get: function() { return this.getSnapshot(); },

  getText: function() {
    console.warn("`getText()` is deprecated; use `get()` instead.");
    return this.get();
  },

  // Insert the specified text at the given position in the document
  insert: function(pos, text, callback) {
    return this.submitOp([pos, text], callback);
  },

  remove: function(pos, length, callback) {
    return this.submitOp([pos, {d:length}], callback);
  },

  // When you use this API, you should implement these two methods
  // in your editing context.
  //onInsert: function(pos, text) {},
  //onRemove: function(pos, removedLength) {},

  _onOp: function(op) {
    var pos = 0;
    var spos = 0;
    for (var i = 0; i < op.length; i++) {
      var component = op[i];
      switch (typeof component) {
        case 'number':
          pos += component;
          spos += component;
          break;
        case 'string':
          if (this.onInsert) this.onInsert(pos, component);
          pos += component.length;
          break;
        case 'object':
          if (this.onRemove) this.onRemove(pos, component.d);
          spos += component.d;
      }
    }
  }
};
(function(){var e={exports:{}},i=e.exports;i._bootstrapTransform=function(e,i,n,r){var t,l;return t=function(e,n,r,t){return i(r,e,n,"left"),i(t,n,e,"right")},e.transformX=e.transformX=l=function(e,i){var o,p,d,f,s,a,u,c,h,v,g,m,y,w,O,b,k,E,x;for(n(e),n(i),s=[],v=0,w=i.length;w>v;v++){for(h=i[v],f=[],o=0;e.length>o;){if(a=[],t(e[o],h,f,a),o++,1!==a.length){if(0===a.length){for(E=e.slice(o),g=0,O=E.length;O>g;g++)p=E[g],r(f,p);h=null;break}for(x=l(e.slice(o),a),d=x[0],c=x[1],m=0,b=d.length;b>m;m++)p=d[m],r(f,p);for(y=0,k=c.length;k>y;y++)u=c[y],r(s,u);h=null;break}h=a[0]}null!=h&&r(s,h),e=f}return[e,s]},e.transform=e.transform=function(e,n,r){if("left"!==r&&"right"!==r)throw Error("type must be 'left' or 'right'");return 0===n.length?e:1===e.length&&1===n.length?i([],e[0],n[0],r):"left"===r?l(e,n)[0]:l(n,e)[1]}};var n,r,t,l,o,p,d,f;p={name:"text-old",uri:"http://sharejs.org/types/textv0",create:function(){return""}},o=function(e,i,n){return e.slice(0,i)+n+e.slice(i)},r=function(e){var i,n;if("number"!=typeof e.p)throw Error("component missing position field");if(n=typeof e.i,i=typeof e.d,!("string"===n^"string"===i))throw Error("component needs an i or d field");if(!(e.p>=0))throw Error("position cannot be negative")},t=function(e){var i,n,t;for(n=0,t=e.length;t>n;n++)i=e[n],r(i);return!0},p.apply=function(e,i){var n,r,l,p;for(t(i),l=0,p=i.length;p>l;l++)if(n=i[l],null!=n.i)e=o(e,n.p,n.i);else{if(r=e.slice(n.p,n.p+n.d.length),n.d!==r)throw Error("Delete component '"+n.d+"' does not match deleted text '"+r+"'");e=e.slice(0,n.p)+e.slice(n.p+n.d.length)}return e},p._append=n=function(e,i){var n,r,t;if(""!==i.i&&""!==i.d)return 0===e.length?e.push(i):(n=e[e.length-1],null!=n.i&&null!=i.i&&n.p<=(r=i.p)&&n.p+n.i.length>=r?e[e.length-1]={i:o(n.i,i.p-n.p,i.i),p:n.p}:null!=n.d&&null!=i.d&&i.p<=(t=n.p)&&i.p+i.d.length>=t?e[e.length-1]={d:o(i.d,n.p-i.p,n.d),p:i.p}:e.push(i))},p.compose=function(e,i){var r,l,o,p;for(t(e),t(i),l=e.slice(),o=0,p=i.length;p>o;o++)r=i[o],n(l,r);return l},p.compress=function(e){return p.compose([],e)},p.normalize=function(e){var i,r,t,l,o;for(r=[],(null!=e.i||null!=e.p)&&(e=[e]),t=0,l=e.length;l>t;t++)i=e[t],null==(o=i.p)&&(i.p=0),n(r,i);return r},f=function(e,i,n){return null!=i.i?e>i.p||i.p===e&&n?e+i.i.length:e:i.p>=e?e:i.p+i.d.length>=e?i.p:e-i.d.length},p.transformCursor=function(e,i,n){var r,t,l,o;for(t="right"===n,l=0,o=i.length;o>l;l++)r=i[l],e=f(e,r,t);return e},p._tc=d=function(e,i,r,l){var o,p,d,s,a,u;if(t([i]),t([r]),null!=i.i)n(e,{i:i.i,p:f(i.p,r,"right"===l)});else if(null!=r.i)u=i.d,i.p<r.p&&(n(e,{d:u.slice(0,r.p-i.p),p:i.p}),u=u.slice(r.p-i.p)),""!==u&&n(e,{d:u,p:i.p+r.i.length});else if(i.p>=r.p+r.d.length)n(e,{d:i.d,p:i.p-r.d.length});else if(i.p+i.d.length<=r.p)n(e,i);else{if(s={d:"",p:i.p},i.p<r.p&&(s.d=i.d.slice(0,r.p-i.p)),i.p+i.d.length>r.p+r.d.length&&(s.d+=i.d.slice(r.p+r.d.length-i.p)),d=Math.max(i.p,r.p),p=Math.min(i.p+i.d.length,r.p+r.d.length),o=i.d.slice(d-i.p,p-i.p),a=r.d.slice(d-r.p,p-r.p),o!==a)throw Error("Delete ops delete different text in the same region of the document");""!==s.d&&(s.p=f(s.p,r),n(e,s))}return e},l=function(e){return null!=e.i?{d:e.i,p:e.p}:{i:e.d,p:e.p}},p.invert=function(e){var i,n,r,t,o;for(t=e.slice().reverse(),o=[],n=0,r=t.length;r>n;n++)i=t[n],o.push(l(i));return o},"undefined"==typeof brequire?i._bootstrapTransform(p,p.transformComponent,p.checkValidOp,p.append):brequire("./helpers")._bootstrapTransform(p,p.transformComponent,p.checkValidOp,p.append),e.exports=p;var s=function(e){return"[object Array]"==Object.prototype.toString.call(e)},a=function(e){return JSON.parse(JSON.stringify(e))},p="undefined"!=typeof brequire?brequire("./text-old"):window.ottypes.text,u={name:"json0",uri:"http://sharejs.org/types/JSONv0"};u.create=function(e){return void 0===e?null:e},u.invertComponent=function(e){var i={p:e.p};return void 0!==e.si&&(i.sd=e.si),void 0!==e.sd&&(i.si=e.sd),void 0!==e.oi&&(i.od=e.oi),void 0!==e.od&&(i.oi=e.od),void 0!==e.li&&(i.ld=e.li),void 0!==e.ld&&(i.li=e.ld),void 0!==e.na&&(i.na=-e.na),void 0!==e.lm&&(i.lm=e.p[e.p.length-1],i.p=e.p.slice(0,e.p.length-1).concat([e.lm])),i},u.invert=function(e){for(var i=e.slice().reverse(),n=[],r=0;i.length>r;r++)n.push(u.invertComponent(i[r]));return n},u.checkValidOp=function(e){for(var i=0;e.length>i;i++)if(!s(e[i].p))throw Error("Missing path")},u.checkList=function(e){if(!s(e))throw Error("Referenced element not a list")},u.checkObj=function(e){if(e.constructor!==Object)throw Error("Referenced element not an object (it was "+JSON.stringify(e)+")")},u.apply=function(e,i){u.checkValidOp(i),i=a(i);for(var n={data:e},r=0;i.length>r;r++){for(var t=i[r],l=null,o=null,p=n,d="data",f=0;t.p.length>f;f++){var s=t.p[f];if(l=p,o=d,p=p[d],d=s,null==l)throw Error("Path invalid")}if(void 0!==t.na){if("number"!=typeof p[d])throw Error("Referenced element not a number");p[d]+=t.na}else if(void 0!==t.si){if("string"!=typeof p)throw Error("Referenced element not a string (it was "+JSON.stringify(p)+")");l[o]=p.slice(0,d)+t.si+p.slice(d)}else if(void 0!==t.sd){if("string"!=typeof p)throw Error("Referenced element not a string");if(p.slice(d,d+t.sd.length)!==t.sd)throw Error("Deleted string does not match");l[o]=p.slice(0,d)+p.slice(d+t.sd.length)}else if(void 0!==t.li&&void 0!==t.ld)u.checkList(p),p[d]=t.li;else if(void 0!==t.li)u.checkList(p),p.splice(d,0,t.li);else if(void 0!==t.ld)u.checkList(p),p.splice(d,1);else if(void 0!==t.lm){if(u.checkList(p),t.lm!=d){var c=p[d];p.splice(d,1),p.splice(t.lm,0,c)}}else if(void 0!==t.oi)u.checkObj(p),p[d]=t.oi;else{if(void 0===t.od)throw Error("invalid / missing instruction in op");u.checkObj(p),delete p[d]}}return n.data},u.incrementalApply=function(e,i,n){for(var r=0;i.length>r;r++){var t=[i[r]];e=u.apply(e,t),n(t,e)}return e};var c=u.pathMatches=function(e,i,n){if(e.length!=i.length)return!1;for(var r=0;e.length>r;r++)if(e[r]!==i[r]&&(!n||r!==e.length-1))return!1;return!0},h=function(e){var i={p:e.p[e.p.length-1]};return null!=e.si?i.i=e.si:i.d=e.sd,i};u.append=function(e,i){i=a(i);var n;if(0!=e.length&&c(i.p,(n=e[e.length-1]).p))null!=n.na&&null!=i.na?e[e.length-1]={p:n.p,na:n.na+i.na}:void 0!==n.li&&void 0===i.li&&i.ld===n.li?void 0!==n.ld?delete n.li:e.pop():void 0!==n.od&&void 0===n.oi&&void 0!==i.oi&&void 0===i.od?n.oi=i.oi:void 0!==n.oi&&void 0!==i.od?void 0!==i.oi?n.oi=i.oi:void 0!==n.od?delete n.oi:e.pop():void 0!==i.lm&&i.p[i.p.length-1]===i.lm||e.push(i);else if(0!=e.length&&c(i.p,n.p,!0))if(null==i.si&&null==i.sd||null==n.si&&null==n.sd)e.push(i);else{var r=[h(n)];if(p._append(r,h(i)),1!==r.length)e.push(i);else{var t=r[0];n.p[n.p.length-1]=t.p,null!=t.i?n.si=t.i:n.sd=t.d}}else e.push(i)},u.compose=function(e,i){u.checkValidOp(e),u.checkValidOp(i);for(var n=a(e),r=0;i.length>r;r++)u.append(n,i[r]);return n},u.normalize=function(e){var i=[];e=s(e)?e:[e];for(var n=0;e.length>n;n++){var r=e[n];null==r.p&&(r.p=[]),u.append(i,r)}return i},u.canOpAffectOp=function(e,i){if(0===e.length)return!0;if(0===i.length)return!1;i=i.slice(0,i.length-1),e=e.slice(0,e.length-1);for(var n=0;e.length>n;n++){var r=e[n];if(n>=i.length||r!=i[n])return!1}return!0},u.transformComponent=function(e,i,n,r){i=a(i),void 0!==i.na&&i.p.push(0),void 0!==n.na&&n.p.push(0);var t;u.canOpAffectOp(n.p,i.p)&&(t=n.p.length-1);var l;u.canOpAffectOp(i.p,n.p)&&(l=i.p.length-1);var o=i.p.length,d=n.p.length;if(void 0!==i.na&&i.p.pop(),void 0!==n.na&&n.p.pop(),n.na){if(null!=l&&d>=o&&n.p[l]==i.p[l])if(void 0!==i.ld){var f=a(n);f.p=f.p.slice(o),i.ld=u.apply(a(i.ld),[f])}else if(void 0!==i.od){var f=a(n);f.p=f.p.slice(o),i.od=u.apply(a(i.od),[f])}return u.append(e,i),e}if(null!=l&&d>o&&i.p[l]==n.p[l])if(void 0!==i.ld){var f=a(n);f.p=f.p.slice(o),i.ld=u.apply(a(i.ld),[f])}else if(void 0!==i.od){var f=a(n);f.p=f.p.slice(o),i.od=u.apply(a(i.od),[f])}if(null!=t){var s=o==d;if(void 0!==n.na);else if(void 0!==n.si||void 0!==n.sd){if(void 0!==i.si||void 0!==i.sd){if(!s)throw Error("must be a string?");var c=h(i),v=h(n),g=[];p._tc(g,c,v,r);for(var m=0;g.length>m;m++){var y=g[m],w={p:i.p.slice(0,t)};w.p.push(y.p),null!=y.i&&(w.si=y.i),null!=y.d&&(w.sd=y.d),u.append(e,w)}return e}}else if(void 0!==n.li&&void 0!==n.ld){if(n.p[t]===i.p[t]){if(!s)return e;if(void 0!==i.ld){if(void 0===i.li||"left"!==r)return e;i.ld=a(n.li)}}}else if(void 0!==n.li)void 0!==i.li&&void 0===i.ld&&s&&i.p[t]===n.p[t]?"right"===r&&i.p[t]++:n.p[t]<=i.p[t]&&i.p[t]++,void 0!==i.lm&&s&&n.p[t]<=i.lm&&i.lm++;else if(void 0!==n.ld){if(void 0!==i.lm&&s){if(n.p[t]===i.p[t])return e;var O=n.p[t],b=i.p[t],k=i.lm;(k>O||O===k&&k>b)&&i.lm--}if(n.p[t]<i.p[t])i.p[t]--;else if(n.p[t]===i.p[t]){if(o>d)return e;if(void 0!==i.ld){if(void 0===i.li)return e;delete i.ld}}}else if(void 0!==n.lm)if(void 0!==i.lm&&o===d){var b=i.p[t],k=i.lm,E=n.p[t],x=n.lm;if(E!==x)if(b===E){if("left"!==r)return e;i.p[t]=x,b===k&&(i.lm=x)}else b>E&&i.p[t]--,b>x?i.p[t]++:b===x&&E>x&&(i.p[t]++,b===k&&i.lm++),k>E?i.lm--:k===E&&k>b&&i.lm--,k>x?i.lm++:k===x&&(x>E&&k>b||E>x&&b>k?"right"===r&&i.lm++:k>b?i.lm++:k===E&&i.lm--)}else if(void 0!==i.li&&void 0===i.ld&&s){var b=n.p[t],k=n.lm;O=i.p[t],O>b&&i.p[t]--,O>k&&i.p[t]++}else{var b=n.p[t],k=n.lm;O=i.p[t],O===b?i.p[t]=k:(O>b&&i.p[t]--,O>k?i.p[t]++:O===k&&b>k&&i.p[t]++)}else if(void 0!==n.oi&&void 0!==n.od){if(i.p[t]===n.p[t]){if(void 0===i.oi||!s)return e;if("right"===r)return e;i.od=n.oi}}else if(void 0!==n.oi){if(void 0!==i.oi&&i.p[t]===n.p[t]){if("left"!==r)return e;u.append(e,{p:i.p,od:n.oi})}}else if(void 0!==n.od&&i.p[t]==n.p[t]){if(!s)return e;if(void 0===i.oi)return e;delete i.od}}return u.append(e,i),e},"undefined"!=typeof brequire?brequire("./helpers")._bootstrapTransform(u,u.transformComponent,u.checkValidOp,u.append):i._bootstrapTransform(u,u.transformComponent,u.checkValidOp,u.append),e.exports=u;var v=window.ottypes=window.ottypes||{},g=e.exports;v[g.name]=g,g.uri&&(v[g.uri]=g)})();// JSON document API for the 'json0' type.

(function() {
  var __slice = [].slice;
  var _types = typeof brequire !== 'undefined' ? brequire('ottypes') : window.ottypes;
  var _type = _types['http://sharejs.org/types/JSONv0'];

  // Helpers

  function depath(path) {
    if (path.length === 1 && path[0].constructor === Array) {
      return path[0];
    } else {
      return path;
    }
  }

  function traverse(snapshot, path) {
    var key = 'data';
    var elem = { data: snapshot };

    for (var i = 0; i < path.length; i++) {
      elem = elem[key];
      key = path[i];
      if (typeof elem === 'undefined') {
        throw new Error('bad path');
      }
    }

    return {
      elem: elem,
      key: key
    };
  }

  function pathEquals(p1, p2) {
    if (p1.length !== p2.length) {
      return false;
    }
    for (var i = 0; i < p1.length; ++i) {
      if (p1[i] !== p2[i]) {
        return false;
      }
    }
    return true;
  }

  function containsPath(p1, p2) {
    if (p1.length < p2.length) return false;
    return pathEquals( p1.slice(0,p2.length), p2);
  }

  // does nothing, used as a default callback
  function nullFunction() {}

  // given a path represented as an array or a number, normalize to an array
  // whole numbers are converted to integers.
  function normalizePath(path) {
    if (path instanceof Array) {
      return path;
    }
    if (typeof(path) == "number") {
      return [path];
    }
    // if (typeof(path) == "string") {
    //   path = path.split(".");
    //   var out = [];
    //   for (var i=0; i<path.length; i++) {
    //     var part = path[i];
    //     if (String(parseInt(part, 10)) == part) {
    //       out.push(parseInt(part, 10));
    //     } else {
    //       out.push(part);
    //     }
    //   }
    //   return out;
    // }
  }

  // helper for creating functions with the method signature func([path],arg1,arg2,...,[cb])
  // populates an array of arguments with a default path and callback
  function normalizeArgs(obj, args, func, brequiredArgsCount){
    args = Array.prototype.slice.call(args);
    var path_prefix = obj.path || [];

    if (func.length > 1 && typeof args[args.length-1] !== 'function') {
      args.push(nullFunction);
    }

    if (args.length < (brequiredArgsCount || func.length)) {
      args.unshift(path_prefix);
    } else {
      args[0] = path_prefix.concat(normalizePath(args[0]));
    }

    return func.apply(obj,args);
  }


  // SubDoc
  // this object is returned from context.createContextAt()

  var SubDoc = function(context, path) {
    this.context = context;
    this.path = path || [];
  };

  SubDoc.prototype._updatePath = function(op){
    console.log("UPDATEPATH", op);
    for (var i = 0; i < op.length; i++) {
      var c = op[i];
      if(c.lm !== undefined && containsPath(this.path,c.p)){
        var new_path_prefix = c.p.slice(0,c.p.length-1);
        new_path_prefix.push(c.lm);
        this.path = new_path_prefix.concat(this.path.slice(new_path_prefix.length));
      }
    }
  };

  SubDoc.prototype.createContextAt = function() {
    var path = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.context.createContextAt(this.path.concat(depath(path)));
  };

  SubDoc.prototype.get = function(path) {
    return normalizeArgs(this, arguments, function(path){
      return this.context.get(path);
    });
  };

  SubDoc.prototype.set = function(path, value, cb) {
    return normalizeArgs(this, arguments, function(path, value, cb){
      return this.context.set(path, value, cb);
    });
  };

  SubDoc.prototype.insert = function(path, value, cb) {
    return normalizeArgs(this, arguments, function(path, value, cb){
      return this.context.insert(path, value, cb);
    });
  };

  SubDoc.prototype.remove = function(path, len, cb) {
    return normalizeArgs(this, arguments, function(path, len, cb) {
      return this.context.remove(path, len, cb);
    }, 2);
  };

  SubDoc.prototype.push = function(path, value, cb) {
    return normalizeArgs(this, arguments, function(path, value, cb) {
        var _ref = traverse(this.context.getSnapshot(), path);
        var len = _ref.elem[_ref.key].length;
        path.push(len);
      return this.context.insert(path, value, cb);
    });
  };

  SubDoc.prototype.move = function(path, from, to, cb) {
    return normalizeArgs(this, arguments, function(path, from, to, cb) {
      console.log("sd MOVE");
      return this.context.move(path, from, to, cb);
    });
  };

  SubDoc.prototype.add = function(path, amount, cb) {
    return normalizeArgs(this, arguments, function(path, amount, cb) {
      return this.context.add(path, amount, cb);
    });
  };

  SubDoc.prototype.on = function(event, cb) {
    return this.context.addListener(this.path, event, cb);
  };

  SubDoc.prototype.removeListener = function(l) {
    return this.context.removeListener(l);
  };

  SubDoc.prototype.getLength = function(path) {
    return normalizeArgs(this, arguments, function(path) {
      return this.context.getLength(path);
    });
  };

  // DEPRECATED
  SubDoc.prototype.getText = function(path) {
    return normalizeArgs(this, arguments, function(path) {
      return this.context.getText(path);
    });
  };

  // DEPRECATED
  SubDoc.prototype.deleteText = function(path, pos, length, cb) {
    return normalizeArgs(this, arguments, function(path, pos, length, cb) {
      return this.context.deleteText(path, length, pos, cb);
    });
  };

  SubDoc.prototype.destroy = function() {
    this.context._removeSubDoc(this);
  };


  // JSON API methods
  // these methods are mixed in to the context return from doc.createContext()

  _type.api = {

    provides: {
      json: true
    },

    _fixComponentPaths: function(c) {
      if (!this._listeners) {
        return;
      }
      if (c.na !== undefined || c.si !== undefined || c.sd !== undefined) {
        return;
      }

      var to_remove = [];
      var _ref = this._listeners;

      for (var i = 0; i < _ref.length; i++) {
        var l = _ref[i];
        var dummy = {
          p: l.path,
          na: 0
        };
        var xformed = _type.transformComponent([], dummy, c, 'left');
        if (xformed.length === 0) {
          to_remove.push(i);
        } else if (xformed.length === 1) {
          l.path = xformed[0].p;
        } else {
          throw new Error("Bad assumption in json-api: xforming an 'na' op will always result in 0 or 1 components.");
        }
      }

      to_remove.sort(function(a, b) {
        return b - a;
      });

      var _results = [];
      for (var j = 0; j < to_remove.length; j++) {
        i = to_remove[j];
        _results.push(this._listeners.splice(i, 1));
      }

      return _results;
    },

    _fixPaths: function(op) {
      var _results = [];
      for (var i = 0; i < op.length; i++) {
        var c = op[i];
        _results.push(this._fixComponentPaths(c));
      }
      return _results;
    },

    _submit: function(op, callback) {
      this._fixPaths(op);
      return this.submitOp(op, callback);
    },

    _addSubDoc: function(subdoc){
      this._subdocs || (this._subdocs = []);
      this._subdocs.push(subdoc);
    },

    _removeSubDoc: function(subdoc){
      this._subdocs || (this._subdocs = []);
      for(var i = 0; i < this._subdocs.length; i++){
        if(this._subdocs[i] === subdoc) this._subdocs.splice(i,1);
        return;
      }
    },

    _updateSubdocPaths: function(op){
      this._subdocs || (this._subdocs = []);
      for(var i = 0; i < this._subdocs.length; i++){
        this._subdocs[i]._updatePath(op);
      }
    },

    createContextAt: function() {
      var path = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      var subdoc =  new SubDoc(this, depath(path));
      this._addSubDoc(subdoc);
      return subdoc;
    },

    get: function(path) {
      if (!path) return this.getSnapshot();  
      return normalizeArgs(this,arguments,function(path){
        var _ref = traverse(this.getSnapshot(), path);
        return _ref.elem[_ref.key];
      });
    },

    set: function(path, value, cb) {
      return normalizeArgs(this, arguments, function(path, value, cb) {
        var _ref = traverse(this.getSnapshot(), path);
        var elem = _ref.elem;
        var key = _ref.key;
        var op = {
          p: path
        };

        if (elem.constructor === Array) {
          op.li = value;
          if (typeof elem[key] !== 'undefined') {
            op.ld = elem[key];
          }
        } else if (typeof elem === 'object') {
          op.oi = value;
          if (typeof elem[key] !== 'undefined') {
            op.od = elem[key];
          }
        } else {
          throw new Error('bad path');
        }

        return this._submit([op], cb);
      });
    },

    remove: function(path, len, cb) {
      return normalizeArgs(this, arguments, function(path, len, cb) {
        if (!cb && len instanceof Function) {
          cb = len;
          len = null;
        }
        // if there is no len argument, then we are removing a single item from either a list or a hash
        var _ref, elem, op, key;
        if (len === null || len === undefined) {
          _ref = traverse(this.getSnapshot(), path);
          elem = _ref.elem;
          key = _ref.key;
          op = {
            p: path
          };

          if (typeof elem[key] === 'undefined') {
            throw new Error('no element at that path');
          }

          if (elem.constructor === Array) {
            op.ld = elem[key];
          } else if (typeof elem === 'object') {
            op.od = elem[key];
          } else {
            throw new Error('bad path');
          }
          return this._submit([op], cb);
        } else {
          var pos;
          pos = path.pop();
          _ref = traverse(this.getSnapshot(), path);
          elem = _ref.elem;
          key = _ref.key;
          if (typeof elem[key] === 'string') {
            op = {
              p: path.concat(pos),
              sd: _ref.elem[_ref.key].slice(pos, pos + len)
            };
            return this._submit([op], cb);
          } else if (elem[key].constructor === Array) {
            var ops = [];
            for (var i=pos; i<pos+len; i++) {
              ops.push({
                p: path.concat(pos),
                ld: elem[key][i]
              });
            }
            return this._submit(ops, cb);
          } else {
            throw new Error('element at path does not support range');
          }
        }
      }, 2);
    },

    insert: function(path, value, cb) {
      return normalizeArgs(this, arguments, function(path, value, cb) {
        var pos = path.pop();
        var _ref = traverse(this.getSnapshot(), path);
        var elem = _ref.elem;
        var key = _ref.key;
        var op = {
          p: path.concat(pos)
        };

        if (elem[key].constructor === Array) {
          op.li = value;
        } else if (typeof elem[key] === 'string') {
          op.si = value;
        }
        return this._submit([op], cb);
      });
    },

    move: function(path, from, to, cb) {
      return normalizeArgs(this, arguments, function(path, from, to, cb) {
        var self = this;
        var op = [
          {
            p: path.concat(from),
            lm: to
          }
        ];

        return this._submit(op, function(){
          self._updateSubdocPaths(op);
          if(cb) cb.apply(cb, arguments);
        });
      });
    },

    push: function(path, value, cb) {
      return normalizeArgs(this, arguments, function(path, value, cb) {
        var _ref = traverse(this.getSnapshot(), path);
        var len = _ref.elem[_ref.key].length;
        path.push(len);
        return this.insert(path, value, cb);
      });
    },

    add: function(path, amount, cb) {
      return normalizeArgs(this, arguments, function(path, value, cb) {
        var op = [
          {
            p: path,
            na: amount
          }
        ];
        return this._submit(op, cb);
      });
    },

    getLength: function(path) {
        return normalizeArgs(this, arguments, function(path) {
          return this.get(path).length;
        });
    },

    getText: function(path) {
      return normalizeArgs(this, arguments, function(path) {
        console.warn("Deprecated. Use `get()` instead");
        return this.get(path);
      });
    },

    deleteText: function(path, length, pos, cb) {
      return normalizeArgs(this, arguments, function(path, length, pos, cb) {
        console.warn("Deprecated. Use `remove(path, length, cb)` instead");
        var _ref = traverse(this.getSnapshot(), path);
        var op = [
          {
            p: path.concat(pos),
            sd: _ref.elem[_ref.key].slice(pos, pos + length)
          }
        ];

        return this._submit(op, cb);
      });
    },

    addListener: function(path, event, cb) {
      return normalizeArgs(this, arguments, function(path, value, cb) {
        var listener = {
          path: path,
          event: event,
          cb: cb
        };
        this._listeners || (this._listeners = []);
        this._listeners.push(listener);
        return listener;
      });
    },

    removeListener: function(listener) {
      if (!this._listeners) {
        return;
      }
      var i = this._listeners.indexOf(listener);
      if (i < 0) {
        return false;
      }
      this._listeners.splice(i, 1);
      return true;
    },

    _onOp: function(op) {
      for (var i = 0; i < op.length; i++) {
        var c = op[i];
        this._fixComponentPaths(c);

        if(c.lm !== undefined) {
          this._updateSubdocPaths([c]);
        }

        var match_path = c.na === undefined ? c.p.slice(0, c.p.length - 1) : c.p;

        for (var l = 0; l < this._listeners.length; l++) {
          var listener = this._listeners[l];
          var cb = listener.cb;

          if (pathEquals(listener.path, match_path)) {
            switch (listener.event) {
              case 'insert':
                if (c.li !== undefined && c.ld === undefined) {
                  cb(c.p[c.p.length - 1], c.li);
                } else if (c.oi !== undefined && c.od === undefined) {
                  cb(c.p[c.p.length - 1], c.oi);
                } else if (c.si !== undefined) {
                  cb(c.p[c.p.length - 1], c.si);
                }
                break;
              case 'delete':
                if (c.li === undefined && c.ld !== undefined) {
                  cb(c.p[c.p.length - 1], c.ld);
                } else if (c.oi === undefined && c.od !== undefined) {
                  cb(c.p[c.p.length - 1], c.od);
                } else if (c.sd !== undefined) {
                  cb(c.p[c.p.length - 1], c.sd);
                }
                break;
              case 'replace':
                if (c.li !== undefined && c.ld !== undefined) {
                  cb(c.p[c.p.length - 1], c.ld, c.li);
                } else if (c.oi !== undefined && c.od !== undefined) {
                  cb(c.p[c.p.length - 1], c.od, c.oi);
                }
                break;
              case 'move':
                if (c.lm !== undefined) {
                  cb(c.p[c.p.length - 1], c.lm);
                }
                break;
              case 'add':
                if (c.na !== undefined) {
                  cb(c.na);
                }
            }
          } else if (_type.canOpAffectOp(listener.path, match_path)
              && listener.event === 'child op') {
            var child_path = c.p.slice(listener.path.length);
            cb(child_path, c);
          }
        }
      }
    }
  };

}).call(this);
// This file is included at the top of the compiled client JS.

// All the modules will just add stuff to exports, and it'll all get exported.
var exports = window.sharejs = {version: '0.7.0-alpha8'};

// This is a simple rewrite of microevent.js. I've changed the
// function names to be consistent with node.js EventEmitter.
//
// microevent.js is copyright Jerome Etienne, and licensed under the MIT license:
// https://github.com/jeromeetienne/microevent.js

var MicroEvent = function() {};

MicroEvent.prototype.on = function(event, fn) {
  var events = this._events = this._events || {};
  (events[event] = events[event] || []).push(fn);
};

MicroEvent.prototype.removeListener = function(event, fn) {
  var events = this._events = this._events || {};
  var listeners = events[event] = events[event] || [];

  // Sadly, no IE8 support for indexOf.
  var i = 0;
  while (i < listeners.length) {
    if (listeners[i] === fn) {
      listeners[i] = undefined;
    }
    i++;
  }

  // Compact the list when no event handler is actually running.
  setTimeout(function() {
    events[event] = [];
    var fn;
    for (var i = 0; i < listeners.length; i++) {
      // Only add back event handlers which exist.
      if ((fn = listeners[i])) events[event].push(fn);
    }
  }, 0);
};

MicroEvent.prototype.emit = function(event) {
  var events = this._events;
  var args = Array.prototype.splice.call(arguments, 1);

  if (!events || !events[event]) {
    if (event == 'error') {
      if (console) {
        console.error.apply(console, args);
      }
    }
    return;
  }

  var listeners = events[event];
  for (var i = 0; i < listeners.length; i++) {
    if (listeners[i]) {
      listeners[i].apply(this, args);
    }
  }
};

MicroEvent.prototype.once = function(event, fn) {
  var listener, _this = this;
  this.on(event, listener = function() {
    _this.removeListener(event, listener);
    fn.apply(_this, arguments);
  });
};

MicroEvent.mixin = function(obj) {
  var proto = obj.prototype || obj;
  proto.on = MicroEvent.prototype.on;
  proto.removeListener = MicroEvent.prototype.removeListener;
  proto.emit = MicroEvent.prototype.emit;
  proto.once = MicroEvent.prototype.once;
  return obj;
};

if (typeof module !== "undefined") module.exports = MicroEvent;

var types, MicroEvent;

if (typeof brequire !== "undefined") {
  types = brequire('ottypes');
  MicroEvent = brequire('./microevent');
} else {
  types = window.ottypes;
}

/*
 * A Doc is a client's view on a sharejs document.
 *
 * Documents should not be created directly. Create them by calling the
 * document getting functions in connection.
 *
 * Documents are event emitters. Use doc.on(eventname, fn) to subscribe.
 *
 * Documents currently get mixed in with their type's API methods. So, you can
 * .insert('foo', 0) into a text document and stuff like that.
 *
 * Events:
 * - before op (op, localSite): Fired before an operation is applied to the
 *   document.
 * - op (op, localSite): Fired right after an operation (or part of an
 *   operation) has been applied to the document. Submitting another op here is
 *   invalid - wait until 'after op' if you want to submit more operations.  -
 *   changed (op)
 * - after op (op, localSite): Fired after an operation has been applied. You
 *   can submit more ops here.
 * - subscribed (error): The document was subscribed
 * - unsubscribed (error): The document was unsubscribed
 * - created: The document was created. That means its type was set and it has
 *   some initial data.
 * - error
 */
var Doc = exports.Doc = function(connection, collection, name) {
  this.connection = connection;

  this.collection = collection;
  this.name = name;

  this.version = this.type = null;

  // **** State in document:
 
  // Action. This is either null, or one of the actions (subscribe,
  // unsubscribe, fetch, submit). Only one action can be happening at a time to
  // prevent me from going mad.
  //
  // Possible values:
  // - subscribe
  // - unsubscribe
  // - fetch
  // - submit
  this.action = null;
 
  // The data the document object stores can be in one of the following three states:
  //   - No data. (null) We honestly don't know whats going on.
  //   - Floating ('floating'): we have a locally created document that hasn't
  //     been created on the server yet)
  //   - Live ('ready') (we have data thats current on the server at some version).
  this.state = null;

  // Our subscription status. Either we're subscribed on the server, or we aren't.
  this.subscribed = false;
  // Either we want to be subscribed (true), we want a new snapshot from the
  // server ('fetch'), or we don't care (false).  This is also used when we
  // disconnect & reconnect to decide what to do.
  this.wantSubscribe = false;
  // This list is used for subscribe and unsubscribe, since we'll only want to
  // do one thing at a time.
  this._subscribeCallbacks = [];


  // *** end state stuff.

  // This doesn't provide any standard API access right now.
  this.provides = {};

  // The editing contexts. These are usually instances of the type API when the
  // document is ready for edits.
  this.editingContexts = [];
  
  // The op that is currently roundtripping to the server, or null.
  //
  // When the connection reconnects, the inflight op is resubmitted.
  //
  // This has the same format as an entry in pendingData, which is:
  // {[create:{...}], [del:true], [op:...], callbacks:[...], src:, seq:}
  this.inflightData = null;

  // All ops that are waiting for the server to acknowledge @inflightData
  // This used to just be a single operation, but creates & deletes can't be composed with
  // regular operations.
  //
  // This is a list of {[create:{...}], [del:true], [op:...], callbacks:[...]}
  this.pendingData = [];
};

MicroEvent.mixin(Doc);

Doc.prototype.destroy = function(callback) {
  var doc = this;
  this.unsubscribe(function() {
    // Don't care if there's an error unsubscribing.

    setTimeout(function() {
      // There'll probably be nothing here seeing as how we just unsubscribed.
      for (var i = 0; i < doc._subscribeCallbacks.length; i++) {
        doc._subscribeCallbacks[i]('Document destroyed');
      }
      doc._subscribeCallbacks.length = 0;
    }, 0);

    doc.connection._destroyDoc(doc);
    doc.removeContexts();
    if (callback) callback();
  });
};


// ****** Manipulating the document snapshot, version and type.

// Set the document's type, and associated properties. Most of the logic in
// this function exists to update the document based on any added & removed API
// methods.
Doc.prototype._setType = function(newType) {
  if (typeof newType === 'string') {
    if (!types[newType]) throw new Error("Missing type " + newType);
    newType = types[newType];
  }
  this.removeContexts();

  // Set the new type
  this.type = newType;

  // If we removed the type from the object, also remove its snapshot.
  if (!newType) {
    this.provides = {};
  } else if (newType.api) {
    // Register the new type's API.
    this.provides = newType.api.provides;
  }
};

// Injest snapshot data. This data must include a version, snapshot and type.
// This is used both to injest data that was exported with a webpage and data
// that was received from the server during a fetch.
Doc.prototype.injestData = function(data) {
  if (this.state) {
    if (typeof console !== "undefined") console.warn('Ignoring attempt to injest data in state', this.state);
    return;
  }
  if (typeof data.v !== 'number') throw new Error('Missing version in injested data');


  this.version = data.v;
  // data.data is what the server will actually send. data.snapshot is the old
  // field name - supported now for backwards compatibility.
  this.snapshot = data.data || data.snapshot;
  this._setType(data.type);

  this.state = 'ready';
  this.emit('ready');
};

// Get and return the current document snapshot.
Doc.prototype.getSnapshot = function() {
  return this.snapshot;
};

// The callback will be called at a time when the document has a snapshot and
// you can start applying operations. This may be immediately.
Doc.prototype.whenReady = function(fn) {
  if (this.state === 'ready') {
    fn();
  } else {
    this.on('ready', fn);
  }
};

Doc.prototype.hasPending = function() {
  return this.inflightData != null || !!this.pendingData.length;
};


// **** Helpers for network messages

// Send a message to the connection from this document.
Doc.prototype._send = function(message) {
  message.c = this.collection;
  message.d = this.name;
  this.connection.send(message);
};

// This function exists so connection can call it directly for bulk subscribes.
// It could just make a temporary object literal, thats pretty slow.
Doc.prototype._handleSubscribe = function(err, data) {
  if (err && err !== 'Already subscribed') {
    if (console) console.error("Could not subscribe: " + err);
    this.emit('error', err);
    // There's probably a reason we couldn't subscribe. Don't retry.
    this._setWantSubscribe(false, null, err)
  } else {
    if (data) this.injestData(data);
    this.subscribed = true;
    this.emit('subscribe');
    this._finishSub(true);
  }

  this._clearAction('subscribe');
};

// This is called by the connection when it receives a message for the document.
Doc.prototype._onMessage = function(msg) {
  if (!(msg.c === this.collection && msg.d === this.name)) {
    // This should never happen - its a sanity check for bugs in the connection code.
    throw new Error("Got message for wrong document.");
  }

  // msg.a = the action.
  switch (msg.a) {
    case 'fetch':
      // We're done fetching. This message has no other information.
      if (msg.data) this.injestData(msg.data);
      this._finishSub('fetch', msg.error);
      if (this.wantSubscribe === 'fetch') this.wantSubscribe = false;
      this._clearAction('fetch');
      break;

    case 'sub':
      // Subscribe reply.
      this._handleSubscribe(msg.error, msg.data);
      break;

    case 'unsub':
      // Unsubscribe reply
      this.subscribed = false;
      this.emit('unsubscribe');

      this._finishSub(false, msg.error);
      this._clearAction('unsubscribe');
      break;

    case 'ack':
      // Acknowledge a locally submitted operation.
      //
      // Usually we do nothing here - all the interesting logic happens when we
      // get sent our op back in the op stream (which happens even if we aren't
      // subscribed). However, if the op doesn't get accepted, we still need to
      // clear some state.
      //
      // If the message error is 'Op already submitted', that means we've
      // resent an op that the server already got. It will also be confirmed
      // normally.
      if (msg.error && msg.error !== 'Op already submitted') {
        // The server has rejected an op from the client for some reason.
        // We'll send the error message to the user and try to roll back the change.
        if (this.inflightData) {
          console.warn('Operation was rejected (' + msg.error + '). Trying to rollback change locally.');
          this._tryRollback(this.inflightData);
        } else {
          // I managed to get into this state once. I'm not sure how it happened.
          // The op was maybe double-acknowledged?
          if (console) console.warn('Second acknowledgement message (error) received', msg, this);
        }
          
        this._clearInflightOp(msg.error);
      }
      break;

    case 'op':
      if (this.inflightData &&
          msg.src === this.inflightData.src &&
          msg.seq === this.inflightData.seq) {
        // This one is mine. Accept it as acknowledged.
        this._opAcknowledged(msg);
        break;
      }

      if (msg.v !== this.version) {
        // This will happen naturally in the following (or similar) cases:
        //
        // Client is not subscribed to document.
        // -> client submits an operation (v=10)
        // -> client subscribes to a query which matches this document. Says we
        //    have v=10 of the doc.
        //
        // <- server acknowledges the operation (v=11). Server acknowledges the
        //    operation because the doc isn't subscribed
        // <- server processes the query, which says the client only has v=10.
        //    Server subscribes at v=10 not v=11, so we get another copy of the
        //    v=10 operation.
        //
        // In this case, we can safely ignore the old (duplicate) operation.
        break;
      }

      if (this.inflightData) xf(this.inflightData, msg);

      for (var i = 0; i < this.pendingData.length; i++) {
        xf(this.pendingData[i], msg);
      }

      this.version++;
      this._otApply(msg, false);
      this._afterOtApply(msg, false);
      //console.log('applied', JSON.stringify(msg));
      break;

    case 'meta':
      if (console) console.warn('Unhandled meta op:', msg);
      break;

    default:
      if (console) console.warn('Unhandled document message:', msg);
      break;
  }
};

// Called whenever (you guessed it!) the connection state changes. This will
// happen when we get disconnected & reconnect.
Doc.prototype._onConnectionStateChanged = function(state, reason) {
  if (state === 'connecting') {
    if (this.inflightData) {
      this._sendOpData();
    } else {
      this.flush();
    }
  } else if (state === 'connected') {
    // We go into the connected state once we have a sessionID. We can't send
    // new ops until then, so we need to flush again.
    this.flush();
  } else if (state === 'disconnected') {
    this.action = null;
    this.subscribed = false;
    if (this.subscribed) this.emit('unsubscribed');
  }
};




// ****** Dealing with actions

Doc.prototype._clearAction = function(expectedAction) {
  if (this.action !== expectedAction) {
    console.warn('Unexpected action ' + this.action + ' expected: ' + expectedAction);
  }
  this.action = null;
  this.flush();
};



// Send the next pending op to the server, if we can.
//
// Only one operation can be in-flight at a time. If an operation is already on
// its way, or we're not currently connected, this method does nothing.
Doc.prototype.flush = function() {
  if (!this.connection.canSend || this.action) return;

  var opData;
  // Pump and dump any no-ops from the front of the pending op list.
  while (this.pendingData.length && isNoOp(opData = this.pendingData[0])) {
    var callbacks = opData.callbacks;
    for (var i = 0; i < callbacks.length; i++) {
      callbacks[i](opData.error);
    }
    this.pendingData.shift();
  }

  // First consider changing state
  if (this.subscribed && !this.wantSubscribe) {
    this.action = 'unsubscribe';
    this._send({a:'unsub'});
  } else if (!this.subscribed && this.wantSubscribe === 'fetch') {
    this.action = 'fetch';
    this._send(this.state === 'ready' ? {a:'fetch', v:this.version} : {a:'fetch'});
  } else if (!this.subscribed && this.wantSubscribe) {
    this.action = 'subscribe';
    // Special send method needed for bulk subscribes on reconnect.
    this.connection.sendSubscribe(this.collection, this.name, this.state === 'ready' ? this.version : null);
  } else if (!this.paused && this.pendingData.length && this.connection.state === 'connected') {
    // Try and send any pending ops. We can't send ops while in 
    this.inflightData = this.pendingData.shift();

    // Delay for debugging.
    //var that = this;
    //setTimeout(function() { that._sendOpData(); }, 1000);

    // This also sets action to 'submit'.
    this._sendOpData();
  }
};


// ****** Subscribing, unsubscribing and fetching

// These functions iare copied into the query class as well, so be careful making
// changes here.

// Value is true, false or 'fetch'.
Doc.prototype._setWantSubscribe = function(value, callback, err) {
  if (this.subscribed === this.wantSubscribe &&
      (this.subscribed === value || value === 'fetch' && this.subscribed)) {
    if (callback) callback(err);
    return;
  }
  
  if (!this.wantSubscribe !== !value) {
    // Call all the current subscribe/unsubscribe callbacks.
    for (var i = 0; i < this._subscribeCallbacks.length; i++) {
      // Should I return an error here? What happened is the user unsubcribed
      // with a callback then resubscribed straight after. Does that mean the
      // unsubscribe failed?
      this._subscribeCallbacks[i](err);
    }
    this._subscribeCallbacks.length = 0;
  }

  // If we want to subscribe, don't weaken it to a fetch.
  if (value !== 'fetch' || this.wantSubscribe !== true)
    this.wantSubscribe = value;

  if (callback) this._subscribeCallbacks.push(callback);
  this.flush();
};

// Open the document. There is no callback and no error handling if you're
// already connected.
//
// Only call this once per document.
Doc.prototype.subscribe = function(callback) {
  this._setWantSubscribe(true, callback);
};

// Unsubscribe. The data will stay around in local memory, but we'll stop
// receiving updates.
Doc.prototype.unsubscribe = function(callback) {
  this._setWantSubscribe(false, callback);
};

// Call to request fresh data from the server.
Doc.prototype.fetch = function(callback) {
  this._setWantSubscribe('fetch', callback);
};

// Called when our subscribe, fetch or unsubscribe messages are acknowledged.
Doc.prototype._finishSub = function(value, error) {
  if (value === this.wantSubscribe) {
    for (var i = 0; i < this._subscribeCallbacks.length; i++) {
      this._subscribeCallbacks[i](error);
    }
    this._subscribeCallbacks.length = 0;
  }
};


// Operations


// ************ Dealing with operations.

// Helper function to set opData to contain a no-op.
var setNoOp = function(opData) {
  delete opData.op;
  delete opData.create;
  delete opData.del;
};

var isNoOp = function(opData) {
  return !opData.op && !opData.create && !opData.del;
}

// Try to compose data2 into data1. Returns truthy if it succeeds, otherwise falsy.
var tryCompose = function(type, data1, data2) {
  if (data1.create && data2.del) {
    setNoOp(data1);
  } else if (data1.create && data2.op) {
    // Compose the data into the create data.
    var data = (data1.create.data === undefined) ? type.create() : data1.create.data;
    data1.create.data = type.apply(data, data2.op);
  } else if (isNoOp(data1)) {
    data1.create = data2.create;
    data1.del = data2.del;
    data1.op = data2.op;
  } else if (data1.op && data2.op && type.compose) {
    data1.op = type.compose(data1.op, data2.op);
  } else {
    return false;
  }
  return true;
};

// Transform server op data by a client op, and vice versa. Ops are edited in place.
var xf = function(client, server) {
  // In this case, we're in for some fun. There are some local operations
  // which are totally invalid - either the client continued editing a
  // document that someone else deleted or a document was created both on the
  // client and on the server. In either case, the local document is way
  // invalid and the client's ops are useless.
  //
  // The client becomes a no-op, and we keep the server op entirely.
  if (server.create || server.del) return setNoOp(client);
  if (client.create) throw new Error('Invalid state. This is a bug.');

  // The client has deleted the document while the server edited it. Kill the
  // server's op.
  if (client.del) return setNoOp(server);

  // We only get here if either the server or client ops are no-op. Carry on,
  // nothing to see here.
  if (!server.op || !client.op) return;

  // They both edited the document. This is the normal case for this function -
  // as in, most of the time we'll end up down here.
  //
  // You should be wondering why I'm using client.type instead of this.type.
  // The reason is, if we get ops at an old version of the document, this.type
  // might be undefined or a totally different type. By pinning the type to the
  // op data, we make sure the right type has its transform function called.
  if (client.type.transformX) {
    var result = client.type.transformX(client.op, server.op);
    client.op = result[0];
    server.op = result[1];
  } else {
    //console.log('xf', JSON.stringify(client.op), JSON.stringify(server.op));
    var _c = client.type.transform(client.op, server.op, 'left');
    var _s = client.type.transform(server.op, client.op, 'right');
    client.op = _c; server.op = _s;
    //console.log('->', JSON.stringify(client.op), JSON.stringify(server.op));
  }
};

// Internal method to actually apply the given op data to our local model.
//
// _afterOtApply() should always be called synchronously afterwards.
Doc.prototype._otApply = function(opData, context) {
  // Lock the document. Nobody is allowed to call submitOp() until _afterOtApply is called.
  this.locked = true;

  if (opData.create) {
    // If the type is currently set, it means we tried creating the document
    // and someone else won. client create x server create = server create.
    var create = opData.create;
    this._setType(create.type);
    this.snapshot = this.type.create(create.data);

    // This is a bit heavyweight, but I want the created event to fire outside of the lock.
    this.once('unlock', function() {
      this.emit('create', context);
    });
  } else if (opData.del) {
    // The type should always exist in this case. del x _ = del
    var oldSnapshot = this.snapshot;
    this._setType(null);
    this.once('unlock', function() {
      this.emit('del', context, oldSnapshot);
    });
  } else if (opData.op) {
    if (!this.type) throw new Error('Document does not exist');

    var type = this.type;

    var op = opData.op;
    
    // The context needs to be told we're about to edit, just in case it needs
    // to store any extra data. (text-tp2 has this constraint.)
    for (var i = 0; i < this.editingContexts.length; i++) {
      var c = this.editingContexts[i];
      if (c != context && c._beforeOp) c._beforeOp(opData.op);
    }

    this.emit('before op', op, context);

    // This exists so clients can pull any necessary data out of the snapshot
    // before it gets changed.  Previously we kept the old snapshot object and
    // passed it to the op event handler. However, apply no longer guarantees
    // the old object is still valid.
    //
    // Because this could be totally unnecessary work, its behind a flag. set
    // doc.incremental to enable.
    if (this.incremental && type.incrementalApply) {
      var _this = this;
      type.incrementalApply(this.snapshot, op, function(o, snapshot) {
        _this.snapshot = snapshot;
        _this.emit('op', o, context);
      });
    } else {
      // This is the most common case, simply applying the operation to the local snapshot.
      this.snapshot = type.apply(this.snapshot, op);
      this.emit('op', op, context);
    }
  }
  // Its possible for none of the above cases to match, in which case the op is
  // a no-op. This will happen when a document has been deleted locally and
  // remote ops edit the document.
};

// This should be called right after _otApply.
Doc.prototype._afterOtApply = function(opData, context) {
  this.locked = false;
  this.emit('unlock');
  if (opData.op) {
    var contexts = this.editingContexts;
    // Notify all the contexts about the op (well, all the contexts except
    // the one which initiated the submit in the first place).
    for (var i = 0; i < contexts.length; i++) {
      var c = contexts[i];
      if (c != context && c._onOp) c._onOp(opData.op);
    }
    for (var i = 0; i < contexts.length; i++) {
      if (contexts.remove) contexts.splice(i--, 1);
    }

    return this.emit('after op', opData.op, context);
  }
};



// ***** Sending operations


// Actually send op data to the server.
Doc.prototype._sendOpData = function() {
  var d = this.inflightData;

  if (this.action) throw new Error('invalid state ' + this.action + ' for sendOpData');
  this.action = 'submit';

  var msg = {a:'op', v:this.version};
  if (d.src) {
    msg.src = d.src;
    msg.seq = d.seq;
  }

  // The server autodetects this.
  //if (this.state === 'unsubscribed') msg.f = true; // fetch intermediate ops

  if (d.op) msg.op = d.op;
  if (d.create) msg.create = d.create;
  if (d.del) msg.del = d.del;

  msg.c = this.collection;
  msg.d = this.name;

  this.connection.sendOp(msg);
   
  // The first time we send an op, its id and sequence number is implicit.
  if (!d.src) {
    d.src = this.connection.id;
    d.seq = this.connection.seq++;
  }
};


// Internal method called to do the actual work for submitOp(), create() and del().
//
// context is optional.
Doc.prototype._submitOpData = function(opData, context, callback) {
  //console.log('submit', JSON.stringify(opData), 'v=', this.version);

  if (typeof context === 'function') {
    callback = context;
    context = true; // The default context is true.
  }
  if (context == null) context = true;

  var error = function(err) {
    if (callback) callback(err);
    else if (console) console.warn('Failed attempt to submitOp:', err);
  };

  if (this.locked) {
    return error("Cannot call submitOp from inside an 'op' event handler");
  }

  // The opData contains either op, create, delete, or none of the above (a no-op).

  if (opData.op) {
    if (!this.type) return error('Document has not been created');

    // Try to normalize the op. This removes trailing skip:0's and things like that.
    if (this.type.normalize) opData.op = this.type.normalize(opData.op);
  }

  if (!this.state) {
    this.state = 'floating';
  }

  // Actually apply the operation locally.
  this._otApply(opData, context);

  // If the type supports composes, try to compose the operation onto the end
  // of the last pending operation.
  var entry = this.pendingData[this.pendingData.length - 1];

  if (this.pendingData.length &&
      (entry = this.pendingData[this.pendingData.length - 1],
       tryCompose(this.type, entry, opData))) {
  } else {
    entry = opData;
    opData.type = this.type;
    opData.callbacks = [];
    this.pendingData.push(opData);
  }

  if (callback) entry.callbacks.push(callback);

  this._afterOtApply(opData, context);

  // The call to flush is in a timeout so if submitOp() is called multiple
  // times in a closure all the ops are combined before being sent to the
  // server. It doesn't matter if flush is called a bunch of times.
  var _this = this;
  setTimeout((function() { _this.flush(); }), 0);
};


// *** Client OT entrypoints.

// Submit an operation to the document. The op must be valid given the current OT type.
Doc.prototype.submitOp = function(op, context, callback) {
  this._submitOpData({op: op}, context, callback);
};

// Create the document, which in ShareJS semantics means to set its type. Every
// object implicitly exists in the database but has no data and no type. Create
// sets the type of the object and can optionally set some initial data on the
// object, depending on the type.
Doc.prototype.create = function(type, data, context, callback) {
  if (typeof data === 'function') {
    // Setting the context to be the callback function in this case so _submitOpData
    // can handle the default value thing.
    context = data;
    data = undefined;
  }
  if (this.type) {
    if (callback) callback('Document already exists');
    return 
  }

  this._submitOpData({create: {type:type, data:data}}, context, callback);
};

// Delete the document. This creates and submits a delete operation to the
// server. Deleting resets the object's type to null and deletes its data. The
// document still exists, and still has the version it used to have before you
// deleted it (well, old version +1).
Doc.prototype.del = function(context, callback) {
  if (!this.type) {
    if (callback) callback('Document does not exist');
    return;
  }

  this._submitOpData({del: true}, context, callback);
};


// Pausing stops the document from sending any operations to the server.
Doc.prototype.pause = function() {
  this.paused = true;
};

Doc.prototype.resume = function() {
  this.paused = false;
  this.flush();
};


// *** Receiving operations


// This will be called when the server rejects our operations for some reason.
// There's not much we can do here if the OT type is noninvertable, but that
// shouldn't happen too much in real life because readonly documents should be
// flagged as such. (I should probably figure out a flag for that).
//
// This does NOT get called if our op fails to reach the server for some reason
// - we optimistically assume it'll make it there eventually.
Doc.prototype._tryRollback = function(opData) {
  // This is probably horribly broken.
  if (opData.create) {
    this._setType(null);

    // I don't think its possible to get here if we aren't in a floating state.
    if (this.state === 'floating')
      this.state = null;
    else
      console.warn('Rollback a create from state ' + this.state);

  } else if (opData.op && opData.type.invert) {
    opData.op = opData.type.invert(opData.op);

    // Transform the undo operation by any pending ops.
    for (var i = 0; i < this.pendingData.length; i++) {
      xf(this.pendingData[i], opData);
    }

    // ... and apply it locally, reverting the changes.
    // 
    // This operation is applied to look like it comes from a remote context.
    // I'm still not 100% sure about this functionality, because its really a
    // local op. Basically, the problem is that if the client's op is rejected
    // by the server, the editor window should update to reflect the undo.
    this._otApply(opData, false);
    this._afterOtApply(opData, false);
  } else if (opData.op || opData.del) {
    // This is where an undo stack would come in handy.
    this._setType(null);
    this.version = null;
    this.state = null;
    this.subscribed = false;
    this.emit('error', "Op apply failed and the operation could not be reverted");

    // Trigger a fetch. In our invalid state, we can't really do anything.
    this.fetch();
    this.flush();
  }
};

Doc.prototype._clearInflightOp = function(error) {
  var callbacks = this.inflightData.callbacks;
  for (var i = 0; i < callbacks.length; i++) {
    callbacks[i](error || this.inflightData.error);
  }

  this.inflightData = null;
  this._clearAction('submit');

  if (!this.pendingData.length) {
    // This isn't a very good name.
    this.emit('nothing pending');
  }
};

// This is called when the server acknowledges an operation from the client.
Doc.prototype._opAcknowledged = function(msg) {
  // Our inflight op has been acknowledged, so we can throw away the inflight data.
  // (We were only holding on to it incase we needed to resend the op.)
  if (!this.state) {
    throw new Error('opAcknowledged called from a null state. This should never happen.');
  } else if (this.state === 'floating') {
    if (!this.inflightData.create) throw new Error('Cannot acknowledge an op.');

    // Our create has been acknowledged. This is the same as injesting some data.
    this.version = msg.v;
    this.state = 'ready';
    var _this = this;
    setTimeout(function() { _this.emit('ready'); }, 0);
  } else {
    // We already have a snapshot. The snapshot should be at the acknowledged
    // version, because the server has sent us all the ops that have happened
    // before acknowledging our op.

    // This should never happen - something is out of order.
    if (msg.v !== this.version)
      throw new Error('Invalid version from server. This can happen when you submit ops in a submitOp callback.');
  }
  
  // The op was committed successfully. Increment the version number
  this.version++;

  this._clearInflightOp();
};


// API Contexts

// This creates and returns an editing context using the current OT type.
Doc.prototype.createContext = function() {
  var type = this.type;
  if (!type) throw new Error('Missing type');

  // I could use the prototype chain to do this instead, but Object.create
  // isn't defined on old browsers. This will be fine.
  var doc = this;
  var context = {
    getSnapshot: function() {
      return doc.snapshot;
    },
    submitOp: function(op, callback) {
      doc.submitOp(op, context, callback);
    },
    destroy: function() {
      if (this.detach) {
        this.detach();
        // Don't double-detach.
        delete this.detach;
      }
      // It will be removed from the actual editingContexts list next time
      // we receive an op on the document (and the list is iterated through).
      //
      // This is potentially dodgy, allowing a memory leak if you create &
      // destroy a whole bunch of contexts without receiving or sending any ops
      // to the document.
      delete this._onOp;
      this.remove = true;
    },

    // This is dangerous, but really really useful for debugging. I hope people
    // don't depend on it.
    _doc: this,
  };

  if (type.api) {
    // Copy everything else from the type's API into the editing context.
    for (var k in type.api) {
      context[k] = type.api[k];
    }
  } else {
    context.provides = {};
  }

  this.editingContexts.push(context);

  return context;
};

Doc.prototype.removeContexts = function() {
  for (var i = 0; i < this.editingContexts.length; i++) {
    this.editingContexts[i].destroy();
  }
  this.editingContexts.length = 0;
};

// A Connection wraps a persistant BC connection to a sharejs server.
//
// This class implements the client side of the protocol defined here:
// https://github.com/josephg/ShareJS/wiki/Wire-Protocol
//
// The equivalent server code is in src/server/session.
//
// This file is a bit of a mess. I'm dreadfully sorry about that. It passes all the tests,
// so I have hope that its *correct* even if its not clean.
//
// To make a connection, use:
//  new sharejs.Connection(socket)
//
// The socket should look like a websocket connection. It should have the following properties:
//  send(msg): Send the given message. msg may be an object - if so, you might need to JSON.stringify it.
//  close(): Disconnect the session
//
//  onmessage = function(msg){}: Event handler which is called whenever a message is received. The message
//     passed in should already be an object. (It may need to be JSON.parsed)
//  onclose
//  onerror
//  onopen
//  onconnecting
//
// The socket should probably automatically reconnect. If so, it should emit the appropriate events as it
// disconnects & reconnects. (onclose(), onconnecting(), onopen()).

var types, Doc;
if (typeof brequire !== 'undefined') {
  types = brequire('ottypes');
  Doc = brequire('./doc').Doc;
  Query = brequire('./query').Query;
} else {
  types = window.ottypes;
  Doc = exports.Doc;
}

var Connection = exports.Connection = function (socket) {
  this.socket = socket;

  // Map of collection -> docName -> doc object for created documents.
  // (created documents MUST BE UNIQUE)
  this.collections = {};

  // Each query is created with an id that the server uses when it sends us
  // info about the query (updates, etc).
  //this.nextQueryId = (Math.random() * 1000) |0;
  this.nextQueryId = 1;

  // Map from query ID -> query object.
  this.queries = {};

  // Connection state.
  // 
  // States:
  // - 'connecting': The connection has been established, but we don't have our client ID yet
  // - 'connected': We have connected and recieved our client ID. Ready for data.
  // - 'disconnected': The connection is closed, but it will reconnect automatically.
  // - 'stopped': The connection is closed, and should not reconnect.
  this.state = (socket.readyState === 0 || socket.readyState === 1) ? 'connecting' : 'disconnected';

  // This is a helper variable the document uses to see whether we're currently
  // in a 'live' state. It is true if the state is 'connecting' or 'connected'.
  this.canSend = this.state === 'connecting';

  // Reset some more state variables.
  this.reset();

  this.debug = false;
  // I'll store the most recent 100 messages so when errors occur we can see what happened.
  this.messageBuffer = [];

  var connection = this;

  var handleMessage = function(msg) {
    // Switch on the message action. Most messages are for documents and are
    // handled in the doc class.
    switch (msg.a) {
      case 'init':
        // Client initialization packet. This bundle of joy contains our client
        // ID.
        if (msg.protocol !== 0) throw new Error('Invalid protocol version');
        if (typeof msg.id != 'string') throw new Error('Invalid client id');

        connection.id = msg.id;
        connection._setState('connected');
        break;

      case 'qfetch':
      case 'qsub':
      case 'q':
      case 'qunsub':
        // Query message. Pass this to the appropriate query object.
        var query = connection.queries[msg.id];
        if (query) query._onMessage(msg);
        break;

      case 'bs':
        // Bulk subscribe response. The responses for each document are contained within.
        var result = msg.s;
        for (var cName in result) {
          for (var docName in result[cName]) {
            var doc = connection.get(cName, docName);
            if (!doc) {
              if (console) console.error('Message for unknown doc. Ignoring.', msg);
              break;
            }

            var msg = result[cName][docName];
            if (typeof msg === 'object') {
              doc._handleSubscribe(msg.error, msg.data);
            } else {
              // The msg will be true if we simply resubscribed.
              doc._handleSubscribe(null, null);
            }
          }
        }
        break;

      default:
        // Document message. Pull out the referenced document and forward the
        // message.
        var collection, docName, doc;
        if (msg.d) {
          collection = connection._lastReceivedCollection = msg.c;
          docName = connection._lastReceivedDoc = msg.d;
        } else {
          collection = msg.c = connection._lastReceivedCollection;
          docName = msg.d = connection._lastReceivedDoc;
        }

        doc = connection.get(collection, docName);
        if (!doc) {
          if (console) console.error('Message for unknown doc. Ignoring.', msg);
          break;
        }
        doc._onMessage(msg);
    }
  };

  // Attach event handlers to the socket.
  socket.onmessage = function(msg) {
    if (connection.debug) console.log('RECV', JSON.stringify(msg));
    connection.messageBuffer.push({t:(new Date()).toTimeString(), recv:JSON.stringify(msg)});
    while (connection.messageBuffer.length > 100) {
      connection.messageBuffer.shift();
    }

    try {
      handleMessage(msg);
    } catch (e) {
      connection.emit('error', e);
      // We could also restart the connection here, although that might result
      // in infinite reconnection bugs.
    }
  }

  socket.onopen = function() {
    connection._setState('connecting');
  };

  socket.onerror = function(e) {
    // This isn't the same as a regular error, because it will happen normally
    // from time to time. Your connection should probably automatically
    // reconnect anyway, but that should be triggered off onclose not onerror.
    // (onclose happens when onerror gets called anyway).
    connection.emit('connection error', e);
  };

  socket.onclose = function(reason) {
    connection._setState('disconnected', reason);
    if (reason === 'Closed' || reason === 'Stopped by server') {
      connection._setState('stopped', reason);
    }
  };
}

/* Why does this function exist? Is it important?
Connection.prototype._error = function(e) {
  this._setState('stopped', e);
  return this.disconnect(e);
};
*/

Connection.prototype.reset = function() {
  this.id = this.lastError =
    this._lastReceivedCollection = this._lastReceivedDoc =
    this._lastSentCollection = this._lastSentDoc = null;

  this.seq = 1;
};

// Set the connection's state. The connection is basically a state machine.
Connection.prototype._setState = function(newState, data) {
  if (this.state === newState) return;

  // I made a state diagram. The only invalid transitions are getting to
  // 'connecting' from anywhere other than 'disconnected' and getting to
  // 'connected' from anywhere other than 'connecting'.
  if ((newState === 'connecting' && (this.state !== 'disconnected' && this.state !== 'stopped'))
      || (newState === 'connected' && this.state !== 'connecting')) {
    throw new Error("Cannot transition directly from " + this.state + " to " + newState);
  }

  this.state = newState;
  this.canSend = newState === 'connecting' || newState === 'connected';

  if (newState === 'disconnected') this.reset();

  this.emit(newState, data);

  // & Emit the event to all documents & queries. It might make sense for
  // documents to just register for this stuff using events, but that couples
  // connections and documents a bit much. Its not a big deal either way.
  this.opQueue = [];
  this.subscribeData = {};
  for (var c in this.collections) {
    var collection = this.collections[c];
    for (var docName in collection) {
      collection[docName]._onConnectionStateChanged(newState, data);
    }
  }


  // Its important that operations are resent in the same order that they were
  // originally sent. If we don't sort, an op with a high sequence number will
  // convince the server not to accept any ops with earlier sequence numbers.
  this.opQueue.sort(function(a, b) { return a.seq - b.seq; });
  for (var i = 0; i < this.opQueue.length; i++) {
    this.send(this.opQueue[i]);
  }

  // Only send bulk subscribe if not empty. Its weird using a for loop for
  // this, but it works pretty well.
  for (var __unused in this.subscribeData) { 
    this.send({a:'bs', s:this.subscribeData});
    break;
  }

  this.opQueue = null;
  this.subscribeData = null;
  
  // No bulk subscribe for queries yet.
  for (var id in this.queries) {
    this.queries[id]._onConnectionStateChanged(newState, data);
  }
};

// So, there's an awful error case where the client sends two requests (which
// fail), then reconnects. The documents could have _onConnectionStateChanged
// called in the wrong order and the operations then get sent with reversed
// sequence numbers. This causes the server to incorrectly reject the second
// sent op. So we need to queue the operations while we're reconnecting and
// resend them in the correct order.
Connection.prototype.sendOp = function(data) {
  if (this.opQueue) {
    this.opQueue.push(data);
  } else {
    this.send(data);
  }
};

// This is called by the document class when the document wants to subscribe.
// We could just send a subscribe message, but during reconnect that causes a
// bajillion messages over browserchannel. During reconnect we'll aggregate,
// similar to sendOp.
Connection.prototype.sendSubscribe = function(collection, name, v) {
  if (this.subscribeData) {
    var data = this.subscribeData;
    if (!data[collection]) data[collection] = {};

    data[collection][name] = v || null;
  } else {
    var msg = {a:'sub', c:collection, d:name};
    if (v != null) msg.v = v;
    this.send(msg);
  }
};

// Send a message to the connection.
Connection.prototype.send = function(msg) {
  if (this.debug) console.log("SEND", JSON.stringify(msg));
  this.messageBuffer.push({t:Date.now(), send:JSON.stringify(msg)});
  while (this.messageBuffer.length > 100) {
    this.messageBuffer.shift();
  }

  if (msg.d) { // The document the message refers to. Not set for queries.
    var collection = msg.c;
    var docName = msg.d;
    if (collection === this._lastSentCollection && docName === this._lastSentDoc) {
      delete msg.c;
      delete msg.d;
    } else {
      this._lastSentCollection = collection;
      this._lastSentDoc = docName;
    }
  }

  this.socket.send(msg);
};

Connection.prototype.disconnect = function() {
  // This will call @socket.onclose(), which in turn will emit the 'disconnected' event.
  this.socket.close();
};


// ***** Document management

Connection.prototype.getExisting = function(collection, name) {
  if (this.collections[collection]) return this.collections[collection][name];
};

Connection.prototype.getOrCreate = function(collection, name, data) {
  console.trace('getOrCreate is deprecated. Use get() instead');
  return this.get(collection, name, data);
};

// Create a document if it doesn't exist. Returns the document synchronously.
Connection.prototype.get = function(collection, name, data) {
  var doc = this.getExisting(collection, name);

  if (!doc) {
    // Create it.
    doc = new Doc(this, collection, name);

    var collectionObject = this.collections[collection] =
      (this.collections[collection] || {});
    collectionObject[name] = doc;
  }

  // Even if the document isn't new, its possible the document was created
  // manually and then tried to be re-created with data (suppose a query
  // returns with data for the document). We should hydrate the document
  // immediately if we can because the query callback will expect the document
  // to have data.
  if (data && data.data !== undefined && !doc.state) {
    doc.injestData(data);
  }

  return doc;
};

// Call doc.destroy()
Connection.prototype._destroyDoc = function(doc) {
  var collectionObject = this.collections[doc.collection];
  if (!collectionObject) return;

  delete collectionObject[doc.name];

  // Delete the collection container if its empty. This could be a source of
  // memory leaks if you slowly make a billion collections, which you probably
  // won't do anyway, but whatever.
  if (!hasKeys(collectionObject))
    delete this.collections[doc.collection];
};
 
function hasKeys(object) {
  for (var key in object) return true;
  return false;
};

// **** Queries.

// Helper for createFetchQuery and createSubscribeQuery, below.
Connection.prototype._createQuery = function(type, collection, q, options, callback) {
  if (type !== 'fetch' && type !== 'sub')
    throw new Error('Invalid query type: ' + type);

  if (!options) options = {};
  var id = this.nextQueryId++;
  var query = new Query(type, this, id, collection, q, options, callback);
  this.queries[id] = query;
  query._execute();
  return query;
};

// Internal function. Use query.destroy() to remove queries.
Connection.prototype._destroyQuery = function(query) {
  delete this.queries[query.id];
};

// The query options object can contain the following fields:
//
// docMode: What to do with documents that are in the result set. Can be
//   null/undefined (default), 'fetch' or 'subscribe'. Fetch mode indicates
//   that the server should send document snapshots to the client for all query
//   results. These will be hydrated into the document objects before the query
//   result callbacks are returned. Subscribe mode gets document snapshots and
//   automatically subscribes the client to all results. Note that the
//   documents *WILL NOT* be automatically unsubscribed when the query is
//   destroyed. (ShareJS doesn't have enough information to do that safely).
//   Beware of memory leaks when using this option.
//
// poll: Forcably enable or disable polling mode. Polling mode will reissue the query
//   every time anything in the collection changes (!!) so, its quite
//   expensive.  It is automatically enabled for paginated and sorted queries.
//   By default queries run with polling mode disabled; which will only check
//   changed documents to test if they now match the specified query.
//   Set to false to disable polling mode, or true to enable it. If you don't
//   specify a poll option, polling mode is enabled or disabled automatically
//   by the query's backend.
//
// backend: Set the backend source for the query. You can attach different
//   query backends to livedb and pick which one the query should hit using
//   this parameter.
//
// results: (experimental) Initial list of resultant documents. This is
//   useful for rehydrating queries when you're using autoFetch / autoSubscribe
//   so the server doesn't have to send over snapshots for documents the client
//   already knows about. This is experimental - the API may change in upcoming
//   versions.

// Create a fetch query. Fetch queries are only issued once, returning the
// results directly into the callback.
//
// The index is specific to the source, but if you're using mongodb it'll be
// the collection to which the query is made.
// The callback should have the signature function(error, results, extraData)
// where results is a list of Doc objects.
Connection.prototype.createFetchQuery = function(index, q, options, callback) {
  return this._createQuery('fetch', index, q, options, callback);
};

// Create a subscribe query. Subscribe queries return with the initial data
// through the callback, then update themselves whenever the query result set
// changes via their own event emitter.
//
// If present, the callback should have the signature function(error, results, extraData)
// where results is a list of Doc objects.
Connection.prototype.createSubscribeQuery = function(index, q, options, callback) {
  return this._createQuery('sub', index, q, options, callback);
};

if (typeof brequire !== 'undefined') {
  MicroEvent = brequire('./microevent');
}

MicroEvent.mixin(Connection);

/* This contains the textarea binding for ShareJS. This binding is really
 * simple, and a bit slow on big documents (Its O(N). However, it brequires no
 * changes to the DOM and no heavy libraries like ace. It works for any kind of
 * text input field.
 *
 * You probably want to use this binding for small fields on forms and such.
 * For code editors or rich text editors or whatever, I recommend something
 * heavier.
 */


/* applyChange creates the edits to convert oldval -> newval.
 *
 * This function should be called every time the text element is changed.
 * Because changes are always localised, the diffing is quite easy. We simply
 * scan in from the start and scan in from the end to isolate the edited range,
 * then delete everything that was removed & add everything that was added.
 * This wouldn't work for complex changes, but this function should be called
 * on keystroke - so the edits will mostly just be single character changes.
 * Sometimes they'll paste text over other text, but even then the diff
 * generated by this algorithm is correct.
 *
 * This algorithm is O(N). I suspect you could speed it up somehow using regular expressions.
 */
var applyChange = function(ctx, oldval, newval) {
  // Strings are immutable and have reference equality. I think this test is O(1), so its worth doing.
  if (oldval === newval) return;

  var commonStart = 0;
  while (oldval.charAt(commonStart) === newval.charAt(commonStart)) {
    commonStart++;
  }

  var commonEnd = 0;
  while (oldval.charAt(oldval.length - 1 - commonEnd) === newval.charAt(newval.length - 1 - commonEnd) &&
      commonEnd + commonStart < oldval.length && commonEnd + commonStart < newval.length) {
    commonEnd++;
  }

  if (oldval.length !== commonStart + commonEnd) {
    ctx.remove(commonStart, oldval.length - commonStart - commonEnd);
  }
  if (newval.length !== commonStart + commonEnd) {
    ctx.insert(commonStart, newval.slice(commonStart, newval.length - commonEnd));
  }
};

// Attach a textarea to a document's editing context.
//
// The context is optional, and will be created from the document if its not
// specified.
window.sharejs.Doc.prototype.attachTextarea = function(elem, ctx) {
  if (!ctx) ctx = this.createContext();

  if (!ctx.provides.text) throw new Error('Cannot attach to non-text document');

  elem.value = ctx.get();

  // The current value of the element's text is stored so we can quickly check
  // if its been changed in the event handlers. This is mostly for browsers on
  // windows, where the content contains \r\n newlines. applyChange() is only
  // called after the \r\n newlines are converted, and that check is quite
  // slow. So we also cache the string before conversion so we can do a quick
  // check incase the conversion isn't needed.
  var prevvalue;

  // Replace the content of the text area with newText, and transform the
  // current cursor by the specified function.
  var replaceText = function(newText, transformCursor) {
    if (transformCursor) {
      var newSelection = [transformCursor(elem.selectionStart), transformCursor(elem.selectionEnd)];
    }

    // Fixate the window's scroll while we set the element's value. Otherwise
    // the browser scrolls to the element.
    var scrollTop = elem.scrollTop;
    elem.value = newText;
    prevvalue = elem.value; // Not done on one line so the browser can do newline conversion.
    if (elem.scrollTop !== scrollTop) elem.scrollTop = scrollTop;

    // Setting the selection moves the cursor. We'll just have to let your
    // cursor drift if the element isn't active, though usually users don't
    // care.
    if (newSelection && window.document.activeElement === elem) {
      elem.selectionStart = newSelection[0];
      elem.selectionEnd = newSelection[1];
    }
  };

  replaceText(ctx.get());


  // *** remote -> local changes

  ctx.onInsert = function(pos, text) {
    var transformCursor = function(cursor) {
      return pos < cursor ? cursor + text.length : cursor;
    };

    // Remove any window-style newline characters. Windows inserts these, and
    // they mess up the generated diff.
    var prev = elem.value.replace(/\r\n/g, '\n');
    replaceText(prev.slice(0, pos) + text + prev.slice(pos), transformCursor);
  };

  ctx.onRemove = function(pos, length) {
    var transformCursor = function(cursor) {
      // If the cursor is inside the deleted region, we only want to move back to the start
      // of the region. Hence the Math.min.
      return pos < cursor ? cursor - Math.min(length, cursor - pos) : cursor;
    };

    var prev = elem.value.replace(/\r\n/g, '\n');
    replaceText(prev.slice(0, pos) + prev.slice(pos + length), transformCursor);
  };


  // *** local -> remote changes

  // This function generates operations from the changed content in the textarea.
  var genOp = function(event) {
    // In a timeout so the browser has time to propogate the event's changes to the DOM.
    setTimeout(function() {
      if (elem.value !== prevvalue) {
        prevvalue = elem.value;
        applyChange(ctx, ctx.get(), elem.value.replace(/\r\n/g, '\n'));
      }
    }, 0);
  };

  var eventNames = ['textInput', 'keydown', 'keyup', 'select', 'cut', 'paste'];
  for (var i = 0; i < eventNames.length; i++) {
    var e = eventNames[i];
    if (elem.addEventListener) {
      elem.addEventListener(e, genOp, false);
    } else {
      elem.attachEvent('on' + e, genOp);
    }
  }

  ctx.detach = function() {
    for (var i = 0; i < eventNames.length; i++) {
      var e = eventNames[i];
      if (elem.removeEventListener) {
        elem.removeEventListener(e, genOp, false);
      } else {
        elem.detachEvent('on' + e, genOp);
      }
    }
  };

  return ctx;
};

var Doc;
if (typeof brequire !== 'undefined') {
  Doc = brequire('./doc').Doc;
}

// Queries are live requests to the database for particular sets of fields.
//
// The server actively tells the client when there's new data that matches
// a set of conditions.
var Query = exports.Query = function(type, connection, id, collection, query, options, callback) {
  // 'fetch' or 'sub'
  this.type = type;

  this.connection = connection;
  this.id = id;
  this.collection = collection;

  // The query itself. For mongo, this should look something like {"data.x":5}
  this.query = query;

  // Resultant document action for the server. Fetch mode will automatically
  // fetch all results. Subscribe mode will automatically subscribe all
  // results. Results are never unsubscribed.
  this.docMode = options.docMode; // undefined, 'fetch' or 'sub'.
  if (this.docMode === 'subscribe') this.docMode = 'sub';

  // Do we repoll the entire query whenever anything changes? (As opposed to
  // just polling the changed item). This needs to be enabled to be able to use
  // ordered queries (sortby:) and paginated queries. Set to undefined, it will
  // be enabled / disabled automatically based on the query's properties.
  this.poll = options.poll;

  // The backend we actually hit. If this isn't defined, it hits the snapshot
  // database. Otherwise this can be used to hit another configured query
  // index.
  this.backend = options.backend || options.source;

  // A list of resulting documents. These are actual documents, complete with
  // data and all the rest. If fetch is false, these documents will not
  // have any data. You should manually call fetch() or subscribe() on them.
  //
  // Calling subscribe() might be a good idea anyway, as you won't be
  // subscribed to the documents by default.
  this.knownDocs = options.knownDocs || [];
  this.results = [];

  // Do we have some initial data?
  this.ready = false;

  this.callback = callback;
};
Query.prototype.action = 'qsub';

// Helper for subscribe & fetch, since they share the same message format.
//
// This function actually issues the query.
Query.prototype._execute = function() {
  if (!this.connection.canSend) return;

  if (this.docMode) {
    var collectionVersions = {};
    // Collect the version of all the documents in the current result set so we
    // don't need to be sent their snapshots again.
    for (var i = 0; i < this.knownDocs.length; i++) {
      var doc = this.knownDocs[i];
      var c = collectionVersions[doc.collection] = collectionVersions[doc.collection] || {};
      c[doc.name] = doc.version;
    }
  }

  var msg = {
    a: 'q' + this.type,
    id: this.id,
    c: this.collection,
    o: {},
    q: this.query,
  };

  if (this.docMode) {
    msg.o.m = this.docMode;
    // This should be omitted if empty, but whatever.
    msg.o.vs = collectionVersions;
  }
  if (this.backend != null) msg.o.b = this.backend;
  if (this.poll !== undefined) msg.o.p = this.poll;

  this.connection.send(msg);
};

// Make a list of documents from the list of server-returned data objects
Query.prototype._dataToDocs = function(data) {
  var results = [];
  var lastType;
  for (var i = 0; i < data.length; i++) {
    var docData = data[i];

    // Types are only put in for the first result in the set and every time the type changes in the list.
    if (docData.type) {
      lastType = docData.type;
    } else {
      docData.type = lastType;
    }

    var doc = this.connection.get(docData.c || this.collection, docData.d, docData);
    // Force the document to know its subscribed if we're in docmode:subscribe.
    if (this.docMode === 'sub') {
      doc.subscribed = true; // Set before setWantSubscribe() so flush doesn't send a subscribe request.
      doc._setWantSubscribe(true); // this will call any subscribe callbacks or whatever.
      doc.emit('subscribe');
      doc._finishSub(true); // this doesn't actually do anything here, but its more correct to have it.
    }
    results.push(doc);
  }
  return results;
};

// Destroy the query object. Any subsequent messages for the query will be
// ignored by the connection. You should unsubscribe from the query before
// destroying it.
Query.prototype.destroy = function() {
  if (this.connection.canSend && this.type === 'sub') {
    this.connection.send({a:'qunsub', id:this.id});
  }

  this.connection._destroyQuery(this);
};

Query.prototype._onConnectionStateChanged = function(state, reason) {
  if (this.connection.state === 'connecting') {
    this._execute();
  }
};

// Internal method called from connection to pass server messages to the query.
Query.prototype._onMessage = function(msg) {
  if ((msg.a === 'qfetch') !== (this.type === 'fetch')) {
    if (console) console.warn('Invalid message sent to query', msg, this);
    return;
  }

  if (msg.error) this.emit('error', msg.error);

  switch (msg.a) {
    case 'qfetch':
      var results = msg.data ? this._dataToDocs(msg.data) : undefined;
      if (this.callback) this.callback(msg.error, results, msg.extra);
      // Once a fetch query gets its data, it is destroyed.
      this.connection._destroyQuery(this);
      break;

    case 'q':
      // Query diff data (inserts and removes)
      if (msg.diff) {
        // We need to go through the list twice. First, we'll injest all the
        // new documents and set them as subscribed.  After that we'll emit
        // events and actually update our list. This avoids race conditions
        // around setting documents to be subscribed & unsubscribing documents
        // in event callbacks.
        for (var i = 0; i < msg.diff.length; i++) {
          var d = msg.diff[i];
          if (d.type === 'insert') d.values = this._dataToDocs(d.values);
        }

        for (var i = 0; i < msg.diff.length; i++) {
          var d = msg.diff[i];
          switch (d.type) {
            case 'insert':
              var newDocs = d.values;
              Array.prototype.splice.apply(this.results, [d.index, 0].concat(newDocs));
              this.emit('insert', newDocs, d.index);
              break;
            case 'remove':
              var howMany = d.howMany || 1;
              var removed = this.results.splice(d.index, howMany);
              this.emit('remove', removed, d.index);
              break;
            case 'move':
              var howMany = d.howMany || 1;
              var docs = this.results.splice(d.from, howMany);
              Array.prototype.splice.apply(this.results, [d.to, 0].concat(docs));
              this.emit('move', docs, d.from, d.to);
              break;
          }
        }
      }

      if (msg.extra) {
        this.emit('extra', msg.extra);
      }
      break;
    case 'qsub':
      // This message replaces the entire result set with the set passed.
      if (!msg.error) {
        var previous = this.results;

        // Then add everything in the new result set.
        this.results = this.knownDocs = this._dataToDocs(msg.data);
        this.extra = msg.extra;

        this.ready = true;
        this.emit('change', this.results, previous);
      }
      if (this.callback) {
        this.callback(msg.error, this.results, this.extra);
        delete this.callback;
      }
      break;
  }
};

// Change the thing we're searching for. This isn't fully supported on the
// backend (it destroys the old query and makes a new one) - but its
// programatically useful and I might add backend support at some point.
Query.prototype.setQuery = function(q) {
  if (this.type !== 'sub') throw new Error('cannot change a fetch query');

  this.query = q;
  if (this.connection.canSend) {
    // There's no 'change' message to send to the server. Just resubscribe.
    this.connection.send({a:'qunsub', id:this.id});
    this._execute();
  }
};

var MicroEvent;
if (typeof brequire !== 'undefined') {
  MicroEvent = brequire('./microevent');
}

MicroEvent.mixin(Query);

})();

},{}],28:[function(require,module,exports){
module.exports = function genid(len, prefix, keyspace) {
  if (len == null) {
    len = 32;
  }
  if (prefix == null) {
    prefix = "";
  }
  if (keyspace == null) {
    keyspace = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  }
  while (len-- > 0) {
    prefix += keyspace.charAt(Math.floor(Math.random() * keyspace.length));
  }
  return prefix;
};
},{}],29:[function(require,module,exports){
/**
 * @license
 * Lo-Dash 2.0.0 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isFunction = require('lodash.isfunction'),
    isObject = require('lodash.isobject'),
    reNative = require('lodash._renative');

/** Used as a safe reference for `undefined` in pre ES5 environments */
var undefined;

/** Used for native method references */
var objectProto = Object.prototype;

/** Native method shortcuts */
var now = reNative.test(now = Date.now) && now || function() { return +new Date; };

/* Native method shortcuts for methods with the same name as other `lodash` methods */
var nativeMax = Math.max;

/**
 * Creates a function that will delay the execution of `func` until after
 * `wait` milliseconds have elapsed since the last time it was invoked.
 * Provide an options object to indicate that `func` should be invoked on
 * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
 * to the debounced function will return the result of the last `func` call.
 *
 * Note: If `leading` and `trailing` options are `true` `func` will be called
 * on the trailing edge of the timeout only if the the debounced function is
 * invoked more than once during the `wait` timeout.
 *
 * @static
 * @memberOf _
 * @category Functions
 * @param {Function} func The function to debounce.
 * @param {number} wait The number of milliseconds to delay.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
 * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
 * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // avoid costly calculations while the window size is in flux
 * var lazyLayout = _.debounce(calculateLayout, 150);
 * jQuery(window).on('resize', lazyLayout);
 *
 * // execute `sendMail` when the click event is fired, debouncing subsequent calls
 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * });
 *
 * // ensure `batchLog` is executed once after 1 second of debounced calls
 * var source = new EventSource('/stream');
 * source.addEventListener('message', _.debounce(batchLog, 250, {
 *   'maxWait': 1000
 * }, false);
 */
function debounce(func, wait, options) {
  var args,
      maxTimeoutId,
      result,
      stamp,
      thisArg,
      timeoutId,
      trailingCall,
      lastCalled = 0,
      maxWait = false,
      trailing = true;

  if (!isFunction(func)) {
    throw new TypeError;
  }
  wait = nativeMax(0, wait) || 0;
  if (options === true) {
    var leading = true;
    trailing = false;
  } else if (isObject(options)) {
    leading = options.leading;
    maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
    trailing = 'trailing' in options ? options.trailing : trailing;
  }
  var delayed = function() {
    var remaining = wait - (now() - stamp);
    if (remaining <= 0) {
      if (maxTimeoutId) {
        clearTimeout(maxTimeoutId);
      }
      var isCalled = trailingCall;
      maxTimeoutId = timeoutId = trailingCall = undefined;
      if (isCalled) {
        lastCalled = now();
        result = func.apply(thisArg, args);
      }
    } else {
      timeoutId = setTimeout(delayed, remaining);
    }
  };

  var maxDelayed = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    maxTimeoutId = timeoutId = trailingCall = undefined;
    if (trailing || (maxWait !== wait)) {
      lastCalled = now();
      result = func.apply(thisArg, args);
    }
  };

  return function() {
    args = arguments;
    stamp = now();
    thisArg = this;
    trailingCall = trailing && (timeoutId || !leading);

    if (maxWait === false) {
      var leadingCall = leading && !timeoutId;
    } else {
      if (!maxTimeoutId && !leading) {
        lastCalled = stamp;
      }
      var remaining = maxWait - (stamp - lastCalled);
      if (remaining <= 0) {
        if (maxTimeoutId) {
          maxTimeoutId = clearTimeout(maxTimeoutId);
        }
        lastCalled = stamp;
        result = func.apply(thisArg, args);
      }
      else if (!maxTimeoutId) {
        maxTimeoutId = setTimeout(maxDelayed, remaining);
      }
    }
    if (!timeoutId && wait !== maxWait) {
      timeoutId = setTimeout(delayed, wait);
    }
    if (leadingCall) {
      result = func.apply(thisArg, args);
    }
    return result;
  };
}

module.exports = debounce;

},{"lodash._renative":30,"lodash.isfunction":31,"lodash.isobject":32}],30:[function(require,module,exports){
/**
 * @license
 * Lo-Dash 2.0.0 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/** Used for native method references */
var objectProto = Object.prototype;

/** Used to detect if a method is native */
var reNative = RegExp('^' +
  String(objectProto.valueOf)
    .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
    .replace(/valueOf|for [^\]]+/g, '.+?') + '$'
);

module.exports = reNative;

},{}],31:[function(require,module,exports){
/**
 * @license
 * Lo-Dash 2.0.0 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/**
 * Checks if `value` is a function.
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 */
function isFunction(value) {
  return typeof value == 'function';
}

module.exports = isFunction;

},{}],32:[function(require,module,exports){
/**
 * @license
 * Lo-Dash 2.0.0 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var objectTypes = require('lodash._objecttypes');

/**
 * Checks if `value` is the language type of Object.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // check if the value is the ECMAScript language type of Object
  // http://es5.github.io/#x8
  // and avoid a V8 bug
  // http://code.google.com/p/v8/issues/detail?id=2291
  return !!(value && objectTypes[typeof value]);
}

module.exports = isObject;

},{"lodash._objecttypes":33}],33:[function(require,module,exports){
/**
 * @license
 * Lo-Dash 2.0.0 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/** Used to determine if values are of the language type Object */
var objectTypes = {
  'boolean': false,
  'function': true,
  'object': true,
  'number': false,
  'string': false,
  'undefined': false
};

module.exports = objectTypes;

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvanMvYXBwcy9lZGl0b3IuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL2RpcmVjdGl2ZXMvYm9yZGVyTGF5b3V0LmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9kaXJlY3RpdmVzL2NvZGVFZGl0b3IuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL2RpcmVjdGl2ZXMvcHJldmlld2VyLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9kaXJlY3RpdmVzL3Rvb2xiYXIuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL3NlcnZpY2VzL2Fubm90YXRpb25zLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9zZXJ2aWNlcy9iYXNlUGx1bmsuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL3NlcnZpY2VzL2NvbGxhYi5jb2ZmZWUiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvanMvc2VydmljZXMvZGlzYWJsZXIuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL3NlcnZpY2VzL2h0bWxGaWxlLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9zZXJ2aWNlcy9sYXlvdXQuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL3NlcnZpY2VzL25vdGlmaWVyLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9zZXJ2aWNlcy9vYXV0aC5jb2ZmZWUiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvanMvc2VydmljZXMvc2Vzc2lvbi5jb2ZmZWUiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvanMvc2VydmljZXMvc2V0dGluZ3MuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL2pzL3NlcnZpY2VzL3R5cGVzLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9zZXJ2aWNlcy91cGRhdGVyLmNvZmZlZSIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy9qcy9zZXJ2aWNlcy91cmwuY29mZmVlIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL3ZlbmRvci9hbmd1bGFyLWdyb3dsL2FuZ3VsYXItZ3Jvd2wuanMiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvdmVuZG9yL2FuZ3VsYXItdWkvdWktYm9vdHN0cmFwLmpzIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL3ZlbmRvci9hbmd1bGFyLXVpL3VpLXJvdXRlci5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy92ZW5kb3IvYW5ndWxhci9hbmd1bGFyLWNvb2tpZXMuanMiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvdmVuZG9yL2FuZ3VsYXIvYW5ndWxhci5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy92ZW5kb3IvZG9taW5hdHJpeC9kb21pbmF0cml4LmpzIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvYXNzZXRzL3ZlbmRvci9vcGVyYXRpdmUuanMiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9hc3NldHMvdmVuZG9yL3NoYXJlL2Jjc29ja2V0LXVuY29tcHJlc3NlZC5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL2Fzc2V0cy92ZW5kb3Ivc2hhcmUvc2hhcmUudW5jb21wcmVzc2VkLmpzIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvbm9kZV9tb2R1bGVzL2dlbmlkL2luZGV4LmpzIiwiL3Zhci9saWIvc3RpY2tzaGlmdC81MjI5Zjc2NjUwMDQ0NmMwMDMwMDAwODAvYXBwLXJvb3QvZGF0YS82MDU2NDMvbm9kZV9tb2R1bGVzL2xvZGFzaC5kZWJvdW5jZS9pbmRleC5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL25vZGVfbW9kdWxlcy9sb2Rhc2guZGVib3VuY2Uvbm9kZV9tb2R1bGVzL2xvZGFzaC5fcmVuYXRpdmUvaW5kZXguanMiLCIvdmFyL2xpYi9zdGlja3NoaWZ0LzUyMjlmNzY2NTAwNDQ2YzAwMzAwMDA4MC9hcHAtcm9vdC9kYXRhLzYwNTY0My9ub2RlX21vZHVsZXMvbG9kYXNoLmRlYm91bmNlL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNmdW5jdGlvbi9pbmRleC5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL25vZGVfbW9kdWxlcy9sb2Rhc2guZGVib3VuY2Uvbm9kZV9tb2R1bGVzL2xvZGFzaC5pc29iamVjdC9pbmRleC5qcyIsIi92YXIvbGliL3N0aWNrc2hpZnQvNTIyOWY3NjY1MDA0NDZjMDAzMDAwMDgwL2FwcC1yb290L2RhdGEvNjA1NjQzL25vZGVfbW9kdWxlcy9sb2Rhc2guZGVib3VuY2Uvbm9kZV9tb2R1bGVzL2xvZGFzaC5pc29iamVjdC9ub2RlX21vZHVsZXMvbG9kYXNoLl9vYmplY3R0eXBlcy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsS0FBQSx1QkFBQTs7Q0FBQSxDQUNBLEtBQUEsK0JBQUE7O0NBREEsQ0FFQSxLQUFBLCtCQUFBOztDQUZBLENBR0EsS0FBQSw0QkFBQTs7Q0FIQSxDQU1BLEtBQUEscUJBQUE7O0NBTkEsQ0FPQSxLQUFBLHNCQUFBOztDQVBBLENBUUEsS0FBQSxzQkFBQTs7Q0FSQSxDQVNBLEtBQUEsdUJBQUE7O0NBVEEsQ0FVQSxLQUFBLG9CQUFBOztDQVZBLENBV0EsS0FBQSxxQkFBQTs7Q0FYQSxDQVlBLEtBQUEsb0JBQUE7O0NBWkEsQ0FjQSxLQUFBLDRCQUFBOztDQWRBLENBZUEsS0FBQSwwQkFBQTs7Q0FmQSxDQWdCQSxLQUFBLHlCQUFBOztDQWhCQSxDQWlCQSxLQUFBLHVCQUFBOztDQWpCQSxDQW9CQSxDQUFTLEdBQVQsQ0FBZ0IsSUFBOEIsR0FBQSxHQUFBLEdBQXJDLElBQXFDLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTs7Q0FwQjlDLENBdUNBLElBQU07RUFBMkIsQ0FBMkMsRUFBN0QsSUFBOEQsS0FBRCxFQUE5RCxDQUE4RCxDQUFBLENBQTlELENBQUE7Q0FDWixHQUFBLEVBQUEsR0FBQSxRQUFpQjtDQUFqQixDQUVpQyxFQUFqQyxFQUFBLENBQUEsQ0FBQSxVQUFrQjtDQUVDLE9BQW5CLENBQUEsSUFBQSxLQUFrQjtDQUxOLElBQThEO0NBdkM1RSxHQXVDQTs7Q0F2Q0EsQ0ErQ0EsSUFBTTtFQUEyQixDQUFzQixFQUF4QyxJQUF5QyxLQUFELEVBQXpDLEVBQXlDLEVBQXpDO0NBRVosQ0FDRSxHQURGLENBQUEsRUFBQSxNQUFjO0NBQ1osQ0FBSyxDQUFMLElBQUEsQ0FBQTtDQUFBLENBQ1UsRUFEVixJQUNBO0NBREEsQ0FFVSxNQUFWLHNCQUZBO0NBREYsT0FBQTtDQUFBLENBUUUsR0FERixDQUFBLFFBQWM7Q0FDWixDQUFLLENBQUwsS0FBQTtDQUFBLENBRUUsR0FERixHQUFBO0NBQ0UsQ0FDRSxJQURGLElBQUE7Q0FDRSxDQUFZLFFBQVosRUFBQTtFQUF1QixDQUFvQixHQUFBLEVBQS9CLENBQWdDLE1BQS9CO0NBQ0osQ0FBUCxJQUFNLE1BQU4sV0FBQTtDQURVLGNBQStCO2NBQTNDO1lBREY7VUFGRjtDQVJGLE9BT0E7Q0FQQSxDQWdCRSxHQURGLENBQUEsTUFBQSxFQUFjO0NBQ1osQ0FBSyxDQUFMLEdBQUEsRUFBQTtDQUFBLENBRUUsR0FERixHQUFBO0NBQ0UsQ0FDRSxJQURGLElBQUE7Q0FDRSxDQUFhLFNBQWIsQ0FBQSxXQUFBO0NBQUEsQ0FDWSxRQUFaLEVBQUE7RUFBdUIsQ0FBcUUsR0FBQSxDQUFBLENBQWhGLENBQUEsQ0FBQSxDQUFBLElBQUM7Q0FDWCxLQUFBLGNBQUE7Q0FBQSxFQUFrQyxFQUFsQyxDQUFNLENBQVEsRUFBVSxPQUF4QjtDQUFBLEVBRVMsR0FBVCxDQUFnQixLQUFQLElBQVQ7Q0FFUyxDQUFrQixDQUErQixDQUEvQixFQUFBLENBQTNCLENBQVEsQ0FBbUIsY0FBM0I7Q0FDRSxFQUFBLG1CQUFBO0NBQUEsR0FBQSxDQUFBLENBQU0sWUFBTjtDQUFBLEVBQzRCLENBQUEsRUFBdEIsTUFBNEIsRUFBbEMsSUFBQTtDQUVTLE1BQVQsQ0FBUSxLQUFSLFlBQUE7Q0FKeUIsZ0JBQStCO0NBTGhELGNBQWdGO2NBRDVGO1lBREY7VUFGRjtDQWhCRixPQWVBO0NBZkEsQ0FrQ0UsR0FERixDQUFBLFFBQWMsQ0FBZDtDQUNFLENBQUssQ0FBTCxLQUFBLHNCQUFBO0NBQUEsQ0FFRSxHQURGLEdBQUE7Q0FDRSxDQUNFLElBREYsSUFBQTtDQUNFLENBQWEsU0FBYixDQUFBLFdBQUE7Q0FBQSxDQUNZLFFBQVosRUFBQTtFQUE2QixDQUFzRyxDQUF2SCxDQUF1SCxDQUFBLENBQXZILENBQUEsQ0FBQSxDQUFBLEVBQXVILEVBQXZILENBQUM7Q0FDWCxFQUFrQyxDQUFsQyxFQUFNLENBQVEsRUFBVSxPQUF4QjtDQUVTLENBQWtCLENBQTJDLENBQTNDLEVBQU0sQ0FBakMsQ0FBUSxDQUErRCxHQUFqQixXQUF0RDtDQUNXLE1BQVQsQ0FBUSxhQUFSLElBQUE7Q0FEeUIsQ0FFekIsQ0FBQSxNQUFBLFFBRm9FO0NBRzNELElBQVQsR0FBUSxpQkFBUixJQUFBO0NBSHlCLGdCQUV6QjtDQUxRLGNBQXVIO2NBRG5JO1lBREY7VUFGRjtDQWxDRixPQWlDQTtDQWdCZSxDQUNiLEdBREYsUUFBQSxDQUFjO0NBQ1osQ0FBSyxDQUFMLEtBQUEsNEJBQUE7Q0FBQSxDQUVFLEdBREYsR0FBQTtDQUNFLENBQ0UsSUFERixJQUFBO0NBQ0UsQ0FBYSxTQUFiLENBQUEsV0FBQTtDQUFBLENBQ1ksUUFBWixFQUFBO0VBQTZCLENBQXVHLENBQXhILENBQXdILENBQUEsQ0FBeEgsQ0FBQSxDQUFBLENBQUEsRUFBd0gsRUFBeEgsQ0FBQztDQUNYLG1CQUFBLEdBQUE7Q0FBQSxFQUFrQyxDQUFsQyxFQUFNLENBQVEsRUFBVSxPQUF4QjtDQUFBLEVBRVMsR0FBVCxDQUFnQixJQUFQLENBQUEsSUFBVDtDQUZBLENBSTJCLENBQVUsRUFBSyxDQUFRLENBQWxELENBQVEsSUFBb0YsSUFBNUYsU0FBcUMsTUFBYTtDQUpsRCxFQU1TLENBQUEsRUFBVCxDQUFnQixDQUFNLENBQUMsT0FBdkI7Q0FDRSxxQkFBQSx1QkFBQTtDQUFBLEVBQUEsQ0FBRyxFQUFBLEVBQVEsVUFBWDtDQUF5QyxDQUFTLElBQUYsVUFBQSxXQUFBO29CQUFoRDtDQUFBLEVBRU8sQ0FBUCxJQUFlLFVBQWY7Q0FGQSxFQUlFLENBREYsY0FBQTtDQUNFLENBQVcsRUFBWCxLQUFBLFdBQUE7Q0FBQSxDQUNPLEdBQVAsZUFBQTtDQUxGLG1CQUFBO0NBT0EsRUFBYyxDQUFYLENBQXNCLEdBQXRCLE1BQXNCLElBQXpCO0NBQ0U7Q0FDRSxDQUFxQixFQUFyQixFQUFBLENBQU8sQ0FBYyxjQUFyQjtNQURGLGdCQUFBO0NBR0UsS0FBQSxnQkFESTtDQUNKLEdBQUEsSUFBUSxjQUFSLGlCQUFBO3NCQUpKO29CQVBBO0NBQUEsRUFhbUIsQ0FBZixFQUFtQyxLQUF2QyxDQUE2RSxNQUE3RSxRQUF3QztDQUV4QztDQUFBLGVBQUEsT0FBQTsyQ0FBQTtDQUNFLEdBQU8sQ0FBWSxHQUFaLE1BQVAsTUFBQTtDQUNFLEdBQUksQ0FBTSxpQkFBVjtDQUNFLENBQVUsTUFBVixnQkFBQTtDQUFBLENBQ1MsRUFBSSxHQUFiLGlCQUFBO0NBRkYsdUJBQUE7c0JBRko7Q0FBQSxrQkFmQTtDQXFCUSxHQUFSLEVBQUEsQ0FBTyxrQkFBUDtDQXRCTyxDQXVCUCxDQUFBLEVBQUEsSUFBQyxRQXZCbUI7Q0F3QnBCLENBQWtDLENBQWxDLEVBQUEsRUFBTyxXQUFQLEVBQUE7Q0FFRyxDQUFELElBQUYsZUFBQSxJQUFBO0NBMUJPLGdCQXVCUDtDQUtLLEVBQUssQ0FBWixFQUFNLEdBQU8sY0FBYjtDQUNFLEVBQUEsbUJBQUE7Q0FBQSxFQUFrQyxDQUFsQyxFQUFNLENBQVEsRUFBVSxTQUF4QjtDQUFBLEdBQ0EsQ0FBQSxDQUFNLFlBQU47Q0FEQSxFQUU0QixDQUFBLEVBQXRCLE1BQTRCLEVBQWxDLElBQUE7Q0FDUyxFQUF3QixHQUFqQyxDQUFBLENBQVEsSUFBcUMsSUFBM0IsU0FBbEI7Q0FKRixDQUtFLENBQUEsTUFBQyxRQUxTO0NBTVYsQ0FBQSxJQUFNLFFBQU4sSUFBQTtDQUNTLElBQVQsR0FBUSxDQUFSLGdCQUFBO0NBUEYsZ0JBS0U7Q0F4Q1EsY0FBd0g7Y0FEcEk7WUFERjtVQUZGO0NBcERtRCxPQW1EckQ7Q0FuRFksSUFBeUM7Q0EvQ3ZELEdBK0NBOztDQS9DQSxDQXFKQSxJQUFNLElBQU4sU0FBQTtFQUFrRCxDQUFXLEVBQXJCLENBQXFCLENBQUEsQ0FBdEIsQ0FBQTtDQUNyQyxLQUFBLElBQUE7Q0FBQSxFQUFpQixHQUFqQixDQUFBLEtBQTBCLE9BQUE7Q0FBMUIsRUFFaUIsR0FBakIsQ0FBQSxFQUFpQjtDQUNmLE9BQUEsSUFBQTtDQUFBLEVBQWMsQ0FBWCxFQUFXLEVBQWQsR0FBYztDQUNaLEtBQU0sRUFBTixFQUFBO0NBQ08sS0FBRCxFQUFOLEtBQUEsSUFBQTtVQUhhO0NBRmpCLE1BRWlCO0NBRmpCLEVBT29CLEdBQXBCLEdBQXFCLENBQXJCLEVBQW9CO0NBQ2xCLE9BQUEsSUFBQTtDQUFBLENBQW1FLENBQXBCLENBQTVDLEVBQU0sQ0FBTixDQUFILEdBQStDLENBQTVDO0NBQ00sQ0FBeUIsSUFBMUIsRUFBTixFQUFBLEVBQUEsS0FBQTtVQUZnQjtDQVBwQixNQU9vQjtDQVBwQixFQVdvQixHQUFwQixFQUFvQixDQUFDLENBQXJCO0NBQ0UsRUFBZ0YsQ0FBN0UsRUFBTSxDQUFOLENBQUgsZ0NBQXlDO0NBQ2hDLEtBQUQsRUFBTixFQUFBLE9BQUE7VUFGZ0I7Q0FYcEIsTUFXb0I7Q0FJYixFQUFTLEdBQVYsRUFBVSxDQUFDLElBQWpCO0NBQ1MsS0FBRCxFQUFOLEtBQUEsRUFBQTtDQWpCeUQsTUFnQjNDO0NBaEJxQixJQUFzQjtDQXJKN0QsR0FxSkE7O0NBckpBLENBMEtBLElBQU0sSUFBTixRQUFBO0VBQWlELENBQVUsRUFBcEIsQ0FBb0IsRUFBckIsQ0FBc0I7Q0FDMUQsRUFBZ0IsR0FBaEI7Q0FDTyxFQUFvQixHQUFyQixHQUFxQixJQUEzQixJQUFBO0FBQzRCLENBQW5CLEVBQWtCLEdBQW5CLFNBQU47Q0FIdUQsTUFFOUI7Q0FGUyxJQUFxQjtDQTFLM0QsR0EwS0E7Q0ExS0E7Ozs7O0FDQUE7Q0FBQSxLQUFBLGtCQUFBO0tBQUEsYUFBQTs7Q0FBQSxDQUFBLENBQVMsR0FBVCxDQUFnQixVQUFQOztDQUFULENBR0EsQ0FBVyxFQUFBLEdBQVgsQ0FBWTtDQUNWLE9BQUEsQ0FBQTtDQUFBLEVBQVksQ0FBWixDQUFBLElBQUE7R0FDQSxNQUFBLEVBQUE7Q0FDRSxHQUFVLEVBQVYsR0FBQTtDQUFBLGFBQUE7UUFBQTtDQUFBLEVBRVksQ0FGWixFQUVBLEdBQUE7Q0FGQSxFQUdXLEdBQVgsR0FBVyxDQUFYO0NBQVcsRUFDRyxNQUFaLE1BQUE7Q0FERixDQUVFLEdBRkYsRUFBVztDQUlSLENBQUQsRUFBRixLQUFXLEVBQUgsRUFBUjtDQVZPLElBRVQ7Q0FMRixFQUdXOztDQUhYLENBZU07Q0FDUyxDQUFjLENBQWQsQ0FBQSxDQUFBLENBQUEsVUFBRTtDQUNiLEVBRGEsQ0FBQSxFQUFEO0NBQ1osRUFEeUIsQ0FBQSxFQUFEO0NBQ3hCLEVBQUEsQ0FBQyxFQUFEO0NBQUEsRUFDUyxDQUFSLENBQUQsQ0FBQTtDQURBLEVBRVUsQ0FBVCxFQUFEO0NBRkEsRUFHUSxDQUFQLEVBQUQ7Q0FKRixJQUFhOztDQUFiLENBTTZCLENBQWQsR0FBQSxHQUFDLEVBQUQsRUFBZjtDQUNFLFNBQUEsc0JBQUE7O0dBRG9DLEtBQVQ7UUFDM0I7Q0FBQSxFQUFRLENBQUMsQ0FBVCxDQUFBLENBQVEsSUFBQTtDQUFSLEVBQ1ksQ0FBQyxFQUFiLEdBQUEsRUFBWSxLQUFBO0NBRVosR0FBRyxFQUFILENBQVUsQ0FBUDtDQUNELEdBQUcsRUFBQSxFQUFIO0NBQW9CLEdBQVcsQ0FBSixDQUFBLFdBQUE7VUFBM0I7Q0FDQSxHQUFHLEVBQUEsRUFBSDtDQUFvQixFQUEyQixDQUFoQixDQUFKLENBQVcsV0FBWDtVQUQzQjtDQUdBLGNBQU87UUFQVDtDQUFBLENBVWlDLENBQXhCLEdBQVQsQ0FBUztDQUdULEVBQVksQ0FBVCxDQUFDLENBQUo7Q0FBK0MsQ0FBbUMsQ0FBaUIsQ0FBNUMsQ0FBZ0MsTUFBakMsRUFBQSxFQUFBO1FBYnREO0NBY0EsRUFBWSxDQUFULENBQUMsQ0FBSjtDQUErQyxDQUFtQyxDQUFpQixDQUE1QyxDQUFnQyxNQUFqQyxFQUFBLEVBQUE7UUFkdEQ7Q0FnQkEsRUFBYSxDQUFWLENBQVUsQ0FBYixDQUFHLElBQVU7Q0FBOEIsQ0FBNEIsS0FBSixDQUFqQixPQUFBO1FBaEJsRDtDQWlCQSxFQUFhLENBQVYsQ0FBVSxDQUFiLENBQUcsYUFBVTtDQUF1QyxFQUE4QixDQUFuQixDQUFKLEVBQTBDLEVBQS9CLENBQVksS0FBdkI7UUFqQjNEO0NBa0JBLEVBQWEsQ0FBVixDQUFVLENBQWIsQ0FBRyxhQUFVO0NBQXVDLEVBQTBCLENBQWYsQ0FBSixFQUFzQyxHQUFuQixLQUFuQjtRQWxCM0Q7Q0FvQkEsRUFBb0MsQ0FBMUIsQ0FBQSxDQUFBLE1BQUEsUUFBTztDQTNCbkIsSUFNZTs7Q0FOZixDQTZCa0IsQ0FBVCxDQUFBLEVBQUEsQ0FBVCxFQUFVO0NBQ1IsSUFBQSxLQUFBOztHQUR1QixLQUFQO1FBQ2hCO0NBQUEsS0FBQSxRQUFPO0NBQVAsTUFBQSxNQUNPO0NBQ0gsRUFBUSxFQUFSLEtBQUE7Q0FBUSxDQUFPLENBQUwsQ0FBUSxRQUFSO0NBQUYsQ0FBMkIsQ0FBRSxDQUFDLENBQVYsT0FBQTtDQUFwQixDQUFnRCxDQUFFLENBQVIsUUFBQTtDQUExQyxDQUFzRSxDQUFFLENBQUYsRUFBUixNQUFBO0NBQXRFLFdBQUE7Q0FBQSxFQUNBLENBQUMsTUFBRDtDQUZHO0NBRFAsS0FBQSxPQUlPO0NBQ0gsRUFBUSxFQUFSLEtBQUE7Q0FBUSxDQUFPLENBQUwsQ0FBUSxRQUFSO0NBQUYsQ0FBMkIsQ0FBRSxDQUFDLENBQVYsT0FBQTtDQUFwQixDQUFrRCxDQUFFLENBQUMsRUFBWCxNQUFBO0NBQTFDLENBQXlFLENBQUUsQ0FBRixDQUFQLE9BQUE7Q0FBMUUsV0FBQTtDQUFBLEdBQ0MsQ0FBRCxLQUFBO0NBRkc7Q0FKUCxNQUFBLE1BT087Q0FDSCxFQUFRLEVBQVIsS0FBQTtDQUFRLENBQVMsQ0FBRSxDQUFDLENBQVYsT0FBQTtDQUFGLENBQWdDLENBQUUsQ0FBQyxFQUFYLE1BQUE7Q0FBeEIsQ0FBc0QsQ0FBRSxDQUFSLFFBQUE7Q0FBaEQsQ0FBNEUsQ0FBRSxDQUFGLEVBQVIsTUFBQTtDQUE1RSxXQUFBO0NBQUEsR0FDQyxFQUFELElBQUE7Q0FGRztDQVBQLEtBQUEsT0FVTztDQUNILEVBQVEsRUFBUixLQUFBO0NBQVEsQ0FBTyxDQUFMLENBQVEsUUFBUjtDQUFGLENBQTRCLENBQUUsQ0FBQyxFQUFYLE1BQUE7Q0FBcEIsQ0FBa0QsQ0FBRSxDQUFSLFFBQUE7Q0FBNUMsQ0FBdUUsQ0FBRSxDQUFGLENBQVAsT0FBQTtDQUF4RSxXQUFBO0NBQUEsR0FDQyxNQUFEO0NBWkosTUFBQTtDQURPLFlBZVA7Q0E1Q0YsSUE2QlM7O0NBN0JULEVBOENnQixNQUFBLEtBQWhCO0NBQ2EsQ0FBeUIsQ0FBaEIsQ0FBaEIsQ0FBTyxDQUFQLE9BQUE7Q0EvQ04sSUE4Q2dCOztDQTlDaEIsRUFpRFMsSUFBVCxFQUFVLEVBQUQ7Q0FDUCxVQUFBLEdBQU87Q0FBUCxTQUFBLEdBQ087Q0FBaUIsR0FBQSxhQUFEO0NBRHZCLFdBQUEsQ0FFTztDQUFtQixHQUFBLGFBQUQ7Q0FGekIsTUFETztDQWpEVCxJQWlEUzs7Q0FqRFQsRUFzRGtCLE1BQUMsRUFBRCxLQUFsQjtDQUNFLFVBQUEsR0FBTztDQUFQLFNBQUEsR0FDTztDQUFpQixFQUFTLENBQVQsRUFBRCxXQUFBO0NBRHZCLFdBQUEsQ0FFTztDQUFtQixFQUFRLENBQVIsQ0FBRCxZQUFBO0NBRnpCLE1BRGdCO0NBdERsQixJQXNEa0I7O0NBdERsQjs7Q0FoQkY7O0NBQUEsQ0E2RUEsSUFBTSxHQUFOO0dBQTJCLEVBQUEsSUFBQTthQUN6QjtDQUFBLENBQVUsQ0FBVixLQUFBO0NBQUEsQ0FDUyxFQURULEdBQ0EsQ0FBQTtDQURBLENBRVMsSUFBQSxDQUFULENBQUEsT0FBUztDQUZULENBR1ksRUFIWixJQUdBLEVBQUE7Q0FIQSxDQUlPLEVBSlAsQ0FJQSxHQUFBO0NBSkEsQ0FLVSxNQUFWLHlTQUxBO0NBQUEsQ0FZWSxNQUFaLEVBQUE7RUFBdUIsQ0FBc0IsR0FBQSxFQUFqQyxDQUFrQyxDQUFsQyxDQUFDO0NBQ1gsZUFBQSx3QkFBQTtDQUFBLEVBQU8sQ0FBUCxRQUFBO0NBQUEsQ0FFQyxLQUFnQyxDQUFRLElBQXpDO0NBRkEsQ0FJOEIsQ0FBQSxHQUF4QixDQUFOLEVBQStCLENBQUQsRUFBOUI7Q0FDRSxHQUFHLEdBQUgsT0FBQTtDQUNFLEVBQWMsQ0FBVixFQUFKLENBQXFCLENBQXJCLFFBQUE7Q0FBQSxFQUNtQixDQUFmLEVBQWUsS0FBbkIsR0FBbUIsRUFBbkI7Q0FEQSxFQUVjLENBQVYsRUFBSixDQUFxQixTQUFyQjtDQUZBLEVBR0EsQ0FBSSxFQUE0QixDQUFkLEVBSGxCLE9BR0E7Q0FIQSxFQUlBLENBQUksR0FBYyxTQUFsQjtBQUNhLENBTGIsRUFLWSxDQUFSLEVBTEosQ0FLb0IsU0FBcEI7Q0FMQSxDQU0wQyxDQUE3QixDQUFULENBQUosRUFBNkIsQ0FBaEIsUUFBYjtDQU5BLENBT2dELENBQTlCLENBQWQsRUFBdUIsQ0FBTyxDQUFoQixFQUFsQixNQUFBO0NBRUssR0FBRCxFQUFPLGlCQUFYO2dCQVgwQjtDQUE5QixDQVlFLEVBWkYsU0FBOEI7Q0FKOUIsQ0FBQSxDQWtCWSxDQUFYLElBQUQsSUFBQTtDQWxCQSxFQW1CWSxDQUFYLElBQUQsSUFBQTtDQW5CQSxFQXFCZSxDQUFkLENBQWMsSUFBQyxFQUFoQixDQUFBO0NBQTJCLEdBQUEsQ0FBRCxHQUFTLGFBQVQ7Q0FyQjFCLFlBcUJlO0NBckJmLEVBdUJrQixDQUFqQixFQUFpQixHQUFDLEdBQW5CLEVBQUE7O0NBQWlDLEVBQUwsQ0FBSSxZQUFiO2dCQUNqQjtDQUFBLEtBQUEsZ0JBQU87Q0FBUCxNQUFBLGNBQ087Q0FEUCxNQUFBLGNBQ2dCO0NBRGhCLHdCQUM2QjtDQUQ3QixLQUFBLGVBRU87Q0FGUCxLQUFBLGVBRWU7Q0FGZix3QkFFMkI7Q0FGM0IsY0FEZ0I7Q0F2QmxCLFlBdUJrQjtDQXZCbEIsQ0E0QjRCLENBQVQsQ0FBbEIsRUFBa0IsR0FBQyxDQUFELEVBQW5CLEdBQUE7Q0FDRSxJQUFBLGFBQUE7Q0FBQSxFQUNFLEVBREYsU0FBQTtDQUNFLENBQUssQ0FBTCxhQUFBO0NBQUEsQ0FDTyxHQUFQLFdBQUE7Q0FEQSxDQUVRLElBQVIsVUFBQTtDQUZBLENBR00sRUFBTixZQUFBO0NBSkYsZUFBQTtDQU1BLEtBQUEsZ0JBQU87Q0FBUCxNQUFBLGNBQ087Q0FBYSxDQUFlLENBQUEsQ0FBZixDQUFLLENBQUwsSUFBZSxRQUFmO0NBQWI7Q0FEUCxLQUFBLGVBRU87Q0FBWSxDQUFhLENBQUEsQ0FBYixDQUFLLEtBQVEsUUFBYjtDQUFaO0NBRlAsTUFBQSxjQUdPO0NBQWEsQ0FBWSxDQUFaLENBQUEsQ0FBSyxLQUFPLFFBQVo7Q0FBYjtDQUhQLEtBQUEsZUFJTztDQUFZLENBQWMsQ0FBQSxDQUFkLENBQUssS0FBUyxRQUFkO0NBSm5CLGNBTkE7Q0FEaUIsb0JBYWpCO0NBekNGLFlBNEJtQjtDQTVCbkIsQ0EyQzJCLENBQVQsQ0FBakIsRUFBaUIsR0FBQyxDQUFELEVBQWxCLEVBQUE7Q0FFRSxLQUFBLGdCQUFPO0NBQVAsTUFBQSxjQUNPO3lCQUNIO0NBQUEsQ0FBUSxDQUFFLENBQVYsRUFBQSxJQUFVLEdBQUEsT0FBVjtDQUFBLENBQ08sR0FBUCxlQUFBO0NBREEsQ0FFTSxFQUFOLGdCQUFBO0NBRkEsQ0FHUSxJQUFSLGNBQUE7Q0FMSjtDQUFBLE1BQUEsY0FNTzt5QkFDSDtDQUFBLENBQVEsQ0FBRSxDQUFWLEVBQUEsSUFBVSxHQUFBLE9BQVY7Q0FBQSxDQUNPLEdBQVAsZUFBQTtDQURBLENBRU0sRUFBTixnQkFBQTtDQUZBLENBR0ssQ0FBTCxpQkFBQTtDQVZKO0NBQUEsS0FBQSxlQVdPO3lCQUNIO0NBQUEsQ0FBTyxDQUFFLENBQVQsQ0FBQSxDQUFlLElBQU4sRUFBQSxDQUFBLE9BQVQ7Q0FBQSxDQUNLLENBQUwsaUJBQUE7Q0FEQSxDQUVRLElBQVIsY0FBQTtDQUZBLENBR00sRUFBTixnQkFBQTtDQWZKO0NBQUEsS0FBQSxlQWdCTzt5QkFDSDtDQUFBLENBQU8sQ0FBRSxDQUFULENBQUEsQ0FBZSxJQUFOLEVBQUEsQ0FBQSxPQUFUO0NBQUEsQ0FDSyxDQUFMLGlCQUFBO0NBREEsQ0FFUSxJQUFSLGNBQUE7Q0FGQSxDQUdPLEdBQVAsZUFBQTtDQXBCSjtDQUFBLGNBRmdCO0NBM0NsQixZQTJDa0I7Q0EzQ2xCLEVBbUVnQixDQUFmLEtBQWUsR0FBaEI7Q0FDRSxPQUFRLE1BQVI7Q0FDQyxHQUFBLEVBQU0sTUFBUCxTQUFBO0NBckVGLFlBbUVnQjtDQW5FaEIsRUFzRWMsQ0FBYixLQUFhLENBQWQsRUFBQTtDQUNFLE9BQVEsR0FBUixHQUFBO0NBQ0MsR0FBQSxFQUFNLElBQVAsV0FBQTtDQXhFRixZQXNFYztDQXRFZCxFQTBFVSxDQUFULEVBQUQsR0FBVyxHQUFYOztBQUFtQixDQUFELEVBQUEsQ0FBSyxZQUFaO2dCQUNUO0NBQUEsRUFBWSxDQUFSLFVBQUo7QUFFSSxDQUFKLEdBQUcsVUFBSDtDQUFjLEVBQVksQ0FBWCxJQUFELFFBQUE7TUFBZCxVQUFBO0NBQ0ssRUFBUSxDQUFQLElBQUQsUUFBQTtnQkFITDtDQUtBLEdBQUcsVUFBSDtDQUFhLE9BQVEsR0FBUixLQUFBO01BQWIsVUFBQTtDQUNLLE9BQVEsUUFBUjtnQkFOTDtDQVFDLEdBQUEsRUFBTSxlQUFQO0NBbkZGLFlBMEVVO0NBMUVWLENBcUZtQixDQUFULENBQVQsRUFBRCxHQUFXLEdBQVg7Q0FDRSxpQkFBQSw2RkFBQTs7Q0FEK0IsRUFBTCxDQUFJLFlBQWI7Z0JBQ2pCO0NBQUEsRUFBUyxDQUFJLEVBQWIsUUFBQTtDQUVBLEdBQUcsVUFBSDtDQUFhLE9BQVEsR0FBUixLQUFBO01BQWIsVUFBQTtDQUNLLE9BQVEsUUFBUjtnQkFITDtDQUtBLEdBQUcsQ0FBVSxDQUFWLEVBQUgsTUFBQTtDQUNFLEVBQUEsS0FBUSxRQUFSO0NBQ0UsQ0FBSyxDQUFMLENBQUEsRUFBYSxZQUFiO0NBQUEsQ0FDTyxDQUFFLENBRFQsQ0FDQSxDQUFlLFlBQWY7Q0FEQSxDQUVRLENBQUUsQ0FGVixFQUVBLFlBQUE7Q0FGQSxDQUdNLENBQUUsQ0FBUixFQUFjLFlBQWQ7Q0FKRixpQkFBQTtJQUtNLENBQVcsQ0FObkIsQ0FNUSxTQU5SO0NBT0UsRUFBYyxDQUFDLEVBQUQsS0FBZCxHQUFjLEVBQWQ7Q0FBQSxDQUMrQyxDQUFsQyxDQUFzQyxFQUFoQyxJQUFuQixDQUFhLEVBQUEsR0FBYjtBQUVJLENBQUosR0FBRyxZQUFIO0NBQ0UsRUFBTyxDQUFQLE1BQUEsUUFBQTtNQURGLFlBQUE7Q0FHRSxDQUF5QyxDQUFsQyxDQUFQLEVBQWEsS0FBTixFQUFBLEtBQVA7Q0FBQSxDQUVzQixDQUFmLENBQVAsRUFBNEIsS0FBTixFQUFBLEtBQXRCO0NBRkEsQ0FHc0IsQ0FBZixDQUFQLEVBQTRCLEtBQU4sRUFBQSxLQUF0QjtDQUhBLENBSXNCLENBQWYsQ0FBUCxFQUE0QixLQUFOLEtBQUEsRUFBdEI7Q0FKQSxDQUtzQixDQUFmLENBQVAsTUFBc0IsUUFBdEI7a0JBWEY7Q0FBQSxFQWFRLENBQVAsWUFBRDtDQWJBLENBZXdDLENBQXZCLENBQUEsRUFBTSxDQUFOLE9BQWpCLEVBQUE7Q0FmQSxDQWdCd0MsQ0FBekIsQ0FBQyxFQUFELElBQUEsRUFBZixHQUFlLENBQWY7Q0FoQkEsQ0FpQnNDLENBQXhCLENBQUMsRUFBRCxJQUFBLENBQWQsR0FBYyxFQUFkO0NBakJBLENBbUJ1QixDQUF2QixDQUFBLEdBQUEsQ0FBUSxNQUFSLEVBQUE7Q0FuQkEsQ0FxQndDLENBQXhDLENBQUEsR0FBTyxDQUFQLElBQUEsSUFBQTtDQXJCQSxDQXNCeUMsQ0FBekMsQ0FBQSxHQUFPLEVBQVAsR0FBQSxJQUFBO0NBdEJBLENBdUJ1QyxDQUF2QyxDQUFBLEdBQU8sSUFBUCxLQUFBO2dCQW5DRjtDQXFDQSxHQUFHLEVBQUgsRUFBWSxNQUFaO0NBQ0UsRUFBUSxFQUFSLENBQWMsUUFBTixFQUFSO0NBQ0E7Q0FBQSxvQkFBQSx1QkFBQTtxQ0FBQTtDQUFBLEVBQVEsRUFBUixDQUFRLFlBQVI7Q0FBQSxnQkFGRjtnQkFyQ0E7Q0F5Q0EsS0FBQSxlQUFPO0NBL0hULFlBcUZVO0NBNENULEVBQVMsQ0FBVCxFQUFELEdBQVcsVUFBWDtDQUNFLEVBQWMsQ0FBVixFQUFKLFFBQUE7Q0FFQyxHQUFBLEVBQU0sZUFBUDtDQXJJeUMsWUFrSWpDO0NBbElBLFVBQWlDO1VBWjdDO0NBQUEsQ0FvSk0sQ0FBQSxDQUFOLEVBQU0sRUFBTixDQUFPO0NBQ0wsV0FBQSxFQUFBO0NBQUEsQ0FEaUMsUUFBTjtDQUMzQixFQUFjLENBQVYsRUFBSixJQUFBO0NBQUEsR0FDQSxFQUFNLElBQU4sQ0FBQTtDQURBLEVBRzRCLENBQTVCLEVBQU0sSUFBTixHQUFvQjtDQUViLENBQXNCLENBQUEsR0FBdkIsR0FBd0IsRUFBRCxFQUE3QixJQUFBO0NBQ0UsR0FBRyxPQUFILENBQUE7Q0FBd0IsRUFBRCxLQUFILGFBQUEsTUFBQTtNQUFwQixRQUFBO0NBQ1MsRUFBRCxRQUFILFVBQUEsTUFBQTtjQUZzQjtDQUE3QixVQUE2QjtDQTFKL0IsUUFvSk07Q0FySm1CO0NBQUYsSUFBRTtDQTdFM0IsR0E2RUE7O0NBN0VBLENBNk9BLElBQU0sR0FBTixLQUFBO0VBQThDLENBQUEsRUFBWCxFQUFXLEVBQWI7YUFDL0I7Q0FBQSxDQUFVLENBQVYsS0FBQTtDQUFBLENBQ1MsS0FBVCxDQUFBLFFBQVM7Q0FEVCxDQUVNLENBQUEsQ0FBTixFQUFNLEVBQU4sQ0FBTztDQUNMLGFBQUEsMEJBQUE7Q0FBQSxDQURzQyxRQUFOO0FBQ2xCLENBQWQsR0FBQSxNQUFBO0NBQUEsaUJBQUE7WUFBQTtDQUFBLENBRUEsQ0FBSyxLQUFTLEVBQWQ7Q0FGQSxFQUljLE9BQWQsQ0FBQTtDQUpBLEVBS1ksTUFBWixDQUFBO0NBTEEsRUFPZ0IsR0FBVixHQUFVLENBQWhCO0NBQXdCLEdBQUQsVUFBSixLQUFBO0NBQUwsQ0FBOEIsQ0FBQSxNQUFDLEVBQTdCO0NBQ2QsT0FBUSxFQUFSLENBQUEsQ0FBQTtDQUFBLE9BQ1EsR0FBUixDQUFBO0NBQ0EsVUFBQSxTQUFPO0NBQVAsU0FBQSxTQUNPO0NBQXlCLE9BQUQsRUFBUixhQUFBO0NBRHZCLFdBQUEsT0FFTztDQUEyQixPQUFELElBQVIsV0FBQTtDQUZ6QixZQUgwQztDQUE1QyxVQUE0QztDQU96QyxDQUFELENBQStCLE1BQUMsRUFBbEMsS0FBQSxDQUFBO0NBQ0UsZUFBQSx1SEFBQTtDQUFBLEdBQWMsQ0FBWSxDQUFaLE1BQWQ7Q0FBQSxtQkFBQTtjQUFBO0NBQUEsRUFFUyxDQUFJLEVBQWIsTUFBQTtDQUVBLEdBQUcsQ0FBVyxDQUFYLENBQUEsS0FBSDtDQUFxQyxFQUFRLEVBQVIsSUFBQSxLQUFBO0lBQzdCLENBQVcsQ0FEbkIsUUFBQTtDQUN3QyxFQUFRLEVBQVIsSUFBQSxLQUFBO2NBTHhDO0NBT0EsR0FBRyxDQUFXLENBQVgsQ0FBQSxLQUFIO0NBQW9DLEVBQVEsRUFBUixTQUFBO0lBQzVCLENBQVcsQ0FEbkIsQ0FDUSxPQURSO0FBQ2tELENBQVQsRUFBUSxFQUFSLFNBQUE7Y0FSekM7Q0FBQSxFQVVXLEtBQVgsSUFBQTtDQUFXLENBQUksS0FBSixPQUFDO0NBQUQsQ0FBa0IsS0FBbEIsT0FBZTtDQVYxQixhQUFBO0NBQUEsRUFXYSxFQUFFLEtBQWYsRUFBQTtDQVhBLEVBWVksQ0FBSSxLQUFoQixHQUFBO0NBWkEsRUFhWSxDQUFJLEtBQWhCLEdBQUE7Q0FiQSxHQWVJLFFBQUo7Q0FmQSxDQWtCRSxDQUFnQixDQWxCbEIsUUFrQkE7Q0FsQkEsQ0FtQkUsQ0FBaUIsTUFBQSxHQUFuQixDQUFBO0NBQW1CLG9CQUFHO0NBbkJ0QixZQW1CbUI7Q0FuQm5CLENBb0JFLENBQW9CLEVBQWQsQ0FwQlIsSUFvQkEsRUFBQSxDQUFzQjtDQXBCdEIsV0F3QkEsRUFBQTtDQXhCQSxFQXlCcUIsQ0F6QnJCLFFBeUJBLElBQUE7Q0F6QkEsRUEwQkksQ0ExQkosUUEwQkE7Q0ExQkEsRUE0QmMsTUFBQyxFQUFmLENBQUE7Q0FDUyxFQUFPLEdBQVIsR0FBUSxZQUFkO0NBQXNCLEdBQUQsRUFBSixpQkFBQTtDQUFqQixjQUFjO0NBN0JoQixZQTRCYztDQTVCZCxFQStCa0IsTUFBQyxHQUFuQixHQUFBO0NBQ0UsT0FBUSxNQUFSLGFBQUE7Q0FBQSxFQUtjLEdBQVIsR0FBUSxLQUFkO0NBQWlCLFNBQUEsVUFBQTtDQUFLLEVBQW9CLENBQXJCLENBQWlDLENBQXJDLEdBQXlCLENBQWIsYUFBWjtDQUFqQixjQUFjO0NBTGQsYUFTQTtDQVRBLEVBVXFCLENBVnJCLFVBVUEsRUFBQTtDQUNBLEVBQUksa0JBQUo7Q0EzQ0YsWUErQmtCO0NBL0JsQixFQTZDZ0IsTUFBQyxHQUFqQixDQUFBO0NBQ0UsaUJBQUEsa0JBQUE7Q0FBQSxDQUFrRCxDQUFqQyxDQUFJLEdBQUssQ0FBb0IsTUFBOUM7Q0FBQSxFQUNjLENBQUksS0FEbEIsRUFDQSxHQUFBO0NBREEsQ0FHeUMsRUFBekMsR0FBTyxJQUFQLEdBQUEsS0FBQSxLQUFBO0NBSEEsQ0FJdUMsRUFBdkMsR0FBTyxFQUFQLElBQUEsQ0FBQSxLQUFBO0NBSkEsRUFNVSxJQUFWLEVBQVUsS0FBVjtDQUdFLGFBQUEsRUFBQTtDQUFBLEVBQ3FCLENBRHJCLFlBQ0E7Q0FEQSxFQUVJLENBRkosWUFFQTtDQUVLLEdBQUQsTUFBSixhQUFBO0NBYkYsY0FNVTtDQVVWLENBQTJDLENBQXRCLENBQWxCLEtBQUgsRUFBcUIsR0FBckI7Q0FDRSxVQUFBLEtBQUE7Q0FBQSxNQUNBLFNBQUE7Q0FDQSxxQkFBQTtnQkFuQkY7Q0FBQSxhQXNCQSxDQUFBO0NBRUEsTUFBQSxjQUFBO0NBdEVGLFlBNkNnQjtDQTdDaEIsQ0EwRTJCLENBQUEsS0FBQSxJQUEzQixHQUEyQixTQUEzQjtDQTFFQSxDQTRFc0MsRUFBdEMsR0FBTyxJQUFQLENBQUEsSUFBQSxRQUFBO0NBQ1EsQ0FBNEIsRUFBcEMsR0FBTyxFQUFQLElBQUEsR0FBQSxHQUFBO0NBOUVGLFVBQWlDO0NBakJuQyxRQUVNO0NBSHNDO0NBQWIsSUFBYTtDQTdPOUMsR0E2T0E7O0NBN09BLENBa1ZBLElBQU0sR0FBTixLQUFBO0VBQThDLENBQVksRUFBdkIsRUFBdUIsQ0FBQSxDQUF6QixDQUFBO2FBQy9CO0NBQUEsQ0FBVSxDQUFWLEtBQUE7Q0FBQSxDQUNTLEVBRFQsR0FDQSxDQUFBO0NBREEsQ0FFUyxLQUFULENBQUEsTUFBUztDQUZULENBR1ksRUFIWixJQUdBLEVBQUE7Q0FIQSxDQUlVLE1BQVYsNkNBSkE7Q0FBQSxDQVFZLE1BQVosRUFBQTtFQUF1QixDQUFzQixHQUFBLEVBQWpDLENBQWtDLENBQWxDLENBQUM7Q0FDWCxLQUFBLFVBQUE7Q0FBQSxFQUFTLENBQVQsRUFBQSxNQUFBO0NBQUEsQ0FBQSxDQUVZLENBQVgsSUFBRCxJQUFBO0NBRkEsRUFJZSxDQUFkLENBQWMsSUFBQyxFQUFoQixDQUFBO0NBQ0csR0FBQSxDQUFELEdBQVMsYUFBVDtDQUxGLFlBSWU7Q0FKZixFQU9nQixDQUFmLEtBQWUsR0FBaEI7Q0FBNEIsT0FBRCxhQUFSO0NBUG5CLFlBT2dCO0NBUGhCLEVBUWMsQ0FBYixLQUFhLENBQWQsRUFBQTtDQUNFLE9BQVEsR0FBUixHQUFBO0NBQ08sS0FBRCxJQUFOLFdBQUEsQ0FBQTtDQVZGLFlBUWM7Q0FJYixFQUFTLENBQVQsRUFBRCxHQUFXLFVBQVg7Q0FDRSxpQkFBQSxrQkFBQTtDQUFBLEdBQVUsRUFBTSxHQUFoQixLQUFBO0NBQUEscUJBQUE7Z0JBQUE7Q0FBQSxFQUVtQixDQUZuQixFQUVNLEdBQU4sS0FBQTtDQUZBLEVBSVEsRUFBUixHQUFpQixHQUpqQixHQUlBO0NBSkEsRUFLUyxHQUFULEVBQWtCLElBTGxCLEVBS0E7Q0FMQSxDQU82QixDQUFkLENBQUEsQ0FBQSxDQUFBLFFBQWY7Q0FQQSxDQVNtQixDQUFKLENBQWQsSUFBUSxDQUFPLEtBQWhCO0NBQTBCLEVBQVMsRUFBVixrQkFBQTtDQUF6QixjQUFlO0NBRWY7Q0FBQSxrQkFBQSx3QkFBQTtrQ0FBQTtDQUFBLEVBQVMsRUFBSyxDQUFkLFVBQUE7Q0FBQSxjQVhBO0NBQUEsQ0FhMEMsQ0FBQSxDQUFJLEVBQXhDLElBQU4sSUFBQSxRQUFBO0NBRU8sRUFBWSxHQUFiLEdBQU4sWUFBQTtDQTdCeUMsWUFhakM7Q0FiQSxVQUFpQztVQVI3QztDQUFBLENBd0NNLENBQUEsQ0FBTixFQUFNLEVBQU4sQ0FBTztDQUNMLGFBQUE7Q0FBQSxDQURtQyxRQUFSO0NBQzNCLEdBQThCLEVBQTlCLElBQUE7Q0FBQSxLQUFNLEtBQU4sQ0FBQTtZQUFBO0NBQUEsQ0FFbUMsQ0FBbkMsR0FBTSxHQUE2QixDQUFuQyxZQUFBO0FBQ3lCLENBQXZCLEdBQUEsRUFBQSxNQUFBO0NBQU8sS0FBRCxlQUFOO2NBRGlDO0NBQW5DLFVBQW1DO0NBRm5DLENBS21DLENBQUEsSUFBNUIsQ0FBUCxDQUFvQyxDQUFwQyxNQUFBO0NBQ0UsV0FBQSxHQUFBO0NBQ08sRUFBTyxHQUFSLEdBQVEsVUFBZDtDQUF3QixLQUFELGVBQU47Q0FBakIsWUFBYztDQUZoQixVQUFtQztDQUkxQixFQUFBLEtBQVQsQ0FBUyxRQUFUO0FBQW1DLENBQXZCLEdBQUEsRUFBQSxNQUFBO0NBQU8sS0FBRCxlQUFOO2NBQUg7Q0FBVCxVQUFTO0NBbERYLFFBd0NNO0NBekNrRDtDQUF6QixJQUF5QjtDQWxWMUQsR0FrVkE7Q0FsVkE7Ozs7O0FDQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsS0FBQSxxQkFBQTs7Q0FBQSxDQUNBLEtBQUEsbUJBQUE7O0NBREEsQ0FFQSxLQUFBLHNCQUFBOztDQUZBLENBR0EsS0FBQSx5QkFBQTs7Q0FIQSxDQUtBLENBQVMsR0FBVCxDQUFnQixnQkFBd0MsRUFBQSxDQUFBLEdBQUEsQ0FBL0M7O0NBT1Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBWkE7O0NBQUEsQ0EyRUEsSUFBTSxHQUFOLEdBQUE7RUFBK0MsQ0FBMkQsRUFBekUsRUFBRixDQUEyRSxDQUEzRSxDQUFBLENBQTJFLENBQTNFLENBQUE7Q0FDN0IsU0FBQSxrREFBQTtDQUFBLEVBQVksR0FBWixDQUFZLEVBQVosR0FBWTtDQUFaLEVBQ1csR0FBWCxDQUFXLENBQVgsT0FEQSxPQUNXO0NBRFgsRUFFYyxHQUFkLENBQWMsSUFBZCxPQUFjO0NBRmQsRUFHYyxHQUFkLENBQWMsSUFBZCxNQUFjO0NBSGQsRUFJUSxFQUFSLENBQUEsQ0FBUSxJQUFBO0NBSlIsRUFNUyxHQUFULENBQVMsS0FBQTthQUVUO0NBQUEsQ0FBVSxDQUFWLEtBQUE7Q0FBQSxDQUNTLEVBRFQsR0FDQSxDQUFBO0NBREEsQ0FHRSxHQURGLEdBQUE7Q0FDRSxDQUFRLENBQVIsR0FBQSxJQUFBO1VBSEY7Q0FBQSxDQUlVLE1BQVYsNkJBSkE7Q0FBQSxDQVFNLENBQUEsQ0FBTixDQUFNLENBQUEsRUFBTixDQUFPO0NBQ0wsYUFBQSwySEFBQTtDQUFBLENBQTZDLENBQWhDLENBQUEsQ0FBYyxDQUEzQixFQUEyQixDQUFkLENBQWIsRUFBNkM7Q0FBN0MsRUFDUyxHQUFULENBQWdCLEdBQWhCLEVBQVMsQ0FBQTtDQURULEVBRWlCLENBRmpCLE1BRUEsSUFBQTtDQUZBLENBQUEsQ0FHVSxJQUFWLEdBQUE7Q0FIQSxDQUtnRCxDQUE3QyxHQUFPLEdBQXNDLENBQWhELGNBQUE7Q0FDRSxLQUFNLElBQU4sRUFBQTtDQUNFLENBQTJCLEVBQTNCLFVBQUEsV0FBQTtDQUFBLENBQ2dCLEVBRGhCLFVBQ0E7Q0FGRixhQUFBO0NBSXFCLEVBQUosSUFBQSxPQUFqQixLQUFBO0NBTEYsVUFBZ0Q7Q0FMaEQsRUFZZ0IsR0FBVixHQUFVLENBQWhCO0NBQTRCLEtBQU0sRUFBUCxXQUFSO0NBQUwsQ0FBOEIsQ0FBQSxFQUFBLElBQUMsRUFBN0I7Q0FDZCxHQUF5QyxDQUF6QyxPQUFBO0NBQU8sRUFBcUIsRUFBNUIsQ0FBTSxFQUFOLElBQWlCLFNBQWpCO2NBRDBDO0NBQTVDLFVBQTRDO0NBWjVDLEVBZ0JZLEtBQUEsQ0FBWixDQUFBO0NBQThDLEVBQU4sRUFBSyxHQUFMLEdBQWQsRUFBYyxNQUFkO0NBaEIxQixVQWdCWTtDQWhCWixFQWtCaUIsRUFBQSxJQUFDLENBQWxCLElBQUE7Q0FDRSxJQUEwQixDQUFwQixDQUFvQixHQUExQixFQUFBO0NBQ08sSUFBUCxDQUFNLGFBQU47Q0FwQkYsVUFrQmlCO0NBbEJqQixFQXNCYSxHQUFBLEdBQUMsQ0FBZDtDQUNFLEVBQUEsYUFBQTtDQUFBLEVBQUEsR0FBWSxDQUFRLEtBQXBCO0NBQ08sRUFBd0IsR0FBekIsU0FBc0IsSUFBNUIsQ0FBQTtDQXhCRixVQXNCYTtDQXRCYixDQTBCd0IsQ0FBUixDQUFBLENBQUEsSUFBQyxDQUFqQixHQUFBO0NBQ0UsZUFBQSwrQ0FBQTtDQUFBLENBQWlCLENBQUEsQ0FBQSxHQUFZLEdBQTdCLENBQWlCLENBQWpCO0NBQUEsR0FDOEIsTUFBcEIsQ0FBb0IsQ0FBOUIsRUFBQTtDQURBLEdBRUEsTUFBVSxFQUFWO0NBRkEsS0FHcUMsRUFBUCxFQUFwQixFQUFWO0FBQzJCLENBSjNCLEdBSWdELEVBQUwsQ0FBM0MsQ0FBb0MsRUFBMUIsRUFBVixFQUFBO0NBSkEsQ0FLNkQsQ0FBN0QsQ0FBaUQsQ0FBTSxDQUFYLEVBQVAsRUFBM0IsRUFBVixLQUFBO0NBTEEsR0FNaUMsR0FBakMsQ0FBbUIsQ0FBQSxDQUFULEVBQVY7Q0FOQSxFQU9vQixFQVBwQixDQU9BLElBQVUsRUFBVjtDQVBBLEVBVUEsT0FBZ0IsQ0FBVixDQUFOO0NBVkEsRUFZb0IsTUFBQyxHQUFyQixLQUFBO0FBQ1MsQ0FBUCxFQUFjLENBQWQsRUFBb0IsSUFBMEIsSUFBOUM7Q0FDRSxHQUFVLENBQUEsaUJBQUEsZUFBQTtnQkFEWjtBQUdPLENBQVAsR0FBQSxHQUFBLEdBQWlCLElBQWpCO0NBQStCLEVBQWMsR0FBUixHQUFRLE9BQWQ7Q0FDN0IsQ0FBQSxvQkFBQTtDQUFBLENBQUEsQ0FBSyxlQUFMLENBQUs7Q0FFTCxHQUFhLEVBQWIsb0JBQU87Q0FBUCxXQUFBLGFBQ087Q0FBeUIsQ0FBMEIsQ0FBRyxDQUFkLENBQTJDLENBQTNELEVBQU4sRUFBQSxLQUFpQyxjQUFqQztDQUR6QixZQUFBLFlBRU87Q0FBMEIsQ0FBMEIsQ0FBRyxDQUFkLENBQTJDLENBQTNELEVBQU4sRUFBQSxLQUFpQyxjQUFqQztDQUYxQixXQUFBLGFBR087Q0FBeUIsQ0FBMEIsQ0FBRyxDQUFkLENBQTJDLENBQTNELEVBQU4sRUFBQSxLQUFpQyxjQUFqQztDQUh6QixZQUFBLFlBSU87Q0FBMEIsQ0FBMEIsQ0FBRyxDQUFkLENBQTJDLENBQTNELEVBQU4sRUFBQSxLQUFpQyxjQUFqQztDQUoxQixrQkFIMkM7Q0FBZCxnQkFBYztnQkFIN0M7Q0FZQSxHQUFHLENBQWdCLEVBQWhCLENBQWdCLEVBQVUsSUFBN0I7Q0FDVSxDQUF5QyxHQUFqRCxFQUFPLGdCQUFQLFVBQUE7Z0JBZGdCO0NBWnBCLFlBWW9CO0NBWnBCLEVBNEI4QixNQUFDLEdBQS9CLGVBQUE7QUFDUyxDQUFQLEVBQWMsQ0FBZCxFQUFvQixJQUEwQixJQUE5QztDQUNFLEdBQVUsQ0FBQSxpQkFBQSxlQUFBO2dCQURaO0FBR08sQ0FBUCxHQUFBLEdBQUEsR0FBaUIsSUFBakI7Q0FBc0MsRUFBTyxHQUFSLEdBQVEsY0FBZDtDQUM3QixDQUFrQyxFQUFYLEVBQXZCLEVBQUEsRUFBNEMsQ0FBakMsR0FBdUIsSUFBbEM7Q0FFVyxDQUFnQyxFQUEzQyxNQUFVLElBQXVDLEtBQWpELE1BQUE7Q0FINkIsZ0JBQWM7Z0JBSmpCO0NBNUI5QixZQTRCOEI7Q0E1QjlCLEVBcUNpQixFQUFULEVBQUEsR0FyQ1IsRUFxQ0E7Q0FyQ0EsQ0F1Q2tDLEVBQVgsRUFBdkIsRUFBQSxFQUE0QyxDQUFqQyxDQUFYLEVBQWtDO0NBdkNsQyxDQXlDQSxNQUFBLEVBQVUsRUFBVixLQUFBO0NBekNBLENBMENBLFFBQVUsRUFBVixNQUFBLFNBQUE7Q0FFVyxFQUFVLElBQXJCLEVBQXFCLENBQVgsU0FBVjtDQUNFLENBQXlCLENBQXpCLEtBQUEsRUFBVSxJQUFWLEdBQUE7Q0FDVyxDQUF3QixDQUFuQyxPQUFVLFFBQVYsR0FBQSxNQUFBO0NBL0NZLFlBNkNPO0NBdkV2QixVQTBCZ0I7Q0ExQmhCLEVBMkVtQixFQUFBLElBQUMsQ0FBcEIsTUFBQTtDQUNFLGVBQUEsV0FBQTtBQUFPLENBQVAsR0FBQSxDQUFlLEVBQUEsS0FBZjtDQUEyQixzQkFBM0I7Y0FBQTtBQUdBLENBQUEsZ0JBQUEseUNBQUE7cUNBQUE7R0FBZ0QsQ0FBQTtBQUFoRCxDQUFBLENBQUEsSUFBTSxVQUFOO2dCQUFBO0NBQUEsWUFIQTtDQUFBLElBS1EsRUFBQSxLQUFSO0NBTEEsQ0FNc0IsR0FBdEIsQ0FBQSxDQUFPLEtBQVA7Q0FFQSxFQUFVLENBQVAsQ0FBTyxDQUFNLE1BQWhCLEVBQVU7Q0FDSSxHQUFXLEVBQXZCLEVBQUEsR0FBVyxVQUFYO2NBVmU7Q0EzRW5CLFVBMkVtQjtDQTNFbkIsRUF1RlEsRUFBUixHQUFRLENBQUMsQ0FBVDtDQUNFLGVBQUEsb0JBQUE7QUFBQSxDQUFBLEVBQUEsY0FBaUMsNENBQWpDO0NBQUEsRUFBQSxXQUFBLEVBQUE7Q0FBQSxZQUFBO0NBQ0E7Q0FBQSxnQkFBQSx1Q0FBQTtpQ0FBQTtDQUFBLENBQW1CLENBQW5CLENBQUEsU0FBQSxDQUFBO0NBQUEsWUFEQTtDQUdlLEtBQWUsRUFBUCxDQUF2QixLQUFBLEtBQUE7Q0EzRkYsVUF1RlE7Q0F2RlIsQ0E2RjRCLENBQVIsRUFBQSxHQUFBLENBQUMsQ0FBckIsT0FBQTtDQUNFLEtBQUEsVUFBQTtDQUFBLEVBQWdELENBQVQsQ0FBaUIsQ0FBakIsQ0FBaUIsS0FBeEQ7Q0FBTyxLQUFELENBQU4sQ0FBZSxDQUFBLFlBQWY7Y0FEa0I7Q0E3RnBCLFVBNkZvQjtDQTdGcEIsQ0FnR0EsQ0FBbUIsR0FBYixDQUFOLENBQW1CLENBQUMsQ0FBcEI7Q0FBMEMsSUFBTixHQUFBLFdBQUE7Q0FBcEMsVUFBbUI7Q0FoR25CLENBa0dBLENBQTJCLEdBQXJCLEVBQXFCLENBQUMsQ0FBNUIsS0FBQTtDQUNpQixJQUFmLFNBQUEsS0FBQTtDQURGLFVBQTJCO0NBbEczQixDQXFHQSxDQUE2QixHQUF2QixFQUF1QixDQUFDLENBQTlCLE9BQUE7Q0FDYSxLQUFYLElBQUEsU0FBQTtDQURGLFVBQTZCO0NBckc3QixDQXdHQSxDQUF3QixHQUFsQixFQUFrQixDQUFDLENBQXpCLEVBQUE7Q0FDZ0IsQ0FBUyxHQUF2QixHQUErQixLQUEvQixNQUFBO0NBREYsVUFBd0I7Q0F4R3hCLENBMkdBLENBQXdCLEdBQWxCLEVBQWtCLENBQUMsQ0FBekIsRUFBQTtDQUNFLElBQUEsT0FBQSxJQUFBO0NBQ1ksS0FBWixFQUFBLEdBQVcsUUFBWDtDQUZGLFVBQXdCO0NBM0d4QixDQStHQSxDQUF3QixHQUFsQixFQUFrQixDQUFDLENBQXpCLEVBQUE7Q0FDRSxDQUEyQixHQUEzQixHQUFBLElBQUEsS0FBQTtDQUNZLENBQW1CLElBQS9CLEVBQUEsR0FBVyxDQUFYLE9BQUE7Q0FGRixVQUF3QjtDQS9HeEIsQ0FtSEEsQ0FBd0IsR0FBbEIsRUFBa0IsQ0FBQyxDQUF6QixFQUFBO0NBQ0UsU0FBQSxNQUFBO0FBQWlGLENBQWpGLEVBQThGLENBQTlGLENBQXNHLEVBQUEsR0FBckIsRUFBakY7Q0FBQSxHQUFVLENBQUEsZUFBQSxvQ0FBQTtjQUFWO0NBQ1csQ0FBcUQsQ0FBbEQsQ0FBZCxFQUFBLElBQVUsS0FBWSxJQUF0QjtDQUZGLFVBQXdCO0NBbkh4QixDQXVIQSxDQUF3QixHQUFsQixFQUFrQixDQUFDLENBQXpCLEVBQUE7Q0FDRSxTQUFBLE1BQUE7QUFBaUYsQ0FBakYsRUFBOEYsQ0FBOUYsQ0FBc0csRUFBQSxHQUFyQixFQUFqRjtDQUFBLEdBQVUsQ0FBQSxlQUFBLG9DQUFBO2NBQVY7Q0FDVyxDQUFzRSxDQUFuRSxDQUFtSCxDQUF0RyxDQUEzQixJQUFVLEtBQTZCLElBQXZDO0NBRkYsVUFBd0I7Q0F2SHhCLElBMkhBLENBQVksSUFBWixDQUFNO0NBM0hOLEtBNEhxQixJQUFyQixJQUFBLElBQWU7Q0E1SGYsS0E2SGlCLElBQWpCLFNBQVc7Q0E3SFgsQ0FnSW1DLENBQW5DLEdBQU0sR0FBNkIsQ0FBbkMsWUFBQTtDQUE2QyxLQUFELGFBQU47Q0FBdEMsVUFBbUM7Q0FFMUIsRUFBQSxLQUFULENBQVMsUUFBVDtDQUNTLEtBQUQsYUFBTjtDQURGLENBRUUsQ0FGRixRQUFTO0NBM0lYLFFBUU07Q0FqQmtHO0NBQTNFLElBQTJFO0NBM0UxRyxHQTJFQTtDQTNFQTs7Ozs7QUNBQTtDQUFBLEtBQUEsaUJBQUE7O0NBQUEsQ0FBQSxDQUFRLEVBQVIsRUFBUTs7Q0FBUixDQUNBLENBQVcsSUFBQSxDQUFYLFNBQVc7O0NBRFgsQ0FHQSxLQUFBLG9CQUFBOztDQUhBLENBS0EsS0FBQSxxQkFBQTs7Q0FMQSxDQU1BLEtBQUEsbUJBQUE7O0NBTkEsQ0FPQSxLQUFBLGlCQUFBOztDQVBBLENBUUEsS0FBQSxzQkFBQTs7Q0FSQSxDQVNBLEtBQUEseUJBQUE7O0NBVEEsQ0FVQSxLQUFBLG9CQUFBOztDQVZBLENBWUEsQ0FBUyxHQUFULENBQWdCLGNBQXVDLEdBQUEsQ0FBQSxDQUFBLEdBQTlDOztDQVpULENBb0JBLElBQU0sR0FBTixFQUFBO0VBQTRDLENBQXVELEVBQW5FLENBQW1FLENBQUEsQ0FBckUsQ0FBQSxDQUFBLENBQXFFLEVBQXJFO2FBQzVCO0NBQUEsQ0FBVSxDQUFWLEtBQUE7Q0FBQSxDQUNTLEVBRFQsR0FDQSxDQUFBO0NBREEsQ0FHRSxHQURGLEdBQUE7Q0FDRSxDQUFTLENBQVQsSUFBQSxHQUFBO1VBSEY7Q0FBQSxDQUlVLE1BQVYsa2VBSkE7Q0FBQSxDQWVNLENBQUEsQ0FBTixDQUFNLENBQUEsRUFBTixDQUFPO0NBQ0wsYUFBQSwyREFBQTtDQUFBLENBQXNCLENBQUEsRUFBYSxDQUE3QixJQUFOO0NBQUEsRUFFVyxLQUFYLEVBQUEsSUFBVyxRQUFBO0NBRlgsRUFJUyxHQUFULENBQWdCLEdBQWhCLENBQVMsQ0FBQTtDQUpULEVBS1ksQ0FMWixLQUtBLENBQUE7Q0FMQSxFQU9VLElBQVYsQ0FBVSxDQUFDLENBQVg7Q0FDRSxlQUFBLDJCQUFBO0NBQUEsR0FBVSxFQUFNLENBQVEsS0FBeEI7Q0FBQSxtQkFBQTtjQUFBO0NBRUEsRUFBYyxDQUFYLElBQUEsR0FBc0IsQ0FBekI7Q0FDRSxFQUFrQixHQUFaLENBQU4sQ0FBQSxNQUFBLHlDQUFrQjtDQUNsQixtQkFBQTtNQUZGLFFBQUE7Q0FJRSxDQUFBLENBQWlCLEdBQVgsQ0FBTixPQUFBO2NBTkY7Q0FBQSxFQVFPLENBQVAsRUFBTyxFQUFRLElBQWYsQ0FBTztDQVJQLEVBU3FCLENBQWpCLENBQU0sQ0FUVixDQVNBLEtBQUE7Q0FUQSxDQVU0QixFQUF4QixFQUFKLEVBQUEsSUFBQTtDQVZBLENBVzRCLEVBQXhCLEVBQThCLEVBQWxDLEVBQUEsRUFBQTtDQVhBLENBWTRCLEVBQXhCLElBQUosSUFBQSxVQUFBO0NBRUE7Q0FBQSxnQkFBQSwwQkFBQTsrQkFBQTtDQUNFLEVBQVEsRUFBUixFQUFRLENBQVEsS0FBUixDQUFSO0NBQUEsQ0FDMkIsR0FBdEIsQ0FBTCxFQUFBLElBQUEsRUFBQTtDQURBLENBRTRCLENBQU8sQ0FBSSxDQUFsQyxDQUFMLEVBQTRCLElBQTVCLEVBQUE7Q0FGQSxDQUc0QixFQUFJLENBQTNCLEVBQUwsS0FBQSxFQUFBO0NBSEEsR0FLSSxDQUFKLE1BQUEsR0FBQTtDQU5GLFlBZEE7Q0FBQSxHQXNCYSxJQUFMLEdBQVIsQ0FBQTtDQXRCQSxHQXdCSSxFQUFKLE1BQUE7Q0FFUyxHQUFJLElBQUwsR0FBUixRQUFBO0NBbENGLFVBT1U7Q0FQVixFQW9DZSxNQUFBLENBQWYsRUFBQTtDQUF5QixFQUFPLEdBQVIsR0FBUSxVQUFkO0NBQXlCLEtBQU0sQ0FBZCxJQUFRLFVBQVI7Q0FBakIsWUFBYztDQXBDaEMsVUFvQ2U7Q0FwQ2YsQ0FxQytDLENBQXZCLEVBQUEsR0FBQSxDQUF5QyxDQUFqRSxFQUF3QixTQUF4QjtDQXJDQSxFQXVDZ0IsR0FBVixHQUFVLENBQWhCO0NBQTRCLE9BQUQsQ0FBVSxVQUFsQjtDQUFMLENBQWdDLENBQUEsRUFBQSxHQUFBLENBQUMsRUFBL0I7Q0FDZCxHQUFHLENBQUEsR0FBSCxJQUFBO0NBQ21DLENBQXVCLENBQWhDLEVBQUEsR0FBQSxhQUF4QjtjQUYwQztDQUE5QyxVQUE4QztDQXZDOUMsRUEyQ2dCLEdBQVYsR0FBVSxDQUFoQjtDQUEwQixLQUFELENBQVEsWUFBZDtDQUFMLENBQXFDLENBQUEsR0FBQSxHQUFDLEVBQXBDO0NBQ2QsR0FBRyxFQUFILE1BQUE7Q0FDRSxFQUFrQyxLQUExQixLQUFjLENBQXRCO0lBQ00sRUFGUixHQUVRLEtBRlI7Q0FHRSxLQUFjLENBQWQsSUFBUSxHQUFSO2NBSEY7Q0FEaUQsRUFNckMsTUFBWixVQUFBO0NBTkYsVUFBbUQ7Q0EzQ25ELENBbURBLElBQU0sQ0FBTixHQUFBLFdBQUE7Q0FuREEsQ0FxREEsSUFBTSxJQUFOLEVBQUEsU0FBQTtDQXJEQSxDQXNEQSxJQUFNLElBQU4sRUFBQSxTQUFBO0NBdERBLENBdURBLElBQU0sSUFBTixFQUFBLFNBQUE7Q0F2REEsQ0F5REEsSUFBTSxJQUFOLEVBQUEsU0FBQTtDQXpEQSxDQTBEQSxJQUFNLElBQU4sRUFBQSxTQUFBO0NBRU8sQ0FBZ0IsQ0FBdkIsR0FBTSxHQUFpQixDQUF2QixPQUFBO0NBQ0UsQ0FBb0IsQ0FBcEIsR0FBTSxDQUFOLEtBQUEsU0FBQTtDQUFBLENBRXlCLENBQXpCLEdBQU0sTUFBTixTQUFBO0NBRkEsQ0FHeUIsQ0FBekIsR0FBTSxNQUFOLFNBQUE7Q0FIQSxDQUl5QixDQUF6QixHQUFNLE1BQU4sU0FBQTtDQUpBLENBTXlCLENBQXpCLEdBQU0sTUFBTixTQUFBO0NBQ08sQ0FBa0IsQ0FBekIsR0FBTSxNQUFOLE9BQUEsRUFBQTtDQVJGLFVBQXVCO0NBNUV6QixRQWVNO0NBaEIyRjtDQUFyRSxJQUFxRTtDQXBCbkcsR0FvQkE7Q0FwQkE7Ozs7O0FDQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsS0FBQSwrQkFBQTs7Q0FBQSxDQUVBLEtBQUEsc0JBQUE7O0NBRkEsQ0FHQSxLQUFBLG9CQUFBOztDQUhBLENBSUEsS0FBQSxtQkFBQTs7Q0FKQSxDQU9BLENBQVMsR0FBVCxDQUFnQixPQUFxQyxTQUFBLENBQUEsRUFBQSxDQUE1Qzs7Q0FQVCxDQWVBLElBQU0sR0FBTixPQUFBO0VBQStDLENBQTBDLEVBQXBELENBQW9ELENBQXRELENBQUEsQ0FBQSxDQUFBO2FBQ2pDO0NBQUEsQ0FBVSxDQUFWLEtBQUE7Q0FBQSxDQUNTLEVBRFQsR0FDQSxDQUFBO0NBREEsQ0FFTyxFQUZQLENBRUEsR0FBQTtDQUZBLENBR1UsTUFBVixtbUNBSEE7Q0FBQSxDQStCTSxDQUFBLENBQU4sRUFBTSxFQUFOLENBQU87Q0FDTCxLQUFBLFFBQUE7Q0FBQSxFQUFTLEdBQVQsQ0FBZ0IsR0FBaEIsRUFBUyxPQUFBO0NBQVQsRUFFYyxDQUFkLEVBQU0sR0FBUSxDQUFkO0NBQ1csR0FBVCxJQUFRLFdBQVIsVUFBQTtDQUhGLFVBRWM7Q0FHUCxFQUFRLEVBQWYsQ0FBTSxHQUFTLFFBQWY7Q0FBd0IsSUFBRCxPQUFMLE9BQUE7Q0FOZCxVQU1XO0NBckNqQixRQStCTTtDQWhDaUY7Q0FBdEQsSUFBc0Q7Q0FmekYsR0FlQTtDQWZBOzs7OztBQ0FBO0NBQUEsS0FBQTs7Q0FBQSxDQUFBLENBQVMsR0FBVCxDQUFnQixzQkFBUDs7Q0FBVCxDQUVBLENBQThCLEdBQXhCLENBQU4sRUFBOEIsSUFBOUI7V0FDRTtDQUFBLENBQWEsSUFBYixLQUFBO0NBQUEsQ0FFUSxDQUFBLEdBQVIsRUFBUSxDQUFDLEVBQUQ7Q0FDTixJQUFBLE9BQUE7O0dBRCtCLE9BQWQ7VUFDakI7Q0FBUSxDQUFrQixDQUFDLENBQTNCLENBQXdDLEVBQWpDLENBQWlDLEdBQXhDLElBQUE7Q0FIRixNQUVRO0NBRlIsQ0FLUSxDQUFBLEdBQVIsR0FBUyxHQUFEO0NBQ04sQ0FBQSxDQUE2QixDQUE1QixJQUFELEdBQWEsQ0FBQTtBQUNiLENBQUEsR0FBUSxFQUFSLEtBQW9CLENBQUEsR0FBcEI7Q0FQRixNQUtRO0NBTFIsQ0FTUSxDQUFBLEdBQVIsRUFBUSxDQUFDO0FBQ1AsQ0FBQSxHQUFRLEVBQVIsRUFBb0IsR0FBQSxJQUFwQjtDQVZGLE1BU1E7Q0FUUixDQVlVLENBQUEsR0FBVixFQUFBLENBQVU7Q0FDUixXQUFBLHFDQUFBO0NBQUE7Q0FBQSxZQUFBLEdBQUE7d0NBQUE7QUFFRSxDQUFBLGNBQUEsbUNBQUE7MENBQUE7Q0FBOEQsR0FBWCxDQUFtQixLQUFUO0NBQTdELE9BQUEsYUFBTztjQUFQO0NBQUEsVUFGRjtDQUFBLFFBQUE7Q0FJQSxJQUFBLFVBQU87Q0FqQlQsTUFZVTtDQWJrQjtDQUE5QixFQUE4QjtDQUY5Qjs7Ozs7QUNBQTtDQUFBLEtBQUE7O0NBQUEsQ0FBQSxDQUFTLEdBQVQsQ0FBZ0Isb0JBQVA7O0NBQVQsQ0FFQSxHQUFBLENBQU0sS0FBTjtDQUNFLENBQU8sRUFBUCxDQUFBO09BQ0U7Q0FBQSxDQUFVLE1BQVYsSUFBQTtDQUFBLENBQ1MsS0FBVCxDQUFBLHVkQURBO0VBa0JBLE1BbkJLO0NBbUJMLENBQVUsTUFBVjtDQUFBLENBQ1MsS0FBVCxDQUFBLG1IQURBO0VBU0EsTUE1Qks7Q0E0QkwsQ0FBVSxNQUFWLEdBQUE7Q0FBQSxDQUNTLEtBQVQsQ0FBQSxlQURBO1FBNUJLO01BQVA7Q0FIRixHQUVBO0NBRkE7Ozs7O0FDQUE7Q0FBQSxLQUFBLGdCQUFBO0tBQUEsYUFBQTs7Q0FBQSxDQUFBLENBQWlCLElBQUEsT0FBakIsK0JBQWlCOztDQUFqQixDQUNBLEtBQUEsbUNBQUE7O0NBREEsQ0FHQSxLQUFBLHFCQUFBOztDQUhBLENBTUEsQ0FBUyxHQUFULENBQWdCLGlCQUFQLENBQXlDOztDQU5sRCxDQVVBLElBQU0sQ0FBTixDQUFBO0VBQXlDLENBQWlCLENBQWpDLENBQUUsRUFBK0IsRUFBakMsQ0FBaUMsRUFBakM7Q0FDdkIsU0FBQSxXQUFBO0NBQUEsQ0FBOEIsQ0FBOUIsR0FBQSxDQUFPLE9BQVAsRUFBQTtDQUFBLENBRXVDLENBQTlCLENBQUEsRUFBVCxFQUFTLE1BQWM7Q0FBZ0IsQ0FBWSxFQUFaLElBQUMsQ0FBQTtDQUZ4QyxPQUVTO0NBRlQsRUFHWSxDQUFBLENBQVosQ0FBQSxDQUEwQixHQUFkO0NBSFosRUFJUyxHQUFULENBQWdCLEtBQVA7YUFFVDtDQUFBLENBQVMsQ0FBQSxJQUFULENBQUEsQ0FBVTtDQUNSLE9BQUEsTUFBQTtDQUFBLENBQXFCLENBQXJCLEVBQUEsRUFBTyxHQUFQO0NBQUEsQ0FFUSxDQUFSLEVBQU0sS0FBTjtDQUZBLENBRzZCLENBQTdCLEVBQVcsSUFBTCxDQUFOLENBQU07Q0FITixFQUtHLE1BQUgsQ0FBQTtDQUxBLEVBT0csTUFBSCxDQUFBO0NBQ0UsR0FBQSxZQUFBO0NBQUEsV0FEYSwyQ0FDYjtDQUFBLEVBQUEsSUFBTyxFQUF1QixHQUE5QixDQUE4QixHQUFsQjtDQUNELEVBQU8sR0FBbEIsR0FBa0IsQ0FBUixTQUFWO0NBQ0UsV0FBQSxNQUFBO0FBQU8sQ0FBUCxFQUFVLENBQVYsVUFBQTtDQUNFLENBQWlELENBQWpELEdBQXVELENBQWhELElBQTBDLEtBQWpELG1CQUFBO0NBQUEsQ0FDb0IsQ0FBakIsR0FBSCxDQUFBLENBQW9CLENBQWlDLEVBQXRCLEtBQS9CO0NBQ00sRUFBRCxJQUFILENBQUEsaUJBQUE7Q0FERixnQkFBcUQ7QUFFM0MsQ0FKWixFQUllLENBSmYsRUFBQSxFQUFBLFFBQUE7Q0FLRSxDQUFBLENBQ0UsYUFERjtDQUNFLENBQUcsZ0JBQUg7Q0FBQSxDQUNBLENBQU8sS0FEUCxVQUNBO0NBREEsQ0FFQSxJQUFVLEtBQU4sT0FBSjtDQUhGLGlCQUFBO0NBQUEsQ0FLdUQsQ0FBdkQsSUFBTyxTQUFQLHlCQUFBO0NBTEEsQ0FPQSxDQUFHLEtBQUgsQ0FBaUIsT0FBakI7Q0FBd0IsRUFBRCxJQUFILENBQUEsaUJBQUE7Q0FBcEIsZ0JBQWlCO01BWm5CLFVBQUE7Q0FjRSxDQUE0QixDQUE1QixJQUFPLElBQTBCLEdBQWpDLEVBQUE7Q0FBQSxFQUV3QixFQUF4QixDQUFNLEVBQU8sR0FBVyxLQUF4QjtDQUZBLEVBR0csSUFBSCxDQUFBLFFBQUE7Z0JBakJGO0NBbUJPLENBQVAsQ0FBc0IsR0FBaEIsR0FBaUIsQ0FBdkIsV0FBQTtDQUVNLENBQUosQ0FBRyxLQUFILGVBQUE7Q0FGRixjQUFzQjtDQXBCeEIsWUFBa0I7Q0FGcEIsVUFBYztDQVBkLENBaUNBLENBQUcsQ0FBSCxLQUFjLENBQWQ7QUFDUyxDQUFQLEdBQUEsR0FBQSxHQUFpQixFQUFqQjtDQUEwQyxFQUFPLEdBQWxCLEdBQWtCLENBQVIsV0FBVjtDQUM3QixFQUFBLElBQU8sRUFBaUIsQ0FBQSxHQUFBLEdBQXhCO0NBQ08sQ0FBUCxJQUFNLEdBQU4sY0FBQTtDQUY2QixjQUFrQjtjQUR0QztDQUFiLFVBQWE7Q0FLVCxFQUFELGNBQUg7Q0F2Q0YsUUFBUztDQVArQztDQUFqQyxJQUFpQztDQVYxRCxHQVVBO0NBVkE7Ozs7O0FDQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsQ0FBUyxHQUFULENBQWdCLG1CQUFQOztDQUFULENBRUEsSUFBTSxHQUFOLFFBQUE7RUFBaUQsQ0FBQSxFQUFaLEdBQVksQ0FBQyxDQUFkO2FBQ2xDO0NBQUEsQ0FBTSxDQUFBLENBQU4sRUFBTSxFQUFOLENBQU87Q0FDTCxHQUFBLFVBQUE7Q0FBQSxFQUFPLENBQVAsR0FBYyxHQUFkLDhCQUFPO0NBSUEsRUFBUyxHQUFWLEdBQVUsUUFBaEI7Q0FBNEIsSUFBTSxDQUFNLEVBQWIsT0FBTyxJQUFmO0NBQUwsQ0FBOEMsQ0FBQSxDQUFBLENBQUEsSUFBQyxFQUE3QztDQUNkLEdBQUcsQ0FBSCxPQUFBO0NBQXVCLEdBQVQsRUFBQSxFQUFRLGFBQVI7TUFBZCxRQUFBO0NBQ1UsR0FBRCxFQUFKLGVBQUE7Y0FGcUQ7Q0FBNUQsVUFBNEQ7Q0FMOUQsUUFBTTtDQUR5QztDQUFiLElBQWE7Q0FGakQsR0FFQTs7Q0FGQSxDQWFBLElBQU0sQ0FBTixHQUFBO0VBQW1DLENBQUEsQ0FBUixDQUFFLElBQU87Q0FDbEMsS0FBQSxJQUFBO0NBQUEsQ0FBQSxDQUFTLEdBQVQ7Q0FBQSxDQUFBLENBRVMsQ0FBUixDQUFELENBQUE7Q0FDQyxDQUFpQixDQUFQLENBQVYsR0FBRCxFQUFZLElBQVosQ0FBVztDQUNULE9BQUEsSUFBQTtDQUFBLEVBQVcsQ0FBWCxJQUFBO0NBQUEsRUFFdUIsQ0FBUixDQUFBLEdBQWY7Q0FDRyxDQUFELENBQThCLENBQWhDLEtBQXVCLEtBQXZCLENBQUE7Q0FDVyxFQUFjLENBQVIsQ0FBQSxHQUFQLFNBQVI7Q0FERixRQUFnQztDQVJELE1BSXRCO0NBSmMsSUFBUTtDQWJuQyxHQWFBO0NBYkE7Ozs7O0FDQUE7Q0FBQSxLQUFBLFlBQUE7O0NBQUEsQ0FBQSxDQUFhLElBQUEsR0FBYiwwQkFBYTs7Q0FBYixDQUdBLENBQVMsR0FBVCxDQUFnQixtQkFBUDs7Q0FIVCxDQU1BLElBQU0sQ0FBTixHQUFBO0VBQW1DLENBQUEsQ0FBUixDQUFFLElBQU87Q0FDbEMsT0FBQSxFQUFBO0NBQUEsS0FBTTtDQUNTLEVBQUEsR0FBQSxFQUFBLFVBQUU7Q0FDYixFQURhLENBQUEsRUFDYixJQURZO0NBQ1osQ0FBTyxDQUFQLENBQUMsRUFBWSxFQUFTLEVBQXRCLElBQXFDLElBQTlCO0NBQVAsRUFDSSxDQUFILE1BQUQ7Q0FEQSxFQUVJLENBQUgsQ0FBRCxDQUFBLElBQUE7Q0FIRixRQUFhOztDQUFiLEVBS1UsS0FBVixDQUFVO0NBQWMsRUFBWCxDQUFzQixLQUF0QixDQUFVLE9BQVY7Q0FMYixRQUtVOztDQUxWOztDQURGO2FBUUE7Q0FBQSxDQUFPLENBQUEsRUFBUCxDQUFPLEVBQVAsQ0FBUTtDQUF3QixHQUFULEVBQUEsRUFBQSxTQUFBO0NBQXZCLFFBQU87Q0FBUCxDQUNRLENBQUEsR0FBUixFQUFBLENBQVM7Q0FDUCxFQUFBLFdBQUE7Q0FBQSxDQUFRLENBQVIsRUFBTSxLQUFOO0NBQUEsRUFFRyxDQUFVLENBQUQsQ0FBQSxDQUFaLENBQVksRUFBWjtDQUVJLEVBQUQsY0FBSDtDQU5GLFFBQ1E7Q0FWeUI7Q0FBUixJQUFRO0NBTm5DLEdBTUE7Q0FOQTs7Ozs7QUNBQTtDQUFBLEtBQUE7O0NBQUEsQ0FBQSxDQUFTLEdBQVQsQ0FBZ0IsaUJBQVA7O0NBQVQsQ0FHQSxJQUFNLENBQU4sQ0FBQTtFQUF3QyxDQUFBLEVBQWQsSUFBZSxDQUFELEVBQWY7Q0FDdkIsU0FBQSxNQUFBO0NBQUEsRUFBVSxHQUFWLENBQUE7U0FDRTtDQUFBLENBQU0sRUFBTixNQUFBLFlBQUE7Q0FBQSxDQUVFLElBREYsSUFBQTtDQUNFLENBQ0UsS0FERixLQUFBO0NBQ0UsQ0FBUSxJQUFSLENBQUEsT0FBQTtDQUFBLENBQ00sRUFBTixFQURBLFFBQ0E7Q0FEQSxDQUVPLEdBQVAsU0FBQTtjQUhGO0NBQUEsQ0FLRSxLQURGLEtBQUE7Q0FDRSxDQUFRLElBQVIsUUFBQTtDQUFBLENBQ08sR0FBUCxTQUFBO0NBREEsQ0FFTSxFQUFOLE9BRkEsR0FFQTtDQUZBLENBR1EsSUFBUixRQUFBO2NBUkY7Q0FBQSxDQVVFLE9BREYsR0FBQTtDQUNFLENBQVEsSUFBUixRQUFBO0NBQUEsQ0FDTyxHQUFQLFNBQUE7Q0FEQSxDQUVNLEVBQU4sR0FGQSxPQUVBO2NBWkY7WUFGRjtFQWdCQSxRQWpCUTtDQWlCUixDQUFNLEVBQU4sTUFBQSxhQUFBO0NBQUEsQ0FFRSxJQURGLElBQUE7Q0FDRSxDQUNFLEtBREYsS0FBQTtDQUNFLENBQVEsSUFBUixDQUFBLE9BQUE7Q0FBQSxDQUNNLEVBQU4sRUFEQSxRQUNBO0NBREEsQ0FFTyxHQUFQLFNBQUE7Y0FIRjtDQUFBLENBS0UsS0FERixLQUFBO0NBQ0UsQ0FBUSxJQUFSLENBQUEsT0FBQTtDQUFBLENBQ08sR0FBUCxTQUFBO0NBREEsQ0FFTSxFQUFOLE9BRkEsR0FFQTtDQUZBLENBR1EsSUFBUixRQUFBO2NBUkY7Q0FBQSxDQVVFLE9BREYsR0FBQTtDQUNFLENBQVEsSUFBUixRQUFBO0NBQUEsQ0FDTyxHQUFQLFNBQUE7Q0FEQSxDQUVNLEVBQU4sR0FGQSxPQUVBO2NBWkY7WUFGRjtVQWpCUTtDQUFWLE9BQUE7Q0FBQSxFQW1DRSxHQURGLENBQUE7Q0FDRSxDQUFTLEtBQVQsQ0FBQTtDQUFBLENBQ1MsS0FBVCxDQUFBO0NBREEsQ0FFUSxDQUFBLEdBQVIsRUFBQSxDQUFTO0NBQVcsVUFBQSxHQUFBO0NBQWtCLElBQUEsQ0FBQTtDQUZ0QyxRQUVRO0NBRlIsQ0FHUSxDQUFBLEdBQVIsRUFBQSxDQUFTO0NBQVcsVUFBQSxHQUFBO0FBQWtDLENBQWhCLEVBQWUsQ0FBakMsQ0FBa0IsQ0FBQSxDQUF3QjtDQUg5RCxRQUdRO0NBSFIsQ0FLVyxDQUFBLEtBQVgsQ0FBQTtDQUNFLGFBQUEsWUFBQTtDQUFBLEVBQVksQ0FBVCxFQUFBLENBQWlCLEdBQXBCO0NBQ0U7Q0FBQSxXQUFBLEtBQUE7bUNBQUE7Q0FBQSxDQUFpQixDQUFBLENBQWhCLEVBQWdCLENBQVIsT0FBVDtDQUFBLFlBQUE7Q0FBQSxPQUNBLEVBQVUsRUFBVjtZQUZGO0NBR0MsR0FBQSxhQUFEO0NBVEYsUUFLVztDQXhDYixPQUFBO0NBQUEsS0E4Q0EsQ0FBTyxFQUFQO0NBL0NzQyxZQWlEdEM7Q0FqRHVCLElBQWU7Q0FIeEMsR0FHQTtDQUhBOzs7OztBQ0FBO0NBQUEsS0FBQTtLQUFBLGFBQUE7O0NBQUEsQ0FBQSxLQUFBLG1DQUFBOztDQUFBLENBR0EsQ0FBUyxHQUFULENBQWdCLFFBQW9DLFdBQTNDOztDQUhULENBT0EsSUFBTTtFQUEwQixDQUFBLEVBQWpCLElBQWtCLElBQUQsRUFBbEI7Q0FDSSxHQUFkLFNBQUEsR0FBQTtDQURVLElBQWtCO0NBUGhDLEdBT0E7O0NBUEEsQ0FXQSxJQUFNLENBQU4sR0FBQTtFQUFxQyxDQUFBLEVBQVQsRUFBRCxFQUFXO2FBQ3BDO0NBQUEsQ0FBTyxDQUFBLEVBQVAsRUFBTyxDQUFQLENBQVE7Q0FDTixFQUFBLElBQU8sRUFBYyxDQUFyQixHQUFxQixHQUFUO0NBQ04sSUFBRCxFQUFMLFFBQUEsRUFBQTtDQUZGLFFBQU87Q0FBUCxDQUdNLENBQUEsQ0FBTixHQUFNLENBQU4sQ0FBTztDQUNMLEVBQUEsSUFBTyxDQUFlLENBQUEsQ0FBdEIsR0FBc0IsR0FBVjtDQUNOLElBQUQsRUFBTCxPQUFBLEdBQUE7Q0FMRixRQUdNO0NBSE4sQ0FNUyxDQUFBLElBQVQsQ0FBQSxDQUFVO0NBQ1IsRUFBQSxHQUFvQixDQUFiLEVBQWEsQ0FBcEIsR0FBb0IsR0FBUjtDQUNOLElBQUQsRUFBTCxVQUFBO0NBUkYsUUFNUztDQVAwQjtDQUFWLElBQVU7Q0FYckMsR0FXQTtDQVhBOzs7OztBQ0FBO0NBQUEsS0FBQTs7Q0FBQSxDQUFBLENBQVMsR0FBVCxDQUFnQixnQkFBUDs7Q0FBVCxDQUdBLElBQU0sQ0FBTjtFQUFxQyxDQUFnQyxDQUE3QyxDQUFFLEVBQTJDLENBQUEsQ0FBN0MsQ0FBQSxFQUFBO0NBQ3RCLFNBQUEsdUJBQUE7Q0FBQSxFQUFnQixDQUFoQixFQUFBLE9BQUE7Q0FBQSxFQUVxQixHQUFyQixHQUFzQixTQUF0QjtDQUNFLENBQTJCLENBQTNCLElBQU8sQ0FBUCxLQUFBO0NBQ0EsR0FBRyxJQUFILEtBQUE7Q0FDRTtDQUNnQixHQUFZLENBQUosRUFBdEIsTUFBYSxNQUFiO01BREYsTUFBQTtDQUdVLEdBQVIsR0FBTyxZQUFQO1lBSko7VUFGbUI7Q0FGckIsTUFFcUI7Q0FGckIsQ0FXb0MsSUFBcEMsQ0FBTyxFQUFQLE9BQUEsRUFBQTthQUVBO0NBQUEsQ0FBYyxDQUFBLEtBQWQsQ0FBYyxHQUFkO0NBQ0UsYUFBQSxnRkFBQTtDQUFBLEVBQVEsQ0FBUixDQUFBLEtBQUE7Q0FBQSxDQUNrQixDQUFGLEVBQUEsS0FBaEIsR0FBQTtDQURBLEVBRVcsRUFGWCxHQUVBLEVBQUE7Q0FGQSxFQUdlLEdBQU0sSUFBckIsRUFBQTtDQUhBLEVBSVEsRUFBUixLQUFBO0NBSkEsRUFLUyxHQUFULElBQUE7Q0FMQSxFQU1PLENBQVAsQ0FBTyxDQUFrQixJQUF6QjtDQU5BLEVBT0EsT0FBQTtDQUNBLEVBQXVFLENBQWYsRUFBeEQsSUFBQSxFQUF3RDtDQUF4RCxFQUFBLENBQVUsQ0FBSixDQUFpQyxNQUF2QztZQVJBO0NBQUEsQ0FVeUMsQ0FBNUIsQ0FBQSxDQUF1RCxDQUFqRCxDQUFpRCxFQUFBLENBQXBFLElBQWEsUUFBQSw2QkFBQTtDQVZiLElBY0EsS0FBQTtDQWRBLEVBZ0JTLEdBQVQsR0FBVSxDQUFWO0dBQ0UsTUFBQSxVQUFBO0NBQ0UsS0FBQSxPQUFhLENBQWI7Q0FBQSxFQUNnQixDQURoQixTQUNBLENBQUE7Q0FEQSxPQUdBLEtBQUEsQ0FBQTtDQUhBLEtBS0EsQ0FBQSxDQUFRLE1BQVI7Q0FORixvQkFRRTtDQVRLLFlBQ1A7Q0FqQkYsVUFnQlM7Q0FoQlQsQ0E0QjhDLENBQXBDLENBQW9DLEVBQTNCLENBQW5CLENBQVUsRUFBVixPQUFtQjtDQTVCbkIsRUErQlcsS0FBWCxDQUF1QixDQUF2QixDQUFXO0FBQ0wsQ0FBSixHQUFHLENBQW9DLENBQXJCLElBQWYsRUFBSDtDQUNhLEtBQVgsSUFBVSxXQUFWLGtCQUFrQjtjQUZDO0NBQVosQ0FHVCxDQUhTLFFBQVk7Q0FLVCxFQUFhLENBQTNCLEdBQXFCLEVBQU8sSUFBZixJQUFiO0NBQ1UsQ0FBc0IsQ0FBOUIsQ0FBQSxHQUFPLFNBQVAsR0FBQTtDQURGLFVBQTJCO0NBckM3QixRQUFjO0NBZHFEO0NBQTdDLElBQTZDO0NBSHJFLEdBR0E7Q0FIQTs7Ozs7QUNBQTtDQUFBLEtBQUEsU0FBQTs7Q0FBQSxDQUFBLEtBQUEsbUNBQUE7O0NBQUEsQ0FHQSxDQUFTLEdBQVQsQ0FBZ0Isa0JBQVA7O0NBSFQsQ0FNQSxJQUFNLENBQU4sRUFBQTtDQUVFLE9BQUEsS0FBQTs7Q0FBQSxHQUFNO0NBQ1MsQ0FBUyxDQUFULENBQUEsRUFBQSxDQUFBLGdCQUFFO0NBQ2IsRUFEYSxDQUFBLElBQUQ7Q0FDWixFQURvQixDQUFBLEdBQ3BCLENBRG1CO0NBQ25CLENBQUEsQ0FBYSxDQUFaLElBQUQsQ0FBQTtDQURGLE1BQWE7O0NBQWIsQ0FHQSxDQUFJLEtBQUEsQ0FBQztDQUF3QixJQUFBLE9BQUE7Q0FBRSxFQUFELENBQUMsQ0FBVSxHQUFaLENBQVksTUFBWjtDQUg3QixNQUdJOztDQUhKLENBSWlCLENBQWpCLEtBQUssQ0FBQztDQUF3QixFQUFBLFNBQUE7QUFBQSxDQUFBLEVBQTBFLENBQTFFLEdBQWlGLENBQWpGLENBQXdEO0NBQXZELENBQWlDLENBQWxDLENBQUMsRUFBRCxHQUFXLFFBQVg7VUFBekI7Q0FKTCxNQUlLOztDQUpMLENBTVUsQ0FBQSxLQUFWLENBQVc7Q0FBUSxDQUFVLEVBQVYsS0FBRCxNQUFBO0NBTmxCLE1BTVU7O0NBTlYsRUFPVyxNQUFYO0NBQXFCLENBQXdCLENBQXpCLENBQUMsR0FBTyxDQUFSLE9BQUE7Q0FQcEIsTUFPVzs7Q0FQWCxDQVM4QixDQUFuQixLQUFBLENBQVgsT0FBVztDQUNULE9BQUEsSUFBQTtDQUFBLENBQUssRUFBRixDQUFlLENBQWYsRUFBSDtDQUNFLEVBQUEsSUFBTyxHQUFQO0NBQUEsQ0FFRSxFQURELENBQUQsRUFBQSxHQUFBO0NBQ0UsQ0FBVSxNQUFWLElBQUE7Q0FBQSxDQUNjLFVBQWQ7Q0FIRixXQUNBO01BRkYsSUFBQTtDQU1FLENBQVMsZ0JBQUY7Q0FBUCxPQUFBLFNBQ087Q0FDSCxDQUFLLEVBQUYsQ0FBVyxNQUFkLEdBQUE7Q0FBK0IsQ0FDN0IsRUFEOEIsQ0FBRCxVQUFBLENBQUE7Q0FDN0IsQ0FBVSxHQUFlLEdBQXpCLFVBQUE7Q0FBQSxDQUNlLEdBQWUsR0FBUCxLQUF2QixLQUFBO0NBREEsQ0FFTyxHQUFQLGFBQUE7Q0FGQSxDQUdZLFFBQVosUUFBQTtDQUo2QixpQkFBQTtDQUtwQixDQUFELEVBQUYsQ0FBVyxDQUxuQixNQUFBLElBQUE7Q0FLcUMsQ0FDbkMsRUFEb0MsQ0FBRCxXQUFBLENBQUE7Q0FDbkMsQ0FBUSxJQUFSLFlBQUE7Q0FBQSxDQUNhLFNBQWIsT0FBQTtDQUZtQyxpQkFBQTtnQkFQekM7Q0FDTztDQURQLFlBQUEsSUFVTztDQUVILENBQWdCLEVBQUYsQ0FBVyxTQUF6QjtDQUFBLHFCQUFBO2dCQUFBO0FBQ0EsQ0FBQSxDQUFnQixFQUFoQixVQUFBO0NBQUEscUJBQUE7Z0JBREE7Q0FBQSxDQUlFLEVBREQsQ0FBRCxTQUFBLEVBQUE7Q0FDRSxDQUFhLFNBQWIsS0FBQTtDQUFBLENBQ2lCLGFBQWpCLENBQUE7Q0FMRixlQUdBO0NBTEc7Q0FWUCxLQUFBLFdBa0JPO0FBQ0gsQ0FBQSxDQUFnQixFQUFoQixVQUFBO0NBQUEscUJBQUE7Z0JBQUE7Q0FDQSxDQUFZLEVBQUYsQ0FBZSxDQUFmLFFBQVY7Q0FBQSxxQkFBQTtnQkFEQTtDQUdBLENBQUssRUFBRixVQUFIO0NBQWMsQ0FDWixFQURhLENBQUQsR0FBQSxRQUFBO0NBQ1osQ0FBUyxLQUFULFdBQUE7Q0FBQSxDQUNPLEdBQVAsYUFBQTtDQUZZLGlCQUFBO0NBR0gsQ0FBRCxFQUFGLEVBSFIsVUFBQTtDQUdtQixDQUNqQixFQURrQixDQUFELE1BQUEsS0FBQTtDQUNqQixDQUFTLEtBQVQsV0FBQTtDQUFBLENBQ08sR0FBUCxhQUFBO0NBRmlCLGlCQUFBO2dCQXpCdkI7Q0FrQk87Q0FsQlAsTUFBQSxVQTRCTztDQUVILENBQUssRUFBRixDQUFlLENBQWYsUUFBSDtDQUNFLENBQUssRUFBRixZQUFIO0NBQWMsQ0FDWixFQURhLENBQUQsT0FBQSxNQUFBO0NBQ1osQ0FBVSxNQUFWLFlBQUE7Q0FBQSxDQUNPLEdBQVAsZUFBQTtDQURBLENBRVMsS0FBVCxhQUFBO0NBSFksbUJBQUE7Q0FJSCxDQUFELEVBQUYsRUFKUixZQUFBO0NBSW1CLENBQ2pCLEVBRGtCLENBQUQsT0FBQSxNQUFBO0NBQ2pCLENBQVUsTUFBVixZQUFBO0NBQUEsQ0FDTyxHQUFQLGVBQUE7Q0FEQSxDQUVTLEtBQVQsYUFBQTtDQUhpQixtQkFBQTtrQkFMckI7Q0FVVyxDQUFELEVBQUYsQ0FBVyxDQVZuQixJQUFBLE1BQUE7Q0FXRSxDQUNFLEVBREQsQ0FBRCxPQUFBLElBQUE7Q0FDRSxDQUFVLE1BQVYsVUFBQTtDQUFBLENBQ08sR0FBUCxhQUFBO0NBREEsQ0FFYyxVQUFkLE1BQUE7Q0FIRixpQkFBQTtDQUtTLENBQUQsRUFBRixDQUFXLENBaEJuQixHQUFBLE9BQUE7Q0FpQkUsQ0FBNEIsQ0FBakIsRUFBZSxHQUExQixRQUFBO0NBRUEsQ0FBSyxFQUFGLFlBQUg7Q0FBYyxDQUNaLEVBRGEsQ0FBRCxPQUFBLE1BQUE7Q0FDWixDQUFVLE1BQVYsWUFBQTtDQUFBLENBQ08sR0FBUCxlQUFBO0NBREEsQ0FFTSxFQUFOLGdCQUFBO0NBRkEsQ0FHUSxJQUFSLGNBQUE7Q0FKWSxtQkFBQTtrQkFGZDtDQU9BLENBQUssRUFBRixZQUFIO0NBQWMsQ0FDWixFQURhLENBQUQsT0FBQSxNQUFBO0NBQ1osQ0FBVSxNQUFWLFlBQUE7Q0FBQSxDQUNPLEdBQVAsZUFBQTtDQURBLENBRU0sRUFBTixnQkFBQTtDQUZBLENBR1EsSUFBUixjQUFBO0NBSlksbUJBQUE7a0JBeEJoQjtnQkE5Qko7Q0FBQSxVQU5GO1VBQUE7Q0FrRUMsQ0FBa0IsRUFBbEIsQ0FBRCxLQUFBLEtBQUE7Q0FBbUIsQ0FBQyxRQUFBO0NBQUQsQ0FBSyxNQUFMLEVBQUs7Q0FuRWYsU0FtRVQ7Q0E1RUYsTUFTVzs7Q0FUWCxDQThFbUIsQ0FBWixFQUFQLElBQVE7Q0FDTixXQUFBLGdDQUFBO0NBQUEsRUFBVyxDQUFDLElBQVosR0FBVztDQUFYLEVBQ2MsS0FBZCxDQUFBO0NBRUEsR0FBK0QsSUFBL0QsQ0FBMEU7Q0FBMUU7Q0FBQTtnQkFBQSwyQkFBQTtpQ0FBQTtDQUFBLENBQVksTUFBWjtDQUFBOzJCQUFBO1VBSks7Q0E5RVAsTUE4RU87O0NBOUVQLEVBb0ZvQixNQUFBLFNBQXBCO0NBQXdCLEdBQUEsRUFBdUIsQ0FBaEIsQ0FBUyxPQUFqQjtDQXBGdkIsTUFvRm9COztDQXBGcEIsRUFzRnFCLE1BQUEsVUFBckI7Q0FBeUIsR0FBQSxFQUF1QixDQUFoQixDQUFTLE9BQWpCO0NBdEZ4QixNQXNGcUI7O0NBdEZyQixFQXdGZ0IsTUFBQSxLQUFoQjtDQUFvQixHQUFBLEdBQU8sQ0FBUyxPQUFqQjtDQXhGbkIsTUF3RmdCOztDQXhGaEIsRUEyRmMsS0FBQSxDQUFDLEdBQWY7Q0FDRSxXQUFBLGFBQUE7Q0FBQTtDQUFBLFlBQUEsMENBQUE7NEJBQUE7Q0FBOEQsR0FBTCxDQUFpQixHQUFqQjtDQUF6RCxFQUFBLGdCQUFPO1lBQVA7Q0FBQSxRQUFBO0FBQ1EsQ0FBUixjQUFPO0NBN0ZULE1BMkZjOztDQTNGZCxFQStGZ0IsTUFBQyxLQUFqQjtDQUNFLEVBQUcsQ0FBQSxHQUFPLENBQVY7Q0FBOEIsRUFBQSxDQUFPLE1BQVAsRUFBTTtVQUFwQztDQUVDLEVBQXVCLENBQXZCLENBQXVCLEVBQWhCLENBQVMsT0FBakI7Q0FsR0YsTUErRmdCOztDQS9GaEIsRUFvR1MsSUFBVCxDQUFTLENBQUM7Q0FDUixXQUFBLFFBQUE7Q0FBQTtDQUFBLFlBQUEsOEJBQUE7MkJBQUE7Q0FBMEQsR0FBTCxDQUFpQixHQUFqQjtDQUFyRCxHQUFBLGVBQU87WUFBUDtDQUFBLFFBRE87Q0FwR1QsTUFvR1M7O0NBcEdULEVBdUdhLE1BQUEsRUFBYjtDQUFnQixHQUFBLFFBQUE7Q0FBQSxHQUE4QjtDQXZHOUMsTUF1R2E7O0NBdkdiLEVBeUdZLE1BQUEsQ0FBWjtDQUFlLEdBQUEsUUFBQTtDQUFBLEdBQTZCO0NBekc1QyxNQXlHWTs7Q0F6R1osRUEyR2EsTUFBQSxFQUFiO0NBQWdCLEdBQVEsR0FBTyxDQUFmLE9BQU87Q0EzR3ZCLE1BMkdhOztDQTNHYixFQThHYSxJQUFBLEVBQUMsRUFBZDtDQUNFLFdBQUEsWUFBQTtDQUFBO0NBQUEsWUFBQSwwQ0FBQTsyQkFBQTtHQUF1RCxDQUFBLENBQU87Q0FBOUQsRUFBQSxnQkFBTztZQUFQO0NBQUEsUUFBQTtBQUNRLENBQVIsY0FBTztDQWhIVCxNQThHYTs7Q0E5R2IsRUFrSFMsSUFBVCxDQUFTLENBQUM7Q0FBYSxHQUFRLElBQUQsSUFBQSxHQUFBO0NBbEg5QixNQWtIUzs7Q0FsSFQsRUFvSGMsTUFBQyxHQUFmO0NBQXVCLGNBQU8saUJBQVA7Q0FwSHZCLE1Bb0hjOztDQXBIZCxFQXNIUSxHQUFSLENBQVEsRUFBQztDQUFZLEdBQVEsR0FBRCxJQUFBLElBQUE7Q0F0SDVCLE1Bc0hROztDQXRIUixFQXdIWSxJQUFBLEVBQUMsQ0FBYjtDQUF5QixHQUFPLEdBQUEsUUFBQSxPQUFzQjtDQXhIdEQsTUF3SFk7O0NBeEhaLEVBMEhhLENBQUEsS0FBQyxFQUFkO0NBQXVCLEdBQVEsR0FBeUMsQ0FBMUMsT0FBQTtDQTFIOUIsTUEwSGE7O0NBMUhiLEVBNEhpQixLQUFBLENBQUMsTUFBbEI7Q0FBK0IsR0FBTyxJQUFBLE9BQUEsT0FBc0I7Q0E1SDVELE1BNEhpQjs7Q0E1SGpCLEVBZ0lPLENBQUEsQ0FBUCxJQUFRO0NBQ04sV0FBQSxtQ0FBQTs7R0FEYSxPQUFQO1VBQ047Q0FBQSxFQUFxQixDQUFqQixJQUFKO0NBQUEsRUFDYyxDQUFWLElBQUo7Q0FEQSxFQUVnQixDQUFaLElBQUo7Q0FBZ0IsQ0FBYSxPQUFYLENBQUE7Q0FBRixDQUE0QixRQUFaO0NBRmhDO0FBSXNFLENBQXRFLEdBQUEsR0FBNkUsQ0FBN0UsR0FBc0U7Q0FBdEUsR0FBVSxDQUFBLFdBQUEsNkJBQUE7VUFKVjtBQUsrRCxDQUEvRCxHQUFBLEdBQXNFLENBQXRFO0NBQUEsR0FBVSxDQUFBLFdBQUEsc0JBQUE7VUFMVjtDQU1BO0NBQUEsWUFBQSw4QkFBQTs4QkFBQTtBQUF5RixDQUFELEdBQUEsR0FBQyxHQUFBO0NBQXpGLEVBQTZDLENBQW5DLENBQUEsRUFBTyxXQUFQLFdBQU87WUFBakI7Q0FBQSxRQU5BO0FBT2dFLENBQWhFLEdBQUEsQ0FBZ0UsRUFBTyxDQUF2RTtDQUFBLEdBQVUsQ0FBQSxXQUFBLHVCQUFBO1VBUFY7Q0FRQTtDQUFBLFlBQUEsaUNBQUE7NEJBQUE7QUFBcUcsQ0FBRCxHQUFBLE9BQUM7Q0FBckcsRUFBOEMsQ0FBcEMsQ0FBQSxJQUFvQyxTQUFwQyxZQUFPO1lBQWpCO0NBQUEsUUFSQTtBQVN5RSxDQUF6RSxHQUFBLENBQW1GLENBQW5GLEVBQUE7Q0FBQSxHQUFVLENBQUEsV0FBQSxnQ0FBQTtVQVRWO0NBV0MsR0FBQSxJQUFELE9BQUE7Q0FDRSxDQUFHLFFBQUg7Q0FBQSxDQUNBLEVBQUksR0FBTyxHQUFYLENBQWlCO0NBRGpCLENBRUEsRUFGQSxNQUVBO0NBZkcsU0FZTDtDQTVJRixNQWdJTzs7Q0FoSVAsRUFpSmUsS0FBQSxDQUFDLElBQWhCO0NBQ0UsRUFBQSxTQUFBO0FBQXVGLENBQXZGLEdBQUEsR0FBdUYsQ0FBdkY7Q0FBQSxFQUFtRSxDQUF6RCxDQUFBLEdBQUEsUUFBQSxtQ0FBTztVQUFqQjtDQUFBLEVBRUEsQ0FBTyxJQUFQLElBQU07Q0FFTCxHQUFBLElBQUQsT0FBQTtDQUNFLENBQUcsTUFBQSxFQUFILENBQUc7Q0FBSCxDQUNBLEVBQUssTUFBTCxRQUFJO0NBREosQ0FFQSxDQUZBLE9BRUE7Q0FSVyxTQUtiO0NBdEpGLE1BaUplOztDQWpKZixFQTJKZ0IsTUFBQyxLQUFqQjtBQUNvRixDQUFsRixFQUFrRixDQUFsRixJQUFBLElBQWtGO0NBQWxGLEVBQW1FLENBQXpELENBQUEsV0FBQSxtQ0FBTztVQUFqQjtDQUVDLEdBQUEsSUFBRCxPQUFBO0NBQ0UsQ0FBRyxNQUFBLEVBQUgsQ0FBRztDQUFILENBQ0EsRUFBSyxNQUFMLFFBQUk7Q0FESixDQUVBLENBRkEsT0FFQTtDQU5ZLFNBR2Q7Q0E5SkYsTUEySmdCOztDQTNKaEIsRUFtS2lCLEdBQUEsR0FBQyxNQUFsQjtDQUNHLEdBQUEsSUFBRCxPQUFBO0NBQ0UsQ0FBRyxNQUFBLEVBQUgsRUFBRztDQUFILENBQ0EsRUFBSyxNQUFMLFNBQUk7Q0FESixDQUVBLElBRkEsSUFFQTtDQUphLFNBQ2Y7Q0FwS0YsTUFtS2lCOztDQW5LakIsRUF5S2dCLE1BQUMsRUFBRCxHQUFoQjs7R0FBK0IsT0FBZDtVQUNmO0NBQUMsR0FBQSxJQUFELE9BQUE7Q0FDRSxDQUFHLFFBQUgsR0FBRztDQUFILENBQ0EsRUFBSyxNQUFMLElBQUk7Q0FESixDQUVBLFFBQUEsQ0FGQTtDQUZZLFNBQ2Q7Q0ExS0YsTUF5S2dCOztDQXpLaEIsQ0FpTHVCLENBQVgsSUFBQSxDQUFBLENBQUMsQ0FBYjtDQUNFLEVBQUEsU0FBQTs7R0FEK0IsT0FBVjtVQUNyQjtBQUErRSxDQUEvRSxHQUFBLElBQUEsT0FBK0U7Q0FBL0UsRUFBMkQsQ0FBakQsQ0FBQSxHQUFBLFFBQUEsMkJBQU87VUFBakI7Q0FDQSxHQUE4RSxHQUFBLENBQTlFO0NBQUEsRUFBOEQsQ0FBcEQsQ0FBQSxHQUFBLFFBQUEsOEJBQU87VUFEakI7Q0FBQSxFQUdBLENBQU8sSUFBUCxHQUFNO0NBRUwsR0FBQSxJQUFELE9BQUE7Q0FDRSxDQUFHLENBQUEsSUFBQSxHQUFIO0NBQUEsQ0FDQSxRQUFBO0NBQUksQ0FBQyxNQUFELElBQUM7Q0FBRCxDQUFXLEtBQVgsS0FBVztZQURmO0NBUFEsU0FNVjtDQXZMRixNQWlMWTs7Q0FqTFosQ0EyTHVCLENBQVgsS0FBQSxDQUFDLENBQWIsRUFBWTtDQUNWLEVBQUEsU0FBQTtBQUFtRixDQUFuRixHQUFBLElBQUEsSUFBbUYsR0FBQTtDQUFuRixFQUEyRCxDQUFqRCxDQUFBLE9BQUEsSUFBQSwyQkFBTztVQUFqQjtBQUNrRixDQUFsRixHQUFBLEdBQWtGLENBQWxGO0NBQUEsRUFBOEQsQ0FBcEQsQ0FBQSxHQUFBLFFBQUEsOEJBQU87VUFEakI7Q0FFQSxHQUEwRixHQUFBLENBQTFGLElBQTBGO0NBQTFGLEVBQXNFLENBQTVELENBQUEsT0FBQSxJQUFBLHNDQUFPO1VBRmpCO0NBQUEsRUFJQSxDQUFPLElBQVAsSUFBTTtDQUVMLEdBQUEsSUFBRCxPQUFBO0NBQ0UsQ0FBRyxDQUFBLElBQUEsR0FBSDtDQUFBLENBQ0EsTUFEQSxFQUNBO0NBREEsQ0FFQSxRQUFBLEVBRkE7Q0FSUSxTQU9WO0NBbE1GLE1BMkxZOztDQTNMWixFQXVNWSxLQUFBLENBQUMsQ0FBYjtDQUNFLEVBQUEsU0FBQTtBQUFrRixDQUFsRixHQUFBLEdBQWtGLENBQWxGO0NBQUEsRUFBOEQsQ0FBcEQsQ0FBQSxHQUFBLFFBQUEsOEJBQU87VUFBakI7Q0FDQSxHQUEyRSxJQUEzRSxHQUEyRTtDQUEzRSxHQUFVLENBQUEsV0FBQSxzQ0FBQTtVQURWO0NBQUEsRUFHQSxDQUFPLElBQVAsSUFBTTtDQUhOLEdBS0MsSUFBRCxNQUFBO0NBRUMsR0FBQSxJQUFELE9BQUE7Q0FDRSxDQUFHLENBQUEsSUFBQSxHQUFIO0NBQUEsQ0FDQSxFQUFLLEdBQUQsQ0FBQSxFQUFKO0NBVlEsU0FRVjtDQS9NRixNQXVNWTs7Q0F2TVosQ0FxTnVCLENBQVgsQ0FBQSxFQUFBLEVBQUEsQ0FBQyxDQUFiO0NBQ0UsRUFBQSxTQUFBO0FBQWtGLENBQWxGLEdBQUEsR0FBa0YsQ0FBbEY7Q0FBQSxFQUE4RCxDQUFwRCxDQUFBLEdBQUEsUUFBQSw4QkFBTztVQUFqQjtDQUFBLEVBRUEsQ0FBTyxJQUFQLElBQU07Q0FFTCxHQUFBLElBQUQsT0FBQTtDQUNFLENBQUcsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFIO0NBQUEsQ0FDQSxFQURBLE1BQ0E7Q0FQUSxTQUtWO0NBMU5GLE1BcU5ZOztDQXJOWixDQThOdUIsQ0FBWCxDQUFBLEVBQUEsRUFBQSxDQUFDLENBQWI7Q0FDRSxFQUFBLFNBQUE7QUFBa0YsQ0FBbEYsR0FBQSxHQUFrRixDQUFsRjtDQUFBLEVBQThELENBQXBELENBQUEsR0FBQSxRQUFBLDhCQUFPO1VBQWpCO0NBQUEsRUFFQSxDQUFPLElBQVAsSUFBTTtDQUVMLEdBQUEsSUFBRCxPQUFBO0NBQ0UsQ0FBRyxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUg7Q0FBQSxDQUNBLEVBREEsTUFDQTtDQVBRLFNBS1Y7Q0FuT0YsTUE4Tlk7O0NBOU5aLEVBeU9RLEdBQVIsQ0FBUSxFQUFDO0NBQ1AsRUFBQSxTQUFBO0FBQXFFLENBQXJFLEdBQUEsR0FBcUUsQ0FBckUsRUFBcUU7Q0FBckUsRUFBa0QsQ0FBeEMsQ0FBQSxFQUFBLFNBQUEsa0JBQU87VUFBakI7Q0FDQSxHQUF3RSxFQUFBLENBQUEsQ0FBeEU7Q0FBQSxFQUF5RCxDQUEvQyxDQUFBLEVBQUEsU0FBQSx5QkFBTztVQURqQjtDQUFBLEVBR0EsQ0FBTyxJQUFQLEVBQU07Q0FFTCxHQUFBLElBQUQsT0FBQTtDQUNFLENBQUcsQ0FBQSxHQUFBLElBQUg7Q0FBQSxDQUNBLEtBREEsR0FDQTtDQVJJLFNBTU47Q0EvT0YsTUF5T1E7O0NBek9SLEVBbVBXLElBQUEsRUFBWDtDQUNFLEVBQUEsU0FBQTtBQUEwRSxDQUExRSxHQUFBLEVBQTBFLENBQUEsQ0FBMUU7Q0FBQSxFQUF1RCxDQUE3QyxDQUFBLEVBQUEsU0FBQSx1QkFBTztVQUFqQjtDQUFBLEVBRUEsQ0FBTyxHQUFELENBQU4sR0FBTTtDQUVMLEdBQUEsSUFBRCxPQUFBO0NBQ0UsQ0FBRyxDQUFBLEdBQUEsSUFBSDtDQUFBLENBQ0EsS0FEQSxHQUNBO0NBUE8sU0FLVDtDQXhQRixNQW1QVzs7Q0FuUFg7O0NBREY7O0NBOFBhLEVBQUEsQ0FBQSxhQUFBO0NBQ1gsQ0FBQSxDQUFZLENBQVgsRUFBRCxFQUFBO0NBQUEsQ0FBQSxDQUVZLENBQVgsRUFBRCxFQUFBO0NBRkEsRUFHUyxDQUFSLENBQUQsQ0FBQSxHQUFTLEdBQUE7Q0FIVCxHQUtDLENBQUssQ0FBTjtDQUNFLENBQU8sR0FBUCxHQUFBO1dBQ0U7Q0FBQSxDQUFVLE1BQVYsSUFBQTtDQUFBLENBQ1MsS0FBVCxLQUFBO1lBRks7VUFBUDtDQU5GLE9BS0E7Q0FwUUYsSUE4UGE7O0NBOVBiLEVBMFFjLE1BQUMsQ0FBRCxFQUFkO0NBR0UsU0FBQSxJQUFBO0NBQUEsRUFBVSxDQUFWLEVBQUEsQ0FBQTtDQUVDLENBQXVELENBQXhELENBQUMsQ0FBUyxFQUFvQixHQUFwQixHQUFvQjtDQS9RaEMsSUEwUWM7O0NBMVFkLENBaVI2QixDQUFuQixLQUFWLENBQVcsT0FBRDtDQUNSLFNBQUEsb0RBQUE7Q0FBQSxDQUE4QyxDQUEvQixDQUFxQixDQUFSLENBQTVCLENBQXNCLENBQVAsSUFBZjtBQUVBLENBQUEsVUFBQSwrQkFBQTtzQkFBQTtDQUFBLENBQXVCLENBQXZCLElBQU8sQ0FBUCxDQUFBO0NBQUEsTUFGQTtDQUFBLENBRzZCLENBQTdCLENBQTZCLEVBQTdCLENBQU8sQ0FBc0IsT0FBN0I7Q0FFQSxHQUE0QyxDQUFhLENBQXpELEVBQTRDLElBQTVDO0NBQUEsQ0FBMkIsRUFBM0IsR0FBTyxDQUFQLElBQUE7UUFMQTtDQU9BO0NBQUE7WUFBQSxNQUFBO21DQUFBO0lBQXlDLENBQWMsS0FBZDtDQUN2Qzs7QUFBQSxDQUFBO2tCQUFBLDBCQUFBOzRCQUFBO0NBQUEsQ0FBbUMsRUFBSyxFQUFsQyxFQUFOLENBQUEsT0FBQTtDQUFBOztDQUFBO1VBREY7Q0FBQTt1QkFSUTtDQWpSVixJQWlSVTs7Q0FqUlY7O0NBRkY7Q0FOQTs7Ozs7QUNBQTtDQUFBLEtBQUE7O0NBQUEsQ0FBQSxDQUFTLEdBQVQsQ0FBZ0IsbUJBQVA7O0NBQVQsQ0FFQSxJQUFNLENBQU4sR0FBQTtHQUE2QixFQUFBLElBQUE7Q0FFM0IsU0FBQSxRQUFBO0NBQUEsRUFDRSxHQURGLEVBQUE7Q0FDRSxDQUNFLE1BREYsQ0FBQTtDQUNFLENBQU8sRUFBUCxDQUFBLEtBQUE7Q0FBQSxDQUNjLEVBRGQsTUFDQSxFQUFBO1VBRkY7Q0FBQSxDQUlFLElBREYsRUFBQTtDQUNFLENBQVUsTUFBVixFQUFBO0NBQUEsQ0FDVyxFQURYLEtBQ0EsQ0FBQTtDQURBLENBRU8sR0FBUCxLQUFBO0NBRkEsQ0FJRSxFQURGLE1BQUE7Q0FDRSxDQUNFLEdBREYsT0FBQTtDQUNFLENBQUssQ0FBTCxXQUFBO0NBQUEsQ0FDSyxDQUFMLFdBQUE7Y0FGRjtDQUFBLENBR1MsR0FIVCxFQUdBLEtBQUE7WUFQRjtVQUpGO0NBREYsT0FBQTtDQWdCQSxHQUFHLEVBQUgsc0RBQUE7Q0FDRSxFQUFXLENBQVIsQ0FBQSxFQUFRLENBQVgsSUFBdUIsSUFBWjtDQUNUO0NBQ0UsRUFBUSxDQUFJLENBQVosT0FBQTtNQURGLE1BQUE7Q0FHRSxLQUFBLE1BREk7Q0FDSixDQUFBLENBQVEsRUFBUixPQUFBO1lBSko7VUFBQTtDQUFBLEVBTVksS0FBWixDQUFZLEVBQVo7Q0FDZSxDQUEwQixFQUFJLEdBQTNDLENBQXVDLENBQUEsR0FBM0IsSUFBWixDQUFBO0NBREYsQ0FFRSxFQUZGLEtBQVk7UUF2QmQ7Q0EyQlEsQ0FBaUIsR0FBekIsQ0FBQSxDQUFPLENBQVAsS0FBQTtDQTdCeUIsSUFBRTtDQUY3QixHQUVBO0NBRkE7Ozs7O0FDQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsQ0FBUyxHQUFULENBQWdCLGdCQUFQOztDQUFULENBSUEsQ0FBd0IsR0FBbEIsQ0FBTixFQUF3QjtDQUN0QixPQUFBLFNBQUE7Q0FBQSxFQUNFLENBREYsQ0FBQTtDQUNFLENBQ0UsRUFERixFQUFBO0NBQ0UsQ0FBTyxHQUFQLEdBQUEsRUFBQTtDQUFBLENBQ00sRUFBTixJQUFBLEdBREE7UUFERjtDQUFBLENBSUUsSUFERixJQUFBO0NBQ0UsQ0FBTyxHQUFQLEdBQUE7Q0FBQSxDQUNNLEVBQU4sSUFBQSxTQURBO1FBSkY7Q0FBQSxDQU9FLElBREY7Q0FDRSxDQUFPLEdBQVAsR0FBQSxJQUFBO0NBQUEsQ0FDTSxFQUFOLElBQUEsS0FEQTtRQVBGO0NBQUEsQ0FVRSxDQURGLEdBQUE7Q0FDRSxDQUFPLEdBQVAsR0FBQSxDQUFBO0NBQUEsQ0FDTSxFQUFOLElBQUEsRUFEQTtRQVZGO0NBQUEsQ0FhRSxFQURGLEVBQUE7Q0FDRSxDQUFPLEdBQVAsR0FBQTtDQUFBLENBQ00sRUFBTixJQUFBLElBREE7UUFiRjtDQURGLEtBQUE7QUFpQkEsQ0FBQSxRQUFBLElBQUE7MEJBQUE7Q0FDRSxFQUFZLENBQVIsRUFBSjtDQURGLElBakJBO1dBb0JBO0NBQUEsQ0FBTyxHQUFQLENBQUE7Q0FBQSxDQUNlLENBQUEsR0FBZixFQUFlLENBQUMsSUFBaEI7Q0FDRSxHQUFBLFFBQUE7QUFBQSxDQUFBLFlBQUE7OEJBQUE7Q0FDRSxHQUFHLENBQVUsR0FBVixFQUFIO0NBQWtDLEdBQUEsZUFBTztZQUQzQztDQUFBLFFBQUE7Q0FHQSxHQUFBLENBQVksVUFBTDtDQUxULE1BQ2U7Q0F0Qk87Q0FBeEIsRUFBd0I7Q0FKeEI7Ozs7O0FDQUE7Q0FBQSxLQUFBOztDQUFBLENBQUEsS0FBQSxzQkFBQTs7Q0FBQSxDQUdBLENBQVMsR0FBVCxDQUFnQixrQkFBUCxDQUEwQzs7Q0FIbkQsQ0FPQSxJQUFNLENBQU4sRUFBQTtFQUFrQyxDQUFZLENBQXBCLENBQUUsR0FBa0IsQ0FBQyxDQUFyQjthQUN4QjtDQUFBLENBQVEsQ0FBQSxDQUFBLEVBQVIsRUFBQSxDQUFTO0NBQ1AsYUFBQSxxQkFBQTtBQUFBLENBQUEsR0FBQSxDQUE2RSxDQUE3RSxJQUFBO0NBQUEsR0FBVSxDQUFBLGFBQUEsa0NBQUE7WUFBVjtDQUFBLENBQUEsQ0FFVyxLQUFYLEVBQUE7Q0FFQTtDQUFBLEVBQStCLENBQUEsS0FBQztDQUM5QixHQUFHLENBQUEsR0FBYSxFQUFiLEVBQUg7Q0FDVyxFQUF3QyxDQUFqRCxFQUFjLENBQUEsQ0FBTixDQUEwQyxZQUFsRDtDQUNPLEVBQVUsQ0FBWCxHQUFKLGdCQUFBO0NBRFksY0FBbUM7Y0FGdEI7Q0FBL0IsVUFBK0I7Q0FBL0IsY0FBQSw0QkFBQTs2QkFBQTtDQUE0QjtDQUE1QixVQUpBO0NBU0csQ0FBRCxDQUFGLENBQUEsSUFBQSxDQUFzQixRQUF0QjtDQUFzQixrQkFBRztDQUF6QixVQUFzQjtDQVZ4QixRQUFRO0NBRG9DO0NBQXBCLElBQW9CO0NBUDlDLEdBT0E7Q0FQQTs7Ozs7QUNBQTtDQUFBLEtBQUE7O0NBQUEsQ0FBQSxDQUFTLEdBQVQsQ0FBZ0IsY0FBUDs7Q0FBVCxDQUVBLENBQUEsRUFBQSxDQUFNLEVBQU47Q0FGQTs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3AvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyOENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdk1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbm1qQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNucEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOTVFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlIFwiLi4vLi4vdmVuZG9yL2FuZ3VsYXIvYW5ndWxhclwiXHJcbnJlcXVpcmUgXCIuLi8uLi92ZW5kb3IvYW5ndWxhci9hbmd1bGFyLWNvb2tpZXNcIlxyXG5yZXF1aXJlIFwiLi4vLi4vdmVuZG9yL2FuZ3VsYXItdWkvdWktYm9vdHN0cmFwXCJcclxucmVxdWlyZSBcIi4uLy4uL3ZlbmRvci9hbmd1bGFyLXVpL3VpLXJvdXRlclwiXHJcblxyXG5cclxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL3Nlc3Npb24uY29mZmVlXCJcclxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL25vdGlmaWVyLmNvZmZlZVwiXHJcbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy9kaXNhYmxlci5jb2ZmZWVcIlxyXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvYmFzZVBsdW5rLmNvZmZlZVwiXHJcbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy9sYXlvdXQuY29mZmVlXCJcclxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL3VwZGF0ZXIuY29mZmVlXCJcclxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL2NvbGxhYi5jb2ZmZWVcIlxyXG5cclxucmVxdWlyZSBcIi4uL2RpcmVjdGl2ZXMvYm9yZGVyTGF5b3V0LmNvZmZlZVwiXHJcbnJlcXVpcmUgXCIuLi9kaXJlY3RpdmVzL2NvZGVFZGl0b3IuY29mZmVlXCJcclxucmVxdWlyZSBcIi4uL2RpcmVjdGl2ZXMvcHJldmlld2VyLmNvZmZlZVwiXHJcbnJlcXVpcmUgXCIuLi9kaXJlY3RpdmVzL3Rvb2xiYXIuY29mZmVlXCJcclxuXHJcblxyXG5tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuYXBwLmVkaXRvclwiLCBbXHJcbiAgXCJ1aS5ib290c3RyYXBcIlxyXG4gIFwidWkucm91dGVyXCJcclxuICBcclxuICBcImZhLmJvcmRlckxheW91dFwiXHJcbiAgXHJcbiAgXCJwbHVua2VyLnNlcnZpY2Uuc2Vzc2lvblwiXHJcbiAgXCJwbHVua2VyLnNlcnZpY2Uubm90aWZpZXJcIlxyXG4gIFwicGx1bmtlci5zZXJ2aWNlLmRpc2FibGVyXCJcclxuICBcInBsdW5rZXIuc2VydmljZS5iYXNlUGx1bmtcIlxyXG4gIFwicGx1bmtlci5zZXJ2aWNlLmxheW91dFwiXHJcbiAgXCJwbHVua2VyLnNlcnZpY2UudXBkYXRlclwiXHJcbiAgXCJwbHVua2VyLnNlcnZpY2UuY29sbGFiXCJcclxuICBcclxuICBcInBsdW5rZXIuZGlyZWN0aXZlLmNvZGVFZGl0b3JcIlxyXG4gIFwicGx1bmtlci5kaXJlY3RpdmUucHJldmlld2VyXCJcclxuICBcInBsdW5rZXIuZGlyZWN0aXZlLnRvb2xiYXJcIlxyXG5dXHJcblxyXG5tb2R1bGUuY29uZmlnIFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwiJGxvY2F0aW9uUHJvdmlkZXJcIiwgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSAtPlxyXG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSB0cnVlXHJcbiAgXHJcbiAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4gXCIvZWRpdFwiLCBcIi9lZGl0L1wiXHJcbiAgXHJcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9lZGl0L1wiKVxyXG5dXHJcblxyXG5tb2R1bGUuY29uZmlnIFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSAtPlxyXG4gIFxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlIFwiZWRpdG9yXCIsXHJcbiAgICB1cmw6IFwiL2VkaXRcIlxyXG4gICAgYWJzdHJhY3Q6IHRydWVcclxuICAgIHRlbXBsYXRlOiBcIlwiXCJcclxuICAgICAgPGRpdiB1aS12aWV3PVwiYm9keVwiPjwvZGl2PlxyXG4gICAgXCJcIlwiXHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlIFwiZWRpdG9yLmJsYW5rXCIsXHJcbiAgICB1cmw6IFwiL1wiXHJcbiAgICB2aWV3czpcclxuICAgICAgXCJib2R5XCI6IFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzdGF0ZVwiLCBcIiRzY29wZVwiLCBcImxheW91dFwiLCAoJHN0YXRlLCAkc2NvcGUsIGxheW91dCkgLT5cclxuICAgICAgICAgICRzdGF0ZS5nbyBcImVkaXRvci5uZXdcIlxyXG4gICAgICAgIF1cclxuICAgIFxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlIFwiZWRpdG9yLm5ld1wiLFxyXG4gICAgdXJsOiBcIi9uZXdcIlxyXG4gICAgdmlld3M6XHJcbiAgICAgIFwiYm9keVwiOiBcclxuICAgICAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvZWRpdG9yLmh0bWxcIlxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcInNlc3Npb25cIiwgXCJiYXNlUGx1bmtcIiwgXCJub3RpZmllclwiLCBcImxheW91dFwiLCBcInVwZGF0ZXJcIiwgXCJkaXNhYmxlclwiLCAoJHNjb3BlLCBzZXNzaW9uLCBiYXNlUGx1bmssIG5vdGlmaWVyLCBsYXlvdXQsIHVwZGF0ZXIsIGRpc2FibGVyKSAtPlxyXG4gICAgICAgICAgbGF5b3V0LmN1cnJlbnQudGVtcGxhdGVzLmNsb3NlZCA9IGZhbHNlXHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNsaWVudCA9IHNlc3Npb24uY3JlYXRlQ2xpZW50KFwiZWRpdC5ibGFua1wiKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBkaXNhYmxlci5lbnF1ZXVlIFwiZWRpdG9yXCIsIHVwZGF0ZXIudXBkYXRlKGJhc2VQbHVuaykudGhlbiAoanNvbikgLT5cclxuICAgICAgICAgICAgY2xpZW50LnJlc2V0IGpzb25cclxuICAgICAgICAgICAgY2xpZW50LmN1cnNvclNldEluZGV4ICgwIDw9IGlkeCA9IGNsaWVudC5nZXRGaWxlSW5kZXgoXCJpbmRleC5odG1sXCIpKSBhbmQgaWR4IG9yIDBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIG5vdGlmaWVyLnN1Y2Nlc3MgXCJQbHVuayByZXNldFwiXHJcbiAgICAgICAgXVxyXG5cclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgXCJlZGl0b3Iuc3RyZWFtXCIsXHJcbiAgICB1cmw6IFwiL3N0cmVhbTp7c3RyZWFtSWQ6W2EtejAtOV0rfVwiXHJcbiAgICB2aWV3czpcclxuICAgICAgXCJib2R5XCI6IFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9lZGl0b3IuaHRtbFwiXHJcbiAgICAgICAgY29udHJvbGxlcjogW1wiJHN0YXRlUGFyYW1zXCIsIFwiJHFcIiwgXCIkaHR0cFwiLCBcIiRzY29wZVwiLCBcIiRzdGF0ZVwiLCBcIiR0aW1lb3V0XCIsIFwiY29sbGFiXCIsIFwibm90aWZpZXJcIiwgXCJkaXNhYmxlclwiLCBcImxheW91dFwiLCBcInVwZGF0ZXJcIiwgKCRzdGF0ZVBhcmFtcywgJHEsICRodHRwLCAkc2NvcGUsICRzdGF0ZSwgJHRpbWVvdXQsIGNvbGxhYiwgbm90aWZpZXIsIGRpc2FibGVyLCBsYXlvdXQsIHVwZGF0ZXIpIC0+XHJcbiAgICAgICAgICBsYXlvdXQuY3VycmVudC50ZW1wbGF0ZXMuY2xvc2VkID0gdHJ1ZVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBkaXNhYmxlci5lbnF1ZXVlIFwiZWRpdG9yXCIsIGNvbGxhYi5jb25uZWN0KCRzdGF0ZVBhcmFtcy5zdHJlYW1JZCkudGhlbiAoanNvbikgLT5cclxuICAgICAgICAgICAgbm90aWZpZXIuc3VjY2VzcyBcIkNvbm5lY3RlZCB0byBzdHJlYW1cIlxyXG4gICAgICAgICAgLCAtPlxyXG4gICAgICAgICAgICBub3RpZmllci5lcnJvciBcIkZhaWxlZCB0byBjb25uZWN0IHRvIHN0cmVhbVwiXHJcbiAgICAgICAgICBcclxuICAgICAgICBdXHJcblxyXG4gICAgICAgIFxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlIFwiZWRpdG9yLmdpc3RcIixcclxuICAgIHVybDogXCIvZ2lzdDp7Z2lzdElkOlswLTldK3xbMC05YS16XXsyMH19XCJcclxuICAgIHZpZXdzOlxyXG4gICAgICBcImJvZHlcIjogXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL2VkaXRvci5odG1sXCJcclxuICAgICAgICBjb250cm9sbGVyOiBbXCIkc3RhdGVQYXJhbXNcIiwgXCIkcVwiLCBcIiRodHRwXCIsIFwiJHNjb3BlXCIsIFwiJHN0YXRlXCIsIFwiJHRpbWVvdXRcIiwgXCJzZXNzaW9uXCIsIFwibm90aWZpZXJcIiwgXCJkaXNhYmxlclwiLCBcImxheW91dFwiLCBcInVwZGF0ZXJcIiwgKCRzdGF0ZVBhcmFtcywgJHEsICRodHRwLCAkc2NvcGUsICRzdGF0ZSwgJHRpbWVvdXQsIHNlc3Npb24sIG5vdGlmaWVyLCBkaXNhYmxlciwgbGF5b3V0LCB1cGRhdGVyKSAtPlxyXG4gICAgICAgICAgbGF5b3V0LmN1cnJlbnQudGVtcGxhdGVzLmNsb3NlZCA9IHRydWVcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY2xpZW50ID0gc2Vzc2lvbi5jcmVhdGVDbGllbnQoXCJlZGl0Lmdpc3RcIilcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZGlzYWJsZXIuZW5xdWV1ZSBcImVkaXRvclwiLCByZXF1ZXN0ID0gJGh0dHAuanNvbnAoXCJodHRwczovL2FwaS5naXRodWIuY29tL2dpc3RzLyN7JHN0YXRlUGFyYW1zLmdpc3RJZH0/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDS1wiKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBwYXJzZXIgPSByZXF1ZXN0LnRoZW4gKHJlc3BvbnNlKSAtPlxyXG4gICAgICAgICAgICBpZiByZXNwb25zZS5kYXRhLm1ldGEuc3RhdHVzID49IDQwMCB0aGVuIHJldHVybiAkcS5yZWplY3QoXCJHaXN0IG5vdCBmb3VuZFwiKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZ2lzdCA9IHJlc3BvbnNlLmRhdGEuZGF0YVxyXG4gICAgICAgICAgICBqc29uID0gXHJcbiAgICAgICAgICAgICAgJ3ByaXZhdGUnOiB0cnVlXHJcbiAgICAgICAgICAgICAgZmlsZXM6IFtdXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiBtYW5pZmVzdCA9IGdpc3QuZmlsZXNbXCJwbHVua2VyLmpzb25cIl1cclxuICAgICAgICAgICAgICB0cnlcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kIGpzb24sIGFuZ3VsYXIuZnJvbUpzb24obWFuaWZlc3QuY29udGVudClcclxuICAgICAgICAgICAgICBjYXRjaCBlXHJcbiAgICAgICAgICAgICAgICBub3RpZmllci53YXJuIFwiVW5hYmxlIHRvIHBhcnNlIHRoZSBwbHVua2VyLmpzb24gZmlsZVwiXHJcbiAgICBcclxuICAgICAgICAgICAganNvbi5kZXNjcmlwdGlvbiA9IGdpc3QuZGVzY3JpcHRpb24gb3IgXCJodHRwczovL2dpc3QuZ2l0aHViLmNvbS8jeyRzdGF0ZVBhcmFtcy5naXN0SWR9XCJcclxuICBcclxuICAgICAgICAgICAgZm9yIGZpbGVuYW1lLCBmaWxlIG9mIGdpc3QuZmlsZXNcclxuICAgICAgICAgICAgICB1bmxlc3MgZmlsZW5hbWUgPT0gXCJwbHVua2VyLmpzb25cIlxyXG4gICAgICAgICAgICAgICAganNvbi5maWxlcy5wdXNoXHJcbiAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZVxyXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiBmaWxlLmNvbnRlbnQgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB1cGRhdGVyLnVwZGF0ZShqc29uKVxyXG4gICAgICAgICAgLCAoZXJyb3IpIC0+XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiW0VSUl0gUHVsbGluZyBnaXN0XCIsIGVycm9yXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkcS5yZWplY3QoXCJVbmFibGUgdG8gbG9hZCBnaXN0XCIpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgcGFyc2VyLnRoZW4gKGpzb24pIC0+XHJcbiAgICAgICAgICAgIGxheW91dC5jdXJyZW50LnRlbXBsYXRlcy5jbG9zZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIGNsaWVudC5yZXNldCBqc29uXHJcbiAgICAgICAgICAgIGNsaWVudC5jdXJzb3JTZXRJbmRleCAoMCA8PSBpZHggPSBjbGllbnQuZ2V0RmlsZUluZGV4KFwiaW5kZXguaHRtbFwiKSkgYW5kIGlkeCBvciAwXHJcbiAgICAgICAgICAgIG5vdGlmaWVyLnN1Y2Nlc3MgXCJJbXBvcnRlZCBnaXN0ICN7JHN0YXRlUGFyYW1zLmdpc3RJZH1cIlxyXG4gICAgICAgICAgLCAoZXJyb3JUZXh0KSAtPlxyXG4gICAgICAgICAgICAkc3RhdGUuZ28gXCJlZGl0b3IuYmxhbmtcIlxyXG4gICAgICAgICAgICBub3RpZmllci5lcnJvciBlcnJvclRleHRcclxuICAgICAgICBdXHJcbl1cclxuXHJcbm1vZHVsZS5jb250cm9sbGVyIFwiU2lkZWJhckNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIFwic2Vzc2lvblwiLCAoJHNjb3BlLCBzZXNzaW9uKSAtPlxyXG4gICRzY29wZS5zZXNzaW9uID0gY2xpZW50ID0gc2Vzc2lvbi5jcmVhdGVDbGllbnQoXCJTaWRlYmFyQ29udHJvbGxlclwiKVxyXG4gIFxyXG4gICRzY29wZS5hZGRGaWxlID0gLT5cclxuICAgIGlmIGZpbGVuYW1lID0gcHJvbXB0KFwiRmlsZW5hbWU/XCIpXHJcbiAgICAgIGNsaWVudC5maWxlQ3JlYXRlKGZpbGVuYW1lKVxyXG4gICAgICBjbGllbnQuY3Vyc29yU2V0RmlsZShmaWxlbmFtZSlcclxuICBcclxuICAkc2NvcGUucmVuYW1lRmlsZSA9IChvbGRfZmlsZW5hbWUpIC0+XHJcbiAgICBpZiBjbGllbnQuaGFzRmlsZShvbGRfZmlsZW5hbWUpIGFuZCBmaWxlbmFtZSA9IHByb21wdChcIkZpbGVuYW1lP1wiLCBvbGRfZmlsZW5hbWUpXHJcbiAgICAgIGNsaWVudC5maWxlUmVuYW1lKG9sZF9maWxlbmFtZSwgZmlsZW5hbWUpICAgIFxyXG4gIFxyXG4gICRzY29wZS5yZW1vdmVGaWxlID0gKGZpbGVuYW1lKSAtPlxyXG4gICAgaWYgY2xpZW50Lmhhc0ZpbGUoZmlsZW5hbWUpIGFuZCBjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGRlbGV0ZSAje2ZpbGVuYW1lfT9cIilcclxuICAgICAgY2xpZW50LmZpbGVSZW1vdmUoZmlsZW5hbWUpXHJcbiAgXHJcbiAgJHNjb3BlLm1vdmVUbyA9IChmaWxlbmFtZSkgLT5cclxuICAgIGNsaWVudC5jdXJzb3JTZXRGaWxlKGZpbGVuYW1lKVxyXG5dXHJcblxyXG5cclxubW9kdWxlLmNvbnRyb2xsZXIgXCJMYXlvdXRDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcImxheW91dFwiLCAoJHNjb3BlLCBsYXlvdXQpIC0+XHJcbiAgJHNjb3BlLmxheW91dCA9IGxheW91dFxyXG4gICRzY29wZS50b2dnbGVQcmV2aWV3UGFuZSA9IC0+XHJcbiAgICAkc2NvcGUuc2hvd1ByZXZpZXdQYW5lID0gISRzY29wZS5zaG93UHJldmlld1BhbmVcclxuXSIsIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwiZmEuYm9yZGVyTGF5b3V0XCIsIFtcbl1cblxudGhyb3R0bGUgPSAoZGVsYXksIGZuKSAtPlxuICB0aHJvdHRsZWQgPSBmYWxzZVxuICAtPlxuICAgIHJldHVybiBpZiB0aHJvdHRsZWRcbiAgICBcbiAgICB0aHJvdHRsZWQgPSB0cnVlXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgdGhyb3R0bGVkID0gZmFsc2VcbiAgICAsIGRlbGF5XG4gICAgXG4gICAgZm4uY2FsbChALCBhcmd1bWVudHMuLi4pXG5cbmNsYXNzIFJlZ2lvblxuICBjb25zdHJ1Y3RvcjogKEB3aWR0aCA9IDAsIEBoZWlnaHQgPSAwKSAtPlxuICAgIEB0b3AgPSAwXG4gICAgQHJpZ2h0ID0gMFxuICAgIEBib3R0b20gPSAwXG4gICAgQGxlZnQgPSAwXG4gICAgXG4gIGNhbGN1bGF0ZVNpemU6IChvcmllbnRhdGlvbiwgdGFyZ2V0ID0gMCkgLT5cbiAgICB0b3RhbCA9IEBnZXRTaXplKG9yaWVudGF0aW9uKVxuICAgIGF2YWlsYWJsZSA9IEBnZXRBdmFpbGFibGVTaXplKG9yaWVudGF0aW9uKVxuICAgIFxuICAgIGlmIGFuZ3VsYXIuaXNOdW1iZXIodGFyZ2V0KVxuICAgICAgaWYgdGFyZ2V0ID49IDEgdGhlbiByZXR1cm4gTWF0aC5yb3VuZCh0YXJnZXQpXG4gICAgICBpZiB0YXJnZXQgPj0gMCB0aGVuIHJldHVybiBNYXRoLnJvdW5kKHRhcmdldCAqIHRvdGFsKVxuICAgICAgXG4gICAgICByZXR1cm4gMFxuICAgIFxuICAgICMgS2lsbCB3aGl0ZXNwYWNlXG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnJlcGxhY2UgL1xccysvbWcsIFwiXCJcbiAgICBcbiAgICAjIEFsbG93IGZvciBjb21wbGV4IHNpemVzLCBlLmcuOiA1MCUgLSA0cHhcbiAgICBpZiAodGVybXMgPSB0YXJnZXQuc3BsaXQoXCItXCIpKS5sZW5ndGggPiAxIHRoZW4gcmV0dXJuIEBjYWxjdWxhdGVTaXplKG9yaWVudGF0aW9uLCB0ZXJtcy5zaGlmdCgpKSAtIEBjYWxjdWxhdGVTaXplKG9yaWVudGF0aW9uLCB0ZXJtcy5qb2luKFwiK1wiKSlcbiAgICBpZiAodGVybXMgPSB0YXJnZXQuc3BsaXQoXCIrXCIpKS5sZW5ndGggPiAxIHRoZW4gcmV0dXJuIEBjYWxjdWxhdGVTaXplKG9yaWVudGF0aW9uLCB0ZXJtcy5zaGlmdCgpKSArIEBjYWxjdWxhdGVTaXplKG9yaWVudGF0aW9uLCB0ZXJtcy5qb2luKFwiK1wiKSlcbiAgICAgIFxuICAgIGlmIG1hdGNoZXMgPSB0YXJnZXQubWF0Y2ggL14oXFxkKylweCQvIHRoZW4gcmV0dXJuIHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKVxuICAgIGlmIG1hdGNoZXMgPSB0YXJnZXQubWF0Y2ggL14oXFxkKyg/OlxcLlxcZCspPykmJC8gdGhlbiByZXR1cm4gTWF0aC5yb3VuZChhdmFpbGFibGUgKiBwYXJzZUZsb2F0KG1hdGNoZXNbMV0pIC8gMTAwKVxuICAgIGlmIG1hdGNoZXMgPSB0YXJnZXQubWF0Y2ggL14oXFxkKyg/OlxcLlxcZCspPyklJC8gdGhlbiByZXR1cm4gTWF0aC5yb3VuZCh0b3RhbCAqIHBhcnNlRmxvYXQobWF0Y2hlc1sxXSkgLyAxMDApXG4gICAgXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgc2l6ZTogI3t0YXJnZXR9XCIpXG4gIFxuICBjb25zdW1lOiAoYW5jaG9yLCBzaXplID0gMCkgLT5cbiAgICBzd2l0Y2ggYW5jaG9yXG4gICAgICB3aGVuIFwibm9ydGhcIlxuICAgICAgICBzdHlsZSA9IHsgdG9wOiBcIiN7QHRvcH1weFwiLCByaWdodDogXCIje0ByaWdodH1weFwiLCBsZWZ0OiBcIiN7QGxlZnR9cHhcIiwgaGVpZ2h0OiBcIiN7c2l6ZX1weFwiIH1cbiAgICAgICAgQHRvcCArPSBzaXplXG4gICAgICB3aGVuIFwiZWFzdFwiXG4gICAgICAgIHN0eWxlID0geyB0b3A6IFwiI3tAdG9wfXB4XCIsIHJpZ2h0OiBcIiN7QHJpZ2h0fXB4XCIsIGJvdHRvbTogXCIje0Bib3R0b219cHhcIiwgd2lkdGg6IFwiI3tzaXplfXB4XCIgfVxuICAgICAgICBAcmlnaHQgKz0gc2l6ZVxuICAgICAgd2hlbiBcInNvdXRoXCJcbiAgICAgICAgc3R5bGUgPSB7IHJpZ2h0OiBcIiN7QHJpZ2h0fXB4XCIsIGJvdHRvbTogXCIje0Bib3R0b219cHhcIiwgbGVmdDogXCIje0BsZWZ0fXB4XCIsIGhlaWdodDogXCIje3NpemV9cHhcIiB9XG4gICAgICAgIEBib3R0b20gKz0gc2l6ZVxuICAgICAgd2hlbiBcIndlc3RcIlxuICAgICAgICBzdHlsZSA9IHsgdG9wOiBcIiN7QHRvcH1weFwiLCBib3R0b206IFwiI3tAYm90dG9tfXB4XCIsIGxlZnQ6IFwiI3tAbGVmdH1weFwiLCB3aWR0aDogXCIje3NpemV9cHhcIiB9XG4gICAgICAgIEBsZWZ0ICs9IHNpemVcbiAgICAgIFxuICAgIHN0eWxlXG4gICAgXG4gIGdldElubmVyUmVnaW9uOiAtPlxuICAgIG5ldyBSZWdpb24gQHdpZHRoIC0gQHJpZ2h0IC0gQGxlZnQsIEBoZWlnaHQgLSBAdG9wIC0gQGJvdHRvbVxuICBcbiAgZ2V0U2l6ZTogKG9yaWVudGF0aW9uKSAtPlxuICAgIHN3aXRjaCBvcmllbnRhdGlvblxuICAgICAgd2hlbiBcInZlcnRpY2FsXCIgdGhlbiBAaGVpZ2h0XG4gICAgICB3aGVuIFwiaG9yaXpvbnRhbFwiIHRoZW4gQHdpZHRoXG4gIFxuICBnZXRBdmFpbGFibGVTaXplOiAob3JpZW50YXRpb24pIC0+XG4gICAgc3dpdGNoIG9yaWVudGF0aW9uXG4gICAgICB3aGVuIFwidmVydGljYWxcIiB0aGVuIEBoZWlnaHQgLSBAdG9wIC0gQGJvdHRvbVxuICAgICAgd2hlbiBcImhvcml6b250YWxcIiB0aGVuIEB3aWR0aCAtIEByaWdodCAtIEBsZWZ0XG4gIFxuICBcblxubW9kdWxlLmRpcmVjdGl2ZSBcInBhbmVcIiwgWyAtPlxuICByZXN0cmljdDogXCJFXCJcbiAgcmVwbGFjZTogdHJ1ZVxuICByZXF1aXJlOiBbXCJwYW5lXCIsIFwiXmJvcmRlckxheW91dFwiXVxuICB0cmFuc2NsdWRlOiB0cnVlXG4gIHNjb3BlOiB0cnVlXG4gIHRlbXBsYXRlOiBcIlwiXCJcbiAgICA8ZGl2IGNsYXNzPVwiYm9yZGVyLWxheW91dC1wYW5lXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYm9yZGVyLWxheW91dC1wYW5lLW92ZXJsYXlcIiBuZy1zdHlsZT1cInN0eWxlQ29udGVudFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImJvcmRlci1sYXlvdXQtcGFuZS1oYW5kbGVcIiBsYXlvdXQtaGFuZGxlIG5nLXN0eWxlPVwic3R5bGVIYW5kbGVcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJib3JkZXItbGF5b3V0LXBhbmUtc2Nyb2xsZXJcIiBuZy1zdHlsZT1cInN0eWxlQ29udGVudFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XG4gICAgPC9kaXY+XG4gIFwiXCJcIlxuICBjb250cm9sbGVyOiBbXCIkc2NvcGVcIiwgXCIkZWxlbWVudFwiLCBcIiRhdHRyc1wiLCAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSAtPlxuICAgIHBhbmUgPSBAXG4gICAgXG4gICAgWyRvdmVybGF5LCAkaGFuZGxlLCAkc2Nyb2xsZXJdID0gJGVsZW1lbnQuY2hpbGRyZW4oKVxuICAgIFxuICAgICRzY29wZS4kd2F0Y2ggJGF0dHJzLm9wdGlvbnMsIChvcHRpb25zLCBvbGRPcHRpb25zKSAtPlxuICAgICAgaWYgb3B0aW9uc1xuICAgICAgICBwYW5lLmFuY2hvciA9IG9wdGlvbnMuYW5jaG9yIG9yIFwiY2VudGVyXCJcbiAgICAgICAgcGFuZS5vcmllbnRhdGlvbiA9IHBhbmUuZ2V0T3JpZW50YXRpb24ocGFuZS5hbmNob3IpXG4gICAgICAgIHBhbmUudGFyZ2V0ID0gb3B0aW9ucy5zaXplXG4gICAgICAgIHBhbmUubWF4ID0gb3B0aW9ucy5tYXggfHwgTnVtYmVyLk1BWF9WQUxVRVxuICAgICAgICBwYW5lLm1pbiA9IG9wdGlvbnMubWluIHx8IDBcbiAgICAgICAgcGFuZS5vcGVuID0gIW9wdGlvbnMuY2xvc2VkXG4gICAgICAgIHBhbmUub3JkZXIgPSBwYXJzZUludChvcHRpb25zLm9yZGVyIG9yIDAsIDEwKVxuICAgICAgICBwYW5lLmhhbmRsZVNpemUgPSBwYXJzZUludChvcHRpb25zLmhhbmRsZSBvciAwLCAxMClcbiAgICAgICAgXG4gICAgICAgIHBhbmUubGF5b3V0LnJlZmxvdygpXG4gICAgLCB0cnVlXG4gICAgICBcbiAgICBAY2hpbGRyZW4gPSBbXVxuICAgIEBvcGVuU2l6ZSA9IDBcbiAgICBcbiAgICBAYXR0YWNoQ2hpbGQgPSAoY2hpbGQpIC0+IEBjaGlsZHJlbi5wdXNoKGNoaWxkKVxuICAgIFxuICAgIEBnZXRPcmllbnRhdGlvbiA9IChhbmNob3IgPSBwYW5lLmFuY2hvcikgLT5cbiAgICAgIHN3aXRjaCBhbmNob3JcbiAgICAgICAgd2hlbiBcIm5vcnRoXCIsIFwic291dGhcIiB0aGVuIFwidmVydGljYWxcIlxuICAgICAgICB3aGVuIFwiZWFzdFwiLCBcIndlc3RcIiB0aGVuIFwiaG9yaXpvbnRhbFwiXG4gICAgXG4gICAgQGdldENvbnRlbnRTdHlsZSA9IChhbmNob3IsIGhhbmRsZVNpemUpIC0+XG4gICAgICBzdHlsZSA9XG4gICAgICAgIHRvcDogMFxuICAgICAgICByaWdodDogMFxuICAgICAgICBib3R0b206IDBcbiAgICAgICAgbGVmdDogMFxuICAgICAgICBcbiAgICAgIHN3aXRjaCBhbmNob3JcbiAgICAgICAgd2hlbiBcIm5vcnRoXCIgdGhlbiBzdHlsZS5ib3R0b20gPSBcIiN7aGFuZGxlU2l6ZX1weFwiXG4gICAgICAgIHdoZW4gXCJlYXN0XCIgdGhlbiBzdHlsZS5sZWZ0ID0gXCIje2hhbmRsZVNpemV9cHhcIlxuICAgICAgICB3aGVuIFwic291dGhcIiB0aGVuIHN0eWxlLnRvcCA9IFwiI3toYW5kbGVTaXplfXB4XCJcbiAgICAgICAgd2hlbiBcIndlc3RcIiB0aGVuIHN0eWxlLnJpZ2h0ID0gXCIje2hhbmRsZVNpemV9cHhcIlxuICAgICAgXG4gICAgICBzdHlsZVxuICAgICAgICBcbiAgICBAZ2V0SGFuZGxlU3R5bGUgPSAoYW5jaG9yLCByZWdpb24sIGhhbmRsZVNpemUpIC0+XG4gICAgICBcbiAgICAgIHN3aXRjaCBhbmNob3JcbiAgICAgICAgd2hlbiBcIm5vcnRoXCJcbiAgICAgICAgICBoZWlnaHQ6IFwiI3tyZWdpb24uY2FsY3VsYXRlU2l6ZSgndmVydGljYWwnLCBoYW5kbGVTaXplKX1weFwiXG4gICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIHdoZW4gXCJzb3V0aFwiIFxuICAgICAgICAgIGhlaWdodDogXCIje3JlZ2lvbi5jYWxjdWxhdGVTaXplKCd2ZXJ0aWNhbCcsIGhhbmRsZVNpemUpfXB4XCJcbiAgICAgICAgICByaWdodDogMFxuICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgICB0b3A6IDBcbiAgICAgICAgd2hlbiBcImVhc3RcIlxuICAgICAgICAgIHdpZHRoOiBcIiN7cmVnaW9uLmNhbGN1bGF0ZVNpemUoJ2hvcml6b250YWwnLCBoYW5kbGVTaXplKX1weFwiXG4gICAgICAgICAgdG9wOiAwXG4gICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgbGVmdDogMFxuICAgICAgICB3aGVuIFwid2VzdFwiIFxuICAgICAgICAgIHdpZHRoOiBcIiN7cmVnaW9uLmNhbGN1bGF0ZVNpemUoJ2hvcml6b250YWwnLCBoYW5kbGVTaXplKX1weFwiXG4gICAgICAgICAgdG9wOiAwXG4gICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgcmlnaHQ6IDBcbiAgICBcbiAgICBAb25IYW5kbGVEb3duID0gLT5cbiAgICAgICRlbGVtZW50LmFkZENsYXNzKFwiYWN0aXZlXCIpXG4gICAgICBAbGF5b3V0Lm9uSGFuZGxlRG93bigpXG4gICAgQG9uSGFuZGxlVXAgPSAtPlxuICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIilcbiAgICAgIEBsYXlvdXQub25IYW5kbGVVcCgpXG4gICAgXG4gICAgQHRvZ2dsZSA9IChvcGVuID0gIXBhbmUub3BlbikgLT5cbiAgICAgIHBhbmUub3BlbiA9IG9wZW5cbiAgICAgIFxuICAgICAgaWYgIW9wZW4gdGhlbiBAb3BlblNpemUgPSBAc2l6ZVxuICAgICAgZWxzZSBAc2l6ZSA9IEBvcGVuU2l6ZVxuICAgICAgXG4gICAgICBpZiBvcGVuIHRoZW4gJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjbG9zZWRcIilcbiAgICAgIGVsc2UgJGVsZW1lbnQuYWRkQ2xhc3MoXCJjbG9zZWRcIilcbiAgICAgIFxuICAgICAgQGxheW91dC5yZWZsb3coKVxuICAgIFxuICAgIEByZWZsb3cgPSAocmVnaW9uLCB0YXJnZXQgPSBwYW5lLnRhcmdldCkgLT5cbiAgICAgIGFuY2hvciA9IHBhbmUuYW5jaG9yXG4gICAgICBcbiAgICAgIGlmIG9wZW4gdGhlbiAkZWxlbWVudC5yZW1vdmVDbGFzcyhcImNsb3NlZFwiKVxuICAgICAgZWxzZSAkZWxlbWVudC5hZGRDbGFzcyhcImNsb3NlZFwiKVxuICAgICAgXG4gICAgICBpZiBhbmNob3IgaXMgXCJjZW50ZXJcIlxuICAgICAgICAkZWxlbWVudC5jc3NcbiAgICAgICAgICB0b3A6IFwiI3tyZWdpb24udG9wfXB4XCJcbiAgICAgICAgICByaWdodDogXCIje3JlZ2lvbi5yaWdodH1weFwiXG4gICAgICAgICAgYm90dG9tOiBcIiN7cmVnaW9uLmJvdHRvbX1weFwiXG4gICAgICAgICAgbGVmdDogXCIje3JlZ2lvbi5sZWZ0fXB4XCJcbiAgICAgIGVsc2UgaWYgYW5jaG9yIGluIFtcIm5vcnRoXCIsIFwiZWFzdFwiLCBcInNvdXRoXCIsIFwid2VzdFwiXVxuICAgICAgICBvcmllbnRhdGlvbiA9IEBnZXRPcmllbnRhdGlvbihhbmNob3IpXG4gICAgICAgIGhhbmRsZVNpemUgPSByZWdpb24uY2FsY3VsYXRlU2l6ZShvcmllbnRhdGlvbiwgcGFuZS5oYW5kbGVTaXplIHx8IDApXG5cbiAgICAgICAgaWYgIXBhbmUub3BlblxuICAgICAgICAgIHNpemUgPSBoYW5kbGVTaXplXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzaXplID0gcmVnaW9uLmNhbGN1bGF0ZVNpemUob3JpZW50YXRpb24sIHRhcmdldClcbiAgICAgICAgICBcbiAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgcmVnaW9uLmNhbGN1bGF0ZVNpemUob3JpZW50YXRpb24sIHBhbmUubWF4KSlcbiAgICAgICAgICBzaXplID0gTWF0aC5tYXgoc2l6ZSwgcmVnaW9uLmNhbGN1bGF0ZVNpemUob3JpZW50YXRpb24sIHBhbmUubWluKSlcbiAgICAgICAgICBzaXplID0gTWF0aC5taW4oc2l6ZSwgcmVnaW9uLmdldEF2YWlsYWJsZVNpemUob3JpZW50YXRpb24pKVxuICAgICAgICAgIHNpemUgPSBNYXRoLm1heChzaXplLCBoYW5kbGVTaXplICsgMikgIyBXaHkgZG9lcyAxLjUgd29yayE/XG4gICAgICAgIFxuICAgICAgICBAc2l6ZSA9IHNpemVcbiAgICAgICAgXG4gICAgICAgIHN0eWxlQ29udGFpbmVyID0gcmVnaW9uLmNvbnN1bWUoYW5jaG9yLCBzaXplKVxuICAgICAgICBzdHlsZUNvbnRlbnQgPSBAZ2V0Q29udGVudFN0eWxlKGFuY2hvciwgaGFuZGxlU2l6ZSlcbiAgICAgICAgc3R5bGVIYW5kbGUgPSBAZ2V0SGFuZGxlU3R5bGUoYW5jaG9yLCByZWdpb24sIGhhbmRsZVNpemUpXG4gICAgICAgIFxuICAgICAgICAkZWxlbWVudC5hdHRyKFwic3R5bGVcIiwgXCJcIikuY3NzKHN0eWxlQ29udGFpbmVyKVxuICAgICAgICBcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCRvdmVybGF5KS5hdHRyKFwic3R5bGVcIiwgXCJcIikuY3NzKHN0eWxlQ29udGVudClcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KCRzY3JvbGxlcikuYXR0cihcInN0eWxlXCIsIFwiXCIpLmNzcyhzdHlsZUNvbnRlbnQpXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkaGFuZGxlKS5hdHRyKFwic3R5bGVcIiwgXCJcIikuY3NzKHN0eWxlSGFuZGxlKVxuICAgICAgICBcbiAgICAgIGlmIEBjaGlsZHJlbi5sZW5ndGhcbiAgICAgICAgaW5uZXIgPSByZWdpb24uZ2V0SW5uZXJSZWdpb24oKVxuICAgICAgICBpbm5lciA9IGNoaWxkLnJlZmxvdyhpbm5lcikgZm9yIGNoaWxkIGluIEBjaGlsZHJlblxuXG4gICAgICByZXR1cm4gcmVnaW9uXG4gICAgXG4gICAgQHJlc2l6ZSA9ICh0YXJnZXQpIC0+XG4gICAgICBwYW5lLnRhcmdldCA9IHRhcmdldCB8fCAwXG4gICAgICBcbiAgICAgIEBsYXlvdXQucmVmbG93KClcbiAgICAgIFxuICBdXG4gIGxpbms6ICgkc2NvcGUsICRlbCwgJGF0dHJzLCBbcGFuZSwgcGFyZW50XSkgLT5cbiAgICBwYW5lLmxheW91dCA9IHBhcmVudFxuICAgIHBhcmVudC5hdHRhY2hDaGlsZChwYW5lKVxuICAgIFxuICAgICRzY29wZS4kJG5leHRTaWJsaW5nLnBhbmUgPSBwYW5lXG4gICAgXG4gICAgJHNjb3BlLiR3YXRjaCBcImNvbnN0cmFpbmVkXCIsIChjb25zdHJhaW5lZCkgLT5cbiAgICAgIGlmIGNvbnN0cmFpbmVkIHRoZW4gJGVsLmFkZENsYXNzKFwiYm9yZGVyLWxheW91dC1jb25zdHJhaW5lZFwiKVxuICAgICAgZWxzZSAkZWwucmVtb3ZlQ2xhc3MoXCJib3JkZXItbGF5b3V0LWNvbnN0cmFpbmVkXCIpXG5dXG5cbm1vZHVsZS5kaXJlY3RpdmUgXCJsYXlvdXRIYW5kbGVcIiwgWyBcIiR3aW5kb3dcIiwgKCR3aW5kb3cpIC0+XG4gIHJlc3RyaWN0OiBcIkFcIlxuICByZXF1aXJlOiBbXCI/XnBhbmVcIiwgXCJeP2JvcmRlckxheW91dFwiXVxuICBsaW5rOiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBbcGFuZSwgbGF5b3V0XSkgLT5cbiAgICByZXR1cm4gdW5sZXNzIHBhbmVcbiAgICBcbiAgICBlbCA9ICRlbGVtZW50WzBdXG4gICAgXG4gICAgY2xpY2tSYWRpdXMgPSA1XG4gICAgY2xpY2tUaW1lID0gMzAwXG4gICAgXG4gICAgJHNjb3BlLiR3YXRjaCAoIC0+IHBhbmUuZ2V0T3JpZW50YXRpb24oKSApLCAob3JpZW50YXRpb24pIC0+XG4gICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhcInZlcnRpY2FsXCIpXG4gICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhcImhvcml6b250YWxcIilcbiAgICAgIHN3aXRjaCBvcmllbnRhdGlvblxuICAgICAgICB3aGVuIFwidmVydGljYWxcIiB0aGVuICRlbGVtZW50LmFkZENsYXNzKFwidmVydGljYWxcIilcbiAgICAgICAgd2hlbiBcImhvcml6b250YWxcIiB0aGVuICRlbGVtZW50LmFkZENsYXNzKFwiaG9yaXpvbnRhbFwiKVxuICAgIFxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIgXCJtb3VzZWRvd25cIiwgKGUpIC0+XG4gICAgICByZXR1cm4gdW5sZXNzIGUuYnV0dG9uIGlzIDBcbiAgICAgIFxuICAgICAgYW5jaG9yID0gcGFuZS5hbmNob3JcbiAgICAgIFxuICAgICAgaWYgYW5jaG9yIGluIFtcIm5vcnRoXCIsIFwic291dGhcIl0gdGhlbiBjb29yZCA9IFwic2NyZWVuWVwiXG4gICAgICBlbHNlIGlmIGFuY2hvciBpbiBbXCJ3ZXN0XCIsIFwiZWFzdFwiXSB0aGVuIGNvb3JkID0gXCJzY3JlZW5YXCJcblxuICAgICAgaWYgYW5jaG9yIGluIFtcIm5vcnRoXCIsIFwid2VzdFwiXSB0aGVuIHNjYWxlID0gMVxuICAgICAgZWxzZSBpZiBhbmNob3IgaW4gW1wic291dGhcIiwgXCJlYXN0XCJdIHRoZW4gc2NhbGUgPSAtMVxuICAgIFxuICAgICAgc3RhcnRQb3MgPSB7eDogZS5zY3JlZW5YLCB5OiBlLnNjcmVlbll9XG4gICAgICBzdGFydENvb3JkID0gZVtjb29yZF1cbiAgICAgIHN0YXJ0U2l6ZSA9IHBhbmUuc2l6ZVxuICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgICAgXG4gICAgICBwYW5lLm9uSGFuZGxlRG93bigpXG4gICAgICBcbiAgICAgICMgTm90IHN1cmUgaWYgdGhpcyByZWFsbHkgYWRkcyB2YWx1ZSwgYnV0IGFkZGVkIGZvciBjb21wYXRpYmlsaXR5XG4gICAgICBlbC51bnNlbGVjdGFibGUgPSBcIm9uXCJcbiAgICAgIGVsLm9uc2VsZWN0c3RhcnQgPSAtPiBmYWxzZVxuICAgICAgZWwuc3R5bGUudXNlclNlbGVjdCA9IGVsLnN0eWxlLk1velVzZXJTZWxlY3QgPSBcIm5vbmVcIlxuICAgICAgXG4gICAgICAjIE51bGwgb3V0IHRoZSBldmVudCB0byByZS11c2UgZSBhbmQgcHJldmVudCBtZW1vcnkgbGVha3NcbiAgICAgICNlLnNldENhcHR1cmUoKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlXG4gICAgICBlID0gbnVsbFxuICAgICAgXG4gICAgICBoYW5kbGVDbGljayA9IChlKSAtPlxuICAgICAgICAkc2NvcGUuJGFwcGx5IC0+IHBhbmUudG9nZ2xlKClcbiAgICAgICAgICBcbiAgICAgIGhhbmRsZU1vdXNlTW92ZSA9IChlKSAtPlxuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhcImJvcmRlci1sYXlvdXQtcGFuZS1tb3ZpbmdcIilcbiAgICAgIFxuICAgICAgICAjIEluc2lkZSBBbmd1bGFyJ3MgZGlnZXN0LCBkZXRlcm1pbmUgdGhlIGlkZWFsIHNpemUgb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgIyBhY2NvcmRpbmcgdG8gbW92ZW1lbnRzIHRoZW4gZGV0ZXJtaW5lIGlmIHRob3NlIG1vdmVtZW50cyBoYXZlIGJlZW5cbiAgICAgICAgIyBjb25zdHJhaW5lZCBieSBib3VuZGFyaWVzLCBvdGhlciBwYW5lcyBvciBtaW4vbWF4IGNsYXVzZXNcbiAgICAgICAgJHNjb3BlLiRhcHBseSAtPiBwYW5lLnJlc2l6ZSB0YXJnZXRTaXplID0gc3RhcnRTaXplICsgc2NhbGUgKiAoZVtjb29yZF0gLSBzdGFydENvb3JkKVxuXG4gICAgICAgICMgTnVsbCBvdXQgdGhlIGV2ZW50IGluIGNhc2Ugb2YgbWVtb3J5IGxlYWtzXG4gICAgICAgICNlLnNldENhcHR1cmUoKVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZS5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZVxuICAgICAgICBlID0gbnVsbFxuICAgICAgICBcbiAgICAgIGhhbmRsZU1vdXNlVXAgPSAoZSkgLT5cbiAgICAgICAgZGlzcGxhY2VtZW50U3EgPSBNYXRoLnBvdyhlLnNjcmVlblggLSBzdGFydFBvcy54LCAyKSArIE1hdGgucG93KGUuc2NyZWVuWSAtIHN0YXJ0UG9zLnksIDIpXG4gICAgICAgIHRpbWVFbGFwc2VkID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuXG4gICAgICAgICR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciBcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVUaHJvdHRsZWQsIHRydWVcbiAgICAgICAgJHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyIFwibW91c2V1cFwiLCBoYW5kbGVNb3VzZVVwLCB0cnVlXG4gICAgICAgIFxuICAgICAgICBjbGVhbnVwID0gLT5cbiAgICAgICAgICAjIE51bGwgb3V0IHRoZSBldmVudCBpbiBjYXNlIG9mIG1lbW9yeSBsZWFrc1xuICAgICAgICAgICNlLnJlbGVhc2VDYXB0dXJlKClcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBlLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlXG4gICAgICAgICAgZSA9IG51bGxcblxuICAgICAgICAgIHBhbmUub25IYW5kbGVVcCgpXG4gICAgICAgIFxuIFxuICAgICAgICBpZiBkaXNwbGFjZW1lbnRTcSA8PSBNYXRoLnBvdyhjbGlja1JhZGl1cywgMikgYW5kIHRpbWVFbGFwc2VkIDw9IGNsaWNrVGltZVxuICAgICAgICAgIGhhbmRsZUNsaWNrKGUpXG4gICAgICAgICAgY2xlYW51cCgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgXG4gICAgICAgICMgSW4gY2FzZSB0aGUgbW91c2UgaXMgcmVsZWFzZWQgYXQgdGhlIGVuZCBvZiBhIHRocm90dGxlIHBlcmlvZFxuICAgICAgICBoYW5kbGVNb3VzZU1vdmUoZSlcbiAgICAgICAgXG4gICAgICAgIGNsZWFudXAoKVxuXG4gICAgICBcbiAgICAgICMgUHJldmVudCB0aGUgcmVmbG93IGxvZ2ljIGZyb20gaGFwcGVuaW5nIHRvbyBvZnRlblxuICAgICAgaGFuZGxlTW91c2VNb3ZlVGhyb3R0bGVkID0gdGhyb3R0bGUoMTAsIGhhbmRsZU1vdXNlTW92ZSlcbiAgICBcbiAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciBcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVUaHJvdHRsZWQsIHRydWVcbiAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciBcIm1vdXNldXBcIiwgaGFuZGxlTW91c2VVcCwgdHJ1ZVxuXG5dXG5cblxubW9kdWxlLmRpcmVjdGl2ZSBcImJvcmRlckxheW91dFwiLCBbIFwiJHdpbmRvd1wiLCBcIiR0aW1lb3V0XCIsICgkd2luZG93LCAkdGltZW91dCktPlxuICByZXN0cmljdDogXCJFXCJcbiAgcmVwbGFjZTogdHJ1ZVxuICByZXF1aXJlOiBbXCJib3JkZXJMYXlvdXRcIiwgXCJeP3BhbmVcIl1cbiAgdHJhbnNjbHVkZTogdHJ1ZVxuICB0ZW1wbGF0ZTogXCJcIlwiXG4gICAgPGRpdiBjbGFzcz1cImJvcmRlci1sYXlvdXRcIiBuZy10cmFuc2NsdWRlPlxuICAgIDwvZGl2PlxuICBcIlwiXCJcbiAgY29udHJvbGxlcjogW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykgLT5cbiAgICBsYXlvdXQgPSBAXG4gICAgXG4gICAgQGNoaWxkcmVuID0gW11cbiAgICBcbiAgICBAYXR0YWNoQ2hpbGQgPSAoY2hpbGQpIC0+XG4gICAgICBAY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICBcbiAgICBAb25IYW5kbGVEb3duID0gLT4gJGVsZW1lbnQuYWRkQ2xhc3MoXCJhY3RpdmVcIilcbiAgICBAb25IYW5kbGVVcCA9IC0+XG4gICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKVxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QgXCJib3JkZXItbGF5b3V0LXJlZmxvd1wiXG4gICAgXG4gICAgQHJlZmxvdyA9IChyZWdpb24pIC0+XG4gICAgICByZXR1cm4gaWYgbGF5b3V0LnJlZmxvd2luZ1xuICAgICAgXG4gICAgICBsYXlvdXQucmVmbG93aW5nID0gdHJ1ZVxuICAgICAgXG4gICAgICB3aWR0aCA9ICRlbGVtZW50WzBdLm9mZnNldFdpZHRoXG4gICAgICBoZWlnaHQgPSAkZWxlbWVudFswXS5vZmZzZXRIZWlnaHRcbiAgICAgIFxuICAgICAgcmVnaW9uIHx8PSBuZXcgUmVnaW9uKHdpZHRoLCBoZWlnaHQpXG4gICAgICBcbiAgICAgIEBjaGlsZHJlbi5zb3J0IChhLCBiKSAtPiBiLm9yZGVyIC0gYS5vcmRlclxuICAgICAgXG4gICAgICByZWdpb24gPSBjaGlsZC5yZWZsb3cocmVnaW9uKSBmb3IgY2hpbGQgaW4gQGNoaWxkcmVuXG5cbiAgICAgICRzY29wZS4kYnJvYWRjYXN0IFwiYm9yZGVyLWxheW91dC1yZWZsb3dcIiwgRGF0ZS5ub3coKVxuICAgICAgXG4gICAgICBsYXlvdXQucmVmbG93aW5nID0gZmFsc2VcbiAgICAgIFxuICBdXG4gIGxpbms6ICgkc2NvcGUsICRlbCwgJGF0dHJzLCBbbGF5b3V0LCBwYXJlbnRdKSAtPlxuICAgIHBhcmVudC5hdHRhY2hDaGlsZChsYXlvdXQpIGlmIHBhcmVudFxuICAgIFxuICAgICRzY29wZS4kb24gXCJib3JkZXItbGF5b3V0LXJlZmxvd1wiLCAtPlxuICAgICAgbGF5b3V0LnJlZmxvdygpIHVubGVzcyBwYXJlbnRcbiAgICBcbiAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgXCJyZXNpemVcIiwgKGUpIC0+XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAkc2NvcGUuJGFwcGx5IC0+IGxheW91dC5yZWZsb3coKVxuICAgIFxuICAgICR0aW1lb3V0IC0+IGxheW91dC5yZWZsb3coKSB1bmxlc3MgcGFyZW50XG5dIiwicmVxdWlyZSBcIi4uL3NlcnZpY2VzL3Nlc3Npb24uY29mZmVlXCJcbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy90eXBlcy5jb2ZmZWVcIlxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL3NldHRpbmdzLmNvZmZlZVwiXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvYW5ub3RhdGlvbnMuY29mZmVlXCJcblxubW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLmRpcmVjdGl2ZS5jb2RlRWRpdG9yXCIsIFtcbiAgXCJwbHVua2VyLnNlcnZpY2Uuc2Vzc2lvblwiXG4gIFwicGx1bmtlci5zZXJ2aWNlLnR5cGVzXCJcbiAgXCJwbHVua2VyLnNlcnZpY2Uuc2V0dGluZ3NcIlxuICBcInBsdW5rZXIuc2VydmljZS5hbm5vdGF0aW9uc1wiXG5dXG5cbiMjI1xubW9kdWxlLmZhY3RvcnkgXCJlZGl0b3JcIiwgWyBcInR5cGVzXCIsICh0eXBlcykgLT5cbiAgY2xhc3MgUHJvamVjdEZpbGVcbiAgICBjb25zdHJ1Y3RvcjogKEBmaWxlbmFtZSwgQGNvbnRlbnQgPSBcIlwiKSAtPlxuXG4gICAgICBAYWNlU2Vzc2lvbiA9IG5ldyBFZGl0U2Vzc2lvbihAY29udGVudCBvciBcIlwiKVxuICAgICAgQGFjZVNlc3Npb24uc2V0VW5kb01hbmFnZXIobmV3IFVuZG9NYW5hZ2VyKCkpXG4gICAgICBAYWNlU2Vzc2lvbi5zZXRVc2VXb3JrZXIodHJ1ZSlcbiAgICAgIEBhY2VTZXNzaW9uLnNldFRhYlNpemUoc2V0dGluZ3MuZWRpdG9yLnRhYl9zaXplKVxuICAgICAgQGFjZVNlc3Npb24uc2V0VXNlV3JhcE1vZGUoISFzZXR0aW5ncy5lZGl0b3Iud3JhcC5lbmFibGVkKVxuICAgICAgQGFjZVNlc3Npb24uc2V0V3JhcExpbWl0UmFuZ2Uoc2V0dGluZ3MuZWRpdG9yLndyYXAucmFuZ2UubWluLCBzZXR0aW5ncy5lZGl0b3Iud3JhcC5yYW5nZS5tYXgpXG4gICAgICBcbiAgICAgIEBzZXRNb2RlKClcblxuICAgICAgZG9jID0gYWNlU2Vzc2lvbi5nZXREb2N1bWVudCgpXG4gICAgICBcbiAgICBzZXRNb2RlOiAobW9kZU5hbWUpIC0+XG4gICAgICBtb2RlTmFtZSB8fD0gXCJhY2UvbW9kZS9cIiArIHR5cGVzLmdldEJ5RmlsZW5hbWUoZmlsZW5hbWUpLm5hbWVcbiAgICAgIFxuICAgICAgQGFjZVNlc3Npb24uc2V0TW9kZShtb2RlTmFtZSlcbiAgXG4gIGNsYXNzIFByb2plY3RcbiAgICBjb25zdHJ1Y3RvcjogKEBuYW1lKSAtPlxuICAgICAgQGZpbGVzID0gW11cbiAgICAgIFxuICAgIHJlc2V0OiAoc3RhdGUgPSB7ZmlsZXM6W119KSAtPlxuICAgICAgZmlsZS5kZXN0cm95KCkgZm9yIGZpbGUgaW4gQGZpbGVzXG4gICAgICBcbiAgICAgIEBmaWxlcy5wdXNoIG5ldyBQcm9qZWN0RmlsZShmaWxlLmZpbGVuYW1lLCBmaWxlLmNvbnRlbnQpIGZvciBmaWxlIGluIGZpbGVzXG4gICAgICBcbiAgICAgIEBjdXJzb3JNb3ZlKHN0YXRlLmN1cnNvci5maWxlSW5kZXgsIHN0YXRldS5jdXJzb3IuZmlsZU9mZnNldCkgaWYgc3RhdGUuY3Vyc29yP1xuICAgIFxuICAgIGN1cnNvck1vdmU6IChmaWxlSW5kZXgsIHRleHRPZmZzZXQsIHRleHRFbmRPZmZzZXQpIC0+XG4gICAgICBcbiAgICBhdHRhY2hUb1Nlc3Npb246IC0+XG4gICAgICBwcm9qZWN0ID0gQFxuICAgICAgY2xpZW50ID0gc2Vzc2lvbi5jcmVhdGVDbGllbnQoXCJwcm9qZWN0LSN7QG5hbWV9XCIpXG4gIFxuICAgICAgY2xpZW50Lm9uIFwicmVzZXRcIiwgKGUsIHNuYXBzaG90KSAtPiBwcm9qZWN0LnJlc2V0KHNuYXBzaG90KVxuICAgICAgXG4gICAgICBjbGllbnQub24gXCJjdXJzb3JTZXRGaWxlXCIsIChlLCBzbmFwc2hvdCkgLT4gcHJvamVjdC5jdXJzb3JNb3ZlKHNuYXBzaG90LmN1cnNvci5maWxlSW5kZXgsIHNuYXBzaG90LmN1cnNvci50ZXh0T2Zmc2V0KVxuICAgICAgXG4gICAgICBjbGllbnQub24gXCJjdXJzb3JTZXRPZmZzZXRcIiwgKGUsIHNuYXBzaG90KSAtPiBwcm9qZWN0LmN1cnNvck1vdmUoc25hcHNob3QuY3Vyc29yLmZpbGVJbmRleCwgc25hcHNob3QuY3Vyc29yLnRleHRPZmZzZXQpXG4gICAgICAgIFxuICAgICAgY2xpZW50Lm9uIFwiZmlsZUNyZWF0ZVwiLCAoZSwgc25hcHNob3QpIC0+IHByb2plY3QuZmlsZXNbZS5pbmRleF0gPSBuZXcgUHJvamVjdEZpbGUoZS5maWxlbmFtZSwgZS5jb250ZW50KVxuICAgICAgXG4gICAgICBjbGllbnQub24gXCJmaWxlUmVtb3ZlXCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgICAgW3JlbW92ZWRdID0gcHJvamVjdC5maWxlcy5zcGxpY2UoZS5pbmRleCwgMSlcbiAgICAgICAgcmVtb3ZlZC5kZXN0cm95KClcbiAgICAgICAgZmlsZS5cbiAgICAgIFxuICAgICAgY2xpZW50Lm9uIFwiZmlsZVJlbmFtZVwiLCAoZSwgc25hcHNob3QpIC0+IHByb2plY3QuZmlsZXNbZS5pbmRleF0ucmVuYW1lKGUuZmlsZW5hbWUpXG4gICAgICBcbiAgICAgIGNsaWVudC5vbiBcInRleHRJbnNlcnRcIiwgKGUsIHNuYXBzaG90KSAtPiBcbiAgICAgICAgXG4gICAgICBjbGllbnQub24gXCJ0ZXh0UmVtb3ZlXCIsIChlLCBzbmFwc2hvdCkgLT5cblxuICBwcm9qZWN0cyA9IHt9XG4gIFxuICBwcm9qZWN0OiAocHJvamVjdE5hbWUpIC0+IHByb2plY3RbcHJvamVjdE5hbWVdIHx8PSBuZXcgUHJvamVjdChwcm9qZWN0TmFtZSlcbl1cbiMjI1xuXG5tb2R1bGUuZGlyZWN0aXZlIFwiY29kZUVkaXRvclwiLCBbIFwiJHJvb3RTY29wZVwiLCBcIiR0aW1lb3V0XCIsIFwic2Vzc2lvblwiLCBcInR5cGVzXCIsIFwic2V0dGluZ3NcIiwgXCJhbm5vdGF0aW9uc1wiLCAoJHJvb3RTY29wZSwgJHRpbWVvdXQsIHNlc3Npb24sIHR5cGVzLCBzZXR0aW5ncywgYW5ub3RhdGlvbnMpIC0+XG4gIEFjZUVkaXRvciA9IGFjZS5yZXF1aXJlKFwiYWNlL2VkaXRvclwiKS5FZGl0b3JcbiAgUmVuZGVyZXIgPSBhY2UucmVxdWlyZShcImFjZS92aXJ0dWFsX3JlbmRlcmVyXCIpLlZpcnR1YWxSZW5kZXJlclxuICBFZGl0U2Vzc2lvbiA9IGFjZS5yZXF1aXJlKFwiYWNlL2VkaXRfc2Vzc2lvblwiKS5FZGl0U2Vzc2lvblxuICBVbmRvTWFuYWdlciA9IGFjZS5yZXF1aXJlKFwiYWNlL3VuZG9tYW5hZ2VyXCIpLlVuZG9NYW5hZ2VyXG4gIFJhbmdlID0gYWNlLnJlcXVpcmUoXCJhY2UvcmFuZ2VcIikuUmFuZ2VcbiAgXG4gIGNvbmZpZyA9IGFjZS5yZXF1aXJlKFwiYWNlL2NvbmZpZ1wiKVxuICBcbiAgcmVzdHJpY3Q6IFwiRVwiXG4gIHJlcGxhY2U6IHRydWVcbiAgc2NvcGU6XG4gICAgYWN0aXZlOiBcIj1cIlxuICB0ZW1wbGF0ZTogXCJcIlwiXG4gICAgPGRpdiBjbGFzcz1cImNvZGUtZWRpdG9yXCI+XG4gICAgPC9kaXY+XG4gIFwiXCJcIlxuICBsaW5rOiAoJHNjb3BlLCAkZWwsIGF0dHJzKSAtPlxuICAgIGVkaXRvciA9IG5ldyBBY2VFZGl0b3IobmV3IFJlbmRlcmVyKCRlbFswXSwgXCJhY2UvdGhlbWUvI3tzZXR0aW5ncy5lZGl0b3IudGhlbWV9XCIpKVxuICAgIGNsaWVudCA9IHNlc3Npb24uY3JlYXRlQ2xpZW50KFwiY29kZS1lZGl0b3JcIilcbiAgICBzbmlwcGV0TWFuYWdlciA9IG51bGxcbiAgICBidWZmZXJzID0gW11cbiAgICBcbiAgICBhY2UuY29uZmlnLmxvYWRNb2R1bGUgXCJhY2UvZXh0L2xhbmd1YWdlX3Rvb2xzXCIsIC0+XG4gICAgICBlZGl0b3Iuc2V0T3B0aW9uc1xuICAgICAgICBlbmFibGVCYXNpY0F1dG9jb21wbGV0aW9uOiB0cnVlXG4gICAgICAgIGVuYWJsZVNuaXBwZXRzOiB0cnVlXG4gIFxuICAgICAgc25pcHBldE1hbmFnZXIgPSBhY2UucmVxdWlyZShcImFjZS9zbmlwcGV0c1wiKS5zbmlwcGV0TWFuYWdlclxuICAgICAgXG4gICAgJHNjb3BlLiR3YXRjaCAoIC0+IHNldHRpbmdzLmVkaXRvci50aGVtZSApLCAodGhlbWUpIC0+XG4gICAgICBlZGl0b3Iuc2V0VGhlbWUoXCJhY2UvdGhlbWUvI3t0aGVtZX1cIikgaWYgdGhlbWVcbiAgICBcblxuICAgIGd1ZXNzTW9kZSA9IChmaWxlbmFtZSkgLT4gXCJhY2UvbW9kZS9cIiArIHR5cGVzLmdldEJ5RmlsZW5hbWUoZmlsZW5hbWUpLm5hbWVcbiAgICBcbiAgICBhY3RpdmF0ZUJ1ZmZlciA9IChpbmRleCkgLT5cbiAgICAgIGVkaXRvci5zZXRTZXNzaW9uKGJ1ZmZlcnNbaW5kZXhdKVxuICAgICAgZWRpdG9yLmZvY3VzKClcbiAgICBcbiAgICBtb3ZlQ3Vyc29yID0gKG9mZnNldCkgLT5cbiAgICAgIGRvYyA9IGVkaXRvci5zZXNzaW9uLmRvY1xuICAgICAgZWRpdG9yLm1vdmVDdXJzb3JUb1Bvc2l0aW9uKGRvYy5pbmRleFRvUG9zaXRpb24ob2Zmc2V0KSlcbiAgICBcbiAgICBhZGRBY2VTZXNzaW9uID0gKGluZGV4LCBmaWxlKSAtPlxuICAgICAgYWNlU2Vzc2lvbiA9IG5ldyBFZGl0U2Vzc2lvbihmaWxlLmNvbnRlbnQgb3IgXCJcIilcbiAgICAgIGFjZVNlc3Npb24uc2V0VW5kb01hbmFnZXIobmV3IFVuZG9NYW5hZ2VyKCkpXG4gICAgICBhY2VTZXNzaW9uLnNldFVzZVdvcmtlcih0cnVlKVxuICAgICAgYWNlU2Vzc2lvbi5zZXRUYWJTaXplKHNldHRpbmdzLmVkaXRvci50YWJfc2l6ZSlcbiAgICAgIGFjZVNlc3Npb24uc2V0VXNlV3JhcE1vZGUoISFzZXR0aW5ncy5lZGl0b3Iud3JhcC5lbmFibGVkKVxuICAgICAgYWNlU2Vzc2lvbi5zZXRXcmFwTGltaXRSYW5nZShzZXR0aW5ncy5lZGl0b3Iud3JhcC5yYW5nZS5taW4sIHNldHRpbmdzLmVkaXRvci53cmFwLnJhbmdlLm1heClcbiAgICAgIGFjZVNlc3Npb24uc2V0TW9kZShndWVzc01vZGUoZmlsZS5maWxlbmFtZSkpXG4gICAgICBhY2VTZXNzaW9uLmluZGV4JCA9IGluZGV4XG5cbiAgICAgIFxuICAgICAgZG9jID0gYWNlU2Vzc2lvbi5nZXREb2N1bWVudCgpXG4gICAgICAgICAgXG4gICAgICBoYW5kbGVDaGFuZ2VFdmVudCA9IChlKSAtPlxuICAgICAgICB1bmxlc3MgZmlsZSA9IGNsaWVudC5nZXRGaWxlQnlJbmRleChhY2VTZXNzaW9uLmluZGV4JClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJzIGFuZCBzZXNzaW9uIGFyZSBvdXQgb2Ygc3luY1wiKVxuICAgICAgICBcbiAgICAgICAgdW5sZXNzICRyb290U2NvcGUuJCRwaGFzZSB0aGVuICRzY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICBubCA9IGRvYy5nZXROZXdMaW5lQ2hhcmFjdGVyKClcbiAgICAgICAgICBcbiAgICAgICAgICBzd2l0Y2ggZS5kYXRhLmFjdGlvblxuICAgICAgICAgICAgd2hlbiBcImluc2VydFRleHRcIiB0aGVuIGNsaWVudC50ZXh0SW5zZXJ0IGZpbGUuZmlsZW5hbWUsIGRvYy5wb3NpdGlvblRvSW5kZXgoZS5kYXRhLnJhbmdlLnN0YXJ0KSwgZS5kYXRhLnRleHRcbiAgICAgICAgICAgIHdoZW4gXCJpbnNlcnRMaW5lc1wiIHRoZW4gY2xpZW50LnRleHRJbnNlcnQgZmlsZS5maWxlbmFtZSwgZG9jLnBvc2l0aW9uVG9JbmRleChlLmRhdGEucmFuZ2Uuc3RhcnQpLCBlLmRhdGEubGluZXMuam9pbihubCkgKyBubFxuICAgICAgICAgICAgd2hlbiBcInJlbW92ZVRleHRcIiB0aGVuIGNsaWVudC50ZXh0UmVtb3ZlIGZpbGUuZmlsZW5hbWUsIGRvYy5wb3NpdGlvblRvSW5kZXgoZS5kYXRhLnJhbmdlLnN0YXJ0KSwgZS5kYXRhLnRleHRcbiAgICAgICAgICAgIHdoZW4gXCJyZW1vdmVMaW5lc1wiIHRoZW4gY2xpZW50LnRleHRSZW1vdmUgZmlsZS5maWxlbmFtZSwgZG9jLnBvc2l0aW9uVG9JbmRleChlLmRhdGEucmFuZ2Uuc3RhcnQpLCBlLmRhdGEubGluZXMuam9pbihubCkgKyBubFxuICAgICAgXG4gICAgICAgIGlmIGZpbGUuY29udGVudCAhPSBhY2VTZXNzaW9uLmdldFZhbHVlKClcbiAgICAgICAgICBjb25zb2xlLmVycm9yIFwiW0VSUl0gTG9jYWwgc2Vzc2lvbiBvdXQgb2Ygc3luY1wiLCBlXG4gICAgICBcbiAgICAgIGhhbmRsZUNoYW5nZUFubm90YXRpb25FdmVudCA9IChlKSAtPlxuICAgICAgICB1bmxlc3MgZmlsZSA9IGNsaWVudC5nZXRGaWxlQnlJbmRleChhY2VTZXNzaW9uLmluZGV4JClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXJzIGFuZCBzZXNzaW9uIGFyZSBvdXQgb2Ygc3luY1wiKVxuICAgICAgICBcbiAgICAgICAgdW5sZXNzICRyb290U2NvcGUuJCRwaGFzZSB0aGVuICRzY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICBhbm5vdGF0aW9ucy51cGRhdGUoZmlsZS5maWxlbmFtZSwgYWNlU2Vzc2lvbi5nZXRBbm5vdGF0aW9ucygpKVxuICAgICAgICAgIFxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCBcInVwZGF0ZUFubm90YXRpbm9zXCIsIGZpbGUsIGFjZVNlc3Npb24uZ2V0QW5ub3RhdGlvbnMoKVxuXG4gICAgICBidWZmZXJzW2luZGV4XSA9IGFjZVNlc3Npb25cbiAgICAgIFxuICAgICAgYW5ub3RhdGlvbnMudXBkYXRlIGZpbGUuZmlsZW5hbWUsIGFjZVNlc3Npb24uZ2V0QW5ub3RhdGlvbnMoKVxuXG4gICAgICBhY2VTZXNzaW9uLm9uIFwiY2hhbmdlXCIsIGhhbmRsZUNoYW5nZUV2ZW50XG4gICAgICBhY2VTZXNzaW9uLm9uIFwiY2hhbmdlQW5ub3RhdGlvblwiLCBoYW5kbGVDaGFuZ2VBbm5vdGF0aW9uRXZlbnRcblxuICAgICAgYWNlU2Vzc2lvbi5kZXN0cm95ID0gLT5cbiAgICAgICAgYWNlU2Vzc2lvbi5vZmYgXCJjaGFuZ2VcIiwgaGFuZGxlQ2hhbmdlRXZlbnRcbiAgICAgICAgYWNlU2Vzc2lvbi5vZmYgXCJjaGFuZ2VBbm5vdGF0aW9uXCIsIGhhbmRsZUNoYW5nZUFubm90YXRpb25FdmVudFxuXG4gICAgcmVtb3ZlQWNlU2Vzc2lvbiA9IChpbmRleCkgLT5cbiAgICAgIHVubGVzcyBidWZmZXJzW2luZGV4XSB0aGVuIGRlYnVnZ2VyXG4gICAgICBcbiAgICAgICMgUmUtbnVtYmVyIGV4aXN0aW5nIGJ1ZmZlcnNcbiAgICAgIGJ1ZmZlci5pbmRleCQtLSBmb3IgYnVmZmVyLCBpZHggaW4gYnVmZmVycyB3aGVuIGlkeCA+IGluZGV4XG4gICAgICBcbiAgICAgIGJ1ZmZlcnNbaW5kZXhdLmRlc3Ryb3koKVxuICAgICAgYnVmZmVycy5zcGxpY2UgaW5kZXgsIDFcbiAgICAgIFxuICAgICAgaWYgZmlsZSA9IGNsaWVudC5nZXRGaWxlQnlJbmRleChpbmRleClcbiAgICAgICAgYW5ub3RhdGlvbnMucmVtb3ZlKGZpbGUuZmlsZW5hbWUpXG4gICAgICBcbiAgICByZXNldCA9IChzbmFwc2hvdCkgLT5cbiAgICAgIHJlbW92ZUFjZVNlc3Npb24oaWR4KSBmb3IgaWR4IGluIFtidWZmZXJzLmxlbmd0aCAtIDEuLjBdIGJ5IC0xXG4gICAgICBhZGRBY2VTZXNzaW9uKGlkeCwgZmlsZSkgZm9yIGZpbGUsIGlkeCBpbiBzbmFwc2hvdC5maWxlc1xuICAgICAgXG4gICAgICBhY3RpdmF0ZUJ1ZmZlcihzbmFwc2hvdC5jdXJzb3IuZmlsZUluZGV4KVxuICAgIFxuICAgIGNoYW5nZVNlc3Npb25Nb2RlID0gKGluZGV4LCBmaWxlbmFtZSkgLT5cbiAgICAgIGJ1ZmZlci5zZXRNb2RlKGd1ZXNzTW9kZShmaWxlbmFtZSkpIGlmIGJ1ZmZlciA9IGJ1ZmZlcnNbaW5kZXhdXG4gICAgICAgIFxuICAgIGNsaWVudC5vbiBcInJlc2V0XCIsIChlLCBzbmFwc2hvdCkgLT4gcmVzZXQoZS5zbmFwc2hvdClcbiAgICBcbiAgICBjbGllbnQub24gXCJjdXJzb3JTZXRGaWxlXCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgIGFjdGl2YXRlQnVmZmVyKGUuaW5kZXgpXG4gICAgXG4gICAgY2xpZW50Lm9uIFwiY3Vyc29yU2V0T2Zmc2V0XCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgIG1vdmVDdXJzb3IoZS5vZmZzZXQpXG4gICAgICBcbiAgICBjbGllbnQub24gXCJmaWxlQ3JlYXRlXCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgIGFkZEFjZVNlc3Npb24oZS5pbmRleCwgc25hcHNob3QuZmlsZXNbZS5pbmRleF0pXG4gICAgXG4gICAgY2xpZW50Lm9uIFwiZmlsZVJlbW92ZVwiLCAoZSwgc25hcHNob3QpIC0+XG4gICAgICByZW1vdmVBY2VTZXNzaW9uKGUuaW5kZXgpXG4gICAgICBhbm5vdGF0aW9ucy5yZW1vdmUoZS5maWxlbmFtZSlcbiAgICBcbiAgICBjbGllbnQub24gXCJmaWxlUmVuYW1lXCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgIGNoYW5nZVNlc3Npb25Nb2RlKGUuaW5kZXgsIGUuZmlsZW5hbWUpXG4gICAgICBhbm5vdGF0aW9ucy5yZW5hbWUoZS5maWxlbmFtZSwgZS5vbGRfZmlsZW5hbWUpXG4gICAgXG4gICAgY2xpZW50Lm9uIFwidGV4dEluc2VydFwiLCAoZSwgc25hcHNob3QpIC0+XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWNlaXZlZCB0ZXh0SW5zZXJ0IGV2ZW50IGZvciBhIGZpbGUgbm90IGJlaW5nIHRyYWNrZWRcIikgdW5sZXNzIGFjZVNlc3Npb24gPSBidWZmZXJzW2UuaW5kZXhdXG4gICAgICBhY2VTZXNzaW9uLmRvYy5pbnNlcnQgYWNlU2Vzc2lvbi5kb2MuaW5kZXhUb1Bvc2l0aW9uKGUub2Zmc2V0KSwgZS50ZXh0XG4gICAgICBcbiAgICBjbGllbnQub24gXCJ0ZXh0UmVtb3ZlXCIsIChlLCBzbmFwc2hvdCkgLT5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlY2VpdmVkIHRleHRJbnNlcnQgZXZlbnQgZm9yIGEgZmlsZSBub3QgYmVpbmcgdHJhY2tlZFwiKSB1bmxlc3MgYWNlU2Vzc2lvbiA9IGJ1ZmZlcnNbZS5pbmRleF1cbiAgICAgIGFjZVNlc3Npb24uZG9jLnJlbW92ZSBSYW5nZS5mcm9tUG9pbnRzKGFjZVNlc3Npb24uZG9jLmluZGV4VG9Qb3NpdGlvbihlLm9mZnNldCksIGFjZVNlc3Npb24uZG9jLmluZGV4VG9Qb3NpdGlvbihlLm9mZnNldCArIGUudGV4dC5sZW5ndGgpKVxuICAgIFxuICAgIHJlc2V0KGNsaWVudC5nZXRTbmFwc2hvdCgpKVxuICAgIGFjdGl2YXRlQnVmZmVyKGNsaWVudC5nZXRDdXJzb3JGaWxlSW5kZXgoKSlcbiAgICBtb3ZlQ3Vyc29yKGNsaWVudC5nZXRDdXJzb3JUZXh0T2Zmc2V0KCkpXG4gICAgXG4gICAgIyBSZXNpemUgdGhlIGFjZSBjb21wb25lbnQgd2hlbmV2ZXIgd2UgZ2V0IGEgcmVmbG93IGV2ZW50IGZyb20gYm9yZGVyLWxheW91dFxuICAgICRzY29wZS4kb24gXCJib3JkZXItbGF5b3V0LXJlZmxvd1wiLCAtPiBlZGl0b3IucmVzaXplKClcblxuICAgICR0aW1lb3V0IC0+XG4gICAgICBlZGl0b3IucmVzaXplKClcbiAgICAsIDEwMFxuXG5dIiwiZ2VuaWQgPSByZXF1aXJlKFwiZ2VuaWRcIilcbmRlYm91bmNlID0gcmVxdWlyZShcImxvZGFzaC5kZWJvdW5jZVwiKVxuXG5yZXF1aXJlIFwiLi4vLi4vdmVuZG9yL29wZXJhdGl2ZS5qc1wiXG5cbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy9zZXNzaW9uLmNvZmZlZVwiXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvdHlwZXMuY29mZmVlXCJcbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy91cmwuY29mZmVlXCJcbnJlcXVpcmUgXCIuLi9zZXJ2aWNlcy9zZXR0aW5ncy5jb2ZmZWVcIlxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL2Fubm90YXRpb25zLmNvZmZlZVwiXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvbGF5b3V0LmNvZmZlZVwiXG5cbm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwicGx1bmtlci5kaXJlY3RpdmUucHJldmlld2VyXCIsIFtcbiAgXCJwbHVua2VyLnNlcnZpY2Uuc2Vzc2lvblwiXG4gIFwicGx1bmtlci5zZXJ2aWNlLnVybFwiXG4gIFwicGx1bmtlci5zZXJ2aWNlLnNldHRpbmdzXCJcbiAgXCJwbHVua2VyLnNlcnZpY2UuYW5ub3RhdGlvbnNcIlxuICBcInBsdW5rZXIuc2VydmljZS5sYXlvdXRcIlxuXVxuXG5tb2R1bGUuZGlyZWN0aXZlIFwicHJldmlld2VyXCIsIFsgXCIkdGltZW91dFwiLCBcInNlc3Npb25cIiwgXCJ1cmxcIiwgXCJzZXR0aW5nc1wiLCBcImFubm90YXRpb25zXCIsIFwibGF5b3V0XCIsICgkdGltZW91dCwgc2Vzc2lvbiwgdXJsLCBzZXR0aW5ncywgYW5ub3RhdGlvbnMsIGxheW91dCkgLT5cbiAgcmVzdHJpY3Q6IFwiRVwiXG4gIHJlcGxhY2U6IHRydWVcbiAgc2NvcGU6XG4gICAgc2Vzc2lvbjogXCI9XCJcbiAgdGVtcGxhdGU6IFwiXCJcIlxuICAgIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicGx1bmtlci1wcmV2aWV3LWNvbnRhaW5lclwiIG5nLWNsYXNzPVwie21lc3NhZ2U6IG1lc3NhZ2V9XCI+XG4gICAgICAgIDxpZnJhbWUgaWQ9XCJwbHVua2VyUHJldmlld1RhcmdldFwiIG5hbWU9XCJwbHVua2VyUHJldmlld1RhcmdldFwiIHNyYz1cImFib3V0OmJsYW5rXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIGZyYW1lYm9yZGVyPVwiMFwiPjwvaWZyYW1lPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicGx1bmtlci1wcmV2aWV3LW1lc3NhZ2UgYWxlcnQgYWxlcnQtZGFuZ2VyXCIgbmctc2hvdz1cIm1lc3NhZ2VcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjbG9zZVwiIG5nLWNsaWNrPVwibWVzc2FnZT0nJ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L2J1dHRvbj5cbiAgICAgICAgPHNwYW4gbmctYmluZD1cIm1lc3NhZ2VcIj48L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgXCJcIlwiXG4gIGxpbms6ICgkc2NvcGUsICRlbCwgYXR0cnMpIC0+XG4gICAgJHNjb3BlLnByZXZpZXdVcmwgfHw9IFwiI3t1cmwucnVufS8je2dlbmlkKCl9L1wiXG4gICAgXG4gICAgaWZyYW1lRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsdW5rZXJQcmV2aWV3VGFyZ2V0XCIpXG4gICAgXG4gICAgY2xpZW50ID0gc2Vzc2lvbi5jcmVhdGVDbGllbnQoXCJwcmV2aWV3ZXJcIilcbiAgICBmaXJzdE9wZW4gPSB0cnVlXG4gICAgXG4gICAgcmVmcmVzaCA9IChzbmFwc2hvdCkgLT5cbiAgICAgIHJldHVybiBpZiBsYXlvdXQuY3VycmVudC5wcmV2aWV3LmNsb3NlZFxuICAgICAgXG4gICAgICBpZiBmaWxlbmFtZSA9IGFubm90YXRpb25zLmhhc0Vycm9yKClcbiAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBcIlByZXZpZXcgaGFzIG5vdCBiZWVuIHVwZGF0ZWQgZHVlIHRvIHN5bnRheCBlcnJvcnMgaW4gI3tmaWxlbmFtZX1cIlxuICAgICAgICByZXR1cm5cbiAgICAgIGVsc2VcbiAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBcIlwiXG4gICAgICBcbiAgICAgIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKVxuICAgICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbiAgICAgIGZvcm0uc2V0QXR0cmlidXRlIFwibWV0aG9kXCIsIFwicG9zdFwiXG4gICAgICBmb3JtLnNldEF0dHJpYnV0ZSBcImFjdGlvblwiLCAkc2NvcGUucHJldmlld1VybFxuICAgICAgZm9ybS5zZXRBdHRyaWJ1dGUgXCJ0YXJnZXRcIiwgXCJwbHVua2VyUHJldmlld1RhcmdldFwiXG4gICAgICBcbiAgICAgIGZvciBmaWxlIGluIHNuYXBzaG90LmZpbGVzXG4gICAgICAgIGZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpXG4gICAgICAgIGZpZWxkLnNldEF0dHJpYnV0ZSBcInR5cGVcIiwgXCJoaWRkZW5cIlxuICAgICAgICBmaWVsZC5zZXRBdHRyaWJ1dGUgXCJuYW1lXCIsIFwiZmlsZXNbI3tmaWxlLmZpbGVuYW1lfV1bY29udGVudF1cIlxuICAgICAgICBmaWVsZC5zZXRBdHRyaWJ1dGUgXCJ2YWx1ZVwiLCBmaWxlLmNvbnRlbnRcbiAgICAgICAgXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoZmllbGQpXG4gICAgICBcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSlcbiAgICAgIFxuICAgICAgZm9ybS5zdWJtaXQoKVxuICAgICAgXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZvcm0pXG4gICAgXG4gICAgYXBwbHlSZWZyZXNoID0gLT4gJHNjb3BlLiRhcHBseSAtPiByZWZyZXNoKGNsaWVudC5nZXRTbmFwc2hvdCgpKVxuICAgIGRlYm91bmNlZEFwcGx5UmVmcmVzaCA9IGRlYm91bmNlIGFwcGx5UmVmcmVzaCwgc2V0dGluZ3MucHJldmlld2VyLmRlbGF5XG4gICAgXG4gICAgJHNjb3BlLiR3YXRjaCAoIC0+IHNldHRpbmdzLnByZXZpZXdlci5kZWxheSksIChkZWxheSwgb2xkRGVsYXkpIC0+XG4gICAgICBpZiBkZWxheSAhPSBvbGREZWxheVxuICAgICAgICBkZWJvdW5jZWRBcHBseVJlZnJlc2ggPSBkZWJvdW5jZSBkZWJvdW5jZWRBcHBseVJlZnJlc2gsIGRlbGF5XG5cbiAgICAkc2NvcGUuJHdhdGNoICggLT4gbGF5b3V0LmN1cnJlbnQucHJldmlldy5jbG9zZWQpLCAoY2xvc2VkLCB3YXNDbG9zZWQpIC0+XG4gICAgICBpZiBjbG9zZWRcbiAgICAgICAgaWZyYW1lRWwuY29udGVudFdpbmRvdy5sb2NhdGlvbiA9IFwiYWJvdXQ6YmxhbmtcIlxuICAgICAgZWxzZSBpZiBmaXJzdE9wZW4gb3Igd2FzQ2xvc2VkXG4gICAgICAgIHJlZnJlc2goY2xpZW50LmdldFNuYXBzaG90KCkpXG4gICAgICBcbiAgICAgIGZpcnN0T3BlbiA9IGZhbHNlXG4gICAgXG4gICAgY2xpZW50Lm9uIFwicmVzZXRcIiwgZGVib3VuY2VkQXBwbHlSZWZyZXNoXG5cbiAgICBjbGllbnQub24gXCJmaWxlQ3JlYXRlXCIsIGRlYm91bmNlZEFwcGx5UmVmcmVzaFxuICAgIGNsaWVudC5vbiBcImZpbGVSZW5hbWVcIiwgZGVib3VuY2VkQXBwbHlSZWZyZXNoXG4gICAgY2xpZW50Lm9uIFwiZmlsZVJlbW92ZVwiLCBkZWJvdW5jZWRBcHBseVJlZnJlc2hcblxuICAgIGNsaWVudC5vbiBcInRleHRJbnNlcnRcIiwgZGVib3VuY2VkQXBwbHlSZWZyZXNoXG4gICAgY2xpZW50Lm9uIFwidGV4dFJlbW92ZVwiLCBkZWJvdW5jZWRBcHBseVJlZnJlc2hcbiAgICBcbiAgICAkc2NvcGUuJG9uIFwiJGRlc3Ryb3lcIiwgLT5cbiAgICAgIGNsaWVudC5vZmYgXCJyZXNldFwiLCBkZWJvdW5jZWRBcHBseVJlZnJlc2hcbiAgXG4gICAgICBjbGllbnQub2ZmIFwiZmlsZUNyZWF0ZVwiLCBkZWJvdW5jZWRBcHBseVJlZnJlc2hcbiAgICAgIGNsaWVudC5vZmYgXCJmaWxlUmVuYW1lXCIsIGRlYm91bmNlZEFwcGx5UmVmcmVzaFxuICAgICAgY2xpZW50Lm9mZiBcImZpbGVSZW1vdmVcIiwgZGVib3VuY2VkQXBwbHlSZWZyZXNoXG4gIFxuICAgICAgY2xpZW50Lm9mZiBcInRleHRJbnNlcnRcIiwgZGVib3VuY2VkQXBwbHlSZWZyZXNoXG4gICAgICBjbGllbnQub2ZmIFwidGV4dFJlbW92ZVwiLCBkZWJvdW5jZWRBcHBseVJlZnJlc2hcbl0iLCJyZXF1aXJlIFwiLi4vLi4vdmVuZG9yL2FuZ3VsYXItdWkvdWktYm9vdHN0cmFwXCJcblxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL25vdGlmaWVyLmNvZmZlZVwiXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvbGF5b3V0LmNvZmZlZVwiXG5yZXF1aXJlIFwiLi4vc2VydmljZXMvb2F1dGguY29mZmVlXCJcblxuXG5tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuZGlyZWN0aXZlLnRvb2xiYXJcIiwgW1xuICBcInVpLmJvb3RzdHJhcFwiXG4gIFxuICBcInBsdW5rZXIuc2VydmljZS5ub3RpZmllclwiXG4gIFwicGx1bmtlci5zZXJ2aWNlLmxheW91dFwiXG4gIFwicGx1bmtlci5zZXJ2aWNlLm9hdXRoXCJcbl1cblxubW9kdWxlLmRpcmVjdGl2ZSBcInBsdW5rZXJUb29sYmFyXCIsIFsgXCIkc3RhdGVcIiwgXCJzZXNzaW9uXCIsIFwibm90aWZpZXJcIiwgXCJsYXlvdXRcIiwgXCJvYXV0aFwiLCAoJHN0YXRlLCBzZXNzaW9uLCBub3RpZmllciwgbGF5b3V0LCBvYXV0aCkgLT5cbiAgcmVzdHJpY3Q6IFwiRVwiXG4gIHJlcGxhY2U6IHRydWVcbiAgc2NvcGU6IHRydWVcbiAgdGVtcGxhdGU6IFwiXCJcIlxuICAgIDxkaXYgY2xhc3M9XCJwbHVua2VyLWVkaXRvci10b29sYmFyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicHVsbC1sZWZ0XCI+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJzYXZlKClcIj5cbiAgICAgICAgICBTYXZlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXN1Y2Nlc3NcIiB1aS1zcmVmPVwiZWRpdG9yLmJsYW5rXCI+XG4gICAgICAgICAgTmV3XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICBcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWluZm9cIiBuZy1jbGFzcz1cInthY3RpdmU6ICFsYXlvdXQuY3VycmVudC5wcmV2aWV3LmNsb3NlZH1cIiBuZy1jbGljaz1cImxheW91dC5jdXJyZW50LnByZXZpZXcuY2xvc2VkID0gISEhbGF5b3V0LmN1cnJlbnQucHJldmlldy5jbG9zZWRcIj5cbiAgICAgICAgICBQcmV2aWV3XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicHVsbC1yaWdodFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1zbVwiIG5nLWNvbnRyb2xsZXI9XCJMYXlvdXRDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWRlZmF1bHRcIiBuZy1jbGljaz1cImxheW91dC5zZXRMYXlvdXQoJGluZGV4KVwiIG5nLXJlcGVhdD1cInByZXNldCBpbiBsYXlvdXQucHJlc2V0c1wiIG5nLWJpbmQ9XCIkaW5kZXhcIiB0b29sdGlwPVwie3twcmVzZXQubmFtZX19XCIgdG9vbHRpcC1hcHBlbmQtdG8tYm9keT1cInRydWVcIiB0b29sdGlwLXBsYWNlbWVudD1cImJvdHRvbVwiPjwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInB1bGwtcmlnaHRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tc21cIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tZGVmYXVsdFwiIG5nLWNsaWNrPVwibG9naW4oKVwiIHRvb2x0aXA9XCJMb2dpbiB1c2luZyBHaXRodWJcIiB0b29sdGlwLWFwcGVuZC10by1ib2R5PVwidHJ1ZVwiIHRvb2x0aXAtcGxhY2VtZW50PVwiYm90dG9tXCI+TG9naW48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgXCJcIlwiXG4gIFxuICBsaW5rOiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSAtPlxuICAgIGNsaWVudCA9IHNlc3Npb24uY3JlYXRlQ2xpZW50KFwiZGlyZWN0aXZlLnRvb2xiYXJcIilcbiAgICBcbiAgICAkc2NvcGUuc2F2ZSA9IC0+XG4gICAgICBub3RpZmllci53YXJuIFwiU2F2ZSBub3QgaW1wbGVtZW50ZWQuLi4geWV0XCJcbiAgICBcbiAgICAkc2NvcGUubG9naW4gPSAtPiBvYXV0aC5hdXRoZW50aWNhdGUoKVxuXSIsIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwicGx1bmtlci5zZXJ2aWNlLmFubm90YXRpb25zXCIsIFtdXG5cbm1vZHVsZS5mYWN0b3J5IFwiYW5ub3RhdGlvbnNcIiwgLT5cbiAgYW5ub3RhdGlvbnM6IHt9XG4gIFxuICB1cGRhdGU6IChmaWxlbmFtZSwgYW5ub3RhdGlvbnMgPSBbXSkgLT5cbiAgICBhbmd1bGFyLmNvcHkgYW5ub3RhdGlvbnMsIChAYW5ub3RhdGlvbnNbZmlsZW5hbWVdIHx8PSBbXSlcbiAgXG4gIHJlbmFtZTogKG9sZF9maWxlbmFtZSwgbmV3X2ZpbGVuYW1lKSAtPlxuICAgIEBhbm5vdGF0aW9uc1tuZXdfZmlsZW5hbWVdID0gQGFubm90YXRpb25zW29sZF9maWxlbmFtZV0gb3IgW11cbiAgICBkZWxldGUgQGFubm90YXRpb25zW29sZF9maWxlbmFtZV1cbiAgXG4gIHJlbW92ZTogKGZpbGVuYW1lKSAtPlxuICAgIGRlbGV0ZSBAYW5ub3RhdGlvbnNbZmlsZW5hbWVdXG4gICAgXG4gIGhhc0Vycm9yOiAtPlxuICAgIGZvciBmaWxlbmFtZSwgYW5ub3RhdGlvbnMgb2YgQGFubm90YXRpb25zXG4gICAgICBcbiAgICAgIHJldHVybiBmaWxlbmFtZSBmb3IgYW5ub3RhdGlvbiBpbiBhbm5vdGF0aW9ucyB3aGVuIGFubm90YXRpb24udHlwZSBpcyBcImVycm9yXCJcbiAgICBcbiAgICByZXR1cm4gZmFsc2UiLCJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuc2VydmljZS5iYXNlUGx1bmtcIiwgW11cblxubW9kdWxlLnZhbHVlIFwiYmFzZVBsdW5rXCIsXG4gIGZpbGVzOiBbXG4gICAgZmlsZW5hbWU6IFwiaW5kZXguaHRtbFwiXG4gICAgY29udGVudDogXCJcIlwiXG4gICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgIDxodG1sIG5nLWFwcD1cInBsdW5rZXJcIiA+XG4gICAgICA8aGVhZD5cbiAgICAgICAgPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XG4gICAgICAgIDx0aXRsZT5Bbmd1bGFySlMgUGx1bmtlcjwvdGl0bGU+XG4gICAgICAgIDxzY3JpcHQ+ZG9jdW1lbnQud3JpdGUoJzxiYXNlIGhyZWY9XCInICsgZG9jdW1lbnQubG9jYXRpb24gKyAnXCIgLz4nKTs8L3NjcmlwdD5cbiAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgPHNjcmlwdCBkYXRhLXJlcXVpcmU9XCJhbmd1bGFyLmpzQDEuMS54XCIgc3JjPVwiaHR0cDovL2NvZGUuYW5ndWxhcmpzLm9yZy8xLjEuNC9hbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHQgc3JjPVwiYXBwLmpzXCI+PC9zY3JpcHQ+XG4gICAgICA8L2hlYWQ+XG4gICAgICA8Ym9keSBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmxcIj5cbiAgICAgICAgPHA+SGVsbG8ge3tuYW1lfX0hPC9wPlxuICAgICAgPC9ib2R5PlxuICAgICAgPC9odG1sPiBcbiAgICBcIlwiXCJcbiAgLFxuICAgIGZpbGVuYW1lOiBcImFwcC5qc1wiXG4gICAgY29udGVudDogXCJcIlwiXG4gICAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ3BsdW5rZXInLCBbXSk7XG4gICAgICAgXG4gICAgICBhcHAuY29udHJvbGxlcignTWFpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgfSk7XG4gICAgXCJcIlwiXG4gICxcbiAgICBmaWxlbmFtZTogXCJzdHlsZS5jc3NcIlxuICAgIGNvbnRlbnQ6IFwiXCJcIlxuICAgICAgcCB7XG4gICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICB9XG4gICAgXCJcIlwiXG4gIF0iLCJicm93c2VyY2hhbm5lbCA9IHJlcXVpcmUgXCIuLi8uLi92ZW5kb3Ivc2hhcmUvYmNzb2NrZXQtdW5jb21wcmVzc2VkLmpzXCJcbnJlcXVpcmUgXCIuLi8uLi92ZW5kb3Ivc2hhcmUvc2hhcmUudW5jb21wcmVzc2VkLmpzXCJcblxucmVxdWlyZSBcIi4uL3NlcnZpY2VzL3Nlc3Npb24uY29mZmVlXCJcblxuXG5tb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuc2VydmljZS5jb2xsYWJcIiwgW1xuICBcInBsdW5rZXIuc2VydmljZS5zZXNzaW9uXCJcbl1cblxubW9kdWxlLmZhY3RvcnkgXCJjb2xsYWJcIiwgWyBcIiRyb290U2NvcGVcIiwgXCIkcVwiLCBcInNlc3Npb25cIiwgKCRyb290U2NvcGUsICRxLCBzZXNzaW9uKSAtPlxuICBjb25zb2xlLmxvZyBcIkJyb3dzZXJjaGFubmVsXCIsIGJyb3dzZXJjaGFubmVsXG4gIFxuICBzb2NrZXQgPSBicm93c2VyY2hhbm5lbC5CQ1NvY2tldChudWxsLCB7cmVjb25uZWN0OiB0cnVlfSlcbiAgc2hhcmUgPSBuZXcgd2luZG93LnNoYXJlanMuQ29ubmVjdGlvbihzb2NrZXQpXG4gIGNsaWVudCA9IHNlc3Npb24uY3JlYXRlQ2xpZW50KFwic2hhcmVcIilcblxuICBjb25uZWN0OiAoc2Vzc2lvbklkKSAtPlxuICAgIGNvbnNvbGUubG9nIFwiU2hhcmVcIiwgc2hhcmVcbiAgICBcbiAgICBkZmQgPSAkcS5kZWZlcigpXG4gICAgZG9jID0gc2hhcmUuZ2V0KFwianNvbl90ZXN0XCIsIHNlc3Npb25JZClcbiAgICBcbiAgICBkb2Muc3Vic2NyaWJlKClcbiAgICBcbiAgICBkb2Mud2hlblJlYWR5IChhcmdzLi4uKSAtPlxuICAgICAgY29uc29sZS5sb2cgXCJEb2N1bWVudCByZWFkeVwiLCBhcmd1bWVudHMuLi5cbiAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+IFxuICAgICAgICB1bmxlc3MgZG9jLnR5cGVcbiAgICAgICAgICBjb25zb2xlLmxvZyBcIkRvY3VtZW50IGRvZXMgbm90IGV4aXN0LCBjcmVhdGluZ1wiLCBjbGllbnQuZ2V0U25hcHNob3QoKVxuICAgICAgICAgIGRvYy5jcmVhdGUgXCJqc29uMFwiLCBzbmFwc2hvdCA9IGNsaWVudC5nZXRTbmFwc2hvdCgpLCAtPlxuICAgICAgICAgICAgZGZkLnJlc29sdmUgc25hcHNob3RcbiAgICAgICAgZWxzZSB1bmxlc3MgZG9jLnNuYXBzaG90XG4gICAgICAgICAgb3AgPVxuICAgICAgICAgICAgcDogW11cbiAgICAgICAgICAgIG9kOiBkb2Muc25hcHNob3RcbiAgICAgICAgICAgIG9pOiBjbGllbnQuZ2V0U25hcHNob3QoKVxuICBcbiAgICAgICAgICBjb25zb2xlLmxvZyBcIkRvY3VtZW50IGV4aXN0cyBidXQgaXMgZmFsc2UsIHJlc2V0dGluZ1wiLCBkb2MsIG9wXG4gICAgICAgICAgXG4gICAgICAgICAgZG9jLnN1Ym1pdE9wIG9wLCAtPiBkZmQucmVzb2x2ZSBkb2Muc25hcHNob3RcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGNvbnNvbGUubG9nIFwiR290IHNuYXBzaG90XCIsIGRvYywgZG9jLmdldFNuYXBzaG90KClcbiAgICAgICAgICBcbiAgICAgICAgICBjbGllbnQucmVzZXQgc25hcHNob3QgPSBkb2MuZ2V0U25hcHNob3QoKVxuICAgICAgICAgIGRmZC5yZXNvbHZlIHNuYXBzaG90XG4gICAgICAgICAgXG4gICAgICAgIGNsaWVudC5vbiBcInJlbW90ZU9wXCIsIChlKSAtPlxuICAgICAgICAgIFxuICAgICAgICAgIGRvYy5zdWJtaXRPcCBlLm9wXG4gICAgICAgIFxuICAgIGRvYy5vbiBcIm9wXCIsIChvcCkgLT5cbiAgICAgIHVubGVzcyAkcm9vdFNjb3BlLiQkcGhhc2UgdGhlbiAkcm9vdFNjb3BlLiRhcHBseSAtPlxuICAgICAgICBjb25zb2xlLmxvZyBcIlJlbW90ZW9wXCIsIGFyZ3VtZW50cy4uLlxuICAgICAgICBjbGllbnQuX2FwcGx5T3BzKG9wKVxuICAgIFxuICAgIGRmZC5wcm9taXNlXG4gICAgXG5cbl0iLCJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuc2VydmljZS5kaXNhYmxlclwiLCBbXVxuXG5tb2R1bGUuZGlyZWN0aXZlIFwicGx1bmtlckRpc2FibGVyXCIsIFtcImRpc2FibGVyXCIsIChkaXNhYmxlcikgLT5cbiAgbGluazogKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykgLT5cbiAgICBtYXNrID0gYW5ndWxhci5lbGVtZW50IFwiXCJcIlxuICAgICAgPGRpdiBjbGFzcz1cInBsdW5rZXItZGlzYWJsZXJcIj48L2Rpdj5cbiAgICBcIlwiXCJcblxuICAgICRzY29wZS4kd2F0Y2ggKCAtPiBkaXNhYmxlci5zdGF0ZVskYXR0cnMucGx1bmtlckRpc2FibGVyXSksIChzdGF0ZSwgcHJldikgLT5cbiAgICAgIGlmIHN0YXRlIHRoZW4gJGVsZW1lbnQuYXBwZW5kKG1hc2spXG4gICAgICBlbHNlIG1hc2sucmVtb3ZlKClcbl1cblxubW9kdWxlLnNlcnZpY2UgXCJkaXNhYmxlclwiLCBbIFwiJHFcIiwgKCRxKSAtPlxuICBxdWV1ZXMgPSB7fVxuICBcbiAgQHN0YXRlID0ge31cbiAgQGVucXVldWUgPSAobmFtZSwgdmFsdWVPclByb21pc2UpIC0+XG4gICAgZGlzYWJsZXIgPSBAXG4gICAgXG4gICAgZGlzYWJsZXIuc3RhdGVbbmFtZV0gPSB0cnVlXG4gICAgJHEud2hlbih2YWx1ZU9yUHJvbWlzZSkuZmluYWxseSAtPlxuICAgICAgZGlzYWJsZXIuc3RhdGVbbmFtZV0gPSBmYWxzZVxuXSIsImRvbWluYXRyaXggPSByZXF1aXJlIFwiLi4vLi4vdmVuZG9yL2RvbWluYXRyaXgvZG9taW5hdHJpeFwiXG5cblxubW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLnNlcnZpY2UuaHRtbEZpbGVcIiwgW1xuXVxuXG5tb2R1bGUuZmFjdG9yeSBcImh0bWxGaWxlXCIsIFsgXCIkcVwiLCAoJHEpIC0+XG4gIGNsYXNzIEh0bWxGaWxlXG4gICAgY29uc3RydWN0b3I6IChAbWFya3VwKSAtPlxuICAgICAgQGRvYyA9IHdpbmRvdy5kb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIilcbiAgICAgIEBkb2Mub3BlbigpXG4gICAgICBAZG9jLndyaXRlKEBtYXJrdXApXG4gICAgXG4gICAgdG9TdHJpbmc6IC0+IGRvbWluYXRyaXguZG9tVG9IdG1sKEBkb2MpXG4gIFxuICBwYXJzZTogKG1hcmt1cCkgLT4gbmV3IEh0bWxGaWxlKG1hcmt1cClcbiAgdXBkYXRlOiAobWFya3VwKSAtPlxuICAgIGRmZCA9ICRxLmRlZmVyKClcbiAgICBcbiAgICBkZmQucmVzb2x2ZShAcGFyc2UobWFya3VwKS50b1N0cmluZygpKVxuICAgIFxuICAgIGRmZC5wcm9taXNlXG5dIiwibW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLnNlcnZpY2UubGF5b3V0XCIsIFtcbl1cblxubW9kdWxlLmZhY3RvcnkgXCJsYXlvdXRcIiwgW1wiJHJvb3RTY29wZVwiLCAoJHJvb3RTY29wZSkgLT5cbiAgcHJlc2V0cyA9IFtcbiAgICBuYW1lOiBcIlByZXZpZXcgb24gdGhlIHJpZ2h0XCJcbiAgICBsYXlvdXQ6XG4gICAgICB0b29sYmFyOlxuICAgICAgICBhbmNob3I6IFwibm9ydGhcIlxuICAgICAgICBzaXplOiBcIjQxcHhcIlxuICAgICAgICBvcmRlcjogOVxuICAgICAgcHJldmlldzpcbiAgICAgICAgYW5jaG9yOiBcImVhc3RcIlxuICAgICAgICBvcmRlcjogMFxuICAgICAgICBzaXplOiBcIjUwJiAtIDRweFwiXG4gICAgICAgIGhhbmRsZTogNFxuICAgICAgdGVtcGxhdGVzOlxuICAgICAgICBhbmNob3I6IFwid2VzdFwiXG4gICAgICAgIG9yZGVyOiAyXG4gICAgICAgIHNpemU6IFwiMzAwcHhcIlxuICAsXG4gICAgbmFtZTogXCJQcmV2aWV3IGF0IHRoZSBib3R0b21cIlxuICAgIGxheW91dDpcbiAgICAgIHRvb2xiYXI6XG4gICAgICAgIGFuY2hvcjogXCJub3J0aFwiXG4gICAgICAgIHNpemU6IFwiNDFweFwiXG4gICAgICAgIG9yZGVyOiA5XG4gICAgICBwcmV2aWV3OlxuICAgICAgICBhbmNob3I6IFwic291dGhcIlxuICAgICAgICBvcmRlcjogMlxuICAgICAgICBzaXplOiBcIjQwJSAtIDRweFwiXG4gICAgICAgIGhhbmRsZTogNFxuICAgICAgdGVtcGxhdGVzOlxuICAgICAgICBhbmNob3I6IFwid2VzdFwiXG4gICAgICAgIG9yZGVyOiAyXG4gICAgICAgIHNpemU6IFwiMzAwcHhcIlxuICBdXG4gIFxuICBzZXJ2aWNlID1cbiAgICBjdXJyZW50OiB7fVxuICAgIHByZXNldHM6IHByZXNldHNcbiAgICBpc09wZW46IChwYW5lSWQpIC0+IEBjdXJyZW50Py5sYXlvdXQ/W3BhbmVJZF0ub3BlblxuICAgIHRvZ2dsZTogKHBhbmVJZCkgLT4gQGN1cnJlbnQ/LmxheW91dD9bcGFuZUlkXS5vcGVuID0gIUBjdXJyZW50LmxheW91dFtwYW5lSWRdLm9wZW5cbiAgICAgIFxuICAgIHNldExheW91dDogKGlkeCkgLT5cbiAgICAgIGlmIHByZXNldCA9IHByZXNldHNbaWR4XVxuICAgICAgICBAY3VycmVudFtpdGVtXSA9IGFuZ3VsYXIuZXh0ZW5kKEBjdXJyZW50W2l0ZW1dIG9yIHt9LCBjb25maWcpIGZvciBpdGVtLCBjb25maWcgb2YgcHJlc2V0LmxheW91dFxuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QgXCJyZWZsb3dcIlxuICAgICAgQGN1cnJlbnRcbiAgXG4gIHNlcnZpY2Uuc2V0TGF5b3V0KDApICMgRGVmYXVsdFxuXG4gIHNlcnZpY2Vcbl0iLCJyZXF1aXJlIFwiLi4vLi4vdmVuZG9yL2FuZ3VsYXItZ3Jvd2wvYW5ndWxhci1ncm93bFwiXG5cblxubW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLnNlcnZpY2Uubm90aWZpZXJcIiwgW1xuICBcImFuZ3VsYXItZ3Jvd2xcIlxuXVxuXG5tb2R1bGUuY29uZmlnIFtcImdyb3dsUHJvdmlkZXJcIiwgKGdyb3dsUHJvdmlkZXIpIC0+XG4gICAgZ3Jvd2xQcm92aWRlci5nbG9iYWxUaW1lVG9MaXZlKDMwMDApXG5dXG5cbm1vZHVsZS5mYWN0b3J5IFwibm90aWZpZXJcIiwgW1wiZ3Jvd2xcIiwgKGdyb3dsKSAtPlxuICBlcnJvcjogKG1lc3NhZ2UpIC0+XG4gICAgY29uc29sZS5sb2cgXCJbRVJSXVwiLCBhcmd1bWVudHMuLi5cbiAgICBncm93bC5hZGRFcnJvck1lc3NhZ2UgbWVzc2FnZVxuICB3YXJuOiAobWVzc2FnZSkgLT5cbiAgICBjb25zb2xlLmxvZyBcIltXQVJOXVwiLCBhcmd1bWVudHMuLi5cbiAgICBncm93bC5hZGRXYXJuTWVzc2FnZSBtZXNzYWdlXG4gIHN1Y2Nlc3M6IChtZXNzYWdlKSAtPlxuICAgIGNvbnNvbGUubG9nIFwiW09LXVwiLCBhcmd1bWVudHMuLi5cbiAgICBncm93bC5hZGRTdWNjZXNzTWVzc2FnZSBtZXNzYWdlXG5dIiwibW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLnNlcnZpY2Uub2F1dGhcIiwgW1xuXVxuXG5tb2R1bGUuZmFjdG9yeSBcIm9hdXRoXCIsIFsgXCIkd2luZG93XCIsIFwiJHFcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiwgKCR3aW5kb3csICRxLCAkcm9vdFNjb3BlLCAkdGltZW91dCkgLT5cbiAgb2F1dGhEZWZlcnJlZCA9IG51bGxcbiAgXG4gIHBvc3RNZXNzYWdlSGFuZGxlciA9IChlKSAtPlxuICAgIGNvbnNvbGUubG9nIFwiR290IG1lc3NhZ2VcIiwgZVxuICAgIGlmIG9hdXRoRGVmZXJyZWRcbiAgICAgIHRyeVxuICAgICAgICBvYXV0aERlZmVycmVkLnJlc29sdmUoSlNPTi5wYXJzZShlLmRhdGEpKVxuICAgICAgY2F0Y2hcbiAgICAgICAgYW5ndWxhci5ub29wKClcbiAgICAgICAgXG4gIFxuICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgXCJtZXNzYWdlXCIsIHBvc3RNZXNzYWdlSGFuZGxlclxuICBcbiAgYXV0aGVudGljYXRlOiAtPlxuICAgIG9hdXRoID0gQFxuICAgIG9hdXRoRGVmZXJyZWQgPSAkcS5kZWZlcigpXG4gICAgcmVzb2x2ZWQgPSBmYWxzZVxuICAgIHNjcmVlbkhlaWdodCA9IHNjcmVlbi5oZWlnaHRcbiAgICB3aWR0aCA9IDY0MFxuICAgIGhlaWdodCA9IDQ4MFxuICAgIGxlZnQgPSBNYXRoLnJvdW5kKChzY3JlZW4ud2lkdGggLyAyKSAtICh3aWR0aCAvIDIpKVxuICAgIHRvcCA9IDBcbiAgICB0b3AgPSBNYXRoLnJvdW5kKChzY3JlZW5IZWlnaHQgLyAyKSAtIChoZWlnaHQgLyAyKSkgaWYgKHNjcmVlbkhlaWdodCA+IGhlaWdodClcbiAgICBcbiAgICBhdXRoV2luZG93ID0gd2luZG93Lm9wZW4gXCIvYXV0aC9naXRodWJcIiwgXCJwbHVua2VyLW9hdXRoLXdpbmRvd1wiLCBcIlwiXCJcbiAgICAgIGxlZnQ9I3tsZWZ0fSx0b3A9I3t0b3B9LHdpZHRoPSN7d2lkdGh9LGhlaWdodD0je2hlaWdodH0scGVyc29uYWxiYXI9MCx0b29sYmFyPTAsc2Nyb2xsYmFycz0xLHJlc2l6YWJsZT0xXG4gICAgXCJcIlwiXG4gICAgXG4gICAgYXV0aFdpbmRvdy5mb2N1cygpXG4gICAgXG4gICAgY2FuY2VsID0gKHJlYXNvbikgLT5cbiAgICAgIC0+XG4gICAgICAgIG9hdXRoRGVmZXJyZWQucmVqZWN0KHJlYXNvbilcbiAgICAgICAgb2F1dGhEZWZlcnJlZCA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpXG4gICAgICAgIFxuICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dClcbiAgICAgICAgXG4gICAgICAgIG51bGxcbiAgICBcbiAgICAjIFNldCBhIHRpbWVvdXQgb24gbG9naW4gYXR0ZW1wdHNcbiAgICB0aW1lb3V0ID0gJHRpbWVvdXQgY2FuY2VsKFwiTG9naW4gdGltZWQgb3V0XCIpLCAxMDAwICogNjAgKiAyICMgMiBtaW51dGUgdGltZW91dFxuICAgIFxuICAgICMgU2V0IGEgd2F0Y2hlciB0byBzZWUgaWYgdGhlIHdpbmRvdyBjbG9zZWQgd2l0aG91dCBsb2dnaW5nIGluXG4gICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCAtPlxuICAgICAgaWYgIWF1dGhXaW5kb3cgb3IgYXV0aFdpbmRvdy5jbG9zZWQgIT0gZmFsc2VcbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkgY2FuY2VsKFwiQXV0aCB3aW5kb3cgY2xvc2VkIHdpdGhvdHUgbG9nZ2luZyBpblwiKVxuICAgICwgMjAwXG4gICAgXG4gICAgb2F1dGhEZWZlcnJlZC5wcm9taXNlLnRoZW4gKGpzb24pIC0+XG4gICAgICBjb25zb2xlLmxvZyBcIkdvdCBPQXV0aCBkYXRhXCIsIGpzb25cbl0iLCJyZXF1aXJlIFwiLi4vLi4vdmVuZG9yL3NoYXJlL3NoYXJlLnVuY29tcHJlc3NlZC5qc1wiXG5cblxubW9kdWxlID0gYW5ndWxhci5tb2R1bGUgXCJwbHVua2VyLnNlcnZpY2Uuc2Vzc2lvblwiLCBbXG5dXG5cbm1vZHVsZS5zZXJ2aWNlIFwic2Vzc2lvblwiLCBjbGFzcyBTZXNzaW9uXG4gICMgU2Vzc2lvbkNsaWVudCBpcyB0aGUgaW50ZXJmYWNlIHRocm91Z2gtd2hpY2ggc3Vic2NyaWJlcnMgY2FuIGlzc3VlIG9wZXJhdGlvbnMgb24gdGhlIHNlc3Npb25cbiAgY2xhc3MgU2Vzc2lvbkNsaWVudFxuICAgIGNvbnN0cnVjdG9yOiAoQG5hbWUsIEBzZXNzaW9uKSAtPlxuICAgICAgQGxpc3RlbmVycyA9IHt9XG4gICAgICBcbiAgICBvbjogKGV2ZW50TmFtZSwgbGlzdGVuZXIpIC0+IChAbGlzdGVuZXJzW2V2ZW50TmFtZV0gfHw9IFtdKS5wdXNoKGxpc3RlbmVyKVxuICAgIG9mZjogKGV2ZW50TmFtZSwgbGlzdGVuZXIpIC0+IEBsaXN0ZW5lcnNbZXZlbnROYW1lXS5zcGxpY2UoaWR4LCAxKSB1bmxlc3MgIUBsaXN0ZW5lcnNbZXZlbnROYW1lXSBvciAwID4gKGlkeCA9IEBsaXN0ZW5lcnNbZXZlbnROYW1lXS5pbmRleE9mKGxpc3RlbmVyKSlcbiAgICBcbiAgICBfYXBwbHlPcDogKG9wKSAtPiBAX2FwcGx5T3BzIFtvcF1cbiAgICBfYXBwbHlPcHM6IChvcHMpIC0+IEBzZXNzaW9uLmFwcGx5T3BzIEBuYW1lLCBvcHNcbiAgICBcbiAgICBfaGFuZGxlT3A6IChzb3VyY2VDbGllbnROYW1lLCBvcCwgc25hcHNob3QpIC0+XG4gICAgICBpZiBvcC5wLmxlbmd0aCBpcyAwXG4gICAgICAgIGNvbnNvbGUubG9nIFwiUmVzZXRcIlxuICAgICAgICBAX2VtaXQgXCJyZXNldFwiLFxuICAgICAgICAgIHNuYXBzaG90OiBvcC5vaVxuICAgICAgICAgIG9sZF9zbmFwc2hvdDogb3Aub2RcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIG9wLnBbMF1cbiAgICAgICAgICB3aGVuIFwiY3Vyc29yXCJcbiAgICAgICAgICAgIGlmIG9wLnBbMV0gaXMgXCJmaWxlSW5kZXhcIiB0aGVuIEBfZW1pdCBcImN1cnNvclNldEZpbGVcIixcbiAgICAgICAgICAgICAgZmlsZW5hbWU6IHNuYXBzaG90LmZpbGVzW29wLm9pXS5maWxlbmFtZVxuICAgICAgICAgICAgICBwcmV2X2ZpbGVuYW1lOiBzbmFwc2hvdC5maWxlc1tvcC5vZF0uZmlsZW5hbWVcbiAgICAgICAgICAgICAgaW5kZXg6IG9wLm9pXG4gICAgICAgICAgICAgIHByZXZfaW5kZXg6IG9wLm9kXG4gICAgICAgICAgICBlbHNlIGlmIG9wLnBbMV0gaXMgXCJ0ZXh0T2Zmc2V0XCIgdGhlbiBAX2VtaXQgXCJjdXJzb3JTZXRPZmZzZXRcIixcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvcC5vaVxuICAgICAgICAgICAgICBwcmV2X29mZnNldDogb3Aub2RcbiAgICAgICAgICB3aGVuIFwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgIyBBc3N1bWUgc2kvc2Qgb3BzIGF0IG9mZnNldCA9IDBcbiAgICAgICAgICAgIHJldHVybiB1bmxlc3Mgb3AucFsxXSBpcyAwXG4gICAgICAgICAgICByZXR1cm4gdW5sZXNzIG9wLnNpIGFuZCBvcC5zZFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAX2VtaXQgXCJzZXREZXNjcmlwdGlvblwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb3Auc2lcbiAgICAgICAgICAgICAgb2xkX2Rlc2NyaXB0aW9uOiBvcC5zZFxuICAgICAgICAgIHdoZW4gXCJ0YWdzXCJcbiAgICAgICAgICAgIHJldHVybiB1bmxlc3Mgb3AubGkgb3Igb3AubGRcbiAgICAgICAgICAgIHJldHVybiBpZiBvcC5wLmxlbmd0aCAhPSAyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIG9wLmxpIHRoZW4gQF9lbWl0IFwidGFnQWRkXCIsXG4gICAgICAgICAgICAgIHRhZ05hbWU6IG9wLmxpXG4gICAgICAgICAgICAgIGluZGV4OiBvcC5wWzFdXG4gICAgICAgICAgICBlbHNlIGlmIG9wLmxkIHRoZW4gQF9lbWl0IFwidGFnUmVtb3ZlXCIsXG4gICAgICAgICAgICAgIHRhZ05hbWU6IG9wLmxkXG4gICAgICAgICAgICAgIGluZGV4OiBvcC5wWzJdXG4gICAgICAgICAgd2hlbiBcImZpbGVzXCJcbiAgICAgICAgICAgICMgVGhpcyBpcyBhIGZpbGUgY3JlYXRpb24vcmVtb3ZhbFxuICAgICAgICAgICAgaWYgb3AucC5sZW5ndGggaXMgMlxuICAgICAgICAgICAgICBpZiBvcC5saSB0aGVuIEBfZW1pdCBcImZpbGVDcmVhdGVcIixcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogb3AubGkuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICBpbmRleDogb3AucFsxXVxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG9wLmxpLmNvbnRlbnRcbiAgICAgICAgICAgICAgZWxzZSBpZiBvcC5sZCB0aGVuIEBfZW1pdCBcImZpbGVSZW1vdmVcIixcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogb3AubGQuZmlsZW5hbWVcbiAgICAgICAgICAgICAgICBpbmRleDogb3AucFsxXVxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG9wLmxkLmNvbnRlbnRcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWxzZSBpZiBvcC5wWzJdIGlzIFwiZmlsZW5hbWVcIlxuICAgICAgICAgICAgICBAX2VtaXQgXCJmaWxlUmVuYW1lXCIsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IG9wLm9pXG4gICAgICAgICAgICAgICAgaW5kZXg6IG9wLnBbMV1cbiAgICAgICAgICAgICAgICBvbGRfZmlsZW5hbWU6IG9wLm9kXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNlIGlmIG9wLnBbMl0gaXMgXCJjb250ZW50XCJcbiAgICAgICAgICAgICAgZmlsZW5hbWUgPSBzbmFwc2hvdC5maWxlc1tvcC5wWzFdXS5maWxlbmFtZVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgb3Auc2kgdGhlbiBAX2VtaXQgXCJ0ZXh0SW5zZXJ0XCIsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGZpbGVuYW1lXG4gICAgICAgICAgICAgICAgaW5kZXg6IG9wLnBbMV1cbiAgICAgICAgICAgICAgICB0ZXh0OiBvcC5zaVxuICAgICAgICAgICAgICAgIG9mZnNldDogb3AucFszXVxuICAgICAgICAgICAgICBpZiBvcC5zZCB0aGVuIEBfZW1pdCBcInRleHRSZW1vdmVcIixcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWVcbiAgICAgICAgICAgICAgICBpbmRleDogb3AucFsxXVxuICAgICAgICAgICAgICAgIHRleHQ6IG9wLnNkXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBvcC5wWzNdXG4gICAgICAgICAgICAgICAgXG4gICAgICBAX2VtaXQgXCJyZW1vdGVPcFwiLCB7b3AsIHNuYXBzaG90fVxuXG4gICAgX2VtaXQ6IChldmVudE5hbWUsIGUpIC0+XG4gICAgICBzbmFwc2hvdCA9IEBnZXRTbmFwc2hvdCgpXG4gICAgICBlLmV2ZW50TmFtZSA9IGV2ZW50TmFtZVxuICAgICAgXG4gICAgICBsaXN0ZW5lcihlLCBzbmFwc2hvdCkgZm9yIGxpc3RlbmVyIGluIEBsaXN0ZW5lcnNbZXZlbnROYW1lXSBpZiBAbGlzdGVuZXJzW2V2ZW50TmFtZV1cbiAgICBcbiAgICBnZXRDdXJzb3JGaWxlSW5kZXg6IC0+IEBzZXNzaW9uLnNuYXBzaG90LmN1cnNvci5maWxlSW5kZXhcbiAgICBcbiAgICBnZXRDdXJzb3JUZXh0T2Zmc2V0OiAtPiBAc2Vzc2lvbi5zbmFwc2hvdC5jdXJzb3IudGV4dE9mZnNldFxuICAgIFxuICAgIGdldERlc2NyaXB0aW9uOiAtPiBAc2Vzc2lvbi5zbmFwc2hvdC5kZXNjcmlwdGlvblxuICAgIFxuICAgICMgUmV0dXJuIHZhbHVlIGlzIGp1c3QgbGlrZSBpbmRleE9mICg+PSAwIG1lYW5zIGZvdW5kLCAtMSBtZWFucyBub3QgZm91bmQpXG4gICAgZ2V0RmlsZUluZGV4OiAoZmlsZW5hbWUpIC0+XG4gICAgICByZXR1cm4gaWR4IGZvciBmaWxlLCBpZHggaW4gQHNlc3Npb24uc25hcHNob3QuZmlsZXMgd2hlbiBmaWxlLmZpbGVuYW1lIGlzIGZpbGVuYW1lXG4gICAgICByZXR1cm4gLTFcbiAgICBcbiAgICBnZXRGaWxlQnlJbmRleDogKGlkeCkgLT5cbiAgICAgIGlmIGFuZ3VsYXIuaXNTdHJpbmcoaWR4KSB0aGVuIGlkeCA9IEBnZXRGaWxlSW5kZXgoaWR4KVxuICAgICAgXG4gICAgICBAc2Vzc2lvbi5zbmFwc2hvdC5maWxlc1tpZHhdXG4gICAgXG4gICAgZ2V0RmlsZTogKGZpbGVuYW1lKSAtPlxuICAgICAgcmV0dXJuIGZpbGUgZm9yIGZpbGUgaW4gQHNlc3Npb24uc25hcHNob3QuZmlsZXMgd2hlbiBmaWxlLmZpbGVuYW1lIGlzIGZpbGVuYW1lXG4gICAgXG4gICAgZ2V0TnVtRmlsZXM6IC0+IHJldHVybiBAc2Vzc2lvbi5zbmFwc2hvdC5maWxlcz8ubGVuZ3RoIG9yIDBcbiAgICBcbiAgICBnZXROdW1UYWdzOiAtPiByZXR1cm4gQHNlc3Npb24uc25hcHNob3QudGFncz8ubGVuZ3RoIG9yIDBcbiAgICBcbiAgICBnZXRTbmFwc2hvdDogLT4gcmV0dXJuIEBzZXNzaW9uLnNuYXBzaG90XG4gICAgXG4gICAgIyBSZXR1cm4gdmFsdWUgaXMganVzdCBsaWtlIGluZGV4T2YgKD49IDAgbWVhbnMgZm91bmQsIC0xIG1lYW5zIG5vdCBmb3VuZClcbiAgICBnZXRUYWdJbmRleDogKHRhZ05hbWUpIC0+XG4gICAgICByZXR1cm4gaWR4IGZvciB0YWcsIGlkeCBpbiBAc2Vzc2lvbi5zbmFwc2hvdC50YWdzIHdoZW4gdGFnIGlzIHRhZ05hbWVcbiAgICAgIHJldHVybiAtMVxuICAgIFxuICAgIGhhc0ZpbGU6IChmaWxlbmFtZSkgLT4gcmV0dXJuIEBnZXRGaWxlSW5kZXgoZmlsZW5hbWUpID49IDBcblxuICAgIGhhc0ZpbGVJbmRleDogKGlkeCkgLT4gcmV0dXJuIEBnZXRGaWxlQnlJbmRleChpZHgpP1xuICAgIFxuICAgIGhhc1RhZzogKHRhZ05hbWUpIC0+IHJldHVybiBAZ2V0VGFnSW5kZXgodGFnTmFtZSkgPj0gMFxuICAgIFxuICAgIGlzVmFsaWRUYWc6ICh0YWdOYW1lKSAtPiByZXR1cm4gL15bLV9hLXowLTlcXC5cXFtcXF1dKyQvaS50ZXN0KHRhZ05hbWUpXG4gICAgXG4gICAgaXNWYWxpZEZpbGU6IChmaWxlKSAtPiByZXR1cm4gQGlzVmFsaWRGaWxlbmFtZShmaWxlLmZpbGVuYW1lKSAmJiBhbmd1bGFyLmlzU3RyaW5nKGZpbGUuY29udGVudClcbiAgICBcbiAgICBpc1ZhbGlkRmlsZW5hbWU6IChmaWxlbmFtZSkgLT4gcmV0dXJuIC9eWy1fYS16MC05XFwuXFxbXFxdXSskL2kudGVzdChmaWxlbmFtZSlcbiAgICBcbiAgICBcbiAgICBcbiAgICByZXNldDogKGpzb24gPSB7fSkgLT5cbiAgICAgIGpzb24uZGVzY3JpcHRpb24gfHw9IFwiXCJcbiAgICAgIGpzb24udGFncyB8fD0gW11cbiAgICAgIGpzb24uY3Vyc29yIHx8PSB7IGZpbGVJbmRleDogMCwgdGV4dE9mZnNldDogMCB9XG4gICAgICBcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc2V0IGZhaWxlZC4gRGVzY3JpcHRpb24gbXVzdCBiZSBhIHN0cmluZy5cIikgdW5sZXNzIGFuZ3VsYXIuaXNTdHJpbmcoanNvbi5kZXNjcmlwdGlvbilcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc2V0IGZhaWxlZC4gVGFncyBtdXN0IGJlIGFuIGFycmF5LlwiKSB1bmxlc3MgYW5ndWxhci5pc0FycmF5KGpzb24udGFncylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlc2V0IGZhaWxlZC4gSW52YWxpZCB0YWc6ICN7dGFnTmFtZX0uXCIpIGZvciB0YWdOYW1lIGluIGpzb24udGFncyB3aGVuICFAaXNWYWxpZFRhZyh0YWdOYW1lKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzZXQgZmFpbGVkLiBGaWxlcyBtdXN0IGJlIGFuIGFycmF5LlwiKSB1bmxlc3MgYW5ndWxhci5pc0FycmF5KGpzb24uZmlsZXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNldCBmYWlsZWQuIEludmFsaWQgZmlsZTogI3tKU09OLnN0cmluZ2lmeShmaWxlKX0uXCIpIGZvciBmaWxlIGluIGpzb24uZmlsZXMgd2hlbiAhQGlzVmFsaWRGaWxlKGZpbGUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXNldCBmYWlsZWQuIFRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIGZpbGUuXCIpIHVubGVzcyBqc29uLmZpbGVzLmxlbmd0aFxuICAgIFxuICAgICAgQF9hcHBseU9wXG4gICAgICAgIHA6IFtdXG4gICAgICAgIG9kOiBhbmd1bGFyLmNvcHkoQGdldFNuYXBzaG90KCkpXG4gICAgICAgIG9pOiBqc29uXG4gICAgXG4gICAgY3Vyc29yU2V0RmlsZTogKGZpbGVuYW1lKSAtPlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHNldCB0aGUgYWN0aXZlIGZpbGUuIEZpbGUgZG9lcyBub3QgZXhpc3Q6ICN7ZmlsZW5hbWV9XCIpIHVubGVzcyBAaGFzRmlsZShmaWxlbmFtZSlcbiAgICAgIFxuICAgICAgaWR4ID0gQGdldEZpbGVJbmRleChmaWxlbmFtZSlcbiAgICAgIFxuICAgICAgQF9hcHBseU9wXG4gICAgICAgIHA6IFtcImN1cnNvclwiLCBcImZpbGVJbmRleFwiXVxuICAgICAgICBvZDogQGdldEN1cnNvckZpbGVJbmRleCgpXG4gICAgICAgIG9pOiBpZHhcbiAgICBcbiAgICBjdXJzb3JTZXRJbmRleDogKGlkeCkgLT5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSBzZXQgdGhlIGFjdGl2ZSBmaWxlLiBGaWxlIGRvZXMgbm90IGV4aXN0OiAje2lkeH1cIikgdW5sZXNzIEBoYXNGaWxlSW5kZXgoaWR4KVxuICAgICAgXG4gICAgICBAX2FwcGx5T3BcbiAgICAgICAgcDogW1wiY3Vyc29yXCIsIFwiZmlsZUluZGV4XCJdXG4gICAgICAgIG9kOiBAZ2V0Q3Vyc29yRmlsZUluZGV4KClcbiAgICAgICAgb2k6IGlkeFxuICAgIFxuICAgIGN1cnNvclNldE9mZnNldDogKG9mZnNldCkgLT5cbiAgICAgIEBfYXBwbHlPcFxuICAgICAgICBwOiBbXCJjdXJzb3JcIiwgXCJ0ZXh0T2Zmc2V0XCJdXG4gICAgICAgIG9kOiBAZ2V0Q3Vyc29yVGV4dE9mZnNldCgpXG4gICAgICAgIG9pOiBvZmZzZXRcbiAgICBcbiAgICBzZXREZXNjcmlwdGlvbjogKGRlc2NyaXB0aW9uID0gXCJcIikgLT5cbiAgICAgIEBfYXBwbHlPcFxuICAgICAgICBwOiBbXCJkZXNjcmlwdGlvblwiLCAwXVxuICAgICAgICBzZDogQGdldERlc2NyaXB0aW9uKClcbiAgICAgICAgc2k6IGRlc2NyaXB0aW9uXG4gICAgXG4gICAgXG4gICAgXG4gICAgZmlsZUNyZWF0ZTogKGZpbGVuYW1lLCBjb250ZW50ID0gXCJcIikgLT5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjcmVhdGUgZmlsZS4gSW52YWxpZCBmaWxlbmFtZTogI3tmaWxlbmFtZX1cIikgdW5sZXNzIEBpc1ZhbGlkRmlsZW5hbWUoZmlsZW5hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGZpbGUuIEZpbGUgYWxyZWFkeSBleGlzdHM6ICN7ZmlsZW5hbWV9XCIpIGlmIEBoYXNGaWxlKGZpbGVuYW1lKVxuICAgICAgXG4gICAgICBpZHggPSBAZ2V0TnVtRmlsZXMoKVxuICAgICAgXG4gICAgICBAX2FwcGx5T3BcbiAgICAgICAgcDogW1wiZmlsZXNcIiwgaWR4XVxuICAgICAgICBsaToge2ZpbGVuYW1lLCBjb250ZW50fVxuICAgIFxuICAgIGZpbGVSZW5hbWU6IChmaWxlbmFtZSwgbmV3X2ZpbGVuYW1lKSAtPlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSBmaWxlLiBJbnZhbGlkIGZpbGVuYW1lOiAje25ld19maWxlbmFtZX1cIikgdW5sZXNzIEBpc1ZhbGlkRmlsZW5hbWUobmV3X2ZpbGVuYW1lKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHJlbmFtZSBmaWxlLiBGaWxlIGRvZXMgbm90IGV4aXN0OiAje2ZpbGVuYW1lfVwiKSB1bmxlc3MgQGhhc0ZpbGUoZmlsZW5hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmVuYW1lIGZpbGUuIEEgZmlsZSBhbHJlYWR5IGV4aXN0cyBuYW1lZDogI3tuZXdfZmlsZW5hbWV9XCIpIGlmIEBoYXNGaWxlKG5ld19maWxlbmFtZSlcblxuICAgICAgaWR4ID0gQGdldEZpbGVJbmRleChmaWxlbmFtZSlcbiAgICAgIFxuICAgICAgQF9hcHBseU9wXG4gICAgICAgIHA6IFtcImZpbGVzXCIsIGlkeCwgXCJmaWxlbmFtZVwiXVxuICAgICAgICBvZDogZmlsZW5hbWVcbiAgICAgICAgb2k6IG5ld19maWxlbmFtZVxuXG4gICAgZmlsZVJlbW92ZTogKGZpbGVuYW1lKSAtPlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHJlbW92ZSBmaWxlLiBGaWxlIGRvZXMgbm90IGV4aXN0OiAje2ZpbGVuYW1lfVwiKSB1bmxlc3MgQGhhc0ZpbGUoZmlsZW5hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gcmVtb3ZlIGZpbGUuIFlvdSBjYW4gbm90IHJlbW92ZSBhbGwgZmlsZXMuXCIpIGlmIEBnZXROdW1GaWxlcygpIDw9IDFcblxuICAgICAgaWR4ID0gQGdldEZpbGVJbmRleChmaWxlbmFtZSlcbiAgICAgIFxuICAgICAgQGN1cnNvclNldEluZGV4KDApXG4gICAgXG4gICAgICBAX2FwcGx5T3BcbiAgICAgICAgcDogW1wiZmlsZXNcIiwgaWR4XVxuICAgICAgICBsZDogQGdldEZpbGUoZmlsZW5hbWUpXG4gICAgICAgIFxuICAgIFxuICAgIFxuICAgIHRleHRJbnNlcnQ6IChmaWxlbmFtZSwgb2Zmc2V0LCB0ZXh0KSAtPlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGluc2VydCB0ZXh0LiBGaWxlIGRvZXMgbm90IGV4aXN0OiAje2ZpbGVuYW1lfVwiKSB1bmxlc3MgQGhhc0ZpbGUoZmlsZW5hbWUpXG4gICAgICBcbiAgICAgIGlkeCA9IEBnZXRGaWxlSW5kZXgoZmlsZW5hbWUpXG5cbiAgICAgIEBfYXBwbHlPcFxuICAgICAgICBwOiBbXCJmaWxlc1wiLCBpZHgsIFwiY29udGVudFwiLCBvZmZzZXRdXG4gICAgICAgIHNpOiB0ZXh0XG5cbiAgICB0ZXh0UmVtb3ZlOiAoZmlsZW5hbWUsIG9mZnNldCwgdGV4dCkgLT5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byByZW1vdmUgdGV4dC4gRmlsZSBkb2VzIG5vdCBleGlzdDogI3tmaWxlbmFtZX1cIikgdW5sZXNzIEBoYXNGaWxlKGZpbGVuYW1lKVxuICAgICAgXG4gICAgICBpZHggPSBAZ2V0RmlsZUluZGV4KGZpbGVuYW1lKVxuXG4gICAgICBAX2FwcGx5T3BcbiAgICAgICAgcDogW1wiZmlsZXNcIiwgaWR4LCBcImNvbnRlbnRcIiwgb2Zmc2V0XVxuICAgICAgICBzZDogdGV4dFxuICAgIFxuICAgIFxuICAgIFxuICAgIHRhZ0FkZDogKHRhZ05hbWUpIC0+XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gYWRkIHRhZy4gSW52YWxpZCB0YWc6ICN7dGFnTmFtZX1cIikgdW5sZXNzIEBpc1ZhbGlkVGFnKHRhZ05hbWUpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gYWRkIHRhZy4gVGFnIGFscmVhZHkgZXhpc3RzOiAje3RhZ05hbWV9XCIpIGlmIEBoYXNUYWcodGFnTmFtZSlcbiAgICAgIFxuICAgICAgaWR4ID0gQGdldE51bVRhZ3MoKVxuICAgICAgXG4gICAgICBAX2FwcGx5T3BcbiAgICAgICAgcDogW1widGFnc1wiLCBpZHhdXG4gICAgICAgIGxpOiB0YWdOYW1lXG5cbiAgICB0YWdSZW1vdmU6ICh0YWdOYW1lKSAtPlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHJlbW92ZSB0YWcuIFRhZyBub3QgZm91bmQ6ICN7dGFnTmFtZX1cIikgdW5sZXNzIEBoYXNUYWcodGFnTmFtZSlcbiAgICAgIFxuICAgICAgaWR4ID0gQGdldFRhZ0luZGV4KHRhZ05hbWUpXG4gICAgICBcbiAgICAgIEBfYXBwbHlPcFxuICAgICAgICBwOiBbXCJ0YWdzXCIsIGlkeF1cbiAgICAgICAgbGQ6IHRhZ05hbWVcbiAgXG4gIFxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBAJGNsaWVudHMgPSB7fVxuICAgIFxuICAgIEBzbmFwc2hvdCA9IHt9XG4gICAgQGlmYWNlID0gQGNyZWF0ZUNsaWVudChcInNlc3Npb25cIilcbiAgICBcbiAgICBAaWZhY2UucmVzZXRcbiAgICAgIGZpbGVzOiBbXG4gICAgICAgIGZpbGVuYW1lOiBcImluZGV4Lmh0bWxcIlxuICAgICAgICBjb250ZW50OiBcIlwiXG4gICAgICBdXG4gIFxuICBjcmVhdGVDbGllbnQ6IChjbGllbnROYW1lKSAtPlxuICAgICN0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIGNsaWVudC4gQ2xpZW50IGFscmVhZHkgY3JlYXRlZDogI3tjbGllbnROYW1lfS5cIikgaWYgQCRjbGllbnRzW2NsaWVudE5hbWVdXG4gICAgXG4gICAgc2Vzc2lvbiA9IEBcbiAgICBcbiAgICBAJGNsaWVudHNbY2xpZW50TmFtZV0gfHw9IG5ldyBTZXNzaW9uQ2xpZW50KGNsaWVudE5hbWUsIHNlc3Npb24pXG4gIFxuICBhcHBseU9wczogKHNvdXJjZUNsaWVudE5hbWUsIG9wcykgLT5cbiAgICBwb3N0U25hcHNob3QgPSBvdHR5cGVzLmpzb24wLmFwcGx5IEBzbmFwc2hvdCwgb3BzXG4gICAgXG4gICAgY29uc29sZS5sb2cgXCJbT1RdIG9wXCIsIG9wIGZvciBvcCBpbiBvcHNcbiAgICBjb25zb2xlLmxvZyBcIltPVF0gc25hcHNob3RcIiwgYW5ndWxhci5jb3B5KEBzbmFwc2hvdClcbiAgICBcbiAgICBhbmd1bGFyLmNvcHkgcG9zdFNuYXBzaG90LCBAc25hcHNob3QgdW5sZXNzIEBzbmFwc2hvdCA9PSBwb3N0U25hcHNob3RcbiAgICBcbiAgICBmb3IgY2xpZW50TmFtZSwgY2xpZW50IG9mIEAkY2xpZW50cyB3aGVuIGNsaWVudE5hbWUgIT0gc291cmNlQ2xpZW50TmFtZVxuICAgICAgY2xpZW50Ll9oYW5kbGVPcChzb3VyY2VDbGllbnROYW1lLCBvcCwgQHNuYXBzaG90KSBmb3Igb3AgaW4gb3BzXG4gICAgICBcbiIsIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwicGx1bmtlci5zZXJ2aWNlLnNldHRpbmdzXCIsIFtdXHJcblxyXG5tb2R1bGUuc2VydmljZSBcInNldHRpbmdzXCIsIFsgKCkgLT5cclxuICBcclxuICBzZXR0aW5ncyA9XHJcbiAgICBwcmV2aWV3ZXI6XHJcbiAgICAgIGRlbGF5OiAxMDAwXHJcbiAgICAgIGF1dG9fcmVmcmVzaDogdHJ1ZVxyXG4gICAgZWRpdG9yOlxyXG4gICAgICB0YWJfc2l6ZTogMlxyXG4gICAgICBzb2Z0X3RhYnM6IHRydWVcclxuICAgICAgdGhlbWU6IFwidGV4dG1hdGVcIlxyXG4gICAgICB3cmFwOlxyXG4gICAgICAgIHJhbmdlOlxyXG4gICAgICAgICAgbWluOiAwXHJcbiAgICAgICAgICBtYXg6IDgwXHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICBcclxuICBcclxuICBcclxuICBpZiBsb2NhbFN0b3JhZ2U/XHJcbiAgICBpZiBzYXZlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicGxua3Jfc2V0dGluZ3NcIilcclxuICAgICAgdHJ5XHJcbiAgICAgICAgc2F2ZWQgPSBKU09OLnBhcnNlKHNhdmVkKVxyXG4gICAgICBjYXRjaCBlXHJcbiAgICAgICAgc2F2ZWQgPSB7fVxyXG4gICAgICBcclxuICAgIHNldEludGVydmFsIC0+XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtIFwicGxua3Jfc2V0dGluZ3NcIiwgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpXHJcbiAgICAsIDIwMDBcclxuICBcclxuICBhbmd1bGFyLmV4dGVuZCBzZXR0aW5ncywgc2F2ZWRcclxuICBcclxuXSIsIm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwicGx1bmtlci5zZXJ2aWNlLnR5cGVzXCIsIFtcbl1cblxuXG5tb2R1bGUuZmFjdG9yeSBcInR5cGVzXCIsIC0+XG4gIHR5cGVzID1cbiAgICBodG1sOlxuICAgICAgcmVnZXg6IC9cXC5odG1sJC9pXG4gICAgICBtaW1lOiBcInRleHQvaHRtbFwiXG4gICAgamF2YXNjcmlwdDpcbiAgICAgIHJlZ2V4OiAvXFwuanMkL2lcbiAgICAgIG1pbWU6IFwidGV4dC9qYXZhc2NyaXB0XCJcbiAgICBjb2ZmZWU6XG4gICAgICByZWdleDogL1xcLmNvZmZlZSQvaVxuICAgICAgbWltZTogXCJ0ZXh0L2NvZmZlZVwiXG4gICAgY3NzOlxuICAgICAgcmVnZXg6IC9cXC5jc3MkL2lcbiAgICAgIG1pbWU6IFwidGV4dC9jc3NcIlxuICAgIHRleHQ6XG4gICAgICByZWdleDogL1xcLnR4dCQvXG4gICAgICBtaW1lOiBcInRleHQvcGxhaW5cIlxuICBcbiAgZm9yIG5hbWUsIHR5cGUgb2YgdHlwZXNcbiAgICB0eXBlLm5hbWUgPSBuYW1lXG4gIFxuICB0eXBlczogdHlwZXNcbiAgZ2V0QnlGaWxlbmFtZTogKGZpbGVuYW1lKSAtPlxuICAgIGZvciBuYW1lLCBtb2RlIG9mIHR5cGVzXG4gICAgICBpZiBtb2RlLnJlZ2V4LnRlc3QoZmlsZW5hbWUpIHRoZW4gcmV0dXJuIG1vZGVcbiAgICBcbiAgICByZXR1cm4gdHlwZXMudGV4dFxuXG5cbiIsInJlcXVpcmUgXCIuLi9zZXJ2aWNlcy9odG1sRmlsZS5jb2ZmZWVcIlxuXG5cbm1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlIFwicGx1bmtlci5zZXJ2aWNlLnVwZGF0ZXJcIiwgW1xuICBcInBsdW5rZXIuc2VydmljZS5odG1sRmlsZVwiXG5dXG5cbm1vZHVsZS5mYWN0b3J5IFwidXBkYXRlclwiLCBbIFwiJHFcIiwgXCJodG1sRmlsZVwiLCAoJHEsIGh0bWxGaWxlKSAtPlxuICB1cGRhdGU6IChqc29uKSAtPlxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byB1cGRhdGUgaW52YWxpZCBqc29uOiBtaXNzaW5nIGZpbGVzIGFycmF5XCIpIHVubGVzcyBqc29uLmZpbGVzIGFuZCBqc29uLmZpbGVzLmxlbmd0aFxuICAgIFxuICAgIHByb21pc2VzID0gW11cbiAgICBcbiAgICBmb3IgZmlsZSBpbiBqc29uLmZpbGVzIHRoZW4gZG8gKGZpbGUpIC0+XG4gICAgICBpZiBmaWxlLmZpbGVuYW1lLm1hdGNoIC9cXC5odG1sJC9pXG4gICAgICAgIHByb21pc2VzLnB1c2ggaHRtbEZpbGUudXBkYXRlKGZpbGUuY29udGVudCkudGhlbiAobWFya3VwKSAtPlxuICAgICAgICAgIGZpbGUuY29udGVudCA9IG1hcmt1cFxuICAgIFxuICAgICRxLmFsbChwcm9taXNlcykudGhlbiAtPiBqc29uXG5cbl0iLCJtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSBcInBsdW5rZXIuc2VydmljZS51cmxcIiwgW11cblxubW9kdWxlLmNvbnN0YW50IFwidXJsXCIsIF9wbHVua2VyLnVybCIsIi8qKlxyXG4gKiBhbmd1bGFyLWdyb3dsIC0gdjAuMy4wIC0gMjAxMy0wOS0yNlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFyY29yaW5jay9hbmd1bGFyLWdyb3dsXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMyBNYXJjbyBSaW5jazsgTGljZW5zZWQgTUlUXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1ncm93bCcsIFtdKTtcclxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItZ3Jvd2wnKS5kaXJlY3RpdmUoJ2dyb3dsJywgW1xyXG4gICckcm9vdFNjb3BlJyxcclxuICBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiZ3Jvd2xcIj4nICsgJ1xcdDxkaXYgY2xhc3M9XCJncm93bC1pdGVtIGFsZXJ0XCIgbmctcmVwZWF0PVwibWVzc2FnZSBpbiBtZXNzYWdlc1wiIG5nLWNsYXNzPVwiY29tcHV0ZUNsYXNzZXMobWVzc2FnZSlcIj4nICsgJ1xcdFxcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBuZy1jbGljaz1cImRlbGV0ZU1lc3NhZ2UobWVzc2FnZSlcIj4mdGltZXM7PC9idXR0b24+JyArICcgICAgICAgICAgICB7eyBtZXNzYWdlLnRleHR9fScgKyAnXFx0PC9kaXY+JyArICc8L2Rpdj4nLFxyXG4gICAgICByZXBsYWNlOiBmYWxzZSxcclxuICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFtcclxuICAgICAgICAnJHNjb3BlJyxcclxuICAgICAgICAnJHRpbWVvdXQnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR0aW1lb3V0KSB7XHJcbiAgICAgICAgICAkc2NvcGUubWVzc2FnZXMgPSBbXTtcclxuICAgICAgICAgICRyb290U2NvcGUuJG9uKCdncm93bE1lc3NhZ2UnLCBmdW5jdGlvbiAoZXZlbnQsIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnR0bCAmJiBtZXNzYWdlLnR0bCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9LCBtZXNzYWdlLnR0bCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgJHNjb3BlLmRlbGV0ZU1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUubWVzc2FnZXMuaW5kZXhPZihtZXNzYWdlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgICRzY29wZS5jb21wdXRlQ2xhc3NlcyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgJ2FsZXJ0LXN1Y2Nlc3MnOiBtZXNzYWdlLmlzU3VjY2VzcyxcclxuICAgICAgICAgICAgICAnYWxlcnQtZGFuZ2VyJzogbWVzc2FnZS5pc0Vycm9yLFxyXG4gICAgICAgICAgICAgICdhbGVydC13YXJuaW5nJzogbWVzc2FnZS5pc1dhcm4sXHJcbiAgICAgICAgICAgICAgJ2FsZXJ0LWluZm8nOiBtZXNzYWdlLmlzSW5mb1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG5dKTtcclxuYW5ndWxhci5tb2R1bGUoJ2FuZ3VsYXItZ3Jvd2wnKS5wcm92aWRlcignZ3Jvd2wnLCBmdW5jdGlvbiAoKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIHZhciBfdHRsID0gbnVsbCwgX21lc3NhZ2VzS2V5ID0gJ21lc3NhZ2VzJywgX21lc3NhZ2VUZXh0S2V5ID0gJ3RleHQnLCBfbWVzc2FnZVNldmVyaXR5S2V5ID0gJ3NldmVyaXR5JztcclxuICB0aGlzLmdsb2JhbFRpbWVUb0xpdmUgPSBmdW5jdGlvbiAodHRsKSB7XHJcbiAgICBfdHRsID0gdHRsO1xyXG4gIH07XHJcbiAgdGhpcy5tZXNzYWdlc0tleSA9IGZ1bmN0aW9uIChtZXNzYWdlc0tleSkge1xyXG4gICAgX21lc3NhZ2VzS2V5ID0gbWVzc2FnZXNLZXk7XHJcbiAgfTtcclxuICB0aGlzLm1lc3NhZ2VUZXh0S2V5ID0gZnVuY3Rpb24gKG1lc3NhZ2VUZXh0S2V5KSB7XHJcbiAgICBfbWVzc2FnZVRleHRLZXkgPSBtZXNzYWdlVGV4dEtleTtcclxuICB9O1xyXG4gIHRoaXMubWVzc2FnZVNldmVyaXR5S2V5ID0gZnVuY3Rpb24gKG1lc3NhZ2VTZXZlcml0eUtleSkge1xyXG4gICAgX21lc3NhZ2VTZXZlcml0eUtleSA9IG1lc3NhZ2VTZXZlcml0eUtleTtcclxuICB9O1xyXG4gIHRoaXMuc2VydmVyTWVzc2FnZXNJbnRlcmNlcHRvciA9IFtcclxuICAgICckcScsXHJcbiAgICAnZ3Jvd2wnLFxyXG4gICAgZnVuY3Rpb24gKCRxLCBncm93bCkge1xyXG4gICAgICBmdW5jdGlvbiBjaGVja1Jlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGFbX21lc3NhZ2VzS2V5XSAmJiByZXNwb25zZS5kYXRhW19tZXNzYWdlc0tleV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZ3Jvd2wuYWRkU2VydmVyTWVzc2FnZXMocmVzcG9uc2UuZGF0YVtfbWVzc2FnZXNLZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgfVxyXG4gICAgICBmdW5jdGlvbiBlcnJvcihyZXNwb25zZSkge1xyXG4gICAgICAgIGNoZWNrUmVzcG9uc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAocHJvbWlzZSkge1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oc3VjY2VzcywgZXJyb3IpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIF07XHJcbiAgdGhpcy4kZ2V0ID0gW1xyXG4gICAgJyRyb290U2NvcGUnLFxyXG4gICAgJyRmaWx0ZXInLFxyXG4gICAgZnVuY3Rpb24gKCRyb290U2NvcGUsICRmaWx0ZXIpIHtcclxuICAgICAgdmFyIHRyYW5zbGF0ZTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0cmFuc2xhdGUgPSAkZmlsdGVyKCd0cmFuc2xhdGUnKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB9XHJcbiAgICAgIGZ1bmN0aW9uIGJyb2FkY2FzdE1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgICAgIGlmICh0cmFuc2xhdGUpIHtcclxuICAgICAgICAgIG1lc3NhZ2UgPSB0cmFuc2xhdGUobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZ3Jvd2xNZXNzYWdlJywgbWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgICAgZnVuY3Rpb24gc2VuZE1lc3NhZ2UodGV4dCwgY29uZmlnLCBzZXZlcml0eSkge1xyXG4gICAgICAgIHZhciBfY29uZmlnID0gY29uZmlnIHx8IHt9LCBtZXNzYWdlO1xyXG4gICAgICAgIG1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgaXNXYXJuOiBzZXZlcml0eS5pc1dhcm4sXHJcbiAgICAgICAgICBpc0Vycm9yOiBzZXZlcml0eS5pc0Vycm9yLFxyXG4gICAgICAgICAgaXNJbmZvOiBzZXZlcml0eS5pc0luZm8sXHJcbiAgICAgICAgICBpc1N1Y2Nlc3M6IHNldmVyaXR5LmlzU3VjY2VzcyxcclxuICAgICAgICAgIHR0bDogX2NvbmZpZy50dGwgfHwgX3R0bFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYnJvYWRjYXN0TWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgICBmdW5jdGlvbiBhZGRXYXJuTWVzc2FnZSh0ZXh0LCBjb25maWcpIHtcclxuICAgICAgICBzZW5kTWVzc2FnZSh0ZXh0LCBjb25maWcsIHsgaXNXYXJuOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGZ1bmN0aW9uIGFkZEVycm9yTWVzc2FnZSh0ZXh0LCBjb25maWcpIHtcclxuICAgICAgICBzZW5kTWVzc2FnZSh0ZXh0LCBjb25maWcsIHsgaXNFcnJvcjogdHJ1ZSB9KTtcclxuICAgICAgfVxyXG4gICAgICBmdW5jdGlvbiBhZGRJbmZvTWVzc2FnZSh0ZXh0LCBjb25maWcpIHtcclxuICAgICAgICBzZW5kTWVzc2FnZSh0ZXh0LCBjb25maWcsIHsgaXNJbmZvOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGZ1bmN0aW9uIGFkZFN1Y2Nlc3NNZXNzYWdlKHRleHQsIGNvbmZpZykge1xyXG4gICAgICAgIHNlbmRNZXNzYWdlKHRleHQsIGNvbmZpZywgeyBpc1N1Y2Nlc3M6IHRydWUgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZnVuY3Rpb24gYWRkU2VydmVyTWVzc2FnZXMobWVzc2FnZXMpIHtcclxuICAgICAgICB2YXIgaSwgbWVzc2FnZSwgc2V2ZXJpdHksIGxlbmd0aDtcclxuICAgICAgICBsZW5ndGggPSBtZXNzYWdlcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbaV07XHJcbiAgICAgICAgICBpZiAobWVzc2FnZVtfbWVzc2FnZVRleHRLZXldICYmIG1lc3NhZ2VbX21lc3NhZ2VTZXZlcml0eUtleV0pIHtcclxuICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlW19tZXNzYWdlU2V2ZXJpdHlLZXldKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3dhcm4nOlxyXG4gICAgICAgICAgICAgIHNldmVyaXR5ID0geyBpc1dhcm46IHRydWUgfTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XHJcbiAgICAgICAgICAgICAgc2V2ZXJpdHkgPSB7IGlzU3VjY2VzczogdHJ1ZSB9O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpbmZvJzpcclxuICAgICAgICAgICAgICBzZXZlcml0eSA9IHsgaXNJbmZvOiB0cnVlIH07XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vycm9yJzpcclxuICAgICAgICAgICAgICBzZXZlcml0eSA9IHsgaXNFcnJvcjogdHJ1ZSB9O1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2VbX21lc3NhZ2VUZXh0S2V5XSwgdW5kZWZpbmVkLCBzZXZlcml0eSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkV2Fybk1lc3NhZ2U6IGFkZFdhcm5NZXNzYWdlLFxyXG4gICAgICAgIGFkZEVycm9yTWVzc2FnZTogYWRkRXJyb3JNZXNzYWdlLFxyXG4gICAgICAgIGFkZEluZm9NZXNzYWdlOiBhZGRJbmZvTWVzc2FnZSxcclxuICAgICAgICBhZGRTdWNjZXNzTWVzc2FnZTogYWRkU3VjY2Vzc01lc3NhZ2UsXHJcbiAgICAgICAgYWRkU2VydmVyTWVzc2FnZXM6IGFkZFNlcnZlck1lc3NhZ2VzXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgXTtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIiwgW1widWkuYm9vdHN0cmFwLnRwbHNcIiwgXCJ1aS5ib290c3RyYXAudHJhbnNpdGlvblwiLFwidWkuYm9vdHN0cmFwLmNvbGxhcHNlXCIsXCJ1aS5ib290c3RyYXAuYWNjb3JkaW9uXCIsXCJ1aS5ib290c3RyYXAuYWxlcnRcIixcInVpLmJvb3RzdHJhcC5iaW5kSHRtbFwiLFwidWkuYm9vdHN0cmFwLmJ1dHRvbnNcIixcInVpLmJvb3RzdHJhcC5jYXJvdXNlbFwiLFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBpY2tlclwiLFwidWkuYm9vdHN0cmFwLmRyb3Bkb3duVG9nZ2xlXCIsXCJ1aS5ib290c3RyYXAubW9kYWxcIixcInVpLmJvb3RzdHJhcC5wYWdpbmF0aW9uXCIsXCJ1aS5ib290c3RyYXAudG9vbHRpcFwiLFwidWkuYm9vdHN0cmFwLnBvcG92ZXJcIixcInVpLmJvb3RzdHJhcC5wcm9ncmVzc2JhclwiLFwidWkuYm9vdHN0cmFwLnJhdGluZ1wiLFwidWkuYm9vdHN0cmFwLnRhYnNcIixcInVpLmJvb3RzdHJhcC50aW1lcGlja2VyXCIsXCJ1aS5ib290c3RyYXAudHlwZWFoZWFkXCJdKTtcclxuYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXAudHBsc1wiLCBbXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIixcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLFwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLFwidGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcInRlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbFwiLFwidGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbFwiLFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcInRlbXBsYXRlL3BhZ2luYXRpb24vcGFnZXIuaHRtbFwiLFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXVuc2FmZS1wb3B1cC5odG1sXCIsXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcInRlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sXCIsXCJ0ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWxcIixcInRlbXBsYXRlL3RhYnMvdGFiLmh0bWxcIixcInRlbXBsYXRlL3RhYnMvdGFic2V0LXRpdGxlcy5odG1sXCIsXCJ0ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsXCJ0ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIl0pO1xyXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRyYW5zaXRpb24nLCBbXSlcclxuXHJcbi8qKlxyXG4gKiAkdHJhbnNpdGlvbiBzZXJ2aWNlIHByb3ZpZGVzIGEgY29uc2lzdGVudCBpbnRlcmZhY2UgdG8gdHJpZ2dlciBDU1MgMyB0cmFuc2l0aW9ucyBhbmQgdG8gYmUgaW5mb3JtZWQgd2hlbiB0aGV5IGNvbXBsZXRlLlxyXG4gKiBAcGFyYW0gIHtET01FbGVtZW50fSBlbGVtZW50ICBUaGUgRE9NRWxlbWVudCB0aGF0IHdpbGwgYmUgYW5pbWF0ZWQuXHJcbiAqIEBwYXJhbSAge3N0cmluZ3xvYmplY3R8ZnVuY3Rpb259IHRyaWdnZXIgIFRoZSB0aGluZyB0aGF0IHdpbGwgY2F1c2UgdGhlIHRyYW5zaXRpb24gdG8gc3RhcnQ6XHJcbiAqICAgLSBBcyBhIHN0cmluZywgaXQgcmVwcmVzZW50cyB0aGUgY3NzIGNsYXNzIHRvIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50LlxyXG4gKiAgIC0gQXMgYW4gb2JqZWN0LCBpdCByZXByZXNlbnRzIGEgaGFzaCBvZiBzdHlsZSBhdHRyaWJ1dGVzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXHJcbiAqICAgLSBBcyBhIGZ1bmN0aW9uLCBpdCByZXByZXNlbnRzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHRoYXQgd2lsbCBjYXVzZSB0aGUgdHJhbnNpdGlvbiB0byBvY2N1ci5cclxuICogQHJldHVybiB7UHJvbWlzZX0gIEEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gZmluaXNoZXMuXHJcbiAqL1xyXG4uZmFjdG9yeSgnJHRyYW5zaXRpb24nLCBbJyRxJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcSwgJHRpbWVvdXQsICRyb290U2NvcGUpIHtcclxuXHJcbiAgdmFyICR0cmFuc2l0aW9uID0gZnVuY3Rpb24oZWxlbWVudCwgdHJpZ2dlciwgb3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG4gICAgdmFyIGVuZEV2ZW50TmFtZSA9ICR0cmFuc2l0aW9uW29wdGlvbnMuYW5pbWF0aW9uID8gXCJhbmltYXRpb25FbmRFdmVudE5hbWVcIiA6IFwidHJhbnNpdGlvbkVuZEV2ZW50TmFtZVwiXTtcclxuXHJcbiAgICB2YXIgdHJhbnNpdGlvbkVuZEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICBlbGVtZW50LnVuYmluZChlbmRFdmVudE5hbWUsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcclxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGVuZEV2ZW50TmFtZSkge1xyXG4gICAgICBlbGVtZW50LmJpbmQoZW5kRXZlbnROYW1lLCB0cmFuc2l0aW9uRW5kSGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV3JhcCBpbiBhIHRpbWVvdXQgdG8gYWxsb3cgdGhlIGJyb3dzZXIgdGltZSB0byB1cGRhdGUgdGhlIERPTSBiZWZvcmUgdGhlIHRyYW5zaXRpb24gaXMgdG8gb2NjdXJcclxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoIGFuZ3VsYXIuaXNTdHJpbmcodHJpZ2dlcikgKSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyh0cmlnZ2VyKTtcclxuICAgICAgfSBlbHNlIGlmICggYW5ndWxhci5pc0Z1bmN0aW9uKHRyaWdnZXIpICkge1xyXG4gICAgICAgIHRyaWdnZXIoZWxlbWVudCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoIGFuZ3VsYXIuaXNPYmplY3QodHJpZ2dlcikgKSB7XHJcbiAgICAgICAgZWxlbWVudC5jc3ModHJpZ2dlcik7XHJcbiAgICAgIH1cclxuICAgICAgLy9JZiBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHJhbnNpdGlvbnMsIGluc3RhbnRseSByZXNvbHZlXHJcbiAgICAgIGlmICggIWVuZEV2ZW50TmFtZSApIHtcclxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBZGQgb3VyIGN1c3RvbSBjYW5jZWwgZnVuY3Rpb24gdG8gdGhlIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZFxyXG4gICAgLy8gV2UgY2FuIGNhbGwgdGhpcyBpZiB3ZSBhcmUgYWJvdXQgdG8gcnVuIGEgbmV3IHRyYW5zaXRpb24sIHdoaWNoIHdlIGtub3cgd2lsbCBwcmV2ZW50IHRoaXMgdHJhbnNpdGlvbiBmcm9tIGVuZGluZyxcclxuICAgIC8vIGkuZS4gaXQgd2lsbCB0aGVyZWZvcmUgbmV2ZXIgcmFpc2UgYSB0cmFuc2l0aW9uRW5kIGV2ZW50IGZvciB0aGF0IHRyYW5zaXRpb25cclxuICAgIGRlZmVycmVkLnByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICggZW5kRXZlbnROYW1lICkge1xyXG4gICAgICAgIGVsZW1lbnQudW5iaW5kKGVuZEV2ZW50TmFtZSwgdHJhbnNpdGlvbkVuZEhhbmRsZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmVycmVkLnJlamVjdCgnVHJhbnNpdGlvbiBjYW5jZWxsZWQnKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgfTtcclxuXHJcbiAgLy8gV29yayBvdXQgdGhlIG5hbWUgb2YgdGhlIHRyYW5zaXRpb25FbmQgZXZlbnRcclxuICB2YXIgdHJhbnNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhbnMnKTtcclxuICB2YXIgdHJhbnNpdGlvbkVuZEV2ZW50TmFtZXMgPSB7XHJcbiAgICAnV2Via2l0VHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcclxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxyXG4gICAgJ09UcmFuc2l0aW9uJzogJ29UcmFuc2l0aW9uRW5kJyxcclxuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnXHJcbiAgfTtcclxuICB2YXIgYW5pbWF0aW9uRW5kRXZlbnROYW1lcyA9IHtcclxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXHJcbiAgICAnTW96VHJhbnNpdGlvbic6ICdhbmltYXRpb25lbmQnLFxyXG4gICAgJ09UcmFuc2l0aW9uJzogJ29BbmltYXRpb25FbmQnLFxyXG4gICAgJ3RyYW5zaXRpb24nOiAnYW5pbWF0aW9uZW5kJ1xyXG4gIH07XHJcbiAgZnVuY3Rpb24gZmluZEVuZEV2ZW50TmFtZShlbmRFdmVudE5hbWVzKSB7XHJcbiAgICBmb3IgKHZhciBuYW1lIGluIGVuZEV2ZW50TmFtZXMpe1xyXG4gICAgICBpZiAodHJhbnNFbGVtZW50LnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gZW5kRXZlbnROYW1lc1tuYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAkdHJhbnNpdGlvbi50cmFuc2l0aW9uRW5kRXZlbnROYW1lID0gZmluZEVuZEV2ZW50TmFtZSh0cmFuc2l0aW9uRW5kRXZlbnROYW1lcyk7XHJcbiAgJHRyYW5zaXRpb24uYW5pbWF0aW9uRW5kRXZlbnROYW1lID0gZmluZEVuZEV2ZW50TmFtZShhbmltYXRpb25FbmRFdmVudE5hbWVzKTtcclxuICByZXR1cm4gJHRyYW5zaXRpb247XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuY29sbGFwc2UnLFsndWkuYm9vdHN0cmFwLnRyYW5zaXRpb24nXSlcclxuXHJcbi8vIFRoZSBjb2xsYXBzaWJsZSBkaXJlY3RpdmUgaW5kaWNhdGVzIGEgYmxvY2sgb2YgaHRtbCB0aGF0IHdpbGwgZXhwYW5kIGFuZCBjb2xsYXBzZVxyXG4uZGlyZWN0aXZlKCdjb2xsYXBzZScsIFsnJHRyYW5zaXRpb24nLCBmdW5jdGlvbigkdHJhbnNpdGlvbikge1xyXG4gIC8vIENTUyB0cmFuc2l0aW9ucyBkb24ndCB3b3JrIHdpdGggaGVpZ2h0OiBhdXRvLCBzbyB3ZSBoYXZlIHRvIG1hbnVhbGx5IGNoYW5nZSB0aGUgaGVpZ2h0IHRvIGFcclxuICAvLyBzcGVjaWZpYyB2YWx1ZSBhbmQgdGhlbiBvbmNlIHRoZSBhbmltYXRpb24gY29tcGxldGVzLCB3ZSBjYW4gcmVzZXQgdGhlIGhlaWdodCB0byBhdXRvLlxyXG4gIC8vIFVuZm9ydHVuYXRlbHkgaWYgeW91IGRvIHRoaXMgd2hpbGUgdGhlIENTUyB0cmFuc2l0aW9ucyBhcmUgc3BlY2lmaWVkIChpLmUuIGluIHRoZSBDU1MgY2xhc3NcclxuICAvLyBcImNvbGxhcHNlXCIpIHRoZW4geW91IHRyaWdnZXIgYSBjaGFuZ2UgdG8gaGVpZ2h0IDAgaW4gYmV0d2Vlbi5cclxuICAvLyBUaGUgZml4IGlzIHRvIHJlbW92ZSB0aGUgXCJjb2xsYXBzZVwiIENTUyBjbGFzcyB3aGlsZSBjaGFuZ2luZyB0aGUgaGVpZ2h0IGJhY2sgdG8gYXV0byAtIHBoZXchXHJcbiAgdmFyIGZpeFVwSGVpZ2h0ID0gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGhlaWdodCkge1xyXG4gICAgLy8gV2UgcmVtb3ZlIHRoZSBjb2xsYXBzZSBDU1MgY2xhc3MgdG8gcHJldmVudCBhIHRyYW5zaXRpb24gd2hlbiB3ZSBjaGFuZ2UgdG8gaGVpZ2h0OiBhdXRvXHJcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpO1xyXG4gICAgZWxlbWVudC5jc3MoeyBoZWlnaHQ6IGhlaWdodCB9KTtcclxuICAgIC8vIEl0IGFwcGVhcnMgdGhhdCAgcmVhZGluZyBvZmZzZXRXaWR0aCBtYWtlcyB0aGUgYnJvd3NlciByZWFsaXNlIHRoYXQgd2UgaGF2ZSBjaGFuZ2VkIHRoZVxyXG4gICAgLy8gaGVpZ2h0IGFscmVhZHkgOi0vXHJcbiAgICB2YXIgeCA9IGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XHJcbiAgICBlbGVtZW50LmFkZENsYXNzKCdjb2xsYXBzZScpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuXHJcbiAgICAgIHZhciBpc0NvbGxhcHNlZDtcclxuICAgICAgdmFyIGluaXRpYWxBbmltU2tpcCA9IHRydWU7XHJcbiAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKXsgcmV0dXJuIGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0OyB9LCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAvL1RoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiBzY29sbEhlaWdodCBjaGFuZ2VzXHJcbiAgICAgICAgLy9JdCBhY3R1YWxseSBkb2VzIG9uIDIgc2NlbmFyaW9zOiBcclxuICAgICAgICAvLyAxLiBQYXJlbnQgaXMgc2V0IHRvIGRpc3BsYXkgbm9uZVxyXG4gICAgICAgIC8vIDIuIGFuZ3VsYXIgYmluZGluZ3MgaW5zaWRlIGFyZSByZXNvbHZlZFxyXG4gICAgICAgIC8vV2hlbiB3ZSBoYXZlIGEgY2hhbmdlIG9mIHNjcm9sbEhlaWdodCB3ZSBhcmUgc2V0dGluZyBhZ2FpbiB0aGUgY29ycmVjdCBoZWlnaHQgaWYgdGhlIGdyb3VwIGlzIG9wZW5lZFxyXG4gICAgICAgIGlmIChlbGVtZW50WzBdLnNjcm9sbEhlaWdodCAhPT0gMCkge1xyXG4gICAgICAgICAgaWYgKCFpc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICBpZiAoaW5pdGlhbEFuaW1Ta2lwKSB7XHJcbiAgICAgICAgICAgICAgZml4VXBIZWlnaHQoc2NvcGUsIGVsZW1lbnQsIGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ICsgJ3B4Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZml4VXBIZWlnaHQoc2NvcGUsIGVsZW1lbnQsICdhdXRvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLmNvbGxhcHNlLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgY29sbGFwc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZXhwYW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgXHJcblxyXG4gICAgICB2YXIgY3VycmVudFRyYW5zaXRpb247XHJcbiAgICAgIHZhciBkb1RyYW5zaXRpb24gPSBmdW5jdGlvbihjaGFuZ2UpIHtcclxuICAgICAgICBpZiAoIGN1cnJlbnRUcmFuc2l0aW9uICkge1xyXG4gICAgICAgICAgY3VycmVudFRyYW5zaXRpb24uY2FuY2VsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uID0gJHRyYW5zaXRpb24oZWxlbWVudCxjaGFuZ2UpO1xyXG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbigpIHsgY3VycmVudFRyYW5zaXRpb24gPSB1bmRlZmluZWQ7IH0sXHJcbiAgICAgICAgICBmdW5jdGlvbigpIHsgY3VycmVudFRyYW5zaXRpb24gPSB1bmRlZmluZWQ7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50VHJhbnNpdGlvbjtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBleHBhbmQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoaW5pdGlhbEFuaW1Ta2lwKSB7XHJcbiAgICAgICAgICBpbml0aWFsQW5pbVNraXAgPSBmYWxzZTtcclxuICAgICAgICAgIGlmICggIWlzQ29sbGFwc2VkICkge1xyXG4gICAgICAgICAgICBmaXhVcEhlaWdodChzY29wZSwgZWxlbWVudCwgJ2F1dG8nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZG9UcmFuc2l0aW9uKHsgaGVpZ2h0IDogZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKyAncHgnIH0pXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gVGhpcyBjaGVjayBlbnN1cmVzIHRoYXQgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHVwZGF0ZSB0aGUgaGVpZ2h0IGlmIHRoZSB1c2VyIGhhcyBjbG9zZWRcclxuICAgICAgICAgICAgLy8gdGhlIGdyb3VwIHdoaWxlIHRoZSBhbmltYXRpb24gd2FzIHN0aWxsIHJ1bm5pbmdcclxuICAgICAgICAgICAgaWYgKCAhaXNDb2xsYXBzZWQgKSB7XHJcbiAgICAgICAgICAgICAgZml4VXBIZWlnaHQoc2NvcGUsIGVsZW1lbnQsICdhdXRvJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpc0NvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgdmFyIGNvbGxhcHNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaXNDb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIGlmIChpbml0aWFsQW5pbVNraXApIHtcclxuICAgICAgICAgIGluaXRpYWxBbmltU2tpcCA9IGZhbHNlO1xyXG4gICAgICAgICAgZml4VXBIZWlnaHQoc2NvcGUsIGVsZW1lbnQsIDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmaXhVcEhlaWdodChzY29wZSwgZWxlbWVudCwgZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKyAncHgnKTtcclxuICAgICAgICAgIGRvVHJhbnNpdGlvbih7J2hlaWdodCc6JzAnfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYWNjb3JkaW9uJywgWyd1aS5ib290c3RyYXAuY29sbGFwc2UnXSlcclxuXHJcbi5jb25zdGFudCgnYWNjb3JkaW9uQ29uZmlnJywge1xyXG4gIGNsb3NlT3RoZXJzOiB0cnVlXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignQWNjb3JkaW9uQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICdhY2NvcmRpb25Db25maWcnLCBmdW5jdGlvbiAoJHNjb3BlLCAkYXR0cnMsIGFjY29yZGlvbkNvbmZpZykge1xyXG4gIFxyXG4gIC8vIFRoaXMgYXJyYXkga2VlcHMgdHJhY2sgb2YgdGhlIGFjY29yZGlvbiBncm91cHNcclxuICB0aGlzLmdyb3VwcyA9IFtdO1xyXG5cclxuICAvLyBFbnN1cmUgdGhhdCBhbGwgdGhlIGdyb3VwcyBpbiB0aGlzIGFjY29yZGlvbiBhcmUgY2xvc2VkLCB1bmxlc3MgY2xvc2Utb3RoZXJzIGV4cGxpY2l0bHkgc2F5cyBub3QgdG9cclxuICB0aGlzLmNsb3NlT3RoZXJzID0gZnVuY3Rpb24ob3Blbkdyb3VwKSB7XHJcbiAgICB2YXIgY2xvc2VPdGhlcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuY2xvc2VPdGhlcnMpID8gJHNjb3BlLiRldmFsKCRhdHRycy5jbG9zZU90aGVycykgOiBhY2NvcmRpb25Db25maWcuY2xvc2VPdGhlcnM7XHJcbiAgICBpZiAoIGNsb3NlT3RoZXJzICkge1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godGhpcy5ncm91cHMsIGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgIGlmICggZ3JvdXAgIT09IG9wZW5Hcm91cCApIHtcclxuICAgICAgICAgIGdyb3VwLmlzT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBcclxuICAvLyBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIHRvIGFkZCBpdHNlbGYgdG8gdGhlIGFjY29yZGlvblxyXG4gIHRoaXMuYWRkR3JvdXAgPSBmdW5jdGlvbihncm91cFNjb3BlKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICB0aGlzLmdyb3Vwcy5wdXNoKGdyb3VwU2NvcGUpO1xyXG5cclxuICAgIGdyb3VwU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICB0aGF0LnJlbW92ZUdyb3VwKGdyb3VwU2NvcGUpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgYWNjb3JkaW9uLWdyb3VwIGRpcmVjdGl2ZSB3aGVuIHRvIHJlbW92ZSBpdHNlbGZcclxuICB0aGlzLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24oZ3JvdXApIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuZ3JvdXBzLmluZGV4T2YoZ3JvdXApO1xyXG4gICAgaWYgKCBpbmRleCAhPT0gLTEgKSB7XHJcbiAgICAgIHRoaXMuZ3JvdXBzLnNwbGljZSh0aGlzLmdyb3Vwcy5pbmRleE9mKGdyb3VwKSwgMSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbn1dKVxyXG5cclxuLy8gVGhlIGFjY29yZGlvbiBkaXJlY3RpdmUgc2ltcGx5IHNldHMgdXAgdGhlIGRpcmVjdGl2ZSBjb250cm9sbGVyXHJcbi8vIGFuZCBhZGRzIGFuIGFjY29yZGlvbiBDU1MgY2xhc3MgdG8gaXRzZWxmIGVsZW1lbnQuXHJcbi5kaXJlY3RpdmUoJ2FjY29yZGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6J0VBJyxcclxuICAgIGNvbnRyb2xsZXI6J0FjY29yZGlvbkNvbnRyb2xsZXInLFxyXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgIHJlcGxhY2U6IGZhbHNlLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWwnXHJcbiAgfTtcclxufSlcclxuXHJcbi8vIFRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIGluZGljYXRlcyBhIGJsb2NrIG9mIGh0bWwgdGhhdCB3aWxsIGV4cGFuZCBhbmQgY29sbGFwc2UgaW4gYW4gYWNjb3JkaW9uXHJcbi5kaXJlY3RpdmUoJ2FjY29yZGlvbkdyb3VwJywgWyckcGFyc2UnLCAnJHRyYW5zaXRpb24nLCAnJHRpbWVvdXQnLCBmdW5jdGlvbigkcGFyc2UsICR0cmFuc2l0aW9uLCAkdGltZW91dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXF1aXJlOideYWNjb3JkaW9uJywgICAgICAgICAvLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHRvIGJlIGluc2lkZSBhbiBhY2NvcmRpb25cclxuICAgIHJlc3RyaWN0OidFQScsXHJcbiAgICB0cmFuc2NsdWRlOnRydWUsICAgICAgICAgICAgICAvLyBJdCB0cmFuc2NsdWRlcyB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSBpbnRvIHRoZSB0ZW1wbGF0ZVxyXG4gICAgcmVwbGFjZTogdHJ1ZSwgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgZGlyZWN0aXZlIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgdGVtcGxhdGVcclxuICAgIHRlbXBsYXRlVXJsOid0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWwnLFxyXG4gICAgc2NvcGU6eyBoZWFkaW5nOidAJyB9LCAgICAgICAgLy8gQ3JlYXRlIGFuIGlzb2xhdGVkIHNjb3BlIGFuZCBpbnRlcnBvbGF0ZSB0aGUgaGVhZGluZyBhdHRyaWJ1dGUgb250byB0aGlzIHNjb3BlXHJcbiAgICBjb250cm9sbGVyOiBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG4gICAgICB0aGlzLnNldEhlYWRpbmcgPSBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5oZWFkaW5nID0gZWxlbWVudDtcclxuICAgICAgfTtcclxuICAgIH1dLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBhY2NvcmRpb25DdHJsKSB7XHJcbiAgICAgIHZhciBnZXRJc09wZW4sIHNldElzT3BlbjtcclxuXHJcbiAgICAgIGFjY29yZGlvbkN0cmwuYWRkR3JvdXAoc2NvcGUpO1xyXG5cclxuICAgICAgc2NvcGUuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIGF0dHJzLmlzT3BlbiApIHtcclxuICAgICAgICBnZXRJc09wZW4gPSAkcGFyc2UoYXR0cnMuaXNPcGVuKTtcclxuICAgICAgICBzZXRJc09wZW4gPSBnZXRJc09wZW4uYXNzaWduO1xyXG5cclxuICAgICAgICBzY29wZS4kd2F0Y2goXHJcbiAgICAgICAgICBmdW5jdGlvbiB3YXRjaElzT3BlbigpIHsgcmV0dXJuIGdldElzT3BlbihzY29wZS4kcGFyZW50KTsgfSxcclxuICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wZW4odmFsdWUpIHsgc2NvcGUuaXNPcGVuID0gdmFsdWU7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNjb3BlLmlzT3BlbiA9IGdldElzT3BlbiA/IGdldElzT3BlbihzY29wZS4kcGFyZW50KSA6IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goJ2lzT3BlbicsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCB2YWx1ZSApIHtcclxuICAgICAgICAgIGFjY29yZGlvbkN0cmwuY2xvc2VPdGhlcnMoc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIHNldElzT3BlbiApIHtcclxuICAgICAgICAgIHNldElzT3BlbihzY29wZS4kcGFyZW50LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSlcclxuXHJcbi8vIFVzZSBhY2NvcmRpb24taGVhZGluZyBiZWxvdyBhbiBhY2NvcmRpb24tZ3JvdXAgdG8gcHJvdmlkZSBhIGhlYWRpbmcgY29udGFpbmluZyBIVE1MXHJcbi8vIDxhY2NvcmRpb24tZ3JvdXA+XHJcbi8vICAgPGFjY29yZGlvbi1oZWFkaW5nPkhlYWRpbmcgY29udGFpbmluZyBIVE1MIC0gPGltZyBzcmM9XCIuLi5cIj48L2FjY29yZGlvbi1oZWFkaW5nPlxyXG4vLyA8L2FjY29yZGlvbi1ncm91cD5cclxuLmRpcmVjdGl2ZSgnYWNjb3JkaW9uSGVhZGluZycsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0VBJyxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsICAgLy8gR3JhYiB0aGUgY29udGVudHMgdG8gYmUgdXNlZCBhcyB0aGUgaGVhZGluZ1xyXG4gICAgdGVtcGxhdGU6ICcnLCAgICAgICAvLyBJbiBlZmZlY3QgcmVtb3ZlIHRoaXMgZWxlbWVudCFcclxuICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICByZXF1aXJlOiAnXmFjY29yZGlvbkdyb3VwJyxcclxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIsIHRyYW5zY2x1ZGUpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGFjY29yZGlvbkdyb3VwQ3RybCkge1xyXG4gICAgICAgIC8vIFBhc3MgdGhlIGhlYWRpbmcgdG8gdGhlIGFjY29yZGlvbi1ncm91cCBjb250cm9sbGVyXHJcbiAgICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYmUgdHJhbnNjbHVkZWQgaW50byB0aGUgcmlnaHQgcGxhY2UgaW4gdGhlIHRlbXBsYXRlXHJcbiAgICAgICAgLy8gW1RoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIHRyYW5zY2x1ZGUgY2F1c2VzIHRoZSBlbGVtZW50cyB0byBiZSBjbG9uZWQgc28gdGhhdCB0aGV5IHdvcmsgaW4gbmctcmVwZWF0XVxyXG4gICAgICAgIGFjY29yZGlvbkdyb3VwQ3RybC5zZXRIZWFkaW5nKHRyYW5zY2x1ZGUoc2NvcGUsIGZ1bmN0aW9uKCkge30pKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59KVxyXG5cclxuLy8gVXNlIGluIHRoZSBhY2NvcmRpb24tZ3JvdXAgdGVtcGxhdGUgdG8gaW5kaWNhdGUgd2hlcmUgeW91IHdhbnQgdGhlIGhlYWRpbmcgdG8gYmUgdHJhbnNjbHVkZWRcclxuLy8gWW91IG11c3QgcHJvdmlkZSB0aGUgcHJvcGVydHkgb24gdGhlIGFjY29yZGlvbi1ncm91cCBjb250cm9sbGVyIHRoYXQgd2lsbCBob2xkIHRoZSB0cmFuc2NsdWRlZCBlbGVtZW50XHJcbi8vIDxkaXYgY2xhc3M9XCJhY2NvcmRpb24tZ3JvdXBcIj5cclxuLy8gICA8ZGl2IGNsYXNzPVwiYWNjb3JkaW9uLWhlYWRpbmdcIiA+PGEgLi4uIGFjY29yZGlvbi10cmFuc2NsdWRlPVwiaGVhZGluZ1wiPi4uLjwvYT48L2Rpdj5cclxuLy8gICAuLi5cclxuLy8gPC9kaXY+XHJcbi5kaXJlY3RpdmUoJ2FjY29yZGlvblRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVxdWlyZTogJ15hY2NvcmRpb25Hcm91cCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikge1xyXG4gICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7IHJldHVybiBjb250cm9sbGVyW2F0dHIuYWNjb3JkaW9uVHJhbnNjbHVkZV07IH0sIGZ1bmN0aW9uKGhlYWRpbmcpIHtcclxuICAgICAgICBpZiAoIGhlYWRpbmcgKSB7XHJcbiAgICAgICAgICBlbGVtZW50Lmh0bWwoJycpO1xyXG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQoaGVhZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidWkuYm9vdHN0cmFwLmFsZXJ0XCIsIFtdKS5kaXJlY3RpdmUoJ2FsZXJ0JywgZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDonRUEnLFxyXG4gICAgdGVtcGxhdGVVcmw6J3RlbXBsYXRlL2FsZXJ0L2FsZXJ0Lmh0bWwnLFxyXG4gICAgdHJhbnNjbHVkZTp0cnVlLFxyXG4gICAgcmVwbGFjZTp0cnVlLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgdHlwZTogJz0nLFxyXG4gICAgICBjbG9zZTogJyYnXHJcbiAgICB9LFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHtcclxuICAgICAgc2NvcGUuY2xvc2VhYmxlID0gXCJjbG9zZVwiIGluIGlBdHRycztcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYmluZEh0bWwnLCBbXSlcclxuXHJcbiAgLmRpcmVjdGl2ZSgnYmluZEh0bWxVbnNhZmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ25nLWJpbmRpbmcnKS5kYXRhKCckYmluZGluZycsIGF0dHIuYmluZEh0bWxVbnNhZmUpO1xyXG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5iaW5kSHRtbFVuc2FmZSwgZnVuY3Rpb24gYmluZEh0bWxVbnNhZmVXYXRjaEFjdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9KTtcclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5idXR0b25zJywgW10pXHJcblxyXG4gIC5jb25zdGFudCgnYnV0dG9uQ29uZmlnJywge1xyXG4gICAgYWN0aXZlQ2xhc3M6J2FjdGl2ZScsXHJcbiAgICB0b2dnbGVFdmVudDonY2xpY2snXHJcbiAgfSlcclxuXHJcbiAgLmRpcmVjdGl2ZSgnYnRuUmFkaW8nLCBbJ2J1dHRvbkNvbmZpZycsIGZ1bmN0aW9uIChidXR0b25Db25maWcpIHtcclxuICB2YXIgYWN0aXZlQ2xhc3MgPSBidXR0b25Db25maWcuYWN0aXZlQ2xhc3MgfHwgJ2FjdGl2ZSc7XHJcbiAgdmFyIHRvZ2dsZUV2ZW50ID0gYnV0dG9uQ29uZmlnLnRvZ2dsZUV2ZW50IHx8ICdjbGljayc7XHJcblxyXG4gIHJldHVybiB7XHJcblxyXG4gICAgcmVxdWlyZTonbmdNb2RlbCcsXHJcbiAgICBsaW5rOmZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWxDdHJsKSB7XHJcblxyXG4gICAgICAvL21vZGVsIC0+IFVJXHJcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhhY3RpdmVDbGFzcywgYW5ndWxhci5lcXVhbHMobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUsIHNjb3BlLiRldmFsKGF0dHJzLmJ0blJhZGlvKSkpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy91aS0+bW9kZWxcclxuICAgICAgZWxlbWVudC5iaW5kKHRvZ2dsZUV2ZW50LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKGFjdGl2ZUNsYXNzKSkge1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzY29wZS4kZXZhbChhdHRycy5idG5SYWRpbykpO1xyXG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKVxyXG5cclxuICAuZGlyZWN0aXZlKCdidG5DaGVja2JveCcsIFsnYnV0dG9uQ29uZmlnJywgZnVuY3Rpb24gKGJ1dHRvbkNvbmZpZykge1xyXG5cclxuICB2YXIgYWN0aXZlQ2xhc3MgPSBidXR0b25Db25maWcuYWN0aXZlQ2xhc3MgfHwgJ2FjdGl2ZSc7XHJcbiAgdmFyIHRvZ2dsZUV2ZW50ID0gYnV0dG9uQ29uZmlnLnRvZ2dsZUV2ZW50IHx8ICdjbGljayc7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXF1aXJlOiduZ01vZGVsJyxcclxuICAgIGxpbms6ZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbEN0cmwpIHtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdldFRydWVWYWx1ZSgpIHtcclxuICAgICAgICB2YXIgdHJ1ZVZhbHVlID0gc2NvcGUuJGV2YWwoYXR0cnMuYnRuQ2hlY2tib3hUcnVlKTtcclxuICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQodHJ1ZVZhbHVlKSA/IHRydWVWYWx1ZSA6IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdldEZhbHNlVmFsdWUoKSB7XHJcbiAgICAgICAgdmFyIGZhbHNlVmFsdWUgPSBzY29wZS4kZXZhbChhdHRycy5idG5DaGVja2JveEZhbHNlKTtcclxuICAgICAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoZmFsc2VWYWx1ZSkgPyBmYWxzZVZhbHVlIDogZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vbW9kZWwgLT4gVUlcclxuICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKGFjdGl2ZUNsYXNzLCBhbmd1bGFyLmVxdWFscyhuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSwgZ2V0VHJ1ZVZhbHVlKCkpKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vdWktPm1vZGVsXHJcbiAgICAgIGVsZW1lbnQuYmluZCh0b2dnbGVFdmVudCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQuaGFzQ2xhc3MoYWN0aXZlQ2xhc3MpID8gZ2V0RmFsc2VWYWx1ZSgpIDogZ2V0VHJ1ZVZhbHVlKCkpO1xyXG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcbi8qKlxyXG4qIEBuZ2RvYyBvdmVydmlld1xyXG4qIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbFxyXG4qXHJcbiogQGRlc2NyaXB0aW9uXHJcbiogQW5ndWxhckpTIHZlcnNpb24gb2YgYW4gaW1hZ2UgY2Fyb3VzZWwuXHJcbipcclxuKi9cclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jYXJvdXNlbCcsIFsndWkuYm9vdHN0cmFwLnRyYW5zaXRpb24nXSlcclxuLmNvbnRyb2xsZXIoJ0Nhcm91c2VsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJyR0cmFuc2l0aW9uJywgJyRxJywgZnVuY3Rpb24gKCRzY29wZSwgJHRpbWVvdXQsICR0cmFuc2l0aW9uLCAkcSkge1xyXG4gIHZhciBzZWxmID0gdGhpcyxcclxuICAgIHNsaWRlcyA9IHNlbGYuc2xpZGVzID0gW10sXHJcbiAgICBjdXJyZW50SW5kZXggPSAtMSxcclxuICAgIGN1cnJlbnRUaW1lb3V0LCBpc1BsYXlpbmc7XHJcbiAgc2VsZi5jdXJyZW50U2xpZGUgPSBudWxsO1xyXG5cclxuICAvKiBkaXJlY3Rpb246IFwicHJldlwiIG9yIFwibmV4dFwiICovXHJcbiAgc2VsZi5zZWxlY3QgPSBmdW5jdGlvbihuZXh0U2xpZGUsIGRpcmVjdGlvbikge1xyXG4gICAgdmFyIG5leHRJbmRleCA9IHNsaWRlcy5pbmRleE9mKG5leHRTbGlkZSk7XHJcbiAgICAvL0RlY2lkZSBkaXJlY3Rpb24gaWYgaXQncyBub3QgZ2l2ZW5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBkaXJlY3Rpb24gPSBuZXh0SW5kZXggPiBjdXJyZW50SW5kZXggPyBcIm5leHRcIiA6IFwicHJldlwiO1xyXG4gICAgfVxyXG4gICAgaWYgKG5leHRTbGlkZSAmJiBuZXh0U2xpZGUgIT09IHNlbGYuY3VycmVudFNsaWRlKSB7XHJcbiAgICAgIGlmICgkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uKSB7XHJcbiAgICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbi5jYW5jZWwoKTtcclxuICAgICAgICAvL1RpbWVvdXQgc28gbmctY2xhc3MgaW4gdGVtcGxhdGUgaGFzIHRpbWUgdG8gZml4IGNsYXNzZXMgZm9yIGZpbmlzaGVkIHNsaWRlXHJcbiAgICAgICAgJHRpbWVvdXQoZ29OZXh0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBnb05leHQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ29OZXh0KCkge1xyXG4gICAgICAvL0lmIHdlIGhhdmUgYSBzbGlkZSB0byB0cmFuc2l0aW9uIGZyb20gYW5kIHdlIGhhdmUgYSB0cmFuc2l0aW9uIHR5cGUgYW5kIHdlJ3JlIGFsbG93ZWQsIGdvXHJcbiAgICAgIGlmIChzZWxmLmN1cnJlbnRTbGlkZSAmJiBhbmd1bGFyLmlzU3RyaW5nKGRpcmVjdGlvbikgJiYgISRzY29wZS5ub1RyYW5zaXRpb24gJiYgbmV4dFNsaWRlLiRlbGVtZW50KSB7XHJcbiAgICAgICAgLy9XZSBzaG91bGRuJ3QgZG8gY2xhc3MgbWFuaXAgaW4gaGVyZSwgYnV0IGl0J3MgdGhlIHNhbWUgd2VpcmQgdGhpbmcgYm9vdHN0cmFwIGRvZXMuIG5lZWQgdG8gZml4IHNvbWV0aW1lXHJcbiAgICAgICAgbmV4dFNsaWRlLiRlbGVtZW50LmFkZENsYXNzKGRpcmVjdGlvbik7XHJcbiAgICAgICAgdmFyIHJlZmxvdyA9IG5leHRTbGlkZS4kZWxlbWVudFswXS5vZmZzZXRXaWR0aDsgLy9mb3JjZSByZWZsb3dcclxuXHJcbiAgICAgICAgLy9TZXQgYWxsIG90aGVyIHNsaWRlcyB0byBzdG9wIGRvaW5nIHRoZWlyIHN0dWZmIGZvciB0aGUgbmV3IHRyYW5zaXRpb25cclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2xpZGVzLCBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICAgICAgYW5ndWxhci5leHRlbmQoc2xpZGUsIHtkaXJlY3Rpb246ICcnLCBlbnRlcmluZzogZmFsc2UsIGxlYXZpbmc6IGZhbHNlLCBhY3RpdmU6IGZhbHNlfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQobmV4dFNsaWRlLCB7ZGlyZWN0aW9uOiBkaXJlY3Rpb24sIGFjdGl2ZTogdHJ1ZSwgZW50ZXJpbmc6IHRydWV9KTtcclxuICAgICAgICBhbmd1bGFyLmV4dGVuZChzZWxmLmN1cnJlbnRTbGlkZXx8e30sIHtkaXJlY3Rpb246IGRpcmVjdGlvbiwgbGVhdmluZzogdHJ1ZX0pO1xyXG5cclxuICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gJHRyYW5zaXRpb24obmV4dFNsaWRlLiRlbGVtZW50LCB7fSk7XHJcbiAgICAgICAgLy9XZSBoYXZlIHRvIGNyZWF0ZSBuZXcgcG9pbnRlcnMgaW5zaWRlIGEgY2xvc3VyZSBzaW5jZSBuZXh0ICYgY3VycmVudCB3aWxsIGNoYW5nZVxyXG4gICAgICAgIChmdW5jdGlvbihuZXh0LGN1cnJlbnQpIHtcclxuICAgICAgICAgICRzY29wZS4kY3VycmVudFRyYW5zaXRpb24udGhlbihcclxuICAgICAgICAgICAgZnVuY3Rpb24oKXsgdHJhbnNpdGlvbkRvbmUobmV4dCwgY3VycmVudCk7IH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKCl7IHRyYW5zaXRpb25Eb25lKG5leHQsIGN1cnJlbnQpOyB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0obmV4dFNsaWRlLCBzZWxmLmN1cnJlbnRTbGlkZSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyYW5zaXRpb25Eb25lKG5leHRTbGlkZSwgc2VsZi5jdXJyZW50U2xpZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuY3VycmVudFNsaWRlID0gbmV4dFNsaWRlO1xyXG4gICAgICBjdXJyZW50SW5kZXggPSBuZXh0SW5kZXg7XHJcbiAgICAgIC8vZXZlcnkgdGltZSB5b3UgY2hhbmdlIHNsaWRlcywgcmVzZXQgdGhlIHRpbWVyXHJcbiAgICAgIHJlc3RhcnRUaW1lcigpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdHJhbnNpdGlvbkRvbmUobmV4dCwgY3VycmVudCkge1xyXG4gICAgICBhbmd1bGFyLmV4dGVuZChuZXh0LCB7ZGlyZWN0aW9uOiAnJywgYWN0aXZlOiB0cnVlLCBsZWF2aW5nOiBmYWxzZSwgZW50ZXJpbmc6IGZhbHNlfSk7XHJcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGN1cnJlbnR8fHt9LCB7ZGlyZWN0aW9uOiAnJywgYWN0aXZlOiBmYWxzZSwgbGVhdmluZzogZmFsc2UsIGVudGVyaW5nOiBmYWxzZX0pO1xyXG4gICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKiBBbGxvdyBvdXRzaWRlIHBlb3BsZSB0byBjYWxsIGluZGV4T2Ygb24gc2xpZGVzIGFycmF5ICovXHJcbiAgc2VsZi5pbmRleE9mU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgcmV0dXJuIHNsaWRlcy5pbmRleE9mKHNsaWRlKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG5ld0luZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgc2xpZGVzLmxlbmd0aDtcclxuXHJcbiAgICAvL1ByZXZlbnQgdGhpcyB1c2VyLXRyaWdnZXJlZCB0cmFuc2l0aW9uIGZyb20gb2NjdXJyaW5nIGlmIHRoZXJlIGlzIGFscmVhZHkgb25lIGluIHByb2dyZXNzXHJcbiAgICBpZiAoISRzY29wZS4kY3VycmVudFRyYW5zaXRpb24pIHtcclxuICAgICAgcmV0dXJuIHNlbGYuc2VsZWN0KHNsaWRlc1tuZXdJbmRleF0sICduZXh0Jyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnByZXYgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBuZXdJbmRleCA9IGN1cnJlbnRJbmRleCAtIDEgPCAwID8gc2xpZGVzLmxlbmd0aCAtIDEgOiBjdXJyZW50SW5kZXggLSAxO1xyXG5cclxuICAgIC8vUHJldmVudCB0aGlzIHVzZXItdHJpZ2dlcmVkIHRyYW5zaXRpb24gZnJvbSBvY2N1cnJpbmcgaWYgdGhlcmUgaXMgYWxyZWFkeSBvbmUgaW4gcHJvZ3Jlc3NcclxuICAgIGlmICghJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbikge1xyXG4gICAgICByZXR1cm4gc2VsZi5zZWxlY3Qoc2xpZGVzW25ld0luZGV4XSwgJ3ByZXYnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgIHNlbGYuc2VsZWN0KHNsaWRlKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgIHJldHVybiBzZWxmLmN1cnJlbnRTbGlkZSA9PT0gc2xpZGU7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNsaWRlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHNsaWRlcztcclxuICB9O1xyXG5cclxuICAkc2NvcGUuJHdhdGNoKCdpbnRlcnZhbCcsIHJlc3RhcnRUaW1lcik7XHJcbiAgZnVuY3Rpb24gcmVzdGFydFRpbWVyKCkge1xyXG4gICAgaWYgKGN1cnJlbnRUaW1lb3V0KSB7XHJcbiAgICAgICR0aW1lb3V0LmNhbmNlbChjdXJyZW50VGltZW91dCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnbygpIHtcclxuICAgICAgaWYgKGlzUGxheWluZykge1xyXG4gICAgICAgICRzY29wZS5uZXh0KCk7XHJcbiAgICAgICAgcmVzdGFydFRpbWVyKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJHNjb3BlLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBpbnRlcnZhbCA9ICskc2NvcGUuaW50ZXJ2YWw7XHJcbiAgICBpZiAoIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbD49MCkge1xyXG4gICAgICBjdXJyZW50VGltZW91dCA9ICR0aW1lb3V0KGdvLCBpbnRlcnZhbCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gICRzY29wZS5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoIWlzUGxheWluZykge1xyXG4gICAgICBpc1BsYXlpbmcgPSB0cnVlO1xyXG4gICAgICByZXN0YXJ0VGltZXIoKTtcclxuICAgIH1cclxuICB9O1xyXG4gICRzY29wZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUubm9QYXVzZSkge1xyXG4gICAgICBpc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgaWYgKGN1cnJlbnRUaW1lb3V0KSB7XHJcbiAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGN1cnJlbnRUaW1lb3V0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNlbGYuYWRkU2xpZGUgPSBmdW5jdGlvbihzbGlkZSwgZWxlbWVudCkge1xyXG4gICAgc2xpZGUuJGVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgc2xpZGVzLnB1c2goc2xpZGUpO1xyXG4gICAgLy9pZiB0aGlzIGlzIHRoZSBmaXJzdCBzbGlkZSBvciB0aGUgc2xpZGUgaXMgc2V0IHRvIGFjdGl2ZSwgc2VsZWN0IGl0XHJcbiAgICBpZihzbGlkZXMubGVuZ3RoID09PSAxIHx8IHNsaWRlLmFjdGl2ZSkge1xyXG4gICAgICBzZWxmLnNlbGVjdChzbGlkZXNbc2xpZGVzLmxlbmd0aC0xXSk7XHJcbiAgICAgIGlmIChzbGlkZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAkc2NvcGUucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzbGlkZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBzZWxmLnJlbW92ZVNsaWRlID0gZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgIC8vZ2V0IHRoZSBpbmRleCBvZiB0aGUgc2xpZGUgaW5zaWRlIHRoZSBjYXJvdXNlbFxyXG4gICAgdmFyIGluZGV4ID0gc2xpZGVzLmluZGV4T2Yoc2xpZGUpO1xyXG4gICAgc2xpZGVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICBpZiAoc2xpZGVzLmxlbmd0aCA+IDAgJiYgc2xpZGUuYWN0aXZlKSB7XHJcbiAgICAgIGlmIChpbmRleCA+PSBzbGlkZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgc2VsZi5zZWxlY3Qoc2xpZGVzW2luZGV4LTFdKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbaW5kZXhdKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChjdXJyZW50SW5kZXggPiBpbmRleCkge1xyXG4gICAgICBjdXJyZW50SW5kZXgtLTtcclxuICAgIH1cclxuICB9O1xyXG59XSlcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbC5kaXJlY3RpdmU6Y2Fyb3VzZWxcclxuICogQHJlc3RyaWN0IEVBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDYXJvdXNlbCBpcyB0aGUgb3V0ZXIgY29udGFpbmVyIGZvciBhIHNldCBvZiBpbWFnZSAnc2xpZGVzJyB0byBzaG93Y2FzZS5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXI9fSBpbnRlcnZhbCBUaGUgdGltZSwgaW4gbWlsbGlzZWNvbmRzLCB0aGF0IGl0IHdpbGwgdGFrZSB0aGUgY2Fyb3VzZWwgdG8gZ28gdG8gdGhlIG5leHQgc2xpZGUuXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vVHJhbnNpdGlvbiBXaGV0aGVyIHRvIGRpc2FibGUgdHJhbnNpdGlvbnMgb24gdGhlIGNhcm91c2VsLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBub1BhdXNlIFdoZXRoZXIgdG8gZGlzYWJsZSBwYXVzaW5nIG9uIHRoZSBjYXJvdXNlbCAoYnkgZGVmYXVsdCwgdGhlIGNhcm91c2VsIGludGVydmFsIHBhdXNlcyBvbiBob3ZlcikuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxyXG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICA8Y2Fyb3VzZWw+XHJcbiAgICAgIDxzbGlkZT5cclxuICAgICAgICA8aW1nIHNyYz1cImh0dHA6Ly9wbGFjZWtpdHRlbi5jb20vMTUwLzE1MFwiIHN0eWxlPVwibWFyZ2luOmF1dG87XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWNhcHRpb25cIj5cclxuICAgICAgICAgIDxwPkJlYXV0aWZ1bCE8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvc2xpZGU+XHJcbiAgICAgIDxzbGlkZT5cclxuICAgICAgICA8aW1nIHNyYz1cImh0dHA6Ly9wbGFjZWtpdHRlbi5jb20vMTAwLzE1MFwiIHN0eWxlPVwibWFyZ2luOmF1dG87XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWNhcHRpb25cIj5cclxuICAgICAgICAgIDxwPkQnYXd3ITwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9zbGlkZT5cclxuICAgIDwvY2Fyb3VzZWw+XHJcbiAgPC9maWxlPlxyXG4gIDxmaWxlIG5hbWU9XCJkZW1vLmNzc1wiPlxyXG4gICAgLmNhcm91c2VsLWluZGljYXRvcnMge1xyXG4gICAgICB0b3A6IGF1dG87XHJcbiAgICAgIGJvdHRvbTogMTVweDtcclxuICAgIH1cclxuICA8L2ZpbGU+XHJcbjwvZXhhbXBsZT5cclxuICovXHJcbi5kaXJlY3RpdmUoJ2Nhcm91c2VsJywgW2Z1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0VBJyxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgY29udHJvbGxlcjogJ0Nhcm91c2VsQ29udHJvbGxlcicsXHJcbiAgICByZXF1aXJlOiAnY2Fyb3VzZWwnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIGludGVydmFsOiAnPScsXHJcbiAgICAgIG5vVHJhbnNpdGlvbjogJz0nLFxyXG4gICAgICBub1BhdXNlOiAnPSdcclxuICAgIH1cclxuICB9O1xyXG59XSlcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbC5kaXJlY3RpdmU6c2xpZGVcclxuICogQHJlc3RyaWN0IEVBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDcmVhdGVzIGEgc2xpZGUgaW5zaWRlIGEge0BsaW5rIHVpLmJvb3RzdHJhcC5jYXJvdXNlbC5kaXJlY3RpdmU6Y2Fyb3VzZWwgY2Fyb3VzZWx9LiAgTXVzdCBiZSBwbGFjZWQgYXMgYSBjaGlsZCBvZiBhIGNhcm91c2VsIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGFjdGl2ZSBNb2RlbCBiaW5kaW5nLCB3aGV0aGVyIG9yIG5vdCB0aGlzIHNsaWRlIGlzIGN1cnJlbnRseSBhY3RpdmUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxyXG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbjxkaXYgbmctY29udHJvbGxlcj1cIkNhcm91c2VsRGVtb0N0cmxcIj5cclxuICA8Y2Fyb3VzZWw+XHJcbiAgICA8c2xpZGUgbmctcmVwZWF0PVwic2xpZGUgaW4gc2xpZGVzXCIgYWN0aXZlPVwic2xpZGUuYWN0aXZlXCI+XHJcbiAgICAgIDxpbWcgbmctc3JjPVwie3tzbGlkZS5pbWFnZX19XCIgc3R5bGU9XCJtYXJnaW46YXV0bztcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWNhcHRpb25cIj5cclxuICAgICAgICA8aDQ+U2xpZGUge3skaW5kZXh9fTwvaDQ+XHJcbiAgICAgICAgPHA+e3tzbGlkZS50ZXh0fX08L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9zbGlkZT5cclxuICA8L2Nhcm91c2VsPlxyXG4gIDxkaXYgY2xhc3M9XCJyb3ctZmx1aWRcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJzcGFuNlwiPlxyXG4gICAgICA8dWw+XHJcbiAgICAgICAgPGxpIG5nLXJlcGVhdD1cInNsaWRlIGluIHNsaWRlc1wiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbWluaVwiIG5nLWNsYXNzPVwieydidG4taW5mbyc6ICFzbGlkZS5hY3RpdmUsICdidG4tc3VjY2Vzcyc6IHNsaWRlLmFjdGl2ZX1cIiBuZy1kaXNhYmxlZD1cInNsaWRlLmFjdGl2ZVwiIG5nLWNsaWNrPVwic2xpZGUuYWN0aXZlID0gdHJ1ZVwiPnNlbGVjdDwvYnV0dG9uPlxyXG4gICAgICAgICAge3skaW5kZXh9fToge3tzbGlkZS50ZXh0fX1cclxuICAgICAgICA8L2xpPlxyXG4gICAgICA8L3VsPlxyXG4gICAgICA8YSBjbGFzcz1cImJ0blwiIG5nLWNsaWNrPVwiYWRkU2xpZGUoKVwiPkFkZCBTbGlkZTwvYT5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInNwYW42XCI+XHJcbiAgICAgIEludGVydmFsLCBpbiBtaWxsaXNlY29uZHM6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJteUludGVydmFsXCI+XHJcbiAgICAgIDxiciAvPkVudGVyIGEgbmVnYXRpdmUgbnVtYmVyIHRvIHN0b3AgdGhlIGludGVydmFsLlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvZGl2PlxyXG4gIDwvZmlsZT5cclxuICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XHJcbmZ1bmN0aW9uIENhcm91c2VsRGVtb0N0cmwoJHNjb3BlKSB7XHJcbiAgJHNjb3BlLm15SW50ZXJ2YWwgPSA1MDAwO1xyXG4gIHZhciBzbGlkZXMgPSAkc2NvcGUuc2xpZGVzID0gW107XHJcbiAgJHNjb3BlLmFkZFNsaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbmV3V2lkdGggPSAyMDAgKyAoKHNsaWRlcy5sZW5ndGggKyAoMjUgKiBzbGlkZXMubGVuZ3RoKSkgJSAxNTApO1xyXG4gICAgc2xpZGVzLnB1c2goe1xyXG4gICAgICBpbWFnZTogJ2h0dHA6Ly9wbGFjZWtpdHRlbi5jb20vJyArIG5ld1dpZHRoICsgJy8yMDAnLFxyXG4gICAgICB0ZXh0OiBbJ01vcmUnLCdFeHRyYScsJ0xvdHMgb2YnLCdTdXJwbHVzJ11bc2xpZGVzLmxlbmd0aCAlIDRdICsgJyAnXHJcbiAgICAgICAgWydDYXRzJywgJ0tpdHR5cycsICdGZWxpbmVzJywgJ0N1dGVzJ11bc2xpZGVzLmxlbmd0aCAlIDRdXHJcbiAgICB9KTtcclxuICB9O1xyXG4gIGZvciAodmFyIGk9MDsgaTw0OyBpKyspICRzY29wZS5hZGRTbGlkZSgpO1xyXG59XHJcbiAgPC9maWxlPlxyXG4gIDxmaWxlIG5hbWU9XCJkZW1vLmNzc1wiPlxyXG4gICAgLmNhcm91c2VsLWluZGljYXRvcnMge1xyXG4gICAgICB0b3A6IGF1dG87XHJcbiAgICAgIGJvdHRvbTogMTVweDtcclxuICAgIH1cclxuICA8L2ZpbGU+XHJcbjwvZXhhbXBsZT5cclxuKi9cclxuXHJcbi5kaXJlY3RpdmUoJ3NsaWRlJywgWyckcGFyc2UnLCBmdW5jdGlvbigkcGFyc2UpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVxdWlyZTogJ15jYXJvdXNlbCcsXHJcbiAgICByZXN0cmljdDogJ0VBJyxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICB9LFxyXG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY2Fyb3VzZWxDdHJsKSB7XHJcbiAgICAgIC8vU2V0IHVwIG9wdGlvbmFsICdhY3RpdmUnID0gYmluZGluZ1xyXG4gICAgICBpZiAoYXR0cnMuYWN0aXZlKSB7XHJcbiAgICAgICAgdmFyIGdldEFjdGl2ZSA9ICRwYXJzZShhdHRycy5hY3RpdmUpO1xyXG4gICAgICAgIHZhciBzZXRBY3RpdmUgPSBnZXRBY3RpdmUuYXNzaWduO1xyXG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBzY29wZS5hY3RpdmUgPSBnZXRBY3RpdmUoc2NvcGUuJHBhcmVudCk7XHJcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIHBhcmVudEFjdGl2ZVdhdGNoKCkge1xyXG4gICAgICAgICAgdmFyIHBhcmVudEFjdGl2ZSA9IGdldEFjdGl2ZShzY29wZS4kcGFyZW50KTtcclxuXHJcbiAgICAgICAgICBpZiAocGFyZW50QWN0aXZlICE9PSBzY29wZS5hY3RpdmUpIHtcclxuICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcclxuICAgICAgICAgICAgaWYgKHBhcmVudEFjdGl2ZSAhPT0gbGFzdFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXHJcbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gc2NvcGUuYWN0aXZlID0gcGFyZW50QWN0aXZlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc29cclxuICAgICAgICAgICAgICBzZXRBY3RpdmUoc2NvcGUuJHBhcmVudCwgcGFyZW50QWN0aXZlID0gbGFzdFZhbHVlID0gc2NvcGUuYWN0aXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHBhcmVudEFjdGl2ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2Fyb3VzZWxDdHJsLmFkZFNsaWRlKHNjb3BlLCBlbGVtZW50KTtcclxuICAgICAgLy93aGVuIHRoZSBzY29wZSBpcyBkZXN0cm95ZWQgdGhlbiByZW1vdmUgdGhlIHNsaWRlIGZyb20gdGhlIGN1cnJlbnQgc2xpZGVzIGFycmF5XHJcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjYXJvdXNlbEN0cmwucmVtb3ZlU2xpZGUoc2NvcGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlJywgZnVuY3Rpb24oYWN0aXZlKSB7XHJcbiAgICAgICAgaWYgKGFjdGl2ZSkge1xyXG4gICAgICAgICAgY2Fyb3VzZWxDdHJsLnNlbGVjdChzY29wZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgW10pXHJcblxyXG4vKipcclxuICogQSBzZXQgb2YgdXRpbGl0eSBtZXRob2RzIHRoYXQgY2FuIGJlIHVzZSB0byByZXRyaWV2ZSBwb3NpdGlvbiBvZiBET00gZWxlbWVudHMuXHJcbiAqIEl0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2hlcmUgd2UgbmVlZCB0byBhYnNvbHV0ZS1wb3NpdGlvbiBET00gZWxlbWVudHMgaW5cclxuICogcmVsYXRpb24gdG8gb3RoZXIsIGV4aXN0aW5nIGVsZW1lbnRzICh0aGlzIGlzIHRoZSBjYXNlIGZvciB0b29sdGlwcywgcG9wb3ZlcnMsXHJcbiAqIHR5cGVhaGVhZCBzdWdnZXN0aW9ucyBldGMuKS5cclxuICovXHJcbiAgLmZhY3RvcnkoJyRwb3NpdGlvbicsIFsnJGRvY3VtZW50JywgJyR3aW5kb3cnLCBmdW5jdGlvbiAoJGRvY3VtZW50LCAkd2luZG93KSB7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIGNzc3Byb3ApIHtcclxuICAgICAgaWYgKGVsLmN1cnJlbnRTdHlsZSkgeyAvL0lFXHJcbiAgICAgICAgcmV0dXJuIGVsLmN1cnJlbnRTdHlsZVtjc3Nwcm9wXTtcclxuICAgICAgfSBlbHNlIGlmICgkd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVtjc3Nwcm9wXTtcclxuICAgICAgfVxyXG4gICAgICAvLyBmaW5hbGx5IHRyeSBhbmQgZ2V0IGlubGluZSBzdHlsZVxyXG4gICAgICByZXR1cm4gZWwuc3R5bGVbY3NzcHJvcF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgYSBnaXZlbiBlbGVtZW50IGlzIHN0YXRpY2FsbHkgcG9zaXRpb25lZFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSByYXcgRE9NIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXNTdGF0aWNQb3NpdGlvbmVkKGVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIChnZXRTdHlsZShlbGVtZW50LCBcInBvc2l0aW9uXCIpIHx8ICdzdGF0aWMnICkgPT09ICdzdGF0aWMnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgY2xvc2VzdCwgbm9uLXN0YXRpY2FsbHkgcG9zaXRpb25lZCBwYXJlbnRPZmZzZXQgb2YgYSBnaXZlbiBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICB2YXIgcGFyZW50T2Zmc2V0RWwgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICB2YXIgZG9jRG9tRWwgPSAkZG9jdW1lbnRbMF07XHJcbiAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBkb2NEb21FbDtcclxuICAgICAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGRvY0RvbUVsICYmIGlzU3RhdGljUG9zaXRpb25lZChvZmZzZXRQYXJlbnQpICkge1xyXG4gICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2NEb21FbDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIHBvc2l0aW9uIGZ1bmN0aW9uOlxyXG4gICAgICAgKiBodHRwOi8vYXBpLmpxdWVyeS5jb20vcG9zaXRpb24vXHJcbiAgICAgICAqL1xyXG4gICAgICBwb3NpdGlvbjogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgZWxCQ1IgPSB0aGlzLm9mZnNldChlbGVtZW50KTtcclxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50QkNSID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcclxuICAgICAgICB2YXIgb2Zmc2V0UGFyZW50RWwgPSBwYXJlbnRPZmZzZXRFbChlbGVtZW50WzBdKTtcclxuICAgICAgICBpZiAob2Zmc2V0UGFyZW50RWwgIT0gJGRvY3VtZW50WzBdKSB7XHJcbiAgICAgICAgICBvZmZzZXRQYXJlbnRCQ1IgPSB0aGlzLm9mZnNldChhbmd1bGFyLmVsZW1lbnQob2Zmc2V0UGFyZW50RWwpKTtcclxuICAgICAgICAgIG9mZnNldFBhcmVudEJDUi50b3AgKz0gb2Zmc2V0UGFyZW50RWwuY2xpZW50VG9wIC0gb2Zmc2V0UGFyZW50RWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgb2Zmc2V0UGFyZW50QkNSLmxlZnQgKz0gb2Zmc2V0UGFyZW50RWwuY2xpZW50TGVmdCAtIG9mZnNldFBhcmVudEVsLnNjcm9sbExlZnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgd2lkdGg6IGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSxcclxuICAgICAgICAgIGhlaWdodDogZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKSxcclxuICAgICAgICAgIHRvcDogZWxCQ1IudG9wIC0gb2Zmc2V0UGFyZW50QkNSLnRvcCxcclxuICAgICAgICAgIGxlZnQ6IGVsQkNSLmxlZnQgLSBvZmZzZXRQYXJlbnRCQ1IubGVmdFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUHJvdmlkZXMgcmVhZC1vbmx5IGVxdWl2YWxlbnQgb2YgalF1ZXJ5J3Mgb2Zmc2V0IGZ1bmN0aW9uOlxyXG4gICAgICAgKiBodHRwOi8vYXBpLmpxdWVyeS5jb20vb2Zmc2V0L1xyXG4gICAgICAgKi9cclxuICAgICAgb2Zmc2V0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBib3VuZGluZ0NsaWVudFJlY3QgPSBlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB3aWR0aDogZWxlbWVudC5wcm9wKCdvZmZzZXRXaWR0aCcpLFxyXG4gICAgICAgICAgaGVpZ2h0OiBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpLFxyXG4gICAgICAgICAgdG9wOiBib3VuZGluZ0NsaWVudFJlY3QudG9wICsgKCR3aW5kb3cucGFnZVlPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmJvZHkuc2Nyb2xsVG9wIHx8ICRkb2N1bWVudFswXS5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSxcclxuICAgICAgICAgIGxlZnQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0ICsgKCR3aW5kb3cucGFnZVhPZmZzZXQgfHwgJGRvY3VtZW50WzBdLmJvZHkuc2Nyb2xsTGVmdCAgfHwgJGRvY3VtZW50WzBdLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0KVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5kYXRlcGlja2VyJywgWyd1aS5ib290c3RyYXAucG9zaXRpb24nXSlcclxuXHJcbi5jb25zdGFudCgnZGF0ZXBpY2tlckNvbmZpZycsIHtcclxuICBkYXlGb3JtYXQ6ICdkZCcsXHJcbiAgbW9udGhGb3JtYXQ6ICdNTU1NJyxcclxuICB5ZWFyRm9ybWF0OiAneXl5eScsXHJcbiAgZGF5SGVhZGVyRm9ybWF0OiAnRUVFJyxcclxuICBkYXlUaXRsZUZvcm1hdDogJ01NTU0geXl5eScsXHJcbiAgbW9udGhUaXRsZUZvcm1hdDogJ3l5eXknLFxyXG4gIHNob3dXZWVrczogdHJ1ZSxcclxuICBzdGFydGluZ0RheTogMCxcclxuICB5ZWFyUmFuZ2U6IDIwLFxyXG4gIG1pbkRhdGU6IG51bGwsXHJcbiAgbWF4RGF0ZTogbnVsbFxyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ0RhdGVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ2RhdGVGaWx0ZXInLCAnZGF0ZXBpY2tlckNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBkYXRlRmlsdGVyLCBkdENvbmZpZykge1xyXG4gIHZhciBmb3JtYXQgPSB7XHJcbiAgICBkYXk6ICAgICAgICBnZXRWYWx1ZSgkYXR0cnMuZGF5Rm9ybWF0LCAgICAgICAgZHRDb25maWcuZGF5Rm9ybWF0KSxcclxuICAgIG1vbnRoOiAgICAgIGdldFZhbHVlKCRhdHRycy5tb250aEZvcm1hdCwgICAgICBkdENvbmZpZy5tb250aEZvcm1hdCksXHJcbiAgICB5ZWFyOiAgICAgICBnZXRWYWx1ZSgkYXR0cnMueWVhckZvcm1hdCwgICAgICAgZHRDb25maWcueWVhckZvcm1hdCksXHJcbiAgICBkYXlIZWFkZXI6ICBnZXRWYWx1ZSgkYXR0cnMuZGF5SGVhZGVyRm9ybWF0LCAgZHRDb25maWcuZGF5SGVhZGVyRm9ybWF0KSxcclxuICAgIGRheVRpdGxlOiAgIGdldFZhbHVlKCRhdHRycy5kYXlUaXRsZUZvcm1hdCwgICBkdENvbmZpZy5kYXlUaXRsZUZvcm1hdCksXHJcbiAgICBtb250aFRpdGxlOiBnZXRWYWx1ZSgkYXR0cnMubW9udGhUaXRsZUZvcm1hdCwgZHRDb25maWcubW9udGhUaXRsZUZvcm1hdClcclxuICB9LFxyXG4gIHN0YXJ0aW5nRGF5ID0gZ2V0VmFsdWUoJGF0dHJzLnN0YXJ0aW5nRGF5LCAgICAgIGR0Q29uZmlnLnN0YXJ0aW5nRGF5KSxcclxuICB5ZWFyUmFuZ2UgPSAgIGdldFZhbHVlKCRhdHRycy55ZWFyUmFuZ2UsICAgICAgICBkdENvbmZpZy55ZWFyUmFuZ2UpO1xyXG5cclxuICB0aGlzLm1pbkRhdGUgPSBkdENvbmZpZy5taW5EYXRlID8gbmV3IERhdGUoZHRDb25maWcubWluRGF0ZSkgOiBudWxsO1xyXG4gIHRoaXMubWF4RGF0ZSA9IGR0Q29uZmlnLm1heERhdGUgPyBuZXcgRGF0ZShkdENvbmZpZy5tYXhEYXRlKSA6IG51bGw7XHJcblxyXG4gIGZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcclxuICAgIHJldHVybiBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCh2YWx1ZSkgOiBkZWZhdWx0VmFsdWU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCggeWVhciwgbW9udGggKSB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGgsIDApLmdldERhdGUoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldERhdGVzKHN0YXJ0RGF0ZSwgbikge1xyXG4gICAgdmFyIGRhdGVzID0gbmV3IEFycmF5KG4pO1xyXG4gICAgdmFyIGN1cnJlbnQgPSBzdGFydERhdGUsIGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBuKSB7XHJcbiAgICAgIGRhdGVzW2krK10gPSBuZXcgRGF0ZShjdXJyZW50KTtcclxuICAgICAgY3VycmVudC5zZXREYXRlKCBjdXJyZW50LmdldERhdGUoKSArIDEgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRlcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VEYXRlKGRhdGUsIGZvcm1hdCwgaXNTZWxlY3RlZCwgaXNTZWNvbmRhcnkpIHtcclxuICAgIHJldHVybiB7IGRhdGU6IGRhdGUsIGxhYmVsOiBkYXRlRmlsdGVyKGRhdGUsIGZvcm1hdCksIHNlbGVjdGVkOiAhIWlzU2VsZWN0ZWQsIHNlY29uZGFyeTogISFpc1NlY29uZGFyeSB9O1xyXG4gIH1cclxuXHJcbiAgdGhpcy5tb2RlcyA9IFtcclxuICAgIHtcclxuICAgICAgbmFtZTogJ2RheScsXHJcbiAgICAgIGdldFZpc2libGVEYXRlczogZnVuY3Rpb24oZGF0ZSwgc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggPSBkYXRlLmdldE1vbnRoKCksIGZpcnN0RGF5T2ZNb250aCA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcclxuICAgICAgICB2YXIgZGlmZmVyZW5jZSA9IHN0YXJ0aW5nRGF5IC0gZmlyc3REYXlPZk1vbnRoLmdldERheSgpLFxyXG4gICAgICAgIG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID0gKGRpZmZlcmVuY2UgPiAwKSA/IDcgLSBkaWZmZXJlbmNlIDogLSBkaWZmZXJlbmNlLFxyXG4gICAgICAgIGZpcnN0RGF0ZSA9IG5ldyBEYXRlKGZpcnN0RGF5T2ZNb250aCksIG51bURhdGVzID0gMDtcclxuXHJcbiAgICAgICAgaWYgKCBudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCA+IDAgKSB7XHJcbiAgICAgICAgICBmaXJzdERhdGUuc2V0RGF0ZSggLSBudW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCArIDEgKTtcclxuICAgICAgICAgIG51bURhdGVzICs9IG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoOyAvLyBQcmV2aW91c1xyXG4gICAgICAgIH1cclxuICAgICAgICBudW1EYXRlcyArPSBnZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCArIDEpOyAvLyBDdXJyZW50XHJcbiAgICAgICAgbnVtRGF0ZXMgKz0gKDcgLSBudW1EYXRlcyAlIDcpICUgNzsgLy8gTmV4dFxyXG5cclxuICAgICAgICB2YXIgZGF5cyA9IGdldERhdGVzKGZpcnN0RGF0ZSwgbnVtRGF0ZXMpLCBsYWJlbHMgPSBuZXcgQXJyYXkoNyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1EYXRlczsgaSArKykge1xyXG4gICAgICAgICAgdmFyIGR0ID0gbmV3IERhdGUoZGF5c1tpXSk7XHJcbiAgICAgICAgICBkYXlzW2ldID0gbWFrZURhdGUoZHQsIGZvcm1hdC5kYXksIChzZWxlY3RlZCAmJiBzZWxlY3RlZC5nZXREYXRlKCkgPT09IGR0LmdldERhdGUoKSAmJiBzZWxlY3RlZC5nZXRNb250aCgpID09PSBkdC5nZXRNb250aCgpICYmIHNlbGVjdGVkLmdldEZ1bGxZZWFyKCkgPT09IGR0LmdldEZ1bGxZZWFyKCkpLCBkdC5nZXRNb250aCgpICE9PSBtb250aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNzsgaisrKSB7XHJcbiAgICAgICAgICBsYWJlbHNbal0gPSBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgZm9ybWF0LmRheUhlYWRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IG9iamVjdHM6IGRheXMsIHRpdGxlOiBkYXRlRmlsdGVyKGRhdGUsIGZvcm1hdC5kYXlUaXRsZSksIGxhYmVsczogbGFiZWxzIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbXBhcmU6IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xyXG4gICAgICAgIHJldHVybiAobmV3IERhdGUoIGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCksIGRhdGUxLmdldERhdGUoKSApIC0gbmV3IERhdGUoIGRhdGUyLmdldEZ1bGxZZWFyKCksIGRhdGUyLmdldE1vbnRoKCksIGRhdGUyLmdldERhdGUoKSApICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNwbGl0OiA3LFxyXG4gICAgICBzdGVwOiB7IG1vbnRoczogMSB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiAnbW9udGgnLFxyXG4gICAgICBnZXRWaXNpYmxlRGF0ZXM6IGZ1bmN0aW9uKGRhdGUsIHNlbGVjdGVkKSB7XHJcbiAgICAgICAgdmFyIG1vbnRocyA9IG5ldyBBcnJheSgxMiksIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgMTI7IGkrKyApIHtcclxuICAgICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKHllYXIsIGksIDEpO1xyXG4gICAgICAgICAgbW9udGhzW2ldID0gbWFrZURhdGUoZHQsIGZvcm1hdC5tb250aCwgKHNlbGVjdGVkICYmIHNlbGVjdGVkLmdldE1vbnRoKCkgPT09IGkgJiYgc2VsZWN0ZWQuZ2V0RnVsbFllYXIoKSA9PT0geWVhcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBvYmplY3RzOiBtb250aHMsIHRpdGxlOiBkYXRlRmlsdGVyKGRhdGUsIGZvcm1hdC5tb250aFRpdGxlKSB9O1xyXG4gICAgICB9LFxyXG4gICAgICBjb21wYXJlOiBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERhdGUoIGRhdGUxLmdldEZ1bGxZZWFyKCksIGRhdGUxLmdldE1vbnRoKCkgKSAtIG5ldyBEYXRlKCBkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNwbGl0OiAzLFxyXG4gICAgICBzdGVwOiB7IHllYXJzOiAxIH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6ICd5ZWFyJyxcclxuICAgICAgZ2V0VmlzaWJsZURhdGVzOiBmdW5jdGlvbihkYXRlLCBzZWxlY3RlZCkge1xyXG4gICAgICAgIHZhciB5ZWFycyA9IG5ldyBBcnJheSh5ZWFyUmFuZ2UpLCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpLCBzdGFydFllYXIgPSBwYXJzZUludCgoeWVhciAtIDEpIC8geWVhclJhbmdlLCAxMCkgKiB5ZWFyUmFuZ2UgKyAxO1xyXG4gICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHllYXJSYW5nZTsgaSsrICkge1xyXG4gICAgICAgICAgdmFyIGR0ID0gbmV3IERhdGUoc3RhcnRZZWFyICsgaSwgMCwgMSk7XHJcbiAgICAgICAgICB5ZWFyc1tpXSA9IG1ha2VEYXRlKGR0LCBmb3JtYXQueWVhciwgKHNlbGVjdGVkICYmIHNlbGVjdGVkLmdldEZ1bGxZZWFyKCkgPT09IGR0LmdldEZ1bGxZZWFyKCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgb2JqZWN0czogeWVhcnMsIHRpdGxlOiBbeWVhcnNbMF0ubGFiZWwsIHllYXJzW3llYXJSYW5nZSAtIDFdLmxhYmVsXS5qb2luKCcgLSAnKSB9O1xyXG4gICAgICB9LFxyXG4gICAgICBjb21wYXJlOiBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcclxuICAgICAgICByZXR1cm4gZGF0ZTEuZ2V0RnVsbFllYXIoKSAtIGRhdGUyLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNwbGl0OiA1LFxyXG4gICAgICBzdGVwOiB7IHllYXJzOiB5ZWFyUmFuZ2UgfVxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHRoaXMuaXNEaXNhYmxlZCA9IGZ1bmN0aW9uKGRhdGUsIG1vZGUpIHtcclxuICAgIHZhciBjdXJyZW50TW9kZSA9IHRoaXMubW9kZXNbbW9kZSB8fCAwXTtcclxuICAgIHJldHVybiAoKHRoaXMubWluRGF0ZSAmJiBjdXJyZW50TW9kZS5jb21wYXJlKGRhdGUsIHRoaXMubWluRGF0ZSkgPCAwKSB8fCAodGhpcy5tYXhEYXRlICYmIGN1cnJlbnRNb2RlLmNvbXBhcmUoZGF0ZSwgdGhpcy5tYXhEYXRlKSA+IDApIHx8ICgkc2NvcGUuZGF0ZURpc2FibGVkICYmICRzY29wZS5kYXRlRGlzYWJsZWQoe2RhdGU6IGRhdGUsIG1vZGU6IGN1cnJlbnRNb2RlLm5hbWV9KSkpO1xyXG4gIH07XHJcbn1dKVxyXG5cclxuLmRpcmVjdGl2ZSggJ2RhdGVwaWNrZXInLCBbJ2RhdGVGaWx0ZXInLCAnJHBhcnNlJywgJ2RhdGVwaWNrZXJDb25maWcnLCAnJGxvZycsIGZ1bmN0aW9uIChkYXRlRmlsdGVyLCAkcGFyc2UsIGRhdGVwaWNrZXJDb25maWcsICRsb2cpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbCcsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBkYXRlRGlzYWJsZWQ6ICcmJ1xyXG4gICAgfSxcclxuICAgIHJlcXVpcmU6IFsnZGF0ZXBpY2tlcicsICc/Xm5nTW9kZWwnXSxcclxuICAgIGNvbnRyb2xsZXI6ICdEYXRlcGlja2VyQ29udHJvbGxlcicsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsID0gY3RybHNbMV07XHJcblxyXG4gICAgICBpZiAoIW5nTW9kZWwpIHtcclxuICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXHJcbiAgICAgIHZhciBtb2RlID0gMCwgc2VsZWN0ZWQgPSBuZXcgRGF0ZSgpLCBzaG93V2Vla3MgPSBkYXRlcGlja2VyQ29uZmlnLnNob3dXZWVrcztcclxuXHJcbiAgICAgIGlmIChhdHRycy5zaG93V2Vla3MpIHtcclxuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMuc2hvd1dlZWtzKSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIHNob3dXZWVrcyA9ICEhIHZhbHVlO1xyXG4gICAgICAgICAgdXBkYXRlU2hvd1dlZWtOdW1iZXJzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXBkYXRlU2hvd1dlZWtOdW1iZXJzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChhdHRycy5taW4pIHtcclxuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMubWluKSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIGRhdGVwaWNrZXJDdHJsLm1pbkRhdGUgPSB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlKSA6IG51bGw7XHJcbiAgICAgICAgICByZWZpbGwoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYXR0cnMubWF4KSB7XHJcbiAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKGF0dHJzLm1heCksIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICBkYXRlcGlja2VyQ3RybC5tYXhEYXRlID0gdmFsdWUgPyBuZXcgRGF0ZSh2YWx1ZSkgOiBudWxsO1xyXG4gICAgICAgICAgcmVmaWxsKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNob3dXZWVrTnVtYmVycygpIHtcclxuICAgICAgICBzY29wZS5zaG93V2Vla051bWJlcnMgPSBtb2RlID09PSAwICYmIHNob3dXZWVrcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gU3BsaXQgYXJyYXkgaW50byBzbWFsbGVyIGFycmF5c1xyXG4gICAgICBmdW5jdGlvbiBzcGxpdChhcnIsIHNpemUpIHtcclxuICAgICAgICB2YXIgYXJyYXlzID0gW107XHJcbiAgICAgICAgd2hpbGUgKGFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBhcnJheXMucHVzaChhcnIuc3BsaWNlKDAsIHNpemUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycmF5cztcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcmVmaWxsKCB1cGRhdGVTZWxlY3RlZCApIHtcclxuICAgICAgICB2YXIgZGF0ZSA9IG51bGwsIHZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKCBuZ01vZGVsLiRtb2RlbFZhbHVlICkge1xyXG4gICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCBuZ01vZGVsLiRtb2RlbFZhbHVlICk7XHJcblxyXG4gICAgICAgICAgaWYgKCBpc05hTihkYXRlKSApIHtcclxuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgJGxvZy5lcnJvcignRGF0ZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QsIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAwMS4wMS4xOTcwIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhbiBSRkMyODIyIG9yIElTTyA4NjAxIGRhdGUuJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCB1cGRhdGVTZWxlY3RlZCApIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQgPSBkYXRlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgnZGF0ZScsIHZhbGlkKTtcclxuXHJcbiAgICAgICAgdmFyIGN1cnJlbnRNb2RlID0gZGF0ZXBpY2tlckN0cmwubW9kZXNbbW9kZV0sIGRhdGEgPSBjdXJyZW50TW9kZS5nZXRWaXNpYmxlRGF0ZXMoc2VsZWN0ZWQsIGRhdGUpO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhLm9iamVjdHMsIGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgb2JqLmRpc2FibGVkID0gZGF0ZXBpY2tlckN0cmwuaXNEaXNhYmxlZChvYmouZGF0ZSwgbW9kZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdkYXRlLWRpc2FibGVkJywgKCFkYXRlIHx8ICFkYXRlcGlja2VyQ3RybC5pc0Rpc2FibGVkKGRhdGUpKSk7XHJcblxyXG4gICAgICAgIHNjb3BlLnJvd3MgPSBzcGxpdChkYXRhLm9iamVjdHMsIGN1cnJlbnRNb2RlLnNwbGl0KTtcclxuICAgICAgICBzY29wZS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcclxuICAgICAgICBzY29wZS50aXRsZSA9IGRhdGEudGl0bGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHNldE1vZGUodmFsdWUpIHtcclxuICAgICAgICBtb2RlID0gdmFsdWU7XHJcbiAgICAgICAgdXBkYXRlU2hvd1dlZWtOdW1iZXJzKCk7XHJcbiAgICAgICAgcmVmaWxsKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5nTW9kZWwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlZmlsbCggdHJ1ZSApO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oIGRhdGUgKSB7XHJcbiAgICAgICAgaWYgKCBtb2RlID09PSAwICkge1xyXG4gICAgICAgICAgdmFyIGR0ID0gbmV3IERhdGUoIG5nTW9kZWwuJG1vZGVsVmFsdWUgKTtcclxuICAgICAgICAgIGR0LnNldEZ1bGxZZWFyKCBkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkgKTtcclxuICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZSggZHQgKTtcclxuICAgICAgICAgIHJlZmlsbCggdHJ1ZSApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxlY3RlZCA9IGRhdGU7XHJcbiAgICAgICAgICBzZXRNb2RlKCBtb2RlIC0gMSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgc2NvcGUubW92ZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xyXG4gICAgICAgIHZhciBzdGVwID0gZGF0ZXBpY2tlckN0cmwubW9kZXNbbW9kZV0uc3RlcDtcclxuICAgICAgICBzZWxlY3RlZC5zZXRNb250aCggc2VsZWN0ZWQuZ2V0TW9udGgoKSArIGRpcmVjdGlvbiAqIChzdGVwLm1vbnRocyB8fCAwKSApO1xyXG4gICAgICAgIHNlbGVjdGVkLnNldEZ1bGxZZWFyKCBzZWxlY3RlZC5nZXRGdWxsWWVhcigpICsgZGlyZWN0aW9uICogKHN0ZXAueWVhcnMgfHwgMCkgKTtcclxuICAgICAgICByZWZpbGwoKTtcclxuICAgICAgfTtcclxuICAgICAgc2NvcGUudG9nZ2xlTW9kZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNldE1vZGUoIChtb2RlICsgMSkgJSBkYXRlcGlja2VyQ3RybC5tb2Rlcy5sZW5ndGggKTtcclxuICAgICAgfTtcclxuICAgICAgc2NvcGUuZ2V0V2Vla051bWJlciA9IGZ1bmN0aW9uKHJvdykge1xyXG4gICAgICAgIHJldHVybiAoIG1vZGUgPT09IDAgJiYgc2NvcGUuc2hvd1dlZWtOdW1iZXJzICYmIHJvdy5sZW5ndGggPT09IDcgKSA/IGdldElTTzg2MDFXZWVrTnVtYmVyKHJvd1swXS5kYXRlKSA6IG51bGw7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBmdW5jdGlvbiBnZXRJU084NjAxV2Vla051bWJlcihkYXRlKSB7XHJcbiAgICAgICAgdmFyIGNoZWNrRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgIGNoZWNrRGF0ZS5zZXREYXRlKGNoZWNrRGF0ZS5nZXREYXRlKCkgKyA0IC0gKGNoZWNrRGF0ZS5nZXREYXkoKSB8fCA3KSk7IC8vIFRodXJzZGF5XHJcbiAgICAgICAgdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpO1xyXG4gICAgICAgIGNoZWNrRGF0ZS5zZXRNb250aCgwKTsgLy8gQ29tcGFyZSB3aXRoIEphbiAxXHJcbiAgICAgICAgY2hlY2tEYXRlLnNldERhdGUoMSk7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XSlcclxuXHJcbi5jb25zdGFudCgnZGF0ZXBpY2tlclBvcHVwQ29uZmlnJywge1xyXG4gIGRhdGVGb3JtYXQ6ICd5eXl5LU1NLWRkJyxcclxuICBjbG9zZU9uRGF0ZVNlbGVjdGlvbjogdHJ1ZVxyXG59KVxyXG5cclxuLmRpcmVjdGl2ZSgnZGF0ZXBpY2tlclBvcHVwJywgWyckY29tcGlsZScsICckcGFyc2UnLCAnJGRvY3VtZW50JywgJyRwb3NpdGlvbicsICdkYXRlRmlsdGVyJywgJ2RhdGVwaWNrZXJQb3B1cENvbmZpZycsXHJcbmZ1bmN0aW9uICgkY29tcGlsZSwgJHBhcnNlLCAkZG9jdW1lbnQsICRwb3NpdGlvbiwgZGF0ZUZpbHRlciwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgbGluazogZnVuY3Rpb24ob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcclxuXHJcbiAgICAgIHZhciBjbG9zZU9uRGF0ZVNlbGVjdGlvbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmNsb3NlT25EYXRlU2VsZWN0aW9uKSA/IHNjb3BlLiRldmFsKGF0dHJzLmNsb3NlT25EYXRlU2VsZWN0aW9uKSA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5jbG9zZU9uRGF0ZVNlbGVjdGlvbjtcclxuICAgICAgdmFyIGRhdGVGb3JtYXQgPSBhdHRycy5kYXRlcGlja2VyUG9wdXAgfHwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVGb3JtYXQ7XHJcblxyXG4gICAgIC8vIGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGZvciB0aGUgZGF0ZXBpY2tlciBkaXJlY3RpdmUgc28gd2UgYXJlIG5vdCBwb2xsdXRpbmcgb3JpZ2luYWwgc2NvcGVcclxuICAgICAgdmFyIHNjb3BlID0gb3JpZ2luYWxTY29wZS4kbmV3KCk7XHJcbiAgICAgIG9yaWdpbmFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLiRkZXN0cm95KCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIGdldElzT3Blbiwgc2V0SXNPcGVuO1xyXG4gICAgICBpZiAoIGF0dHJzLmlzT3BlbiApIHtcclxuICAgICAgICBnZXRJc09wZW4gPSAkcGFyc2UoYXR0cnMuaXNPcGVuKTtcclxuICAgICAgICBzZXRJc09wZW4gPSBnZXRJc09wZW4uYXNzaWduO1xyXG5cclxuICAgICAgICBvcmlnaW5hbFNjb3BlLiR3YXRjaChnZXRJc09wZW4sIGZ1bmN0aW9uIHVwZGF0ZU9wZW4odmFsdWUpIHtcclxuICAgICAgICAgIHNjb3BlLmlzT3BlbiA9ICEhIHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHNjb3BlLmlzT3BlbiA9IGdldElzT3BlbiA/IGdldElzT3BlbihvcmlnaW5hbFNjb3BlKSA6IGZhbHNlOyAvLyBJbml0aWFsIHN0YXRlXHJcblxyXG4gICAgICBmdW5jdGlvbiBzZXRPcGVuKCB2YWx1ZSApIHtcclxuICAgICAgICBpZiAoc2V0SXNPcGVuKSB7XHJcbiAgICAgICAgICBzZXRJc09wZW4ob3JpZ2luYWxTY29wZSwgISF2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNjb3BlLmlzT3BlbiA9ICEhdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZG9jdW1lbnRDbGlja0JpbmQgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGlmIChzY29wZS5pc09wZW4gJiYgZXZlbnQudGFyZ2V0ICE9PSBlbGVtZW50WzBdKSB7XHJcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGVsZW1lbnRGb2N1c0JpbmQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZXRPcGVuKCB0cnVlICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBwb3B1cCBlbGVtZW50IHVzZWQgdG8gZGlzcGxheSBjYWxlbmRhclxyXG4gICAgICB2YXIgcG9wdXBFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRhdGVwaWNrZXItcG9wdXAtd3JhcD48ZGF0ZXBpY2tlcj48L2RhdGVwaWNrZXI+PC9kYXRlcGlja2VyLXBvcHVwLXdyYXA+Jyk7XHJcbiAgICAgIHBvcHVwRWwuYXR0cih7XHJcbiAgICAgICAgJ25nLW1vZGVsJzogJ2RhdGUnLFxyXG4gICAgICAgICduZy1jaGFuZ2UnOiAnZGF0ZVNlbGVjdGlvbigpJ1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIGRhdGVwaWNrZXJFbCA9IHBvcHVwRWwuZmluZCgnZGF0ZXBpY2tlcicpO1xyXG4gICAgICBpZiAoYXR0cnMuZGF0ZXBpY2tlck9wdGlvbnMpIHtcclxuICAgICAgICBkYXRlcGlja2VyRWwuYXR0cihhbmd1bGFyLmV4dGVuZCh7fSwgb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy5kYXRlcGlja2VyT3B0aW9ucykpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVE9ETzogcmV2ZXJzZSBmcm9tIGRhdGVGaWx0ZXIgc3RyaW5nIHRvIERhdGUgb2JqZWN0XHJcbiAgICAgIGZ1bmN0aW9uIHBhcnNlRGF0ZSh2aWV3VmFsdWUpIHtcclxuICAgICAgICBpZiAoIXZpZXdWYWx1ZSkge1xyXG4gICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ2RhdGUnLCB0cnVlKTtcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RhdGUodmlld1ZhbHVlKSkge1xyXG4gICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ2RhdGUnLCB0cnVlKTtcclxuICAgICAgICAgIHJldHVybiB2aWV3VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZpZXdWYWx1ZSkpIHtcclxuICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodmlld1ZhbHVlKTtcclxuICAgICAgICAgIGlmIChpc05hTihkYXRlKSkge1xyXG4gICAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgnZGF0ZScsIGZhbHNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdkYXRlJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgnZGF0ZScsIGZhbHNlKTtcclxuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG5nTW9kZWwuJHBhcnNlcnMudW5zaGlmdChwYXJzZURhdGUpO1xyXG5cclxuICAgICAgLy8gSW5uZXIgY2hhbmdlXHJcbiAgICAgIHNjb3BlLmRhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoc2NvcGUuZGF0ZSk7XHJcbiAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XHJcblxyXG4gICAgICAgIGlmIChjbG9zZU9uRGF0ZVNlbGVjdGlvbikge1xyXG4gICAgICAgICAgc2V0T3BlbiggZmFsc2UgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBlbGVtZW50LmJpbmQoJ2lucHV0IGNoYW5nZSBrZXl1cCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHVwZGF0ZUNhbGVuZGFyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gT3V0dGVyIGNoYW5nZVxyXG4gICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZGF0ZSA9IG5nTW9kZWwuJHZpZXdWYWx1ZSA/IGRhdGVGaWx0ZXIobmdNb2RlbC4kdmlld1ZhbHVlLCBkYXRlRm9ybWF0KSA6ICcnO1xyXG4gICAgICAgIGVsZW1lbnQudmFsKGRhdGUpO1xyXG5cclxuICAgICAgICB1cGRhdGVDYWxlbmRhcigpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgZnVuY3Rpb24gdXBkYXRlQ2FsZW5kYXIoKSB7XHJcbiAgICAgICAgc2NvcGUuZGF0ZSA9IG5nTW9kZWwuJG1vZGVsVmFsdWU7XHJcbiAgICAgICAgdXBkYXRlUG9zaXRpb24oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gYWRkV2F0Y2hhYmxlQXR0cmlidXRlKGF0dHJpYnV0ZSwgc2NvcGVQcm9wZXJ0eSwgZGF0ZXBpY2tlckF0dHJpYnV0ZSkge1xyXG4gICAgICAgIGlmIChhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgIG9yaWdpbmFsU2NvcGUuJHdhdGNoKCRwYXJzZShhdHRyaWJ1dGUpLCBmdW5jdGlvbih2YWx1ZSl7XHJcbiAgICAgICAgICAgIHNjb3BlW3Njb3BlUHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGRhdGVwaWNrZXJFbC5hdHRyKGRhdGVwaWNrZXJBdHRyaWJ1dGUgfHwgc2NvcGVQcm9wZXJ0eSwgc2NvcGVQcm9wZXJ0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGFkZFdhdGNoYWJsZUF0dHJpYnV0ZShhdHRycy5taW4sICdtaW4nKTtcclxuICAgICAgYWRkV2F0Y2hhYmxlQXR0cmlidXRlKGF0dHJzLm1heCwgJ21heCcpO1xyXG4gICAgICBpZiAoYXR0cnMuc2hvd1dlZWtzKSB7XHJcbiAgICAgICAgYWRkV2F0Y2hhYmxlQXR0cmlidXRlKGF0dHJzLnNob3dXZWVrcywgJ3Nob3dXZWVrcycsICdzaG93LXdlZWtzJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2NvcGUuc2hvd1dlZWtzID0gdHJ1ZTtcclxuICAgICAgICBkYXRlcGlja2VyRWwuYXR0cignc2hvdy13ZWVrcycsICdzaG93V2Vla3MnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYXR0cnMuZGF0ZURpc2FibGVkKSB7XHJcbiAgICAgICAgZGF0ZXBpY2tlckVsLmF0dHIoJ2RhdGUtZGlzYWJsZWQnLCBhdHRycy5kYXRlRGlzYWJsZWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpIHtcclxuICAgICAgICBzY29wZS5wb3NpdGlvbiA9ICRwb3NpdGlvbi5wb3NpdGlvbihlbGVtZW50KTtcclxuICAgICAgICBzY29wZS5wb3NpdGlvbi50b3AgPSBzY29wZS5wb3NpdGlvbi50b3AgKyBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZG9jdW1lbnRCaW5kaW5nSW5pdGlhbGl6ZWQgPSBmYWxzZSwgZWxlbWVudEZvY3VzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgc2NvcGUuJHdhdGNoKCdpc09wZW4nLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgdXBkYXRlUG9zaXRpb24oKTtcclxuICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcclxuICAgICAgICAgIGlmKGVsZW1lbnRGb2N1c0luaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudW5iaW5kKCdmb2N1cycsIGVsZW1lbnRGb2N1c0JpbmQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xyXG4gICAgICAgICAgZG9jdW1lbnRCaW5kaW5nSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZihkb2N1bWVudEJpbmRpbmdJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsZW1lbnQuYmluZCgnZm9jdXMnLCBlbGVtZW50Rm9jdXNCaW5kKTtcclxuICAgICAgICAgIGVsZW1lbnRGb2N1c0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggc2V0SXNPcGVuICkge1xyXG4gICAgICAgICAgc2V0SXNPcGVuKG9yaWdpbmFsU2NvcGUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyICRzZXRNb2RlbFZhbHVlID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwpLmFzc2lnbjtcclxuXHJcbiAgICAgIHNjb3BlLnRvZGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNldE1vZGVsVmFsdWUob3JpZ2luYWxTY29wZSwgbmV3IERhdGUoKSk7XHJcbiAgICAgIH07XHJcbiAgICAgIHNjb3BlLmNsZWFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNldE1vZGVsVmFsdWUob3JpZ2luYWxTY29wZSwgbnVsbCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBlbGVtZW50LmFmdGVyKCRjb21waWxlKHBvcHVwRWwpKHNjb3BlKSk7XHJcbiAgICB9XHJcbiAgfTtcclxufV0pXHJcblxyXG4uZGlyZWN0aXZlKCdkYXRlcGlja2VyUG9wdXBXcmFwJywgW2Z1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDonRScsXHJcbiAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvZGF0ZXBpY2tlci9wb3B1cC5odG1sJyxcclxuICAgIGxpbms6ZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4vKlxyXG4gKiBkcm9wZG93blRvZ2dsZSAtIFByb3ZpZGVzIGRyb3Bkb3duIG1lbnUgZnVuY3Rpb25hbGl0eSBpbiBwbGFjZSBvZiBib290c3RyYXAganNcclxuICogQHJlc3RyaWN0IGNsYXNzIG9yIGF0dHJpYnV0ZVxyXG4gKiBAZXhhbXBsZTpcclxuICAgPGxpIGNsYXNzPVwiZHJvcGRvd25cIj5cclxuICAgICA8YSBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiPk15IERyb3Bkb3duIE1lbnU8L2E+XHJcbiAgICAgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPlxyXG4gICAgICAgPGxpIG5nLXJlcGVhdD1cImNob2ljZSBpbiBkcm9wQ2hvaWNlc1wiPlxyXG4gICAgICAgICA8YSBuZy1ocmVmPVwie3tjaG9pY2UuaHJlZn19XCI+e3tjaG9pY2UudGV4dH19PC9hPlxyXG4gICAgICAgPC9saT5cclxuICAgICA8L3VsPlxyXG4gICA8L2xpPlxyXG4gKi9cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZHJvcGRvd25Ub2dnbGUnLCBbXSkuZGlyZWN0aXZlKCdkcm9wZG93blRvZ2dsZScsIFsnJGRvY3VtZW50JywgJyRsb2NhdGlvbicsIGZ1bmN0aW9uICgkZG9jdW1lbnQsICRsb2NhdGlvbikge1xyXG4gIHZhciBvcGVuRWxlbWVudCA9IG51bGwsXHJcbiAgICAgIGNsb3NlTWVudSAgID0gYW5ndWxhci5ub29wO1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0NBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICBzY29wZS4kd2F0Y2goJyRsb2NhdGlvbi5wYXRoJywgZnVuY3Rpb24oKSB7IGNsb3NlTWVudSgpOyB9KTtcclxuICAgICAgZWxlbWVudC5wYXJlbnQoKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKCkgeyBjbG9zZU1lbnUoKTsgfSk7XHJcbiAgICAgIGVsZW1lbnQuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgICAgICAgdmFyIGVsZW1lbnRXYXNPcGVuID0gKGVsZW1lbnQgPT09IG9wZW5FbGVtZW50KTtcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKCEhb3BlbkVsZW1lbnQpIHtcclxuICAgICAgICAgIGNsb3NlTWVudSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50V2FzT3Blbikge1xyXG4gICAgICAgICAgZWxlbWVudC5wYXJlbnQoKS5hZGRDbGFzcygnb3BlbicpO1xyXG4gICAgICAgICAgb3BlbkVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgY2xvc2VNZW51ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudCkge1xyXG4gICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGRvY3VtZW50LnVuYmluZCgnY2xpY2snLCBjbG9zZU1lbnUpO1xyXG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudCgpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcbiAgICAgICAgICAgIGNsb3NlTWVudSA9IGFuZ3VsYXIubm9vcDtcclxuICAgICAgICAgICAgb3BlbkVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgICRkb2N1bWVudC5iaW5kKCdjbGljaycsIGNsb3NlTWVudSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAubW9kYWwnLCBbXSlcclxuXHJcbi8qKlxyXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBhY3RzIGFzIGEgbWFwIGJ1dCBhbHNvIGFsbG93cyBnZXR0aW5nIC8gcmVtb3ZpbmdcclxuICogZWxlbWVudHMgaW4gdGhlIExJRk8gb3JkZXJcclxuICovXHJcbiAgLmZhY3RvcnkoJyQkc3RhY2tlZE1hcCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNyZWF0ZU5ldzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYWRkOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHtcclxuICAgICAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICBpZiAoa2V5ID09IHN0YWNrW2ldLmtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrW2ldO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGtleXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAga2V5cy5wdXNoKHN0YWNrW2ldLmtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdG9wOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGlkeCA9IC0xO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGtleSA9PSBzdGFja1tpXS5rZXkpIHtcclxuICAgICAgICAgICAgICAgIGlkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnNwbGljZShpZHgsIDEpWzBdO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHJlbW92ZVRvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhY2suc3BsaWNlKHN0YWNrLmxlbmd0aCAtIDEsIDEpWzBdO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhY2subGVuZ3RoO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSlcclxuXHJcbi8qKlxyXG4gKiBBIGhlbHBlciBkaXJlY3RpdmUgZm9yIHRoZSAkbW9kYWwgc2VydmljZS4gSXQgY3JlYXRlcyBhIGJhY2tkcm9wIGVsZW1lbnQuXHJcbiAqL1xyXG4gIC5kaXJlY3RpdmUoJ21vZGFsQmFja2Ryb3AnLCBbJyRtb2RhbFN0YWNrJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRtb2RhbFN0YWNrLCAkdGltZW91dCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbCcsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuXHJcbiAgICAgICAgLy90cmlnZ2VyIENTUyB0cmFuc2l0aW9uc1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNjb3BlLmFuaW1hdGUgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzY29wZS5jbG9zZSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbFN0YWNrLmdldFRvcCgpO1xyXG4gICAgICAgICAgaWYgKG1vZGFsICYmIG1vZGFsLnZhbHVlLmJhY2tkcm9wICYmIG1vZGFsLnZhbHVlLmJhY2tkcm9wICE9ICdzdGF0aWMnKSB7XHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MobW9kYWwua2V5LCAnYmFja2Ryb3AgY2xpY2snKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dKVxyXG5cclxuICAuZGlyZWN0aXZlKCdtb2RhbFdpbmRvdycsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHRpbWVvdXQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGluZGV4OiAnQCdcclxuICAgICAgfSxcclxuICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcclxuICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbCcsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICBzY29wZS53aW5kb3dDbGFzcyA9IGF0dHJzLndpbmRvd0NsYXNzIHx8ICcnO1xyXG5cclxuICAgICAgICAvL3RyaWdnZXIgQ1NTIHRyYW5zaXRpb25zXHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2NvcGUuYW5pbWF0ZSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV0pXHJcblxyXG4gIC5mYWN0b3J5KCckbW9kYWxTdGFjaycsIFsnJGRvY3VtZW50JywgJyRjb21waWxlJywgJyRyb290U2NvcGUnLCAnJCRzdGFja2VkTWFwJyxcclxuICAgIGZ1bmN0aW9uICgkZG9jdW1lbnQsICRjb21waWxlLCAkcm9vdFNjb3BlLCAkJHN0YWNrZWRNYXApIHtcclxuXHJcbiAgICAgIHZhciBiYWNrZHJvcGpxTGl0ZUVsLCBiYWNrZHJvcERvbUVsO1xyXG4gICAgICB2YXIgYmFja2Ryb3BTY29wZSA9ICRyb290U2NvcGUuJG5ldyh0cnVlKTtcclxuICAgICAgdmFyIGJvZHkgPSAkZG9jdW1lbnQuZmluZCgnYm9keScpLmVxKDApO1xyXG4gICAgICB2YXIgb3BlbmVkV2luZG93cyA9ICQkc3RhY2tlZE1hcC5jcmVhdGVOZXcoKTtcclxuICAgICAgdmFyICRtb2RhbFN0YWNrID0ge307XHJcblxyXG4gICAgICBmdW5jdGlvbiBiYWNrZHJvcEluZGV4KCkge1xyXG4gICAgICAgIHZhciB0b3BCYWNrZHJvcEluZGV4ID0gLTE7XHJcbiAgICAgICAgdmFyIG9wZW5lZCA9IG9wZW5lZFdpbmRvd3Mua2V5cygpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3BlbmVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAob3BlbmVkV2luZG93cy5nZXQob3BlbmVkW2ldKS52YWx1ZS5iYWNrZHJvcCkge1xyXG4gICAgICAgICAgICB0b3BCYWNrZHJvcEluZGV4ID0gaTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvcEJhY2tkcm9wSW5kZXg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRyb290U2NvcGUuJHdhdGNoKGJhY2tkcm9wSW5kZXgsIGZ1bmN0aW9uKG5ld0JhY2tkcm9wSW5kZXgpe1xyXG4gICAgICAgIGJhY2tkcm9wU2NvcGUuaW5kZXggPSBuZXdCYWNrZHJvcEluZGV4O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJlbW92ZU1vZGFsV2luZG93KG1vZGFsSW5zdGFuY2UpIHtcclxuXHJcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSkudmFsdWU7XHJcblxyXG4gICAgICAgIC8vY2xlYW4gdXAgdGhlIHN0YWNrXHJcbiAgICAgICAgb3BlbmVkV2luZG93cy5yZW1vdmUobW9kYWxJbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIC8vcmVtb3ZlIHdpbmRvdyBET00gZWxlbWVudFxyXG4gICAgICAgIG1vZGFsV2luZG93Lm1vZGFsRG9tRWwucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIC8vcmVtb3ZlIGJhY2tkcm9wIGlmIG5vIGxvbmdlciBuZWVkZWRcclxuICAgICAgICBpZiAoYmFja2Ryb3BJbmRleCgpID09IC0xKSB7XHJcbiAgICAgICAgICBiYWNrZHJvcERvbUVsLnJlbW92ZSgpO1xyXG4gICAgICAgICAgYmFja2Ryb3BEb21FbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZGVzdHJveSBzY29wZVxyXG4gICAgICAgIG1vZGFsV2luZG93Lm1vZGFsU2NvcGUuJGRlc3Ryb3koKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGRvY3VtZW50LmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgdmFyIG1vZGFsO1xyXG5cclxuICAgICAgICBpZiAoZXZ0LndoaWNoID09PSAyNykge1xyXG4gICAgICAgICAgbW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xyXG4gICAgICAgICAgaWYgKG1vZGFsICYmIG1vZGFsLnZhbHVlLmtleWJvYXJkKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkbW9kYWxTdGFjay5vcGVuID0gZnVuY3Rpb24gKG1vZGFsSW5zdGFuY2UsIG1vZGFsKSB7XHJcblxyXG4gICAgICAgIG9wZW5lZFdpbmRvd3MuYWRkKG1vZGFsSW5zdGFuY2UsIHtcclxuICAgICAgICAgIGRlZmVycmVkOiBtb2RhbC5kZWZlcnJlZCxcclxuICAgICAgICAgIG1vZGFsU2NvcGU6IG1vZGFsLnNjb3BlLFxyXG4gICAgICAgICAgYmFja2Ryb3A6IG1vZGFsLmJhY2tkcm9wLFxyXG4gICAgICAgICAga2V5Ym9hcmQ6IG1vZGFsLmtleWJvYXJkXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBhbmd1bGFyRG9tRWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgbW9kYWwtd2luZG93PjwvZGl2PicpO1xyXG4gICAgICAgIGFuZ3VsYXJEb21FbC5hdHRyKCd3aW5kb3ctY2xhc3MnLCBtb2RhbC53aW5kb3dDbGFzcyk7XHJcbiAgICAgICAgYW5ndWxhckRvbUVsLmF0dHIoJ2luZGV4Jywgb3BlbmVkV2luZG93cy5sZW5ndGgoKSAtIDEpO1xyXG4gICAgICAgIGFuZ3VsYXJEb21FbC5odG1sKG1vZGFsLmNvbnRlbnQpO1xyXG5cclxuICAgICAgICB2YXIgbW9kYWxEb21FbCA9ICRjb21waWxlKGFuZ3VsYXJEb21FbCkobW9kYWwuc2NvcGUpO1xyXG4gICAgICAgIG9wZW5lZFdpbmRvd3MudG9wKCkudmFsdWUubW9kYWxEb21FbCA9IG1vZGFsRG9tRWw7XHJcbiAgICAgICAgYm9keS5hcHBlbmQobW9kYWxEb21FbCk7XHJcblxyXG4gICAgICAgIGlmIChiYWNrZHJvcEluZGV4KCkgPj0gMCAmJiAhYmFja2Ryb3BEb21FbCkge1xyXG4gICAgICAgICAgICBiYWNrZHJvcGpxTGl0ZUVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IG1vZGFsLWJhY2tkcm9wPjwvZGl2PicpO1xyXG4gICAgICAgICAgICBiYWNrZHJvcERvbUVsID0gJGNvbXBpbGUoYmFja2Ryb3BqcUxpdGVFbCkoYmFja2Ryb3BTY29wZSk7XHJcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kKGJhY2tkcm9wRG9tRWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgICRtb2RhbFN0YWNrLmNsb3NlID0gZnVuY3Rpb24gKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCkge1xyXG4gICAgICAgIHZhciBtb2RhbCA9IG9wZW5lZFdpbmRvd3MuZ2V0KG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGlmIChtb2RhbCkge1xyXG4gICAgICAgICAgbW9kYWwudmFsdWUuZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgJG1vZGFsU3RhY2suZGlzbWlzcyA9IGZ1bmN0aW9uIChtb2RhbEluc3RhbmNlLCByZWFzb24pIHtcclxuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKS52YWx1ZTtcclxuICAgICAgICBpZiAobW9kYWxXaW5kb3cpIHtcclxuICAgICAgICAgIG1vZGFsV2luZG93LmRlZmVycmVkLnJlamVjdChyZWFzb24pO1xyXG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgJG1vZGFsU3RhY2suZ2V0VG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBvcGVuZWRXaW5kb3dzLnRvcCgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuICRtb2RhbFN0YWNrO1xyXG4gICAgfV0pXHJcblxyXG4gIC5wcm92aWRlcignJG1vZGFsJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciAkbW9kYWxQcm92aWRlciA9IHtcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIGJhY2tkcm9wOiB0cnVlLCAvL2NhbiBiZSBhbHNvIGZhbHNlIG9yICdzdGF0aWMnXHJcbiAgICAgICAga2V5Ym9hcmQ6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgJGdldDogWyckaW5qZWN0b3InLCAnJHJvb3RTY29wZScsICckcScsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckY29udHJvbGxlcicsICckbW9kYWxTdGFjaycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRpbmplY3RvciwgJHJvb3RTY29wZSwgJHEsICRodHRwLCAkdGVtcGxhdGVDYWNoZSwgJGNvbnRyb2xsZXIsICRtb2RhbFN0YWNrKSB7XHJcblxyXG4gICAgICAgICAgdmFyICRtb2RhbCA9IHt9O1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIGdldFRlbXBsYXRlUHJvbWlzZShvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnRlbXBsYXRlID8gJHEud2hlbihvcHRpb25zLnRlbXBsYXRlKSA6XHJcbiAgICAgICAgICAgICAgJGh0dHAuZ2V0KG9wdGlvbnMudGVtcGxhdGVVcmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiBnZXRSZXNvbHZlUHJvbWlzZXMocmVzb2x2ZXMpIHtcclxuICAgICAgICAgICAgdmFyIHByb21pc2VzQXJyID0gW107XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyZXNvbHZlcywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHZhbHVlKSB8fCBhbmd1bGFyLmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlc0Fyci5wdXNoKCRxLndoZW4oJGluamVjdG9yLmludm9rZSh2YWx1ZSkpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZXNBcnI7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJG1vZGFsLm9wZW4gPSBmdW5jdGlvbiAobW9kYWxPcHRpb25zKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9kYWxSZXN1bHREZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgIHZhciBtb2RhbE9wZW5lZERlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgICAgIC8vcHJlcGFyZSBhbiBpbnN0YW5jZSBvZiBhIG1vZGFsIHRvIGJlIGluamVjdGVkIGludG8gY29udHJvbGxlcnMgYW5kIHJldHVybmVkIHRvIGEgY2FsbGVyXHJcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0ge1xyXG4gICAgICAgICAgICAgIHJlc3VsdDogbW9kYWxSZXN1bHREZWZlcnJlZC5wcm9taXNlLFxyXG4gICAgICAgICAgICAgIG9wZW5lZDogbW9kYWxPcGVuZWREZWZlcnJlZC5wcm9taXNlLFxyXG4gICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5jbG9zZShtb2RhbEluc3RhbmNlLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZGlzbWlzczogZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgJG1vZGFsU3RhY2suZGlzbWlzcyhtb2RhbEluc3RhbmNlLCByZWFzb24pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbWVyZ2UgYW5kIGNsZWFuIHVwIG9wdGlvbnNcclxuICAgICAgICAgICAgbW9kYWxPcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sICRtb2RhbFByb3ZpZGVyLm9wdGlvbnMsIG1vZGFsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucy5yZXNvbHZlID0gbW9kYWxPcHRpb25zLnJlc29sdmUgfHwge307XHJcblxyXG4gICAgICAgICAgICAvL3ZlcmlmeSBvcHRpb25zXHJcbiAgICAgICAgICAgIGlmICghbW9kYWxPcHRpb25zLnRlbXBsYXRlICYmICFtb2RhbE9wdGlvbnMudGVtcGxhdGVVcmwpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiB0ZW1wbGF0ZSBvciB0ZW1wbGF0ZVVybCBvcHRpb25zIGlzIHJlcXVpcmVkLicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSA9XHJcbiAgICAgICAgICAgICAgJHEuYWxsKFtnZXRUZW1wbGF0ZVByb21pc2UobW9kYWxPcHRpb25zKV0uY29uY2F0KGdldFJlc29sdmVQcm9taXNlcyhtb2RhbE9wdGlvbnMucmVzb2x2ZSkpKTtcclxuXHJcblxyXG4gICAgICAgICAgICB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlLnRoZW4oZnVuY3Rpb24gcmVzb2x2ZVN1Y2Nlc3ModHBsQW5kVmFycykge1xyXG5cclxuICAgICAgICAgICAgICB2YXIgbW9kYWxTY29wZSA9IChtb2RhbE9wdGlvbnMuc2NvcGUgfHwgJHJvb3RTY29wZSkuJG5ldygpO1xyXG4gICAgICAgICAgICAgIG1vZGFsU2NvcGUuJGNsb3NlID0gbW9kYWxJbnN0YW5jZS5jbG9zZTtcclxuICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRkaXNtaXNzID0gbW9kYWxJbnN0YW5jZS5kaXNtaXNzO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgY3RybEluc3RhbmNlLCBjdHJsTG9jYWxzID0ge307XHJcbiAgICAgICAgICAgICAgdmFyIHJlc29sdmVJdGVyID0gMTtcclxuXHJcbiAgICAgICAgICAgICAgLy9jb250cm9sbGVyc1xyXG4gICAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgY3RybExvY2Fscy4kc2NvcGUgPSBtb2RhbFNjb3BlO1xyXG4gICAgICAgICAgICAgICAgY3RybExvY2Fscy4kbW9kYWxJbnN0YW5jZSA9IG1vZGFsSW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kYWxPcHRpb25zLnJlc29sdmUsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgIGN0cmxMb2NhbHNba2V5XSA9IHRwbEFuZFZhcnNbcmVzb2x2ZUl0ZXIrK107XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UgPSAkY29udHJvbGxlcihtb2RhbE9wdGlvbnMuY29udHJvbGxlciwgY3RybExvY2Fscyk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAkbW9kYWxTdGFjay5vcGVuKG1vZGFsSW5zdGFuY2UsIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlOiBtb2RhbFNjb3BlLFxyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQ6IG1vZGFsUmVzdWx0RGVmZXJyZWQsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiB0cGxBbmRWYXJzWzBdLFxyXG4gICAgICAgICAgICAgICAgYmFja2Ryb3A6IG1vZGFsT3B0aW9ucy5iYWNrZHJvcCxcclxuICAgICAgICAgICAgICAgIGtleWJvYXJkOiBtb2RhbE9wdGlvbnMua2V5Ym9hcmQsXHJcbiAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogbW9kYWxPcHRpb25zLndpbmRvd0NsYXNzXHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiByZXNvbHZlRXJyb3IocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgbW9kYWxSZXN1bHREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0ZW1wbGF0ZUFuZFJlc29sdmVQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIG1vZGFsT3BlbmVkRGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIG1vZGFsT3BlbmVkRGVmZXJyZWQucmVqZWN0KGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbW9kYWxJbnN0YW5jZTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgcmV0dXJuICRtb2RhbDtcclxuICAgICAgICB9XVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gJG1vZGFsUHJvdmlkZXI7XHJcbiAgfSk7XHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnaW5hdGlvbicsIFtdKVxyXG5cclxuLmNvbnRyb2xsZXIoJ1BhZ2luYXRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJyRwYXJzZScsICckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbiAoJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgJGludGVycG9sYXRlKSB7XHJcbiAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihkZWZhdWx0SXRlbXNQZXJQYWdlKSB7XHJcbiAgICBpZiAoJGF0dHJzLml0ZW1zUGVyUGFnZSkge1xyXG4gICAgICAkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5pdGVtc1BlclBhZ2UpLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHNlbGYuaXRlbXNQZXJQYWdlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcclxuICAgICAgICAkc2NvcGUudG90YWxQYWdlcyA9IHNlbGYuY2FsY3VsYXRlVG90YWxQYWdlcygpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuaXRlbXNQZXJQYWdlID0gZGVmYXVsdEl0ZW1zUGVyUGFnZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLm5vUHJldmlvdXMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2UgPT09IDE7XHJcbiAgfTtcclxuICB0aGlzLm5vTmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZSA9PT0gJHNjb3BlLnRvdGFsUGFnZXM7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pc0FjdGl2ZSA9IGZ1bmN0aW9uKHBhZ2UpIHtcclxuICAgIHJldHVybiB0aGlzLnBhZ2UgPT09IHBhZ2U7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jYWxjdWxhdGVUb3RhbFBhZ2VzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtc1BlclBhZ2UgPCAxID8gMSA6IE1hdGguY2VpbCgkc2NvcGUudG90YWxJdGVtcyAvIHRoaXMuaXRlbXNQZXJQYWdlKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmdldEF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24oYXR0cmlidXRlLCBkZWZhdWx0VmFsdWUsIGludGVycG9sYXRlKSB7XHJcbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoYXR0cmlidXRlKSA/IChpbnRlcnBvbGF0ZSA/ICRpbnRlcnBvbGF0ZShhdHRyaWJ1dGUpKCRzY29wZS4kcGFyZW50KSA6ICRzY29wZS4kcGFyZW50LiRldmFsKGF0dHJpYnV0ZSkpIDogZGVmYXVsdFZhbHVlO1xyXG4gIH07XHJcblxyXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLnBhZ2UgPSBwYXJzZUludCgkc2NvcGUucGFnZSwgMTApIHx8IDE7XHJcbiAgICAkc2NvcGUucGFnZXMgPSB0aGlzLmdldFBhZ2VzKHRoaXMucGFnZSwgJHNjb3BlLnRvdGFsUGFnZXMpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3RQYWdlID0gZnVuY3Rpb24ocGFnZSkge1xyXG4gICAgaWYgKCAhIHNlbGYuaXNBY3RpdmUocGFnZSkgJiYgcGFnZSA+IDAgJiYgcGFnZSA8PSAkc2NvcGUudG90YWxQYWdlcykge1xyXG4gICAgICAkc2NvcGUucGFnZSA9IHBhZ2U7XHJcbiAgICAgICRzY29wZS5vblNlbGVjdFBhZ2UoeyBwYWdlOiBwYWdlIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ3RvdGFsSXRlbXMnLCBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS50b3RhbFBhZ2VzID0gc2VsZi5jYWxjdWxhdGVUb3RhbFBhZ2VzKCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ3RvdGFsUGFnZXMnLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgaWYgKCAkYXR0cnMubnVtUGFnZXMgKSB7XHJcbiAgICAgICRzY29wZS5udW1QYWdlcyA9IHZhbHVlOyAvLyBSZWFkb25seSB2YXJpYWJsZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICggc2VsZi5wYWdlID4gdmFsdWUgKSB7XHJcbiAgICAgICRzY29wZS5zZWxlY3RQYWdlKHZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ3BhZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgIHNlbGYucmVuZGVyKCk7XHJcbiAgfSk7XHJcbn1dKVxyXG5cclxuLmNvbnN0YW50KCdwYWdpbmF0aW9uQ29uZmlnJywge1xyXG4gIGl0ZW1zUGVyUGFnZTogMTAsXHJcbiAgYm91bmRhcnlMaW5rczogZmFsc2UsXHJcbiAgZGlyZWN0aW9uTGlua3M6IHRydWUsXHJcbiAgZmlyc3RUZXh0OiAnRmlyc3QnLFxyXG4gIHByZXZpb3VzVGV4dDogJ1ByZXZpb3VzJyxcclxuICBuZXh0VGV4dDogJ05leHQnLFxyXG4gIGxhc3RUZXh0OiAnTGFzdCcsXHJcbiAgcm90YXRlOiB0cnVlXHJcbn0pXHJcblxyXG4uZGlyZWN0aXZlKCdwYWdpbmF0aW9uJywgWyckcGFyc2UnLCAncGFnaW5hdGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRwYXJzZSwgY29uZmlnKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgcGFnZTogJz0nLFxyXG4gICAgICB0b3RhbEl0ZW1zOiAnPScsXHJcbiAgICAgIG9uU2VsZWN0UGFnZTonICYnLFxyXG4gICAgICBudW1QYWdlczogJz0nXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ1BhZ2luYXRpb25Db250cm9sbGVyJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWwnLFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcGFnaW5hdGlvbkN0cmwpIHtcclxuXHJcbiAgICAgIC8vIFNldHVwIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xyXG4gICAgICB2YXIgbWF4U2l6ZSxcclxuICAgICAgYm91bmRhcnlMaW5rcyAgPSBwYWdpbmF0aW9uQ3RybC5nZXRBdHRyaWJ1dGVWYWx1ZShhdHRycy5ib3VuZGFyeUxpbmtzLCAgY29uZmlnLmJvdW5kYXJ5TGlua3MgICAgICApLFxyXG4gICAgICBkaXJlY3Rpb25MaW5rcyA9IHBhZ2luYXRpb25DdHJsLmdldEF0dHJpYnV0ZVZhbHVlKGF0dHJzLmRpcmVjdGlvbkxpbmtzLCBjb25maWcuZGlyZWN0aW9uTGlua3MgICAgICksXHJcbiAgICAgIGZpcnN0VGV4dCAgICAgID0gcGFnaW5hdGlvbkN0cmwuZ2V0QXR0cmlidXRlVmFsdWUoYXR0cnMuZmlyc3RUZXh0LCAgICAgIGNvbmZpZy5maXJzdFRleHQsICAgICB0cnVlKSxcclxuICAgICAgcHJldmlvdXNUZXh0ICAgPSBwYWdpbmF0aW9uQ3RybC5nZXRBdHRyaWJ1dGVWYWx1ZShhdHRycy5wcmV2aW91c1RleHQsICAgY29uZmlnLnByZXZpb3VzVGV4dCwgIHRydWUpLFxyXG4gICAgICBuZXh0VGV4dCAgICAgICA9IHBhZ2luYXRpb25DdHJsLmdldEF0dHJpYnV0ZVZhbHVlKGF0dHJzLm5leHRUZXh0LCAgICAgICBjb25maWcubmV4dFRleHQsICAgICAgdHJ1ZSksXHJcbiAgICAgIGxhc3RUZXh0ICAgICAgID0gcGFnaW5hdGlvbkN0cmwuZ2V0QXR0cmlidXRlVmFsdWUoYXR0cnMubGFzdFRleHQsICAgICAgIGNvbmZpZy5sYXN0VGV4dCwgICAgICB0cnVlKSxcclxuICAgICAgcm90YXRlICAgICAgICAgPSBwYWdpbmF0aW9uQ3RybC5nZXRBdHRyaWJ1dGVWYWx1ZShhdHRycy5yb3RhdGUsICAgICAgICAgY29uZmlnLnJvdGF0ZSk7XHJcblxyXG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KGNvbmZpZy5pdGVtc1BlclBhZ2UpO1xyXG5cclxuICAgICAgaWYgKGF0dHJzLm1heFNpemUpIHtcclxuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMubWF4U2l6ZSksIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICBtYXhTaXplID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcclxuICAgICAgICAgIHBhZ2luYXRpb25DdHJsLnJlbmRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgcGFnZSBvYmplY3QgdXNlZCBpbiB0ZW1wbGF0ZVxyXG4gICAgICBmdW5jdGlvbiBtYWtlUGFnZShudW1iZXIsIHRleHQsIGlzQWN0aXZlLCBpc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIG51bWJlcjogbnVtYmVyLFxyXG4gICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgIGFjdGl2ZTogaXNBY3RpdmUsXHJcbiAgICAgICAgICBkaXNhYmxlZDogaXNEaXNhYmxlZFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBhZ2luYXRpb25DdHJsLmdldFBhZ2VzID0gZnVuY3Rpb24oY3VycmVudFBhZ2UsIHRvdGFsUGFnZXMpIHtcclxuICAgICAgICB2YXIgcGFnZXMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gRGVmYXVsdCBwYWdlIGxpbWl0c1xyXG4gICAgICAgIHZhciBzdGFydFBhZ2UgPSAxLCBlbmRQYWdlID0gdG90YWxQYWdlcztcclxuICAgICAgICB2YXIgaXNNYXhTaXplZCA9ICggYW5ndWxhci5pc0RlZmluZWQobWF4U2l6ZSkgJiYgbWF4U2l6ZSA8IHRvdGFsUGFnZXMgKTtcclxuXHJcbiAgICAgICAgLy8gcmVjb21wdXRlIGlmIG1heFNpemVcclxuICAgICAgICBpZiAoIGlzTWF4U2l6ZWQgKSB7XHJcbiAgICAgICAgICBpZiAoIHJvdGF0ZSApIHtcclxuICAgICAgICAgICAgLy8gQ3VycmVudCBwYWdlIGlzIGRpc3BsYXllZCBpbiB0aGUgbWlkZGxlIG9mIHRoZSB2aXNpYmxlIG9uZXNcclxuICAgICAgICAgICAgc3RhcnRQYWdlID0gTWF0aC5tYXgoY3VycmVudFBhZ2UgLSBNYXRoLmZsb29yKG1heFNpemUvMiksIDEpO1xyXG4gICAgICAgICAgICBlbmRQYWdlICAgPSBzdGFydFBhZ2UgKyBtYXhTaXplIC0gMTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkanVzdCBpZiBsaW1pdCBpcyBleGNlZWRlZFxyXG4gICAgICAgICAgICBpZiAoZW5kUGFnZSA+IHRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgICAgICBlbmRQYWdlICAgPSB0b3RhbFBhZ2VzO1xyXG4gICAgICAgICAgICAgIHN0YXJ0UGFnZSA9IGVuZFBhZ2UgLSBtYXhTaXplICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVmlzaWJsZSBwYWdlcyBhcmUgcGFnaW5hdGVkIHdpdGggbWF4U2l6ZVxyXG4gICAgICAgICAgICBzdGFydFBhZ2UgPSAoKE1hdGguY2VpbChjdXJyZW50UGFnZSAvIG1heFNpemUpIC0gMSkgKiBtYXhTaXplKSArIDE7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGp1c3QgbGFzdCBwYWdlIGlmIGxpbWl0IGlzIGV4Y2VlZGVkXHJcbiAgICAgICAgICAgIGVuZFBhZ2UgPSBNYXRoLm1pbihzdGFydFBhZ2UgKyBtYXhTaXplIC0gMSwgdG90YWxQYWdlcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgcGFnZSBudW1iZXIgbGlua3NcclxuICAgICAgICBmb3IgKHZhciBudW1iZXIgPSBzdGFydFBhZ2U7IG51bWJlciA8PSBlbmRQYWdlOyBudW1iZXIrKykge1xyXG4gICAgICAgICAgdmFyIHBhZ2UgPSBtYWtlUGFnZShudW1iZXIsIG51bWJlciwgcGFnaW5hdGlvbkN0cmwuaXNBY3RpdmUobnVtYmVyKSwgZmFsc2UpO1xyXG4gICAgICAgICAgcGFnZXMucHVzaChwYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBsaW5rcyB0byBtb3ZlIGJldHdlZW4gcGFnZSBzZXRzXHJcbiAgICAgICAgaWYgKCBpc01heFNpemVkICYmICEgcm90YXRlICkge1xyXG4gICAgICAgICAgaWYgKCBzdGFydFBhZ2UgPiAxICkge1xyXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQYWdlU2V0ID0gbWFrZVBhZ2Uoc3RhcnRQYWdlIC0gMSwgJy4uLicsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBhZ2VzLnVuc2hpZnQocHJldmlvdXNQYWdlU2V0KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIGVuZFBhZ2UgPCB0b3RhbFBhZ2VzICkge1xyXG4gICAgICAgICAgICB2YXIgbmV4dFBhZ2VTZXQgPSBtYWtlUGFnZShlbmRQYWdlICsgMSwgJy4uLicsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHBhZ2VzLnB1c2gobmV4dFBhZ2VTZXQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRkIHByZXZpb3VzICYgbmV4dCBsaW5rc1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb25MaW5rcykge1xyXG4gICAgICAgICAgdmFyIHByZXZpb3VzUGFnZSA9IG1ha2VQYWdlKGN1cnJlbnRQYWdlIC0gMSwgcHJldmlvdXNUZXh0LCBmYWxzZSwgcGFnaW5hdGlvbkN0cmwubm9QcmV2aW91cygpKTtcclxuICAgICAgICAgIHBhZ2VzLnVuc2hpZnQocHJldmlvdXNQYWdlKTtcclxuXHJcbiAgICAgICAgICB2YXIgbmV4dFBhZ2UgPSBtYWtlUGFnZShjdXJyZW50UGFnZSArIDEsIG5leHRUZXh0LCBmYWxzZSwgcGFnaW5hdGlvbkN0cmwubm9OZXh0KCkpO1xyXG4gICAgICAgICAgcGFnZXMucHVzaChuZXh0UGFnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgZmlyc3QgJiBsYXN0IGxpbmtzXHJcbiAgICAgICAgaWYgKGJvdW5kYXJ5TGlua3MpIHtcclxuICAgICAgICAgIHZhciBmaXJzdFBhZ2UgPSBtYWtlUGFnZSgxLCBmaXJzdFRleHQsIGZhbHNlLCBwYWdpbmF0aW9uQ3RybC5ub1ByZXZpb3VzKCkpO1xyXG4gICAgICAgICAgcGFnZXMudW5zaGlmdChmaXJzdFBhZ2UpO1xyXG5cclxuICAgICAgICAgIHZhciBsYXN0UGFnZSA9IG1ha2VQYWdlKHRvdGFsUGFnZXMsIGxhc3RUZXh0LCBmYWxzZSwgcGFnaW5hdGlvbkN0cmwubm9OZXh0KCkpO1xyXG4gICAgICAgICAgcGFnZXMucHVzaChsYXN0UGFnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGFnZXM7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufV0pXHJcblxyXG4uY29uc3RhbnQoJ3BhZ2VyQ29uZmlnJywge1xyXG4gIGl0ZW1zUGVyUGFnZTogMTAsXHJcbiAgcHJldmlvdXNUZXh0OiAnw4LCqyBQcmV2aW91cycsXHJcbiAgbmV4dFRleHQ6ICdOZXh0IMOCwrsnLFxyXG4gIGFsaWduOiB0cnVlXHJcbn0pXHJcblxyXG4uZGlyZWN0aXZlKCdwYWdlcicsIFsncGFnZXJDb25maWcnLCBmdW5jdGlvbihjb25maWcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICBzY29wZToge1xyXG4gICAgICBwYWdlOiAnPScsXHJcbiAgICAgIHRvdGFsSXRlbXM6ICc9JyxcclxuICAgICAgb25TZWxlY3RQYWdlOicgJicsXHJcbiAgICAgIG51bVBhZ2VzOiAnPSdcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiAnUGFnaW5hdGlvbkNvbnRyb2xsZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2VyLmh0bWwnLFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcGFnaW5hdGlvbkN0cmwpIHtcclxuXHJcbiAgICAgIC8vIFNldHVwIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xyXG4gICAgICB2YXIgcHJldmlvdXNUZXh0ID0gcGFnaW5hdGlvbkN0cmwuZ2V0QXR0cmlidXRlVmFsdWUoYXR0cnMucHJldmlvdXNUZXh0LCBjb25maWcucHJldmlvdXNUZXh0LCB0cnVlKSxcclxuICAgICAgbmV4dFRleHQgICAgICAgICA9IHBhZ2luYXRpb25DdHJsLmdldEF0dHJpYnV0ZVZhbHVlKGF0dHJzLm5leHRUZXh0LCAgICAgY29uZmlnLm5leHRUZXh0LCAgICAgdHJ1ZSksXHJcbiAgICAgIGFsaWduICAgICAgICAgICAgPSBwYWdpbmF0aW9uQ3RybC5nZXRBdHRyaWJ1dGVWYWx1ZShhdHRycy5hbGlnbiwgICAgICAgIGNvbmZpZy5hbGlnbik7XHJcblxyXG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KGNvbmZpZy5pdGVtc1BlclBhZ2UpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHBhZ2Ugb2JqZWN0IHVzZWQgaW4gdGVtcGxhdGVcclxuICAgICAgZnVuY3Rpb24gbWFrZVBhZ2UobnVtYmVyLCB0ZXh0LCBpc0Rpc2FibGVkLCBpc1ByZXZpb3VzLCBpc05leHQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbnVtYmVyOiBudW1iZXIsXHJcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsXHJcbiAgICAgICAgICBwcmV2aW91czogKCBhbGlnbiAmJiBpc1ByZXZpb3VzICksXHJcbiAgICAgICAgICBuZXh0OiAoIGFsaWduICYmIGlzTmV4dCApXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcGFnaW5hdGlvbkN0cmwuZ2V0UGFnZXMgPSBmdW5jdGlvbihjdXJyZW50UGFnZSkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICBtYWtlUGFnZShjdXJyZW50UGFnZSAtIDEsIHByZXZpb3VzVGV4dCwgcGFnaW5hdGlvbkN0cmwubm9QcmV2aW91cygpLCB0cnVlLCBmYWxzZSksXHJcbiAgICAgICAgICBtYWtlUGFnZShjdXJyZW50UGFnZSArIDEsIG5leHRUZXh0LCBwYWdpbmF0aW9uQ3RybC5ub05leHQoKSwgZmFsc2UsIHRydWUpXHJcbiAgICAgICAgXTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4vKipcclxuICogVGhlIGZvbGxvd2luZyBmZWF0dXJlcyBhcmUgc3RpbGwgb3V0c3RhbmRpbmc6IGFuaW1hdGlvbiBhcyBhXHJcbiAqIGZ1bmN0aW9uLCBwbGFjZW1lbnQgYXMgYSBmdW5jdGlvbiwgaW5zaWRlLCBzdXBwb3J0IGZvciBtb3JlIHRyaWdnZXJzIHRoYW5cclxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgaHRtbCB0b29sdGlwcywgYW5kIHNlbGVjdG9yIGRlbGVnYXRpb24uXHJcbiAqL1xyXG5hbmd1bGFyLm1vZHVsZSggJ3VpLmJvb3RzdHJhcC50b29sdGlwJywgWyAndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgJ3VpLmJvb3RzdHJhcC5iaW5kSHRtbCcgXSApXHJcblxyXG4vKipcclxuICogVGhlICR0b29sdGlwIHNlcnZpY2UgY3JlYXRlcyB0b29sdGlwLSBhbmQgcG9wb3Zlci1saWtlIGRpcmVjdGl2ZXMgYXMgd2VsbCBhc1xyXG4gKiBob3VzZXMgZ2xvYmFsIG9wdGlvbnMgZm9yIHRoZW0uXHJcbiAqL1xyXG4ucHJvdmlkZXIoICckdG9vbHRpcCcsIGZ1bmN0aW9uICgpIHtcclxuICAvLyBUaGUgZGVmYXVsdCBvcHRpb25zIHRvb2x0aXAgYW5kIHBvcG92ZXIuXHJcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgcGxhY2VtZW50OiAndG9wJyxcclxuICAgIGFuaW1hdGlvbjogdHJ1ZSxcclxuICAgIHBvcHVwRGVsYXk6IDBcclxuICB9O1xyXG5cclxuICAvLyBEZWZhdWx0IGhpZGUgdHJpZ2dlcnMgZm9yIGVhY2ggc2hvdyB0cmlnZ2VyXHJcbiAgdmFyIHRyaWdnZXJNYXAgPSB7XHJcbiAgICAnbW91c2VlbnRlcic6ICdtb3VzZWxlYXZlJyxcclxuICAgICdjbGljayc6ICdjbGljaycsXHJcbiAgICAnZm9jdXMnOiAnYmx1cidcclxuICB9O1xyXG5cclxuICAvLyBUaGUgb3B0aW9ucyBzcGVjaWZpZWQgdG8gdGhlIHByb3ZpZGVyIGdsb2JhbGx5LlxyXG4gIHZhciBnbG9iYWxPcHRpb25zID0ge307XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogYG9wdGlvbnMoe30pYCBhbGxvd3MgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2YgYWxsIHRvb2x0aXBzIGluIHRoZVxyXG4gICAqIGFwcGxpY2F0aW9uLlxyXG4gICAqXHJcbiAgICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoICdBcHAnLCBbJ3VpLmJvb3RzdHJhcC50b29sdGlwJ10sIGZ1bmN0aW9uKCAkdG9vbHRpcFByb3ZpZGVyICkge1xyXG4gICAqICAgICAvLyBwbGFjZSB0b29sdGlwcyBsZWZ0IGluc3RlYWQgb2YgdG9wIGJ5IGRlZmF1bHRcclxuICAgKiAgICAgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zKCB7IHBsYWNlbWVudDogJ2xlZnQnIH0gKTtcclxuICAgKiAgIH0pO1xyXG4gICAqL1xyXG5cdHRoaXMub3B0aW9ucyA9IGZ1bmN0aW9uKCB2YWx1ZSApIHtcclxuXHRcdGFuZ3VsYXIuZXh0ZW5kKCBnbG9iYWxPcHRpb25zLCB2YWx1ZSApO1xyXG5cdH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBleHRlbmQgdGhlIHNldCBvZiB0cmlnZ2VyIG1hcHBpbmdzIGF2YWlsYWJsZS4gRS5nLjpcclxuICAgKlxyXG4gICAqICAgJHRvb2x0aXBQcm92aWRlci5zZXRUcmlnZ2VycyggJ29wZW5UcmlnZ2VyJzogJ2Nsb3NlVHJpZ2dlcicgKTtcclxuICAgKi9cclxuICB0aGlzLnNldFRyaWdnZXJzID0gZnVuY3Rpb24gc2V0VHJpZ2dlcnMgKCB0cmlnZ2VycyApIHtcclxuICAgIGFuZ3VsYXIuZXh0ZW5kKCB0cmlnZ2VyTWFwLCB0cmlnZ2VycyApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIHRyYW5zbGF0aW5nIGNhbWVsLWNhc2UgdG8gc25ha2UtY2FzZS5cclxuICAgKi9cclxuICBmdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUpe1xyXG4gICAgdmFyIHJlZ2V4cCA9IC9bQS1aXS9nO1xyXG4gICAgdmFyIHNlcGFyYXRvciA9ICctJztcclxuICAgIHJldHVybiBuYW1lLnJlcGxhY2UocmVnZXhwLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xyXG4gICAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBhY3R1YWwgaW5zdGFuY2Ugb2YgdGhlICR0b29sdGlwIHNlcnZpY2UuXHJcbiAgICogVE9ETyBzdXBwb3J0IG11bHRpcGxlIHRyaWdnZXJzXHJcbiAgICovXHJcbiAgdGhpcy4kZ2V0ID0gWyAnJHdpbmRvdycsICckY29tcGlsZScsICckdGltZW91dCcsICckcGFyc2UnLCAnJGRvY3VtZW50JywgJyRwb3NpdGlvbicsICckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbiAoICR3aW5kb3csICRjb21waWxlLCAkdGltZW91dCwgJHBhcnNlLCAkZG9jdW1lbnQsICRwb3NpdGlvbiwgJGludGVycG9sYXRlICkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICR0b29sdGlwICggdHlwZSwgcHJlZml4LCBkZWZhdWx0VHJpZ2dlclNob3cgKSB7XHJcbiAgICAgIHZhciBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoIHt9LCBkZWZhdWx0T3B0aW9ucywgZ2xvYmFsT3B0aW9ucyApO1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHNob3cgYW5kIGhpZGUgdHJpZ2dlcnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIElmIGEgdHJpZ2dlciBpcyBzdXBwbGllZCxcclxuICAgICAgICogaXQgaXMgdXNlZCB0byBzaG93IHRoZSB0b29sdGlwOyBvdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdHJpZ2dlcmBcclxuICAgICAgICogb3B0aW9uIHBhc3NlZCB0byB0aGUgYCR0b29sdGlwUHJvdmlkZXIub3B0aW9uc2AgbWV0aG9kOyBlbHNlIGl0IHdpbGxcclxuICAgICAgICogZGVmYXVsdCB0byB0aGUgdHJpZ2dlciBzdXBwbGllZCB0byB0aGlzIGRpcmVjdGl2ZSBmYWN0b3J5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBUaGUgaGlkZSB0cmlnZ2VyIGlzIGJhc2VkIG9uIHRoZSBzaG93IHRyaWdnZXIuIElmIHRoZSBgdHJpZ2dlcmAgb3B0aW9uXHJcbiAgICAgICAqIHdhcyBwYXNzZWQgdG8gdGhlIGAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnNgIG1ldGhvZCwgaXQgd2lsbCB1c2UgdGhlXHJcbiAgICAgICAqIG1hcHBlZCB0cmlnZ2VyIGZyb20gYHRyaWdnZXJNYXBgIG9yIHRoZSBwYXNzZWQgdHJpZ2dlciBpZiB0aGUgbWFwIGlzXHJcbiAgICAgICAqIHVuZGVmaW5lZDsgb3RoZXJ3aXNlLCBpdCB1c2VzIHRoZSBgdHJpZ2dlck1hcGAgdmFsdWUgb2YgdGhlIHNob3dcclxuICAgICAgICogdHJpZ2dlcjsgZWxzZSBpdCB3aWxsIGp1c3QgdXNlIHRoZSBzaG93IHRyaWdnZXIuXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiBnZXRUcmlnZ2VycyAoIHRyaWdnZXIgKSB7XHJcbiAgICAgICAgdmFyIHNob3cgPSB0cmlnZ2VyIHx8IG9wdGlvbnMudHJpZ2dlciB8fCBkZWZhdWx0VHJpZ2dlclNob3c7XHJcbiAgICAgICAgdmFyIGhpZGUgPSB0cmlnZ2VyTWFwW3Nob3ddIHx8IHNob3c7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNob3c6IHNob3csXHJcbiAgICAgICAgICBoaWRlOiBoaWRlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBzbmFrZV9jYXNlKCB0eXBlICk7XHJcblxyXG4gICAgICB2YXIgc3RhcnRTeW0gPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKTtcclxuICAgICAgdmFyIGVuZFN5bSA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKTtcclxuICAgICAgdmFyIHRlbXBsYXRlID0gXHJcbiAgICAgICAgJzwnKyBkaXJlY3RpdmVOYW1lICsnLXBvcHVwICcrXHJcbiAgICAgICAgICAndGl0bGU9XCInK3N0YXJ0U3ltKyd0dF90aXRsZScrZW5kU3ltKydcIiAnK1xyXG4gICAgICAgICAgJ2NvbnRlbnQ9XCInK3N0YXJ0U3ltKyd0dF9jb250ZW50JytlbmRTeW0rJ1wiICcrXHJcbiAgICAgICAgICAncGxhY2VtZW50PVwiJytzdGFydFN5bSsndHRfcGxhY2VtZW50JytlbmRTeW0rJ1wiICcrXHJcbiAgICAgICAgICAnYW5pbWF0aW9uPVwidHRfYW5pbWF0aW9uKClcIiAnK1xyXG4gICAgICAgICAgJ2lzLW9wZW49XCJ0dF9pc09wZW5cIicrXHJcbiAgICAgICAgICAnPicrXHJcbiAgICAgICAgJzwvJysgZGlyZWN0aXZlTmFtZSArJy1wb3B1cD4nO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICBzY29wZTogdHJ1ZSxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rICggc2NvcGUsIGVsZW1lbnQsIGF0dHJzICkge1xyXG4gICAgICAgICAgdmFyIHRvb2x0aXAgPSAkY29tcGlsZSggdGVtcGxhdGUgKSggc2NvcGUgKTtcclxuICAgICAgICAgIHZhciB0cmFuc2l0aW9uVGltZW91dDtcclxuICAgICAgICAgIHZhciBwb3B1cFRpbWVvdXQ7XHJcbiAgICAgICAgICB2YXIgJGJvZHk7XHJcbiAgICAgICAgICB2YXIgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQoIG9wdGlvbnMuYXBwZW5kVG9Cb2R5ICkgPyBvcHRpb25zLmFwcGVuZFRvQm9keSA6IGZhbHNlO1xyXG4gICAgICAgICAgdmFyIHRyaWdnZXJzID0gZ2V0VHJpZ2dlcnMoIHVuZGVmaW5lZCApO1xyXG4gICAgICAgICAgdmFyIGhhc1JlZ2lzdGVyZWRUcmlnZ2VycyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSB0b29sdGlwIGlzIG5vdCBvcGVuLlxyXG4gICAgICAgICAgLy8gVE9ETyBhZGQgYWJpbGl0eSB0byBzdGFydCB0b29sdGlwIG9wZW5lZFxyXG4gICAgICAgICAgc2NvcGUudHRfaXNPcGVuID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlVG9vbHRpcEJpbmQgKCkge1xyXG4gICAgICAgICAgICBpZiAoICEgc2NvcGUudHRfaXNPcGVuICkge1xyXG4gICAgICAgICAgICAgIHNob3dUb29sdGlwQmluZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGhpZGVUb29sdGlwQmluZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIFNob3cgdGhlIHRvb2x0aXAgd2l0aCBkZWxheSBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBzaG93IGl0IGltbWVkaWF0ZWx5XHJcbiAgICAgICAgICBmdW5jdGlvbiBzaG93VG9vbHRpcEJpbmQoKSB7XHJcbiAgICAgICAgICAgIGlmICggc2NvcGUudHRfcG9wdXBEZWxheSApIHtcclxuICAgICAgICAgICAgICBwb3B1cFRpbWVvdXQgPSAkdGltZW91dCggc2hvdywgc2NvcGUudHRfcG9wdXBEZWxheSApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNjb3BlLiRhcHBseSggc2hvdyApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24gaGlkZVRvb2x0aXBCaW5kICgpIHtcclxuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBoaWRlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBTaG93IHRoZSB0b29sdGlwIHBvcHVwIGVsZW1lbnQuXHJcbiAgICAgICAgICBmdW5jdGlvbiBzaG93KCkge1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICB0dFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgdHRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0dFBvc2l0aW9uO1xyXG5cclxuICAgICAgICAgICAgLy8gRG9uJ3Qgc2hvdyBlbXB0eSB0b29sdGlwcy5cclxuICAgICAgICAgICAgaWYgKCAhIHNjb3BlLnR0X2NvbnRlbnQgKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHBlbmRpbmcgcmVtb3ZlIHRyYW5zaXRpb24sIHdlIG11c3QgY2FuY2VsIGl0LCBsZXN0IHRoZVxyXG4gICAgICAgICAgICAvLyB0b29sdGlwIGJlIG15c3RlcmlvdXNseSByZW1vdmVkLlxyXG4gICAgICAgICAgICBpZiAoIHRyYW5zaXRpb25UaW1lb3V0ICkge1xyXG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCggdHJhbnNpdGlvblRpbWVvdXQgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gU2V0IHRoZSBpbml0aWFsIHBvc2l0aW9uaW5nLlxyXG4gICAgICAgICAgICB0b29sdGlwLmNzcyh7IHRvcDogMCwgbGVmdDogMCwgZGlzcGxheTogJ2Jsb2NrJyB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIE5vdyB3ZSBhZGQgaXQgdG8gdGhlIERPTSBiZWNhdXNlIG5lZWQgc29tZSBpbmZvIGFib3V0IGl0LiBCdXQgaXQncyBub3QgXHJcbiAgICAgICAgICAgIC8vIHZpc2libGUgeWV0IGFueXdheS5cclxuICAgICAgICAgICAgaWYgKCBhcHBlbmRUb0JvZHkgKSB7XHJcbiAgICAgICAgICAgICAgICAkYm9keSA9ICRib2R5IHx8ICRkb2N1bWVudC5maW5kKCAnYm9keScgKTtcclxuICAgICAgICAgICAgICAgICRib2R5LmFwcGVuZCggdG9vbHRpcCApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIoIHRvb2x0aXAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgZGlyZWN0aXZlIGVsZW1lbnQuXHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gYXBwZW5kVG9Cb2R5ID8gJHBvc2l0aW9uLm9mZnNldCggZWxlbWVudCApIDogJHBvc2l0aW9uLnBvc2l0aW9uKCBlbGVtZW50ICk7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHRvb2x0aXAgc28gd2UgY2FuIGNlbnRlciBpdC5cclxuICAgICAgICAgICAgdHRXaWR0aCA9IHRvb2x0aXAucHJvcCggJ29mZnNldFdpZHRoJyApO1xyXG4gICAgICAgICAgICB0dEhlaWdodCA9IHRvb2x0aXAucHJvcCggJ29mZnNldEhlaWdodCcgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgdG9vbHRpcCdzIHRvcCBhbmQgbGVmdCBjb29yZGluYXRlcyB0byBjZW50ZXIgaXQgd2l0aFxyXG4gICAgICAgICAgICAvLyB0aGlzIGRpcmVjdGl2ZS5cclxuICAgICAgICAgICAgc3dpdGNoICggc2NvcGUudHRfcGxhY2VtZW50ICkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgIHR0UG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgIHRvcDogcG9zaXRpb24udG9wICsgcG9zaXRpb24uaGVpZ2h0IC8gMiAtIHR0SGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ubGVmdCArIHBvc2l0aW9uLndpZHRoXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcclxuICAgICAgICAgICAgICAgIHR0UG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgIHRvcDogcG9zaXRpb24udG9wICsgcG9zaXRpb24uaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICBsZWZ0OiBwb3NpdGlvbi5sZWZ0ICsgcG9zaXRpb24ud2lkdGggLyAyIC0gdHRXaWR0aCAvIDJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgIHR0UG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgIHRvcDogcG9zaXRpb24udG9wICsgcG9zaXRpb24uaGVpZ2h0IC8gMiAtIHR0SGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ubGVmdCAtIHR0V2lkdGhcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdHRQb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgdG9wOiBwb3NpdGlvbi50b3AgLSB0dEhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb24ubGVmdCArIHBvc2l0aW9uLndpZHRoIC8gMiAtIHR0V2lkdGggLyAyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHR0UG9zaXRpb24udG9wICs9ICdweCc7XHJcbiAgICAgICAgICAgIHR0UG9zaXRpb24ubGVmdCArPSAncHgnO1xyXG5cclxuICAgICAgICAgICAgLy8gTm93IHNldCB0aGUgY2FsY3VsYXRlZCBwb3NpdGlvbmluZy5cclxuICAgICAgICAgICAgdG9vbHRpcC5jc3MoIHR0UG9zaXRpb24gKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQW5kIHNob3cgdGhlIHRvb2x0aXAuXHJcbiAgICAgICAgICAgIHNjb3BlLnR0X2lzT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEhpZGUgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cclxuICAgICAgICAgIGZ1bmN0aW9uIGhpZGUoKSB7XHJcbiAgICAgICAgICAgIC8vIEZpcnN0IHRoaW5ncyBmaXJzdDogd2UgZG9uJ3Qgc2hvdyBpdCBhbnltb3JlLlxyXG4gICAgICAgICAgICBzY29wZS50dF9pc09wZW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdG9vbHRpcCBpcyBnb2luZyB0byBiZSBzaG93biBhZnRlciBkZWxheSwgd2UgbXVzdCBjYW5jZWwgdGhpc1xyXG4gICAgICAgICAgICAkdGltZW91dC5jYW5jZWwoIHBvcHVwVGltZW91dCApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQW5kIG5vdyB3ZSByZW1vdmUgaXQgZnJvbSB0aGUgRE9NLiBIb3dldmVyLCBpZiB3ZSBoYXZlIGFuaW1hdGlvbiwgd2UgXHJcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgaXQgdG8gZXhwaXJlIGJlZm9yZWhhbmQuXHJcbiAgICAgICAgICAgIC8vIEZJWE1FOiB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgcG9ydCBvZiB0aGUgdHJhbnNpdGlvbnMgbGlicmFyeS5cclxuICAgICAgICAgICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZCggc2NvcGUudHRfYW5pbWF0aW9uICkgJiYgc2NvcGUudHRfYW5pbWF0aW9uKCkgKSB7XHJcbiAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSAkdGltZW91dCggZnVuY3Rpb24gKCkgeyB0b29sdGlwLnJlbW92ZSgpOyB9LCA1MDAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBPYnNlcnZlIHRoZSByZWxldmFudCBhdHRyaWJ1dGVzLlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSggdHlwZSwgZnVuY3Rpb24gKCB2YWwgKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnR0X2NvbnRlbnQgPSB2YWw7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSggcHJlZml4KydUaXRsZScsIGZ1bmN0aW9uICggdmFsICkge1xyXG4gICAgICAgICAgICBzY29wZS50dF90aXRsZSA9IHZhbDtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCBwcmVmaXgrJ1BsYWNlbWVudCcsIGZ1bmN0aW9uICggdmFsICkge1xyXG4gICAgICAgICAgICBzY29wZS50dF9wbGFjZW1lbnQgPSBhbmd1bGFyLmlzRGVmaW5lZCggdmFsICkgPyB2YWwgOiBvcHRpb25zLnBsYWNlbWVudDtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCBwcmVmaXgrJ0FuaW1hdGlvbicsIGZ1bmN0aW9uICggdmFsICkge1xyXG4gICAgICAgICAgICBzY29wZS50dF9hbmltYXRpb24gPSBhbmd1bGFyLmlzRGVmaW5lZCggdmFsICkgPyAkcGFyc2UoIHZhbCApIDogZnVuY3Rpb24oKXsgcmV0dXJuIG9wdGlvbnMuYW5pbWF0aW9uOyB9O1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgYXR0cnMuJG9ic2VydmUoIHByZWZpeCsnUG9wdXBEZWxheScsIGZ1bmN0aW9uICggdmFsICkge1xyXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSBwYXJzZUludCggdmFsLCAxMCApO1xyXG4gICAgICAgICAgICBzY29wZS50dF9wb3B1cERlbGF5ID0gISBpc05hTihkZWxheSkgPyBkZWxheSA6IG9wdGlvbnMucG9wdXBEZWxheTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKCBwcmVmaXgrJ1RyaWdnZXInLCBmdW5jdGlvbiAoIHZhbCApIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNSZWdpc3RlcmVkVHJpZ2dlcnMpIHtcclxuICAgICAgICAgICAgICBlbGVtZW50LnVuYmluZCggdHJpZ2dlcnMuc2hvdywgc2hvd1Rvb2x0aXBCaW5kICk7XHJcbiAgICAgICAgICAgICAgZWxlbWVudC51bmJpbmQoIHRyaWdnZXJzLmhpZGUsIGhpZGVUb29sdGlwQmluZCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0cmlnZ2VycyA9IGdldFRyaWdnZXJzKCB2YWwgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggdHJpZ2dlcnMuc2hvdyA9PT0gdHJpZ2dlcnMuaGlkZSApIHtcclxuICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoIHRyaWdnZXJzLnNob3csIHRvZ2dsZVRvb2x0aXBCaW5kICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCB0cmlnZ2Vycy5zaG93LCBzaG93VG9vbHRpcEJpbmQgKTtcclxuICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoIHRyaWdnZXJzLmhpZGUsIGhpZGVUb29sdGlwQmluZCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXNSZWdpc3RlcmVkVHJpZ2dlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgYXR0cnMuJG9ic2VydmUoIHByZWZpeCsnQXBwZW5kVG9Cb2R5JywgZnVuY3Rpb24gKCB2YWwgKSB7XHJcbiAgICAgICAgICAgIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCB2YWwgKSA/ICRwYXJzZSggdmFsICkoIHNjb3BlICkgOiBhcHBlbmRUb0JvZHk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBpZiBhIHRvb2x0aXAgaXMgYXR0YWNoZWQgdG8gPGJvZHk+IHdlIG5lZWQgdG8gcmVtb3ZlIGl0IG9uXHJcbiAgICAgICAgICAvLyBsb2NhdGlvbiBjaGFuZ2UgYXMgaXRzIHBhcmVudCBzY29wZSB3aWxsIHByb2JhYmx5IG5vdCBiZSBkZXN0cm95ZWRcclxuICAgICAgICAgIC8vIGJ5IHRoZSBjaGFuZ2UuXHJcbiAgICAgICAgICBpZiAoIGFwcGVuZFRvQm9keSApIHtcclxuICAgICAgICAgICAgc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gY2xvc2VUb29sdGlwT25Mb2NhdGlvbkNoYW5nZVN1Y2Nlc3MgKCkge1xyXG4gICAgICAgICAgICBpZiAoIHNjb3BlLnR0X2lzT3BlbiApIHtcclxuICAgICAgICAgICAgICBoaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0b29sdGlwIGlzIGRlc3Ryb3llZCBhbmQgcmVtb3ZlZC5cclxuICAgICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiBvbkRlc3Ryb3lUb29sdGlwKCkge1xyXG4gICAgICAgICAgICBpZiAoIHNjb3BlLnR0X2lzT3BlbiApIHtcclxuICAgICAgICAgICAgICBoaWRlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdG9vbHRpcC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9XTtcclxufSlcclxuXHJcbi5kaXJlY3RpdmUoICd0b29sdGlwUG9wdXAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgc2NvcGU6IHsgY29udGVudDogJ0AnLCBwbGFjZW1lbnQ6ICdAJywgYW5pbWF0aW9uOiAnJicsIGlzT3BlbjogJyYnIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sJ1xyXG4gIH07XHJcbn0pXHJcblxyXG4uZGlyZWN0aXZlKCAndG9vbHRpcCcsIFsgJyR0b29sdGlwJywgZnVuY3Rpb24gKCAkdG9vbHRpcCApIHtcclxuICByZXR1cm4gJHRvb2x0aXAoICd0b29sdGlwJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicgKTtcclxufV0pXHJcblxyXG4uZGlyZWN0aXZlKCAndG9vbHRpcEh0bWxVbnNhZmVQb3B1cCcsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICBzY29wZTogeyBjb250ZW50OiAnQCcsIHBsYWNlbWVudDogJ0AnLCBhbmltYXRpb246ICcmJywgaXNPcGVuOiAnJicgfSxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtdW5zYWZlLXBvcHVwLmh0bWwnXHJcbiAgfTtcclxufSlcclxuXHJcbi5kaXJlY3RpdmUoICd0b29sdGlwSHRtbFVuc2FmZScsIFsgJyR0b29sdGlwJywgZnVuY3Rpb24gKCAkdG9vbHRpcCApIHtcclxuICByZXR1cm4gJHRvb2x0aXAoICd0b29sdGlwSHRtbFVuc2FmZScsICd0b29sdGlwJywgJ21vdXNlZW50ZXInICk7XHJcbn1dKTtcclxuXHJcbi8qKlxyXG4gKiBUaGUgZm9sbG93aW5nIGZlYXR1cmVzIGFyZSBzdGlsbCBvdXRzdGFuZGluZzogcG9wdXAgZGVsYXksIGFuaW1hdGlvbiBhcyBhXHJcbiAqIGZ1bmN0aW9uLCBwbGFjZW1lbnQgYXMgYSBmdW5jdGlvbiwgaW5zaWRlLCBzdXBwb3J0IGZvciBtb3JlIHRyaWdnZXJzIHRoYW5cclxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgaHRtbCBwb3BvdmVycywgYW5kIHNlbGVjdG9yIGRlbGVnYXRhdGlvbi5cclxuICovXHJcbmFuZ3VsYXIubW9kdWxlKCAndWkuYm9vdHN0cmFwLnBvcG92ZXInLCBbICd1aS5ib290c3RyYXAudG9vbHRpcCcgXSApXHJcbi5kaXJlY3RpdmUoICdwb3BvdmVyUG9wdXAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIHNjb3BlOiB7IHRpdGxlOiAnQCcsIGNvbnRlbnQ6ICdAJywgcGxhY2VtZW50OiAnQCcsIGFuaW1hdGlvbjogJyYnLCBpc09wZW46ICcmJyB9LFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXIuaHRtbCdcclxuICB9O1xyXG59KVxyXG4uZGlyZWN0aXZlKCAncG9wb3ZlcicsIFsgJyRjb21waWxlJywgJyR0aW1lb3V0JywgJyRwYXJzZScsICckd2luZG93JywgJyR0b29sdGlwJywgZnVuY3Rpb24gKCAkY29tcGlsZSwgJHRpbWVvdXQsICRwYXJzZSwgJHdpbmRvdywgJHRvb2x0aXAgKSB7XHJcbiAgcmV0dXJuICR0b29sdGlwKCAncG9wb3ZlcicsICdwb3BvdmVyJywgJ2NsaWNrJyApO1xyXG59XSk7XHJcblxyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wcm9ncmVzc2JhcicsIFsndWkuYm9vdHN0cmFwLnRyYW5zaXRpb24nXSlcclxuXHJcbi5jb25zdGFudCgncHJvZ3Jlc3NDb25maWcnLCB7XHJcbiAgYW5pbWF0ZTogdHJ1ZSxcclxuICBhdXRvVHlwZTogZmFsc2UsXHJcbiAgc3RhY2tlZFR5cGVzOiBbJ3N1Y2Nlc3MnLCAnaW5mbycsICd3YXJuaW5nJywgJ2RhbmdlciddXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignUHJvZ3Jlc3NCYXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ3Byb2dyZXNzQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsIHByb2dyZXNzQ29uZmlnKSB7XHJcblxyXG4gICAgLy8gV2hldGhlciBiYXIgdHJhbnNpdGlvbnMgc2hvdWxkIGJlIGFuaW1hdGVkXHJcbiAgICB2YXIgYW5pbWF0ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5hbmltYXRlKSA/ICRzY29wZS4kZXZhbCgkYXR0cnMuYW5pbWF0ZSkgOiBwcm9ncmVzc0NvbmZpZy5hbmltYXRlO1xyXG4gICAgdmFyIGF1dG9UeXBlID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmF1dG9UeXBlKSA/ICRzY29wZS4kZXZhbCgkYXR0cnMuYXV0b1R5cGUpIDogcHJvZ3Jlc3NDb25maWcuYXV0b1R5cGU7XHJcbiAgICB2YXIgc3RhY2tlZFR5cGVzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnN0YWNrZWRUeXBlcykgPyAkc2NvcGUuJGV2YWwoJ1snICsgJGF0dHJzLnN0YWNrZWRUeXBlcyArICddJykgOiBwcm9ncmVzc0NvbmZpZy5zdGFja2VkVHlwZXM7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGJhciBvYmplY3RcclxuICAgIHRoaXMubWFrZUJhciA9IGZ1bmN0aW9uKG5ld0Jhciwgb2xkQmFyLCBpbmRleCkge1xyXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IChhbmd1bGFyLmlzT2JqZWN0KG5ld0JhcikpID8gbmV3QmFyLnZhbHVlIDogKG5ld0JhciB8fCAwKTtcclxuICAgICAgICB2YXIgb2xkVmFsdWUgPSAgKGFuZ3VsYXIuaXNPYmplY3Qob2xkQmFyKSkgPyBvbGRCYXIudmFsdWUgOiAob2xkQmFyIHx8IDApO1xyXG4gICAgICAgIHZhciB0eXBlID0gKGFuZ3VsYXIuaXNPYmplY3QobmV3QmFyKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChuZXdCYXIudHlwZSkpID8gbmV3QmFyLnR5cGUgOiAoYXV0b1R5cGUpID8gZ2V0U3RhY2tlZFR5cGUoaW5kZXggfHwgMCkgOiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmcm9tOiBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgdG86IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgICBhbmltYXRlOiBhbmltYXRlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U3RhY2tlZFR5cGUoaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gc3RhY2tlZFR5cGVzW2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFkZEJhciA9IGZ1bmN0aW9uKGJhcikge1xyXG4gICAgICAgICRzY29wZS5iYXJzLnB1c2goYmFyKTtcclxuICAgICAgICAkc2NvcGUudG90YWxQZXJjZW50ICs9IGJhci50bztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jbGVhckJhcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkc2NvcGUuYmFycyA9IFtdO1xyXG4gICAgICAgICRzY29wZS50b3RhbFBlcmNlbnQgPSAwO1xyXG4gICAgfTtcclxuICAgIHRoaXMuY2xlYXJCYXJzKCk7XHJcbn1dKVxyXG5cclxuLmRpcmVjdGl2ZSgncHJvZ3Jlc3MnLCBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICBjb250cm9sbGVyOiAnUHJvZ3Jlc3NCYXJDb250cm9sbGVyJyxcclxuICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICB2YWx1ZTogJz1wZXJjZW50JyxcclxuICAgICAgICAgICAgb25GdWxsOiAnJicsXHJcbiAgICAgICAgICAgIG9uRW1wdHk6ICcmJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzcy5odG1sJyxcclxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCd2YWx1ZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5jbGVhckJhcnMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KG5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0YWNrZWQgcHJvZ3Jlc3MgYmFyXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBuPW5ld1ZhbHVlLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFkZEJhcihjb250cm9sbGVyLm1ha2VCYXIobmV3VmFsdWVbaV0sIG9sZFZhbHVlW2ldLCBpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTaW1wbGUgYmFyXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5hZGRCYXIoY29udHJvbGxlci5tYWtlQmFyKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRvdGFsIHBlcmNlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaCgndG90YWxQZXJjZW50JywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS5vbkZ1bGwoKTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHNjb3BlLm9uRW1wdHkoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pXHJcblxyXG4uZGlyZWN0aXZlKCdwcm9ncmVzc2JhcicsIFsnJHRyYW5zaXRpb24nLCBmdW5jdGlvbigkdHJhbnNpdGlvbikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAnPScsXHJcbiAgICAgICAgICAgIG9sZDogJz0nLFxyXG4gICAgICAgICAgICB0eXBlOiAnPScsXHJcbiAgICAgICAgICAgIGFuaW1hdGU6ICc9J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbCcsXHJcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCd3aWR0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuYW5pbWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCd3aWR0aCcsIHNjb3BlLm9sZCArICclJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHRyYW5zaXRpb24oZWxlbWVudCwge3dpZHRoOiB2YWx1ZSArICclJ30pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygnd2lkdGgnLCB2YWx1ZSArICclJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1dKTtcclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5yYXRpbmcnLCBbXSlcclxuXHJcbi5jb25zdGFudCgncmF0aW5nQ29uZmlnJywge1xyXG4gIG1heDogNSxcclxuICBzdGF0ZU9uOiBudWxsLFxyXG4gIHN0YXRlT2ZmOiBudWxsXHJcbn0pXHJcblxyXG4uY29udHJvbGxlcignUmF0aW5nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICckcGFyc2UnLCAncmF0aW5nQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgcmF0aW5nQ29uZmlnKSB7XHJcblxyXG4gIHRoaXMubWF4UmFuZ2UgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWF4KSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tYXgpIDogcmF0aW5nQ29uZmlnLm1heDtcclxuICB0aGlzLnN0YXRlT24gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc3RhdGVPbikgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc3RhdGVPbikgOiByYXRpbmdDb25maWcuc3RhdGVPbjtcclxuICB0aGlzLnN0YXRlT2ZmID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnN0YXRlT2ZmKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5zdGF0ZU9mZikgOiByYXRpbmdDb25maWcuc3RhdGVPZmY7XHJcblxyXG4gIHRoaXMuY3JlYXRlRGVmYXVsdFJhbmdlID0gZnVuY3Rpb24obGVuKSB7XHJcbiAgICB2YXIgZGVmYXVsdFN0YXRlT2JqZWN0ID0ge1xyXG4gICAgICBzdGF0ZU9uOiB0aGlzLnN0YXRlT24sXHJcbiAgICAgIHN0YXRlT2ZmOiB0aGlzLnN0YXRlT2ZmXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzdGF0ZXMgPSBuZXcgQXJyYXkobGVuKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgc3RhdGVzW2ldID0gZGVmYXVsdFN0YXRlT2JqZWN0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXRlcztcclxuICB9O1xyXG5cclxuICB0aGlzLm5vcm1hbGl6ZVJhbmdlID0gZnVuY3Rpb24oc3RhdGVzKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHN0YXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgc3RhdGVzW2ldLnN0YXRlT24gPSBzdGF0ZXNbaV0uc3RhdGVPbiB8fCB0aGlzLnN0YXRlT247XHJcbiAgICAgIHN0YXRlc1tpXS5zdGF0ZU9mZiA9IHN0YXRlc1tpXS5zdGF0ZU9mZiB8fCB0aGlzLnN0YXRlT2ZmO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXRlcztcclxuICB9O1xyXG5cclxuICAvLyBHZXQgb2JqZWN0cyB1c2VkIGluIHRlbXBsYXRlXHJcbiAgJHNjb3BlLnJhbmdlID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJhdGluZ1N0YXRlcykgPyAgdGhpcy5ub3JtYWxpemVSYW5nZShhbmd1bGFyLmNvcHkoJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJhdGluZ1N0YXRlcykpKTogdGhpcy5jcmVhdGVEZWZhdWx0UmFuZ2UodGhpcy5tYXhSYW5nZSk7XHJcblxyXG4gICRzY29wZS5yYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIGlmICggJHNjb3BlLnJlYWRvbmx5IHx8ICRzY29wZS52YWx1ZSA9PT0gdmFsdWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS52YWx1ZSA9IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5lbnRlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICBpZiAoICEgJHNjb3BlLnJlYWRvbmx5ICkge1xyXG4gICAgICAkc2NvcGUudmFsID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAkc2NvcGUub25Ib3Zlcih7dmFsdWU6IHZhbHVlfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUudmFsID0gYW5ndWxhci5jb3B5KCRzY29wZS52YWx1ZSk7XHJcbiAgICAkc2NvcGUub25MZWF2ZSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS4kd2F0Y2goJ3ZhbHVlJywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICRzY29wZS52YWwgPSB2YWx1ZTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLnJlYWRvbmx5ID0gZmFsc2U7XHJcbiAgaWYgKCRhdHRycy5yZWFkb25seSkge1xyXG4gICAgJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMucmVhZG9ubHkpLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAkc2NvcGUucmVhZG9ubHkgPSAhIXZhbHVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XSlcclxuXHJcbi5kaXJlY3RpdmUoJ3JhdGluZycsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0VBJyxcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIHZhbHVlOiAnPScsXHJcbiAgICAgIG9uSG92ZXI6ICcmJyxcclxuICAgICAgb25MZWF2ZTogJyYnXHJcbiAgICB9LFxyXG4gICAgY29udHJvbGxlcjogJ1JhdGluZ0NvbnRyb2xsZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9yYXRpbmcvcmF0aW5nLmh0bWwnLFxyXG4gICAgcmVwbGFjZTogdHJ1ZVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvdmVydmlld1xyXG4gKiBAbmFtZSB1aS5ib290c3RyYXAudGFic1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQW5ndWxhckpTIHZlcnNpb24gb2YgdGhlIHRhYnMgZGlyZWN0aXZlLlxyXG4gKi9cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGFicycsIFtdKVxyXG5cclxuLmRpcmVjdGl2ZSgndGFicycsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBgdGFic2AgZGlyZWN0aXZlIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSBtaWdyYXRlIHRvIGB0YWJzZXRgLiBJbnN0cnVjdGlvbnMgY2FuIGJlIGZvdW5kIGF0IGh0dHA6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvYm9vdHN0cmFwL3RyZWUvbWFzdGVyL0NIQU5HRUxPRy5tZFwiKTtcclxuICB9O1xyXG59KVxyXG5cclxuLmNvbnRyb2xsZXIoJ1RhYnNldENvbnRyb2xsZXInLCBbJyRzY29wZScsICckZWxlbWVudCcsXHJcbmZ1bmN0aW9uIFRhYnNldEN0cmwoJHNjb3BlLCAkZWxlbWVudCkge1xyXG5cclxuICB2YXIgY3RybCA9IHRoaXMsXHJcbiAgICB0YWJzID0gY3RybC50YWJzID0gJHNjb3BlLnRhYnMgPSBbXTtcclxuXHJcbiAgY3RybC5zZWxlY3QgPSBmdW5jdGlvbih0YWIpIHtcclxuICAgIGFuZ3VsYXIuZm9yRWFjaCh0YWJzLCBmdW5jdGlvbih0YWIpIHtcclxuICAgICAgdGFiLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgICB0YWIuYWN0aXZlID0gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBjdHJsLmFkZFRhYiA9IGZ1bmN0aW9uIGFkZFRhYih0YWIpIHtcclxuICAgIHRhYnMucHVzaCh0YWIpO1xyXG4gICAgaWYgKHRhYnMubGVuZ3RoID09PSAxIHx8IHRhYi5hY3RpdmUpIHtcclxuICAgICAgY3RybC5zZWxlY3QodGFiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjdHJsLnJlbW92ZVRhYiA9IGZ1bmN0aW9uIHJlbW92ZVRhYih0YWIpIHtcclxuICAgIHZhciBpbmRleCA9IHRhYnMuaW5kZXhPZih0YWIpO1xyXG4gICAgLy9TZWxlY3QgYSBuZXcgdGFiIGlmIHRoZSB0YWIgdG8gYmUgcmVtb3ZlZCBpcyBzZWxlY3RlZFxyXG4gICAgaWYgKHRhYi5hY3RpdmUgJiYgdGFicy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIC8vSWYgdGhpcyBpcyB0aGUgbGFzdCB0YWIsIHNlbGVjdCB0aGUgcHJldmlvdXMgdGFiLiBlbHNlLCB0aGUgbmV4dCB0YWIuXHJcbiAgICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGluZGV4ID09IHRhYnMubGVuZ3RoIC0gMSA/IGluZGV4IC0gMSA6IGluZGV4ICsgMTtcclxuICAgICAgY3RybC5zZWxlY3QodGFic1tuZXdBY3RpdmVJbmRleF0pO1xyXG4gICAgfVxyXG4gICAgdGFicy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH07XHJcbn1dKVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYnNldFxyXG4gKiBAcmVzdHJpY3QgRUFcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRhYnNldCBpcyB0aGUgb3V0ZXIgY29udGFpbmVyIGZvciB0aGUgdGFicyBkaXJlY3RpdmVcclxuICpcclxuICogQHBhcmFtIHtib29sZWFuPX0gdmVydGljYWwgV2hldGhlciBvciBub3QgdG8gdXNlIHZlcnRpY2FsIHN0eWxpbmcgZm9yIHRoZSB0YWJzLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IGRpcmVjdGlvbiAgV2hhdCBkaXJlY3Rpb24gdGhlIHRhYnMgc2hvdWxkIGJlIHJlbmRlcmVkLiBBdmFpbGFibGU6XHJcbiAqICdyaWdodCcsICdsZWZ0JywgJ2JlbG93Jy5cclxuICpcclxuICogQGV4YW1wbGVcclxuPGV4YW1wbGUgbW9kdWxlPVwidWkuYm9vdHN0cmFwXCI+XHJcbiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgIDx0YWJzZXQ+XHJcbiAgICAgIDx0YWIgaGVhZGluZz1cIlZlcnRpY2FsIFRhYiAxXCI+PGI+Rmlyc3Q8L2I+IENvbnRlbnQhPC90YWI+XHJcbiAgICAgIDx0YWIgaGVhZGluZz1cIlZlcnRpY2FsIFRhYiAyXCI+PGk+U2Vjb25kPC9pPiBDb250ZW50ITwvdGFiPlxyXG4gICAgPC90YWJzZXQ+XHJcbiAgICA8aHIgLz5cclxuICAgIDx0YWJzZXQgdmVydGljYWw9XCJ0cnVlXCI+XHJcbiAgICAgIDx0YWIgaGVhZGluZz1cIlZlcnRpY2FsIFRhYiAxXCI+PGI+Rmlyc3Q8L2I+IFZlcnRpY2FsIENvbnRlbnQhPC90YWI+XHJcbiAgICAgIDx0YWIgaGVhZGluZz1cIlZlcnRpY2FsIFRhYiAyXCI+PGk+U2Vjb25kPC9pPiBWZXJ0aWNhbCBDb250ZW50ITwvdGFiPlxyXG4gICAgPC90YWJzZXQ+XHJcbiAgPC9maWxlPlxyXG48L2V4YW1wbGU+XHJcbiAqL1xyXG4uZGlyZWN0aXZlKCd0YWJzZXQnLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIHJlcXVpcmU6ICdedGFic2V0JyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIGNvbnRyb2xsZXI6ICdUYWJzZXRDb250cm9sbGVyJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbCcsXHJcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbG0sIGF0dHJzLCB0cmFuc2NsdWRlKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHRhYnNldEN0cmwpIHtcclxuICAgICAgICBzY29wZS52ZXJ0aWNhbCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnZlcnRpY2FsKSA/IHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMudmVydGljYWwpIDogZmFsc2U7XHJcbiAgICAgICAgc2NvcGUudHlwZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGUpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy50eXBlKSA6ICd0YWJzJztcclxuICAgICAgICBzY29wZS5kaXJlY3Rpb24gPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kaXJlY3Rpb24pID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5kaXJlY3Rpb24pIDogJ3RvcCc7XHJcbiAgICAgICAgc2NvcGUudGFic0Fib3ZlID0gKHNjb3BlLmRpcmVjdGlvbiAhPSAnYmVsb3cnKTtcclxuICAgICAgICB0YWJzZXRDdHJsLiRzY29wZSA9IHNjb3BlO1xyXG4gICAgICAgIHRhYnNldEN0cmwuJHRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGU7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufSlcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC50YWJzLmRpcmVjdGl2ZTp0YWJcclxuICogQHJlc3RyaWN0IEVBXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gaGVhZGluZyBUaGUgdmlzaWJsZSBoZWFkaW5nLCBvciB0aXRsZSwgb2YgdGhlIHRhYi4gU2V0IEhUTUwgaGVhZGluZ3Mgd2l0aCB7QGxpbmsgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYkhlYWRpbmcgdGFiSGVhZGluZ30uXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gc2VsZWN0IEFuIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiB0aGUgdGFiIGlzIHNlbGVjdGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBhY3RpdmUgQSBiaW5kaW5nLCB0ZWxsaW5nIHdoZXRoZXIgb3Igbm90IHRoaXMgdGFiIGlzIHNlbGVjdGVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBkaXNhYmxlZCBBIGJpbmRpbmcsIHRlbGxpbmcgd2hldGhlciBvciBub3QgdGhpcyB0YWIgaXMgZGlzYWJsZWQuXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDcmVhdGVzIGEgdGFiIHdpdGggYSBoZWFkaW5nIGFuZCBjb250ZW50LiBNdXN0IGJlIHBsYWNlZCB3aXRoaW4gYSB7QGxpbmsgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYnNldCB0YWJzZXR9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG48ZXhhbXBsZSBtb2R1bGU9XCJ1aS5ib290c3RyYXBcIj5cclxuICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgPGRpdiBuZy1jb250cm9sbGVyPVwiVGFic0RlbW9DdHJsXCI+XHJcbiAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtYWxsXCIgbmctY2xpY2s9XCJpdGVtc1swXS5hY3RpdmUgPSB0cnVlXCI+XHJcbiAgICAgICAgU2VsZWN0IGl0ZW0gMSwgdXNpbmcgYWN0aXZlIGJpbmRpbmdcclxuICAgICAgPC9idXR0b24+XHJcbiAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtYWxsXCIgbmctY2xpY2s9XCJpdGVtc1sxXS5kaXNhYmxlZCA9ICFpdGVtc1sxXS5kaXNhYmxlZFwiPlxyXG4gICAgICAgIEVuYWJsZS9kaXNhYmxlIGl0ZW0gMiwgdXNpbmcgZGlzYWJsZWQgYmluZGluZ1xyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAgPGJyIC8+XHJcbiAgICAgIDx0YWJzZXQ+XHJcbiAgICAgICAgPHRhYiBoZWFkaW5nPVwiVGFiIDFcIj5GaXJzdCBUYWI8L3RhYj5cclxuICAgICAgICA8dGFiIHNlbGVjdD1cImFsZXJ0TWUoKVwiPlxyXG4gICAgICAgICAgPHRhYi1oZWFkaW5nPjxpIGNsYXNzPVwiaWNvbi1iZWxsXCI+PC9pPiBBbGVydCBtZSE8L3RhYi1oZWFkaW5nPlxyXG4gICAgICAgICAgU2Vjb25kIFRhYiwgd2l0aCBhbGVydCBjYWxsYmFjayBhbmQgaHRtbCBoZWFkaW5nIVxyXG4gICAgICAgIDwvdGFiPlxyXG4gICAgICAgIDx0YWIgbmctcmVwZWF0PVwiaXRlbSBpbiBpdGVtc1wiXHJcbiAgICAgICAgICBoZWFkaW5nPVwie3tpdGVtLnRpdGxlfX1cIlxyXG4gICAgICAgICAgZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcclxuICAgICAgICAgIGFjdGl2ZT1cIml0ZW0uYWN0aXZlXCI+XHJcbiAgICAgICAgICB7e2l0ZW0uY29udGVudH19XHJcbiAgICAgICAgPC90YWI+XHJcbiAgICAgIDwvdGFic2V0PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9maWxlPlxyXG4gIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cclxuICAgIGZ1bmN0aW9uIFRhYnNEZW1vQ3RybCgkc2NvcGUpIHtcclxuICAgICAgJHNjb3BlLml0ZW1zID0gW1xyXG4gICAgICAgIHsgdGl0bGU6XCJEeW5hbWljIFRpdGxlIDFcIiwgY29udGVudDpcIkR5bmFtaWMgSXRlbSAwXCIgfSxcclxuICAgICAgICB7IHRpdGxlOlwiRHluYW1pYyBUaXRsZSAyXCIsIGNvbnRlbnQ6XCJEeW5hbWljIEl0ZW0gMVwiLCBkaXNhYmxlZDogdHJ1ZSB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICAkc2NvcGUuYWxlcnRNZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBhbGVydChcIllvdSd2ZSBzZWxlY3RlZCB0aGUgYWxlcnQgdGFiIVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgPC9maWxlPlxyXG48L2V4YW1wbGU+XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYkhlYWRpbmdcclxuICogQHJlc3RyaWN0IEVBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDcmVhdGVzIGFuIEhUTUwgaGVhZGluZyBmb3IgYSB7QGxpbmsgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYiB0YWJ9LiBNdXN0IGJlIHBsYWNlZCBhcyBhIGNoaWxkIG9mIGEgdGFiIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxyXG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICA8dGFic2V0PlxyXG4gICAgICA8dGFiPlxyXG4gICAgICAgIDx0YWItaGVhZGluZz48Yj5IVE1MPC9iPiBpbiBteSB0aXRsZXM/ITwvdGFiLWhlYWRpbmc+XHJcbiAgICAgICAgQW5kIHNvbWUgY29udGVudCwgdG9vIVxyXG4gICAgICA8L3RhYj5cclxuICAgICAgPHRhYj5cclxuICAgICAgICA8dGFiLWhlYWRpbmc+PGkgY2xhc3M9XCJpY29uLWhlYXJ0XCI+PC9pPiBJY29uIGhlYWRpbmc/IT88L3RhYi1oZWFkaW5nPlxyXG4gICAgICAgIFRoYXQncyByaWdodC5cclxuICAgICAgPC90YWI+XHJcbiAgICA8L3RhYnNldD5cclxuICA8L2ZpbGU+XHJcbjwvZXhhbXBsZT5cclxuICovXHJcbi5kaXJlY3RpdmUoJ3RhYicsIFsnJHBhcnNlJywgJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRjb21waWxlJyxcclxuZnVuY3Rpb24oJHBhcnNlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRjb21waWxlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlcXVpcmU6ICdedGFic2V0JyxcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvdGFicy90YWIuaHRtbCcsXHJcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgc2NvcGU6IHtcclxuICAgICAgaGVhZGluZzogJ0AnLFxyXG4gICAgICBvblNlbGVjdDogJyZzZWxlY3QnLCAvL1RoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIGluIGNvbnRlbnRIZWFkaW5nVHJhbnNjbHVkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vb25jZSBpdCBpbnNlcnRzIHRoZSB0YWIncyBjb250ZW50IGludG8gdGhlIGRvbVxyXG4gICAgICBvbkRlc2VsZWN0OiAnJmRlc2VsZWN0J1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAvL0VtcHR5IGNvbnRyb2xsZXIgc28gb3RoZXIgZGlyZWN0aXZlcyBjYW4gcmVxdWlyZSBiZWluZyAndW5kZXInIGEgdGFiXHJcbiAgICB9LFxyXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxtLCBhdHRycywgdHJhbnNjbHVkZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsbSwgYXR0cnMsIHRhYnNldEN0cmwpIHtcclxuICAgICAgICB2YXIgZ2V0QWN0aXZlLCBzZXRBY3RpdmU7XHJcbiAgICAgICAgaWYgKGF0dHJzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgZ2V0QWN0aXZlID0gJHBhcnNlKGF0dHJzLmFjdGl2ZSk7XHJcbiAgICAgICAgICBzZXRBY3RpdmUgPSBnZXRBY3RpdmUuYXNzaWduO1xyXG4gICAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goZ2V0QWN0aXZlLCBmdW5jdGlvbiB1cGRhdGVBY3RpdmUodmFsdWUpIHtcclxuICAgICAgICAgICAgc2NvcGUuYWN0aXZlID0gISF2YWx1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgc2NvcGUuYWN0aXZlID0gZ2V0QWN0aXZlKHNjb3BlLiRwYXJlbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXRBY3RpdmUgPSBnZXRBY3RpdmUgPSBhbmd1bGFyLm5vb3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY29wZS4kd2F0Y2goJ2FjdGl2ZScsIGZ1bmN0aW9uKGFjdGl2ZSkge1xyXG4gICAgICAgICAgc2V0QWN0aXZlKHNjb3BlLiRwYXJlbnQsIGFjdGl2ZSk7XHJcbiAgICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRhYnNldEN0cmwuc2VsZWN0KHNjb3BlKTtcclxuICAgICAgICAgICAgc2NvcGUub25TZWxlY3QoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNjb3BlLm9uRGVzZWxlY3QoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2NvcGUuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAoIGF0dHJzLmRpc2FibGVkICkge1xyXG4gICAgICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKGF0dHJzLmRpc2FibGVkKSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgc2NvcGUuZGlzYWJsZWQgPSAhISB2YWx1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoICEgc2NvcGUuZGlzYWJsZWQgKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGFic2V0Q3RybC5hZGRUYWIoc2NvcGUpO1xyXG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHRhYnNldEN0cmwucmVtb3ZlVGFiKHNjb3BlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoc2NvcGUuYWN0aXZlKSB7XHJcbiAgICAgICAgICBzZXRBY3RpdmUoc2NvcGUuJHBhcmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy9XZSBuZWVkIHRvIHRyYW5zY2x1ZGUgbGF0ZXIsIG9uY2UgdGhlIGNvbnRlbnQgY29udGFpbmVyIGlzIHJlYWR5LlxyXG4gICAgICAgIC8vd2hlbiB0aGlzIGxpbmsgaGFwcGVucywgd2UncmUgaW5zaWRlIGEgdGFiIGhlYWRpbmcuXHJcbiAgICAgICAgc2NvcGUuJHRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGU7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufV0pXHJcblxyXG4uZGlyZWN0aXZlKCd0YWJIZWFkaW5nVHJhbnNjbHVkZScsIFtmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHJlcXVpcmU6ICdedGFiJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHJzLCB0YWJDdHJsKSB7XHJcbiAgICAgIHNjb3BlLiR3YXRjaCgnaGVhZGluZ0VsZW1lbnQnLCBmdW5jdGlvbiB1cGRhdGVIZWFkaW5nRWxlbWVudChoZWFkaW5nKSB7XHJcbiAgICAgICAgaWYgKGhlYWRpbmcpIHtcclxuICAgICAgICAgIGVsbS5odG1sKCcnKTtcclxuICAgICAgICAgIGVsbS5hcHBlbmQoaGVhZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSlcclxuXHJcbi5kaXJlY3RpdmUoJ3RhYkNvbnRlbnRUcmFuc2NsdWRlJywgWyckY29tcGlsZScsICckcGFyc2UnLCBmdW5jdGlvbigkY29tcGlsZSwgJHBhcnNlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICByZXF1aXJlOiAnXnRhYnNldCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycykge1xyXG4gICAgICB2YXIgdGFiID0gc2NvcGUuJGV2YWwoYXR0cnMudGFiQ29udGVudFRyYW5zY2x1ZGUpO1xyXG5cclxuICAgICAgLy9Ob3cgb3VyIHRhYiBpcyByZWFkeSB0byBiZSB0cmFuc2NsdWRlZDogYm90aCB0aGUgdGFiIGhlYWRpbmcgYXJlYVxyXG4gICAgICAvL2FuZCB0aGUgdGFiIGNvbnRlbnQgYXJlYSBhcmUgbG9hZGVkLiAgVHJhbnNjbHVkZSAnZW0gYm90aC5cclxuICAgICAgdGFiLiR0cmFuc2NsdWRlRm4odGFiLiRwYXJlbnQsIGZ1bmN0aW9uKGNvbnRlbnRzKSB7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbnRlbnRzLCBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICBpZiAoaXNUYWJIZWFkaW5nKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIC8vTGV0IHRhYkhlYWRpbmdUcmFuc2NsdWRlIGtub3cuXHJcbiAgICAgICAgICAgIHRhYi5oZWFkaW5nRWxlbWVudCA9IG5vZGU7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbG0uYXBwZW5kKG5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG4gIGZ1bmN0aW9uIGlzVGFiSGVhZGluZyhub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lICYmICAoXHJcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd0YWItaGVhZGluZycpIHx8XHJcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXRhYi1oZWFkaW5nJykgfHxcclxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0YWItaGVhZGluZycgfHxcclxuICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdkYXRhLXRhYi1oZWFkaW5nJ1xyXG4gICAgKTtcclxuICB9XHJcbn1dKVxyXG5cclxuLmRpcmVjdGl2ZSgndGFic2V0VGl0bGVzJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICByZXF1aXJlOiAnXnRhYnNldCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3RhYnMvdGFic2V0LXRpdGxlcy5odG1sJyxcclxuICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgdGFic2V0Q3RybCkge1xyXG4gICAgICBpZiAoIXNjb3BlLiRldmFsKGF0dHJzLnRhYnNldFRpdGxlcykpIHtcclxuICAgICAgICBlbG0ucmVtb3ZlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy9ub3cgdGhhdCB0YWJzIGxvY2F0aW9uIGhhcyBiZWVuIGRlY2lkZWQsIHRyYW5zY2x1ZGUgdGhlIHRhYiB0aXRsZXMgaW5cclxuICAgICAgICB0YWJzZXRDdHJsLiR0cmFuc2NsdWRlRm4odGFic2V0Q3RybC4kc2NvcGUuJHBhcmVudCwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgZWxtLmFwcGVuZChub2RlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1dKVxyXG5cclxuO1xyXG5cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGltZXBpY2tlcicsIFtdKVxyXG5cclxuLmNvbnN0YW50KCd0aW1lcGlja2VyQ29uZmlnJywge1xyXG4gIGhvdXJTdGVwOiAxLFxyXG4gIG1pbnV0ZVN0ZXA6IDEsXHJcbiAgc2hvd01lcmlkaWFuOiB0cnVlLFxyXG4gIG1lcmlkaWFuczogWydBTScsICdQTSddLFxyXG4gIHJlYWRvbmx5SW5wdXQ6IGZhbHNlLFxyXG4gIG1vdXNld2hlZWw6IHRydWVcclxufSlcclxuXHJcbi5kaXJlY3RpdmUoJ3RpbWVwaWNrZXInLCBbJyRwYXJzZScsICckbG9nJywgJ3RpbWVwaWNrZXJDb25maWcnLCBmdW5jdGlvbiAoJHBhcnNlLCAkbG9nLCB0aW1lcGlja2VyQ29uZmlnKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgcmVxdWlyZTonP15uZ01vZGVsJyxcclxuICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICBzY29wZToge30sXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICBpZiAoICFuZ01vZGVsICkge1xyXG4gICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgc2VsZWN0ZWQgPSBuZXcgRGF0ZSgpLCBtZXJpZGlhbnMgPSB0aW1lcGlja2VyQ29uZmlnLm1lcmlkaWFucztcclxuXHJcbiAgICAgIHZhciBob3VyU3RlcCA9IHRpbWVwaWNrZXJDb25maWcuaG91clN0ZXA7XHJcbiAgICAgIGlmIChhdHRycy5ob3VyU3RlcCkge1xyXG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZShhdHRycy5ob3VyU3RlcCksIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICBob3VyU3RlcCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtaW51dGVTdGVwID0gdGltZXBpY2tlckNvbmZpZy5taW51dGVTdGVwO1xyXG4gICAgICBpZiAoYXR0cnMubWludXRlU3RlcCkge1xyXG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZShhdHRycy5taW51dGVTdGVwKSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIG1pbnV0ZVN0ZXAgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAxMkggLyAyNEggbW9kZVxyXG4gICAgICBzY29wZS5zaG93TWVyaWRpYW4gPSB0aW1lcGlja2VyQ29uZmlnLnNob3dNZXJpZGlhbjtcclxuICAgICAgaWYgKGF0dHJzLnNob3dNZXJpZGlhbikge1xyXG4gICAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZShhdHRycy5zaG93TWVyaWRpYW4pLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgc2NvcGUuc2hvd01lcmlkaWFuID0gISF2YWx1ZTtcclxuXHJcbiAgICAgICAgICBpZiAoIG5nTW9kZWwuJGVycm9yLnRpbWUgKSB7XHJcbiAgICAgICAgICAgIC8vIEV2YWx1YXRlIGZyb20gdGVtcGxhdGVcclxuICAgICAgICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSwgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcclxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCBob3VycyApICYmIGFuZ3VsYXIuaXNEZWZpbmVkKCBtaW51dGVzICkpIHtcclxuICAgICAgICAgICAgICBzZWxlY3RlZC5zZXRIb3VycyggaG91cnMgKTtcclxuICAgICAgICAgICAgICByZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRlbXBsYXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdldCBzY29wZS5ob3VycyBpbiAyNEggbW9kZSBpZiB2YWxpZFxyXG4gICAgICBmdW5jdGlvbiBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSAoICkge1xyXG4gICAgICAgIHZhciBob3VycyA9IHBhcnNlSW50KCBzY29wZS5ob3VycywgMTAgKTtcclxuICAgICAgICB2YXIgdmFsaWQgPSAoIHNjb3BlLnNob3dNZXJpZGlhbiApID8gKGhvdXJzID4gMCAmJiBob3VycyA8IDEzKSA6IChob3VycyA+PSAwICYmIGhvdXJzIDwgMjQpO1xyXG4gICAgICAgIGlmICggIXZhbGlkICkge1xyXG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICggc2NvcGUuc2hvd01lcmlkaWFuICkge1xyXG4gICAgICAgICAgaWYgKCBob3VycyA9PT0gMTIgKSB7XHJcbiAgICAgICAgICAgIGhvdXJzID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICggc2NvcGUubWVyaWRpYW4gPT09IG1lcmlkaWFuc1sxXSApIHtcclxuICAgICAgICAgICAgaG91cnMgPSBob3VycyArIDEyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaG91cnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSB7XHJcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBwYXJzZUludChzY29wZS5taW51dGVzLCAxMCk7XHJcbiAgICAgICAgcmV0dXJuICggbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPCA2MCApID8gbWludXRlcyA6IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcGFkKCB2YWx1ZSApIHtcclxuICAgICAgICByZXR1cm4gKCBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgJiYgdmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPCAyICkgPyAnMCcgKyB2YWx1ZSA6IHZhbHVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJbnB1dCBlbGVtZW50c1xyXG4gICAgICB2YXIgaW5wdXRzID0gZWxlbWVudC5maW5kKCdpbnB1dCcpLCBob3Vyc0lucHV0RWwgPSBpbnB1dHMuZXEoMCksIG1pbnV0ZXNJbnB1dEVsID0gaW5wdXRzLmVxKDEpO1xyXG5cclxuICAgICAgLy8gUmVzcG9uZCBvbiBtb3VzZXdoZWVsIHNwaW5cclxuICAgICAgdmFyIG1vdXNld2hlZWwgPSAoYW5ndWxhci5pc0RlZmluZWQoYXR0cnMubW91c2V3aGVlbCkpID8gc2NvcGUuJGV2YWwoYXR0cnMubW91c2V3aGVlbCkgOiB0aW1lcGlja2VyQ29uZmlnLm1vdXNld2hlZWw7XHJcbiAgICAgIGlmICggbW91c2V3aGVlbCApIHtcclxuXHJcbiAgICAgICAgdmFyIGlzU2Nyb2xsaW5nVXAgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7XHJcbiAgICAgICAgICAgIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvL3BpY2sgY29ycmVjdCBkZWx0YSB2YXJpYWJsZSBkZXBlbmRpbmcgb24gZXZlbnRcclxuICAgICAgICAgIHZhciBkZWx0YSA9IChlLndoZWVsRGVsdGEpID8gZS53aGVlbERlbHRhIDogLWUuZGVsdGFZO1xyXG4gICAgICAgICAgcmV0dXJuIChlLmRldGFpbCB8fCBkZWx0YSA+IDApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGhvdXJzSW5wdXRFbC5iaW5kKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KCAoaXNTY3JvbGxpbmdVcChlKSkgPyBzY29wZS5pbmNyZW1lbnRIb3VycygpIDogc2NvcGUuZGVjcmVtZW50SG91cnMoKSApO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtaW51dGVzSW5wdXRFbC5iaW5kKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KCAoaXNTY3JvbGxpbmdVcChlKSkgPyBzY29wZS5pbmNyZW1lbnRNaW51dGVzKCkgOiBzY29wZS5kZWNyZW1lbnRNaW51dGVzKCkgKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NvcGUucmVhZG9ubHlJbnB1dCA9IChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5yZWFkb25seUlucHV0KSkgPyBzY29wZS4kZXZhbChhdHRycy5yZWFkb25seUlucHV0KSA6IHRpbWVwaWNrZXJDb25maWcucmVhZG9ubHlJbnB1dDtcclxuICAgICAgaWYgKCAhIHNjb3BlLnJlYWRvbmx5SW5wdXQgKSB7XHJcblxyXG4gICAgICAgIHZhciBpbnZhbGlkYXRlID0gZnVuY3Rpb24oaW52YWxpZEhvdXJzLCBpbnZhbGlkTWludXRlcykge1xyXG4gICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKCBudWxsICk7XHJcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcclxuICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkSG91cnMpKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLmludmFsaWRIb3VycyA9IGludmFsaWRIb3VycztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkTWludXRlcykpIHtcclxuICAgICAgICAgICAgc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSBpbnZhbGlkTWludXRlcztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS51cGRhdGVIb3VycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKTtcclxuXHJcbiAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSApIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoIGhvdXJzICk7XHJcbiAgICAgICAgICAgIHJlZnJlc2goICdoJyApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW52YWxpZGF0ZSh0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBob3Vyc0lucHV0RWwuYmluZCgnYmx1cicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGlmICggIXNjb3BlLnZhbGlkSG91cnMgJiYgc2NvcGUuaG91cnMgPCAxMCkge1xyXG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHNjb3BlLmhvdXJzID0gcGFkKCBzY29wZS5ob3VycyApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2NvcGUudXBkYXRlTWludXRlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIG1pbnV0ZXMgPSBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCk7XHJcblxyXG4gICAgICAgICAgaWYgKCBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSApIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQuc2V0TWludXRlcyggbWludXRlcyApO1xyXG4gICAgICAgICAgICByZWZyZXNoKCAnbScgKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBtaW51dGVzSW5wdXRFbC5iaW5kKCdibHVyJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgaWYgKCAhc2NvcGUuaW52YWxpZE1pbnV0ZXMgJiYgc2NvcGUubWludXRlcyA8IDEwICkge1xyXG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHNjb3BlLm1pbnV0ZXMgPSBwYWQoIHNjb3BlLm1pbnV0ZXMgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2NvcGUudXBkYXRlSG91cnMgPSBhbmd1bGFyLm5vb3A7XHJcbiAgICAgICAgc2NvcGUudXBkYXRlTWludXRlcyA9IGFuZ3VsYXIubm9vcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGRhdGUgPSBuZ01vZGVsLiRtb2RlbFZhbHVlID8gbmV3IERhdGUoIG5nTW9kZWwuJG1vZGVsVmFsdWUgKSA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICggaXNOYU4oZGF0ZSkgKSB7XHJcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcclxuICAgICAgICAgICRsb2cuZXJyb3IoJ1RpbWVwaWNrZXIgZGlyZWN0aXZlOiBcIm5nLW1vZGVsXCIgdmFsdWUgbXVzdCBiZSBhIERhdGUgb2JqZWN0LCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMDEuMDEuMTk3MCBvciBhIHN0cmluZyByZXByZXNlbnRpbmcgYW4gUkZDMjgyMiBvciBJU08gODYwMSBkYXRlLicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoIGRhdGUgKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkID0gZGF0ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG1ha2VWYWxpZCgpO1xyXG4gICAgICAgICAgdXBkYXRlVGVtcGxhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvLyBDYWxsIGludGVybmFsbHkgd2hlbiB3ZSBrbm93IHRoYXQgbW9kZWwgaXMgdmFsaWQuXHJcbiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goIGtleWJvYXJkQ2hhbmdlICkge1xyXG4gICAgICAgIG1ha2VWYWxpZCgpO1xyXG4gICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZSggbmV3IERhdGUoc2VsZWN0ZWQpICk7XHJcbiAgICAgICAgdXBkYXRlVGVtcGxhdGUoIGtleWJvYXJkQ2hhbmdlICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG1ha2VWYWxpZCgpIHtcclxuICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgndGltZScsIHRydWUpO1xyXG4gICAgICAgIHNjb3BlLmludmFsaWRIb3VycyA9IGZhbHNlO1xyXG4gICAgICAgIHNjb3BlLmludmFsaWRNaW51dGVzID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRlbXBsYXRlKCBrZXlib2FyZENoYW5nZSApIHtcclxuICAgICAgICB2YXIgaG91cnMgPSBzZWxlY3RlZC5nZXRIb3VycygpLCBtaW51dGVzID0gc2VsZWN0ZWQuZ2V0TWludXRlcygpO1xyXG5cclxuICAgICAgICBpZiAoIHNjb3BlLnNob3dNZXJpZGlhbiApIHtcclxuICAgICAgICAgIGhvdXJzID0gKCBob3VycyA9PT0gMCB8fCBob3VycyA9PT0gMTIgKSA/IDEyIDogaG91cnMgJSAxMjsgLy8gQ29udmVydCAyNCB0byAxMiBob3VyIHN5c3RlbVxyXG4gICAgICAgIH1cclxuICAgICAgICBzY29wZS5ob3VycyA9ICBrZXlib2FyZENoYW5nZSA9PT0gJ2gnID8gaG91cnMgOiBwYWQoaG91cnMpO1xyXG4gICAgICAgIHNjb3BlLm1pbnV0ZXMgPSBrZXlib2FyZENoYW5nZSA9PT0gJ20nID8gbWludXRlcyA6IHBhZChtaW51dGVzKTtcclxuICAgICAgICBzY29wZS5tZXJpZGlhbiA9IHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IG1lcmlkaWFuc1swXSA6IG1lcmlkaWFuc1sxXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gYWRkTWludXRlcyggbWludXRlcyApIHtcclxuICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZSggc2VsZWN0ZWQuZ2V0VGltZSgpICsgbWludXRlcyAqIDYwMDAwICk7XHJcbiAgICAgICAgc2VsZWN0ZWQuc2V0SG91cnMoIGR0LmdldEhvdXJzKCksIGR0LmdldE1pbnV0ZXMoKSApO1xyXG4gICAgICAgIHJlZnJlc2goKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NvcGUuaW5jcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhZGRNaW51dGVzKCBob3VyU3RlcCAqIDYwICk7XHJcbiAgICAgIH07XHJcbiAgICAgIHNjb3BlLmRlY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYWRkTWludXRlcyggLSBob3VyU3RlcCAqIDYwICk7XHJcbiAgICAgIH07XHJcbiAgICAgIHNjb3BlLmluY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhZGRNaW51dGVzKCBtaW51dGVTdGVwICk7XHJcbiAgICAgIH07XHJcbiAgICAgIHNjb3BlLmRlY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhZGRNaW51dGVzKCAtIG1pbnV0ZVN0ZXAgKTtcclxuICAgICAgfTtcclxuICAgICAgc2NvcGUudG9nZ2xlTWVyaWRpYW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhZGRNaW51dGVzKCAxMiAqIDYwICogKCggc2VsZWN0ZWQuZ2V0SG91cnMoKSA8IDEyICkgPyAxIDogLTEpICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbicsICd1aS5ib290c3RyYXAuYmluZEh0bWwnXSlcclxuXHJcbi8qKlxyXG4gKiBBIGhlbHBlciBzZXJ2aWNlIHRoYXQgY2FuIHBhcnNlIHR5cGVhaGVhZCdzIHN5bnRheCAoc3RyaW5nIHByb3ZpZGVkIGJ5IHVzZXJzKVxyXG4gKiBFeHRyYWN0ZWQgdG8gYSBzZXBhcmF0ZSBzZXJ2aWNlIGZvciBlYXNlIG9mIHVuaXQgdGVzdGluZ1xyXG4gKi9cclxuICAuZmFjdG9yeSgndHlwZWFoZWFkUGFyc2VyJywgWyckcGFyc2UnLCBmdW5jdGlvbiAoJHBhcnNlKSB7XHJcblxyXG4gIC8vICAgICAgICAgICAgICAgICAgICAgIDAwMDAwMTExMDAwMDAwMDAwMDAwMDIyMjAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMzMzMzMwMDAwMDAwMDAwMDQ0MDAwXHJcbiAgdmFyIFRZUEVBSEVBRF9SRUdFWFAgPSAvXlxccyooLio/KSg/Olxccythc1xccysoLio/KSk/XFxzK2ZvclxccysoPzooW1xcJFxcd11bXFwkXFx3XFxkXSopKVxccytpblxccysoLiopJC87XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwYXJzZTpmdW5jdGlvbiAoaW5wdXQpIHtcclxuXHJcbiAgICAgIHZhciBtYXRjaCA9IGlucHV0Lm1hdGNoKFRZUEVBSEVBRF9SRUdFWFApLCBtb2RlbE1hcHBlciwgdmlld01hcHBlciwgc291cmNlO1xyXG4gICAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgXCJFeHBlY3RlZCB0eXBlYWhlYWQgc3BlY2lmaWNhdGlvbiBpbiBmb3JtIG9mICdfbW9kZWxWYWx1ZV8gKGFzIF9sYWJlbF8pPyBmb3IgX2l0ZW1fIGluIF9jb2xsZWN0aW9uXydcIiArXHJcbiAgICAgICAgICAgIFwiIGJ1dCBnb3QgJ1wiICsgaW5wdXQgKyBcIicuXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGl0ZW1OYW1lOm1hdGNoWzNdLFxyXG4gICAgICAgIHNvdXJjZTokcGFyc2UobWF0Y2hbNF0pLFxyXG4gICAgICAgIHZpZXdNYXBwZXI6JHBhcnNlKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSxcclxuICAgICAgICBtb2RlbE1hcHBlcjokcGFyc2UobWF0Y2hbMV0pXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufV0pXHJcblxyXG4gIC5kaXJlY3RpdmUoJ3R5cGVhaGVhZCcsIFsnJGNvbXBpbGUnLCAnJHBhcnNlJywgJyRxJywgJyR0aW1lb3V0JywgJyRkb2N1bWVudCcsICckcG9zaXRpb24nLCAndHlwZWFoZWFkUGFyc2VyJyxcclxuICAgIGZ1bmN0aW9uICgkY29tcGlsZSwgJHBhcnNlLCAkcSwgJHRpbWVvdXQsICRkb2N1bWVudCwgJHBvc2l0aW9uLCB0eXBlYWhlYWRQYXJzZXIpIHtcclxuXHJcbiAgdmFyIEhPVF9LRVlTID0gWzksIDEzLCAyNywgMzgsIDQwXTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHJlcXVpcmU6J25nTW9kZWwnLFxyXG4gICAgbGluazpmdW5jdGlvbiAob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsIG1vZGVsQ3RybCkge1xyXG5cclxuICAgICAgLy9TVVBQT1JURUQgQVRUUklCVVRFUyAoT1BUSU9OUylcclxuXHJcbiAgICAgIC8vbWluaW1hbCBubyBvZiBjaGFyYWN0ZXJzIHRoYXQgbmVlZHMgdG8gYmUgZW50ZXJlZCBiZWZvcmUgdHlwZWFoZWFkIGtpY2tzLWluXHJcbiAgICAgIHZhciBtaW5TZWFyY2ggPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZE1pbkxlbmd0aCkgfHwgMTtcclxuXHJcbiAgICAgIC8vbWluaW1hbCB3YWl0IHRpbWUgYWZ0ZXIgbGFzdCBjaGFyYWN0ZXIgdHlwZWQgYmVmb3JlIHR5cGVoZWFkIGtpY2tzLWluXHJcbiAgICAgIHZhciB3YWl0VGltZSA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkV2FpdE1zKSB8fCAwO1xyXG5cclxuICAgICAgLy9zaG91bGQgaXQgcmVzdHJpY3QgbW9kZWwgdmFsdWVzIHRvIHRoZSBvbmVzIHNlbGVjdGVkIGZyb20gdGhlIHBvcHVwIG9ubHk/XHJcbiAgICAgIHZhciBpc0VkaXRhYmxlID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRFZGl0YWJsZSkgIT09IGZhbHNlO1xyXG5cclxuICAgICAgLy9iaW5kaW5nIHRvIGEgdmFyaWFibGUgdGhhdCBpbmRpY2F0ZXMgaWYgbWF0Y2hlcyBhcmUgYmVpbmcgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgIHZhciBpc0xvYWRpbmdTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTG9hZGluZykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcclxuXHJcbiAgICAgIC8vYSBjYWxsYmFjayBleGVjdXRlZCB3aGVuIGEgbWF0Y2ggaXMgc2VsZWN0ZWRcclxuICAgICAgdmFyIG9uU2VsZWN0Q2FsbGJhY2sgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkT25TZWxlY3QpO1xyXG5cclxuICAgICAgdmFyIGlucHV0Rm9ybWF0dGVyID0gYXR0cnMudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIgPyAkcGFyc2UoYXR0cnMudHlwZWFoZWFkSW5wdXRGb3JtYXR0ZXIpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgLy9JTlRFUk5BTCBWQVJJQUJMRVNcclxuXHJcbiAgICAgIC8vbW9kZWwgc2V0dGVyIGV4ZWN1dGVkIHVwb24gbWF0Y2ggc2VsZWN0aW9uXHJcbiAgICAgIHZhciAkc2V0TW9kZWxWYWx1ZSA9ICRwYXJzZShhdHRycy5uZ01vZGVsKS5hc3NpZ247XHJcblxyXG4gICAgICAvL2V4cHJlc3Npb25zIHVzZWQgYnkgdHlwZWFoZWFkXHJcbiAgICAgIHZhciBwYXJzZXJSZXN1bHQgPSB0eXBlYWhlYWRQYXJzZXIucGFyc2UoYXR0cnMudHlwZWFoZWFkKTtcclxuXHJcblxyXG4gICAgICAvL3BvcC11cCBlbGVtZW50IHVzZWQgdG8gZGlzcGxheSBtYXRjaGVzXHJcbiAgICAgIHZhciBwb3BVcEVsID0gYW5ndWxhci5lbGVtZW50KCc8dHlwZWFoZWFkLXBvcHVwPjwvdHlwZWFoZWFkLXBvcHVwPicpO1xyXG4gICAgICBwb3BVcEVsLmF0dHIoe1xyXG4gICAgICAgIG1hdGNoZXM6ICdtYXRjaGVzJyxcclxuICAgICAgICBhY3RpdmU6ICdhY3RpdmVJZHgnLFxyXG4gICAgICAgIHNlbGVjdDogJ3NlbGVjdChhY3RpdmVJZHgpJyxcclxuICAgICAgICBxdWVyeTogJ3F1ZXJ5JyxcclxuICAgICAgICBwb3NpdGlvbjogJ3Bvc2l0aW9uJ1xyXG4gICAgICB9KTtcclxuICAgICAgLy9jdXN0b20gaXRlbSB0ZW1wbGF0ZVxyXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0cnMudHlwZWFoZWFkVGVtcGxhdGVVcmwpKSB7XHJcbiAgICAgICAgcG9wVXBFbC5hdHRyKCd0ZW1wbGF0ZS11cmwnLCBhdHRycy50eXBlYWhlYWRUZW1wbGF0ZVVybCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vY3JlYXRlIGEgY2hpbGQgc2NvcGUgZm9yIHRoZSB0eXBlYWhlYWQgZGlyZWN0aXZlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIHNjb3BlXHJcbiAgICAgIC8vd2l0aCB0eXBlYWhlYWQtc3BlY2lmaWMgZGF0YSAobWF0Y2hlcywgcXVlcnkgZXRjLilcclxuICAgICAgdmFyIHNjb3BlID0gb3JpZ2luYWxTY29wZS4kbmV3KCk7XHJcbiAgICAgIG9yaWdpbmFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2NvcGUuJGRlc3Ryb3koKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgcmVzZXRNYXRjaGVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2NvcGUubWF0Y2hlcyA9IFtdO1xyXG4gICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IC0xO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGdldE1hdGNoZXNBc3luYyA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcclxuXHJcbiAgICAgICAgdmFyIGxvY2FscyA9IHskdmlld1ZhbHVlOiBpbnB1dFZhbHVlfTtcclxuICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgdHJ1ZSk7XHJcbiAgICAgICAgJHEud2hlbihwYXJzZXJSZXN1bHQuc291cmNlKHNjb3BlLCBsb2NhbHMpKS50aGVuKGZ1bmN0aW9uKG1hdGNoZXMpIHtcclxuXHJcbiAgICAgICAgICAvL2l0IG1pZ2h0IGhhcHBlbiB0aGF0IHNldmVyYWwgYXN5bmMgcXVlcmllcyB3ZXJlIGluIHByb2dyZXNzIGlmIGEgdXNlciB3ZXJlIHR5cGluZyBmYXN0XHJcbiAgICAgICAgICAvL2J1dCB3ZSBhcmUgaW50ZXJlc3RlZCBvbmx5IGluIHJlc3BvbnNlcyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIGN1cnJlbnQgdmlldyB2YWx1ZVxyXG4gICAgICAgICAgaWYgKGlucHV0VmFsdWUgPT09IG1vZGVsQ3RybC4kdmlld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gMDtcclxuICAgICAgICAgICAgICBzY29wZS5tYXRjaGVzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgIC8vdHJhbnNmb3JtIGxhYmVsc1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpPG1hdGNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gbWF0Y2hlc1tpXTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLm1hdGNoZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBwYXJzZXJSZXN1bHQudmlld01hcHBlcihzY29wZSwgbG9jYWxzKSxcclxuICAgICAgICAgICAgICAgICAgbW9kZWw6IG1hdGNoZXNbaV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc2NvcGUucXVlcnkgPSBpbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICAgIC8vcG9zaXRpb24gcG9wLXVwIHdpdGggbWF0Y2hlcyAtIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIGl0cyBwb3NpdGlvbiBlYWNoIHRpbWUgd2UgYXJlIG9wZW5pbmcgYSB3aW5kb3dcclxuICAgICAgICAgICAgICAvL3dpdGggbWF0Y2hlcyBhcyBhIHBvcC11cCBtaWdodCBiZSBhYnNvbHV0ZS1wb3NpdGlvbmVkIGFuZCBwb3NpdGlvbiBvZiBhbiBpbnB1dCBtaWdodCBoYXZlIGNoYW5nZWQgb24gYSBwYWdlXHJcbiAgICAgICAgICAgICAgLy9kdWUgdG8gb3RoZXIgZWxlbWVudHMgYmVpbmcgcmVuZGVyZWRcclxuICAgICAgICAgICAgICBzY29wZS5wb3NpdGlvbiA9ICRwb3NpdGlvbi5wb3NpdGlvbihlbGVtZW50KTtcclxuICAgICAgICAgICAgICBzY29wZS5wb3NpdGlvbi50b3AgPSBzY29wZS5wb3NpdGlvbi50b3AgKyBlbGVtZW50LnByb3AoJ29mZnNldEhlaWdodCcpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXNldE1hdGNoZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpc0xvYWRpbmdTZXR0ZXIob3JpZ2luYWxTY29wZSwgZmFsc2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICByZXNldE1hdGNoZXMoKTtcclxuICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXNldE1hdGNoZXMoKTtcclxuXHJcbiAgICAgIC8vd2UgbmVlZCB0byBwcm9wYWdhdGUgdXNlcidzIHF1ZXJ5IHNvIHdlIGNhbiBoaWdsaWdodCBtYXRjaGVzXHJcbiAgICAgIHNjb3BlLnF1ZXJ5ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgLy9EZWNsYXJlIHRoZSB0aW1lb3V0IHByb21pc2UgdmFyIG91dHNpZGUgdGhlIGZ1bmN0aW9uIHNjb3BlIHNvIHRoYXQgc3RhY2tlZCBjYWxscyBjYW4gYmUgY2FuY2VsbGVkIGxhdGVyIFxyXG4gICAgICB2YXIgdGltZW91dFByb21pc2U7XHJcblxyXG4gICAgICAvL3BsdWcgaW50byAkcGFyc2VycyBwaXBlbGluZSB0byBvcGVuIGEgdHlwZWFoZWFkIG9uIHZpZXcgY2hhbmdlcyBpbml0aWF0ZWQgZnJvbSBET01cclxuICAgICAgLy8kcGFyc2VycyBraWNrLWluIG9uIGFsbCB0aGUgY2hhbmdlcyBjb21pbmcgZnJvbSB0aGUgdmlldyBhcyB3ZWxsIGFzIG1hbnVhbGx5IHRyaWdnZXJlZCBieSAkc2V0Vmlld1ZhbHVlXHJcbiAgICAgIG1vZGVsQ3RybC4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XHJcblxyXG4gICAgICAgIHJlc2V0TWF0Y2hlcygpO1xyXG4gICAgICAgIGlmIChpbnB1dFZhbHVlICYmIGlucHV0VmFsdWUubGVuZ3RoID49IG1pblNlYXJjaCkge1xyXG4gICAgICAgICAgaWYgKHdhaXRUaW1lID4gMCkge1xyXG4gICAgICAgICAgICBpZiAodGltZW91dFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dFByb21pc2UpOy8vY2FuY2VsIHByZXZpb3VzIHRpbWVvdXRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aW1lb3V0UHJvbWlzZSA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIHdhaXRUaW1lKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdldE1hdGNoZXNBc3luYyhpbnB1dFZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0VkaXRhYmxlKSB7XHJcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCBmYWxzZSk7XHJcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBtb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAobW9kZWxWYWx1ZSkge1xyXG5cclxuICAgICAgICB2YXIgY2FuZGlkYXRlVmlld1ZhbHVlLCBlbXB0eVZpZXdWYWx1ZTtcclxuICAgICAgICB2YXIgbG9jYWxzID0ge307XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEZvcm1hdHRlcikge1xyXG5cclxuICAgICAgICAgIGxvY2Fsc1snJG1vZGVsJ10gPSBtb2RlbFZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuIGlucHV0Rm9ybWF0dGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy9pdCBtaWdodCBoYXBwZW4gdGhhdCB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbmZvIHRvIHByb3Blcmx5IHJlbmRlciBpbnB1dCB2YWx1ZVxyXG4gICAgICAgICAgLy93ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGlzIHNpdHVhdGlvbiBhbmQgc2ltcGx5IHJldHVybiBtb2RlbCB2YWx1ZSBpZiB3ZSBjYW4ndCBhcHBseSBjdXN0b20gZm9ybWF0dGluZ1xyXG4gICAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSBtb2RlbFZhbHVlO1xyXG4gICAgICAgICAgY2FuZGlkYXRlVmlld1ZhbHVlID0gcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKTtcclxuICAgICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgZW1wdHlWaWV3VmFsdWUgPSBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBjYW5kaWRhdGVWaWV3VmFsdWUhPT0gZW1wdHlWaWV3VmFsdWUgPyBjYW5kaWRhdGVWaWV3VmFsdWUgOiBtb2RlbFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS5zZWxlY3QgPSBmdW5jdGlvbiAoYWN0aXZlSWR4KSB7XHJcbiAgICAgICAgLy9jYWxsZWQgZnJvbSB3aXRoaW4gdGhlICRkaWdlc3QoKSBjeWNsZVxyXG4gICAgICAgIHZhciBsb2NhbHMgPSB7fTtcclxuICAgICAgICB2YXIgbW9kZWwsIGl0ZW07XHJcblxyXG4gICAgICAgIGxvY2Fsc1twYXJzZXJSZXN1bHQuaXRlbU5hbWVdID0gaXRlbSA9IHNjb3BlLm1hdGNoZXNbYWN0aXZlSWR4XS5tb2RlbDtcclxuICAgICAgICBtb2RlbCA9IHBhcnNlclJlc3VsdC5tb2RlbE1hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xyXG4gICAgICAgICRzZXRNb2RlbFZhbHVlKG9yaWdpbmFsU2NvcGUsIG1vZGVsKTtcclxuICAgICAgICBtb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdlZGl0YWJsZScsIHRydWUpO1xyXG5cclxuICAgICAgICBvblNlbGVjdENhbGxiYWNrKG9yaWdpbmFsU2NvcGUsIHtcclxuICAgICAgICAgICRpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgJG1vZGVsOiBtb2RlbCxcclxuICAgICAgICAgICRsYWJlbDogcGFyc2VyUmVzdWx0LnZpZXdNYXBwZXIob3JpZ2luYWxTY29wZSwgbG9jYWxzKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXNldE1hdGNoZXMoKTtcclxuXHJcbiAgICAgICAgLy9yZXR1cm4gZm9jdXMgdG8gdGhlIGlucHV0IGVsZW1lbnQgaWYgYSBtYWNoIHdhcyBzZWxlY3RlZCB2aWEgYSBtb3VzZSBjbGljayBldmVudFxyXG4gICAgICAgIGVsZW1lbnRbMF0uZm9jdXMoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vYmluZCBrZXlib2FyZCBldmVudHM6IGFycm93cyB1cCgzOCkgLyBkb3duKDQwKSwgZW50ZXIoMTMpIGFuZCB0YWIoOSksIGVzYygyNylcclxuICAgICAgZWxlbWVudC5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG5cclxuICAgICAgICAvL3R5cGVhaGVhZCBpcyBvcGVuIGFuZCBhbiBcImludGVyZXN0aW5nXCIga2V5IHdhcyBwcmVzc2VkXHJcbiAgICAgICAgaWYgKHNjb3BlLm1hdGNoZXMubGVuZ3RoID09PSAwIHx8IEhPVF9LRVlTLmluZGV4T2YoZXZ0LndoaWNoKSA9PT0gLTEpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoZXZ0LndoaWNoID09PSA0MCkge1xyXG4gICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gKHNjb3BlLmFjdGl2ZUlkeCArIDEpICUgc2NvcGUubWF0Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0LndoaWNoID09PSAzOCkge1xyXG4gICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gKHNjb3BlLmFjdGl2ZUlkeCA/IHNjb3BlLmFjdGl2ZUlkeCA6IHNjb3BlLm1hdGNoZXMubGVuZ3RoKSAtIDE7XHJcbiAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0LndoaWNoID09PSAxMyB8fCBldnQud2hpY2ggPT09IDkpIHtcclxuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0LndoaWNoID09PSAyNykge1xyXG4gICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xyXG4gICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBLZWVwIHJlZmVyZW5jZSB0byBjbGljayBoYW5kbGVyIHRvIHVuYmluZCBpdC5cclxuICAgICAgdmFyIGRpc21pc3NDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnRbMF0gIT09IGV2dC50YXJnZXQpIHtcclxuICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xyXG4gICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgICRkb2N1bWVudC5iaW5kKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xyXG5cclxuICAgICAgb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKXtcclxuICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdjbGljaycsIGRpc21pc3NDbGlja0hhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGVsZW1lbnQuYWZ0ZXIoJGNvbXBpbGUocG9wVXBFbCkoc2NvcGUpKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxufV0pXHJcblxyXG4gIC5kaXJlY3RpdmUoJ3R5cGVhaGVhZFBvcHVwJywgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6J0UnLFxyXG4gICAgICBzY29wZTp7XHJcbiAgICAgICAgbWF0Y2hlczonPScsXHJcbiAgICAgICAgcXVlcnk6Jz0nLFxyXG4gICAgICAgIGFjdGl2ZTonPScsXHJcbiAgICAgICAgcG9zaXRpb246Jz0nLFxyXG4gICAgICAgIHNlbGVjdDonJidcclxuICAgICAgfSxcclxuICAgICAgcmVwbGFjZTp0cnVlLFxyXG4gICAgICB0ZW1wbGF0ZVVybDondGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sJyxcclxuICAgICAgbGluazpmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblxyXG4gICAgICAgIHNjb3BlLnRlbXBsYXRlVXJsID0gYXR0cnMudGVtcGxhdGVVcmw7XHJcblxyXG4gICAgICAgIHNjb3BlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBzY29wZS5tYXRjaGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAobWF0Y2hJZHgpIHtcclxuICAgICAgICAgIHJldHVybiBzY29wZS5hY3RpdmUgPT0gbWF0Y2hJZHg7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2NvcGUuc2VsZWN0QWN0aXZlID0gZnVuY3Rpb24gKG1hdGNoSWR4KSB7XHJcbiAgICAgICAgICBzY29wZS5hY3RpdmUgPSBtYXRjaElkeDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS5zZWxlY3RNYXRjaCA9IGZ1bmN0aW9uIChhY3RpdmVJZHgpIHtcclxuICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OmFjdGl2ZUlkeH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSlcclxuXHJcbiAgLmRpcmVjdGl2ZSgndHlwZWFoZWFkTWF0Y2gnLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uICgkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRjb21waWxlLCAkcGFyc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OidFJyxcclxuICAgICAgc2NvcGU6e1xyXG4gICAgICAgIGluZGV4Oic9JyxcclxuICAgICAgICBtYXRjaDonPScsXHJcbiAgICAgICAgcXVlcnk6Jz0nXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpbms6ZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgIHZhciB0cGxVcmwgPSAkcGFyc2UoYXR0cnMudGVtcGxhdGVVcmwpKHNjb3BlLiRwYXJlbnQpIHx8ICd0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLW1hdGNoLmh0bWwnO1xyXG4gICAgICAgICRodHRwLmdldCh0cGxVcmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHRwbENvbnRlbnQpe1xyXG4gICAgICAgICAgIGVsZW1lbnQucmVwbGFjZVdpdGgoJGNvbXBpbGUodHBsQ29udGVudC50cmltKCkpKHNjb3BlKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV0pXHJcblxyXG4gIC5maWx0ZXIoJ3R5cGVhaGVhZEhpZ2hsaWdodCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ2V4cChxdWVyeVRvRXNjYXBlKSB7XHJcbiAgICAgIHJldHVybiBxdWVyeVRvRXNjYXBlLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCBcIlxcXFwkMVwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24obWF0Y2hJdGVtLCBxdWVyeSkge1xyXG4gICAgICByZXR1cm4gcXVlcnkgPyBtYXRjaEl0ZW0ucmVwbGFjZShuZXcgUmVnRXhwKGVzY2FwZVJlZ2V4cChxdWVyeSksICdnaScpLCAnPHN0cm9uZz4kJjwvc3Ryb25nPicpIDogbWF0Y2hJdGVtO1xyXG4gICAgfTtcclxuICB9KTtcclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFxyXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJhY2NvcmRpb24tZ3JvdXBcXFwiPlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJhY2NvcmRpb24taGVhZGluZ1xcXCIgPjxhIGNsYXNzPVxcXCJhY2NvcmRpb24tdG9nZ2xlXFxcIiBuZy1jbGljaz1cXFwiaXNPcGVuID0gIWlzT3BlblxcXCIgYWNjb3JkaW9uLXRyYW5zY2x1ZGU9XFxcImhlYWRpbmdcXFwiPnt7aGVhZGluZ319PC9hPjwvZGl2PlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJhY2NvcmRpb24tYm9keVxcXCIgY29sbGFwc2U9XFxcIiFpc09wZW5cXFwiPlxcblwiICtcclxuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcImFjY29yZGlvbi1pbm5lclxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj4gIDwvZGl2PlxcblwiICtcclxuICAgIFwiPC9kaXY+XCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsXHJcbiAgICBcIjxkaXYgY2xhc3M9XFxcImFjY29yZGlvblxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFxyXG4gICAgXCI8ZGl2IGNsYXNzPSdhbGVydCcgbmctY2xhc3M9J3R5cGUgJiYgXFxcImFsZXJ0LVxcXCIgKyB0eXBlJz5cXG5cIiArXHJcbiAgICBcIiAgICA8YnV0dG9uIG5nLXNob3c9J2Nsb3NlYWJsZScgdHlwZT0nYnV0dG9uJyBjbGFzcz0nY2xvc2UnIG5nLWNsaWNrPSdjbG9zZSgpJz4mdGltZXM7PC9idXR0b24+XFxuXCIgK1xyXG4gICAgXCIgICAgPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcclxuICAgIFwiPC9kaXY+XFxuXCIgK1xyXG4gICAgXCJcIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLFxyXG4gICAgXCI8ZGl2IG5nLW1vdXNlZW50ZXI9XFxcInBhdXNlKClcXFwiIG5nLW1vdXNlbGVhdmU9XFxcInBsYXkoKVxcXCIgY2xhc3M9XFxcImNhcm91c2VsXFxcIj5cXG5cIiArXHJcbiAgICBcIiAgICA8b2wgY2xhc3M9XFxcImNhcm91c2VsLWluZGljYXRvcnNcXFwiIG5nLXNob3c9XFxcInNsaWRlcygpLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcclxuICAgIFwiICAgICAgICA8bGkgbmctcmVwZWF0PVxcXCJzbGlkZSBpbiBzbGlkZXMoKVxcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6IGlzQWN0aXZlKHNsaWRlKX1cXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3Qoc2xpZGUpXFxcIj48L2xpPlxcblwiICtcclxuICAgIFwiICAgIDwvb2w+XFxuXCIgK1xyXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwiY2Fyb3VzZWwtaW5uZXJcXFwiIG5nLXRyYW5zY2x1ZGU+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCIgICAgPGEgbmctY2xpY2s9XFxcInByZXYoKVxcXCIgY2xhc3M9XFxcImNhcm91c2VsLWNvbnRyb2wgbGVmdFxcXCIgbmctc2hvdz1cXFwic2xpZGVzKCkubGVuZ3RoID4gMVxcXCI+JmxzYXF1bzs8L2E+XFxuXCIgK1xyXG4gICAgXCIgICAgPGEgbmctY2xpY2s9XFxcIm5leHQoKVxcXCIgY2xhc3M9XFxcImNhcm91c2VsLWNvbnRyb2wgcmlnaHRcXFwiIG5nLXNob3c9XFxcInNsaWRlcygpLmxlbmd0aCA+IDFcXFwiPiZyc2FxdW87PC9hPlxcblwiICtcclxuICAgIFwiPC9kaXY+XFxuXCIgK1xyXG4gICAgXCJcIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvY2Fyb3VzZWwvc2xpZGUuaHRtbFwiLFxyXG4gICAgXCI8ZGl2IG5nLWNsYXNzPVxcXCJ7XFxuXCIgK1xyXG4gICAgXCIgICAgJ2FjdGl2ZSc6IGxlYXZpbmcgfHwgKGFjdGl2ZSAmJiAhZW50ZXJpbmcpLFxcblwiICtcclxuICAgIFwiICAgICdwcmV2JzogKG5leHQgfHwgYWN0aXZlKSAmJiBkaXJlY3Rpb249PSdwcmV2JyxcXG5cIiArXHJcbiAgICBcIiAgICAnbmV4dCc6IChuZXh0IHx8IGFjdGl2ZSkgJiYgZGlyZWN0aW9uPT0nbmV4dCcsXFxuXCIgK1xyXG4gICAgXCIgICAgJ3JpZ2h0JzogZGlyZWN0aW9uPT0ncHJldicsXFxuXCIgK1xyXG4gICAgXCIgICAgJ2xlZnQnOiBkaXJlY3Rpb249PSduZXh0J1xcblwiICtcclxuICAgIFwiICB9XFxcIiBjbGFzcz1cXFwiaXRlbVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmh0bWxcIixcclxuICAgIFwiPHRhYmxlPlxcblwiICtcclxuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xyXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gcHVsbC1sZWZ0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgtMSlcXFwiPjxpIGNsYXNzPVxcXCJpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xyXG4gICAgXCIgICAgICA8dGggY29sc3Bhbj1cXFwie3tyb3dzWzBdLmxlbmd0aCAtIDIgKyBzaG93V2Vla051bWJlcnN9fVxcXCI+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWJsb2NrXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xyXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gcHVsbC1yaWdodFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoMSlcXFwiPjxpIGNsYXNzPVxcXCJpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcclxuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xyXG4gICAgXCIgICAgPHRyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgbmctc2hvdz1cXFwibGFiZWxzLmxlbmd0aCA+IDBcXFwiPlxcblwiICtcclxuICAgIFwiICAgICAgPHRoIG5nLXNob3c9XFxcInNob3dXZWVrTnVtYmVyc1xcXCI+IzwvdGg+XFxuXCIgK1xyXG4gICAgXCIgICAgICA8dGggbmctcmVwZWF0PVxcXCJsYWJlbCBpbiBsYWJlbHNcXFwiPnt7bGFiZWx9fTwvdGg+XFxuXCIgK1xyXG4gICAgXCIgICAgPC90cj5cXG5cIiArXHJcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXHJcbiAgICBcIiAgPHRib2R5PlxcblwiICtcclxuICAgIFwiICAgIDx0ciBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzXFxcIj5cXG5cIiArXHJcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93V2Vla051bWJlcnNcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+PGVtPnt7IGdldFdlZWtOdW1iZXIocm93KSB9fTwvZW0+PC90ZD5cXG5cIiArXHJcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvd1xcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5cXG5cIiArXHJcbiAgICBcIiAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIHN0eWxlPVxcXCJ3aWR0aDoxMDAlO1xcXCIgY2xhc3M9XFxcImJ0blxcXCIgbmctY2xhc3M9XFxcInsnYnRuLWluZm8nOiBkdC5zZWxlY3RlZH1cXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiIG5nLWRpc2FibGVkPVxcXCJkdC5kaXNhYmxlZFxcXCI+PHNwYW4gbmctY2xhc3M9XFxcInttdXRlZDogZHQuc2Vjb25kYXJ5fVxcXCI+e3tkdC5sYWJlbH19PC9zcGFuPjwvYnV0dG9uPlxcblwiICtcclxuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXHJcbiAgICBcIiAgICA8L3RyPlxcblwiICtcclxuICAgIFwiICA8L3Rib2R5PlxcblwiICtcclxuICAgIFwiPC90YWJsZT5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbFwiLFxyXG4gICAgXCI8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiIG5nLXN0eWxlPVxcXCJ7ZGlzcGxheTogKGlzT3BlbiAmJiAnYmxvY2snKSB8fCAnbm9uZScsIHRvcDogcG9zaXRpb24udG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQrJ3B4J31cXFwiIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51XFxcIj5cXG5cIiArXHJcbiAgICBcIlx0PGxpIG5nLXRyYW5zY2x1ZGU+PC9saT5cXG5cIiArXHJcbiAgICBcIlx0PGxpIGNsYXNzPVxcXCJkaXZpZGVyXFxcIj48L2xpPlxcblwiICtcclxuICAgIFwiXHQ8bGkgc3R5bGU9XFxcInBhZGRpbmc6IDlweDtcXFwiPlxcblwiICtcclxuICAgIFwiXHRcdDxzcGFuIGNsYXNzPVxcXCJidG4tZ3JvdXBcXFwiPlxcblwiICtcclxuICAgIFwiXHRcdFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zbWFsbCBidG4taW52ZXJzZVxcXCIgbmctY2xpY2s9XFxcInRvZGF5KClcXFwiPlRvZGF5PC9idXR0b24+XFxuXCIgK1xyXG4gICAgXCJcdFx0XHQ8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXNtYWxsIGJ0bi1pbmZvXFxcIiBuZy1jbGljaz1cXFwic2hvd1dlZWtzID0gISBzaG93V2Vla3NcXFwiIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBzaG93V2Vla3N9XFxcIj5XZWVrczwvYnV0dG9uPlxcblwiICtcclxuICAgIFwiXHRcdFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zbWFsbCBidG4tZGFuZ2VyXFxcIiBuZy1jbGljaz1cXFwiY2xlYXIoKVxcXCI+Q2xlYXI8L2J1dHRvbj5cXG5cIiArXHJcbiAgICBcIlx0XHQ8L3NwYW4+XFxuXCIgK1xyXG4gICAgXCJcdFx0PGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zbWFsbCBidG4tc3VjY2VzcyBwdWxsLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwiaXNPcGVuID0gZmFsc2VcXFwiPkNsb3NlPC9idXR0b24+XFxuXCIgK1xyXG4gICAgXCJcdDwvbGk+XFxuXCIgK1xyXG4gICAgXCI8L3VsPlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9tb2RhbC9iYWNrZHJvcC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcclxuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9tb2RhbC9iYWNrZHJvcC5odG1sXCIsXHJcbiAgICBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWJhY2tkcm9wIGZhZGVcXFwiIG5nLWNsYXNzPVxcXCJ7aW46IGFuaW1hdGV9XFxcIiBuZy1zdHlsZT1cXFwieyd6LWluZGV4JzogMTA0MCArIGluZGV4KjEwfVxcXCIgbmctY2xpY2s9XFxcImNsb3NlKCRldmVudClcXFwiPjwvZGl2PlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwgZmFkZSB7eyB3aW5kb3dDbGFzcyB9fVxcXCIgbmctY2xhc3M9XFxcIntpbjogYW5pbWF0ZX1cXFwiIG5nLXN0eWxlPVxcXCJ7J3otaW5kZXgnOiAxMDUwICsgaW5kZXgqMTB9XFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3BhZ2luYXRpb24vcGFnZXIuaHRtbFwiLFxyXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJwYWdlclxcXCI+XFxuXCIgK1xyXG4gICAgXCIgIDx1bD5cXG5cIiArXHJcbiAgICBcIiAgICA8bGkgbmctcmVwZWF0PVxcXCJwYWdlIGluIHBhZ2VzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBwYWdlLmRpc2FibGVkLCBwcmV2aW91czogcGFnZS5wcmV2aW91cywgbmV4dDogcGFnZS5uZXh0fVxcXCI+PGEgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZS5udW1iZXIpXFxcIj57e3BhZ2UudGV4dH19PC9hPjwvbGk+XFxuXCIgK1xyXG4gICAgXCIgIDwvdWw+XFxuXCIgK1xyXG4gICAgXCI8L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwicGFnaW5hdGlvblxcXCI+PHVsPlxcblwiICtcclxuICAgIFwiICA8bGkgbmctcmVwZWF0PVxcXCJwYWdlIGluIHBhZ2VzXFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogcGFnZS5hY3RpdmUsIGRpc2FibGVkOiBwYWdlLmRpc2FibGVkfVxcXCI+PGEgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZS5udW1iZXIpXFxcIj57e3BhZ2UudGV4dH19PC9hPjwvbGk+XFxuXCIgK1xyXG4gICAgXCIgIDwvdWw+XFxuXCIgK1xyXG4gICAgXCI8L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC11bnNhZmUtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtdW5zYWZlLXBvcHVwLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcCB7e3BsYWNlbWVudH19XFxcIiBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCksIGZhZGU6IGFuaW1hdGlvbigpIH1cXFwiPlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWFycm93XFxcIj48L2Rpdj5cXG5cIiArXHJcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZC1odG1sLXVuc2FmZT1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCI8L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcCB7e3BsYWNlbWVudH19XFxcIiBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCksIGZhZGU6IGFuaW1hdGlvbigpIH1cXFwiPlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWFycm93XFxcIj48L2Rpdj5cXG5cIiArXHJcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZD1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCI8L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3ZlciB7e3BsYWNlbWVudH19XFxcIiBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCksIGZhZGU6IGFuaW1hdGlvbigpIH1cXFwiPlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCJcXG5cIiArXHJcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgICA8aDMgY2xhc3M9XFxcInBvcG92ZXItdGl0bGVcXFwiIG5nLWJpbmQ9XFxcInRpdGxlXFxcIiBuZy1zaG93PVxcXCJ0aXRsZVxcXCI+PC9oMz5cXG5cIiArXHJcbiAgICBcIiAgICAgIDxkaXYgY2xhc3M9XFxcInBvcG92ZXItY29udGVudFxcXCIgbmctYmluZD1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCIgIDwvZGl2PlxcblwiICtcclxuICAgIFwiPC9kaXY+XFxuXCIgK1xyXG4gICAgXCJcIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sXCIsXHJcbiAgICBcIjxkaXYgY2xhc3M9XFxcImJhclxcXCIgbmctY2xhc3M9J3R5cGUgJiYgXFxcImJhci1cXFwiICsgdHlwZSc+PC9kaXY+XCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiPjxwcm9ncmVzc2JhciBuZy1yZXBlYXQ9XFxcImJhciBpbiBiYXJzXFxcIiB3aWR0aD1cXFwiYmFyLnRvXFxcIiBvbGQ9XFxcImJhci5mcm9tXFxcIiBhbmltYXRlPVxcXCJiYXIuYW5pbWF0ZVxcXCIgdHlwZT1cXFwiYmFyLnR5cGVcXFwiPjwvcHJvZ3Jlc3NiYXI+PC9kaXY+XCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXHJcbiAgICBcIjxzcGFuIG5nLW1vdXNlbGVhdmU9XFxcInJlc2V0KClcXFwiPlxcblwiICtcclxuICAgIFwiXHQ8aSBuZy1yZXBlYXQ9XFxcInIgaW4gcmFuZ2VcXFwiIG5nLW1vdXNlZW50ZXI9XFxcImVudGVyKCRpbmRleCArIDEpXFxcIiBuZy1jbGljaz1cXFwicmF0ZSgkaW5kZXggKyAxKVxcXCIgbmctY2xhc3M9XFxcIiRpbmRleCA8IHZhbCAmJiAoci5zdGF0ZU9uIHx8ICdpY29uLXN0YXInKSB8fCAoci5zdGF0ZU9mZiB8fCAnaWNvbi1zdGFyLWVtcHR5JylcXFwiPjwvaT5cXG5cIiArXHJcbiAgICBcIjwvc3Bhbj5cIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdGFicy9wYW5lLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3RhYnMvcGFuZS5odG1sXCIsXHJcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRhYi1wYW5lXFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogc2VsZWN0ZWR9XFxcIiBuZy1zaG93PVxcXCJzZWxlY3RlZFxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcclxuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsXHJcbiAgICBcIjxsaSBuZy1jbGFzcz1cXFwie2FjdGl2ZTogYWN0aXZlLCBkaXNhYmxlZDogZGlzYWJsZWR9XFxcIj5cXG5cIiArXHJcbiAgICBcIiAgPGEgbmctY2xpY2s9XFxcInNlbGVjdCgpXFxcIiB0YWItaGVhZGluZy10cmFuc2NsdWRlPnt7aGVhZGluZ319PC9hPlxcblwiICtcclxuICAgIFwiPC9saT5cXG5cIiArXHJcbiAgICBcIlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90YWJzL3RhYnMuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdGFicy90YWJzLmh0bWxcIixcclxuICAgIFwiPGRpdiBjbGFzcz1cXFwidGFiYmFibGVcXFwiPlxcblwiICtcclxuICAgIFwiICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYtdGFic1xcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgPGxpIG5nLXJlcGVhdD1cXFwicGFuZSBpbiBwYW5lc1xcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6cGFuZS5zZWxlY3RlZH1cXFwiPlxcblwiICtcclxuICAgIFwiICAgICAgPGEgbmctY2xpY2s9XFxcInNlbGVjdChwYW5lKVxcXCI+e3twYW5lLmhlYWRpbmd9fTwvYT5cXG5cIiArXHJcbiAgICBcIiAgICA8L2xpPlxcblwiICtcclxuICAgIFwiICA8L3VsPlxcblwiICtcclxuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0YWItY29udGVudFxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXHJcbiAgICBcIjwvZGl2PlxcblwiICtcclxuICAgIFwiXCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3RhYnMvdGFic2V0LXRpdGxlcy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcclxuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS90YWJzL3RhYnNldC10aXRsZXMuaHRtbFwiLFxyXG4gICAgXCI8dWwgY2xhc3M9XFxcIm5hdiB7e3R5cGUgJiYgJ25hdi0nICsgdHlwZX19XFxcIiBuZy1jbGFzcz1cXFwieyduYXYtc3RhY2tlZCc6IHZlcnRpY2FsfVxcXCI+XFxuXCIgK1xyXG4gICAgXCI8L3VsPlxcblwiICtcclxuICAgIFwiXCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcclxuICAgIFwiXFxuXCIgK1xyXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0YWJiYWJsZVxcXCIgbmctY2xhc3M9XFxcInsndGFicy1yaWdodCc6IGRpcmVjdGlvbiA9PSAncmlnaHQnLCAndGFicy1sZWZ0JzogZGlyZWN0aW9uID09ICdsZWZ0JywgJ3RhYnMtYmVsb3cnOiBkaXJlY3Rpb24gPT0gJ2JlbG93J31cXFwiPlxcblwiICtcclxuICAgIFwiICA8ZGl2IHRhYnNldC10aXRsZXM9XFxcInRhYnNBYm92ZVxcXCI+PC9kaXY+XFxuXCIgK1xyXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj5cXG5cIiArXHJcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJ0YWItcGFuZVxcXCIgXFxuXCIgK1xyXG4gICAgXCIgICAgICAgICBuZy1yZXBlYXQ9XFxcInRhYiBpbiB0YWJzXFxcIiBcXG5cIiArXHJcbiAgICBcIiAgICAgICAgIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiB0YWIuYWN0aXZlfVxcXCJcXG5cIiArXHJcbiAgICBcIiAgICAgICAgIHRhYi1jb250ZW50LXRyYW5zY2x1ZGU9XFxcInRhYlxcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgPC9kaXY+XFxuXCIgK1xyXG4gICAgXCIgIDwvZGl2PlxcblwiICtcclxuICAgIFwiICA8ZGl2IHRhYnNldC10aXRsZXM9XFxcIiF0YWJzQWJvdmVcXFwiPjwvZGl2PlxcblwiICtcclxuICAgIFwiPC9kaXY+XFxuXCIgK1xyXG4gICAgXCJcIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sXCIsXHJcbiAgICBcIjx0YWJsZSBjbGFzcz1cXFwiZm9ybS1pbmxpbmVcXFwiPlxcblwiICtcclxuICAgIFwiXHQ8dHIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudEhvdXJzKClcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiPjxpIGNsYXNzPVxcXCJpY29uLWNoZXZyb24tdXBcXFwiPjwvaT48L2E+PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudE1pbnV0ZXMoKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCI+PGkgY2xhc3M9XFxcImljb24tY2hldnJvbi11cFxcXCI+PC9pPjwvYT48L3RkPlxcblwiICtcclxuICAgIFwiXHRcdDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiPjwvdGQ+XFxuXCIgK1xyXG4gICAgXCJcdDwvdHI+XFxuXCIgK1xyXG4gICAgXCJcdDx0cj5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQgY2xhc3M9XFxcImNvbnRyb2wtZ3JvdXBcXFwiIG5nLWNsYXNzPVxcXCJ7J2Vycm9yJzogaW52YWxpZEhvdXJzfVxcXCI+PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5nLW1vZGVsPVxcXCJob3Vyc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVIb3VycygpXFxcIiBjbGFzcz1cXFwic3BhbjEgdGV4dC1jZW50ZXJcXFwiIG5nLW1vdXNld2hlZWw9XFxcImluY3JlbWVudEhvdXJzKClcXFwiIG5nLXJlYWRvbmx5PVxcXCJyZWFkb25seUlucHV0XFxcIiBtYXhsZW5ndGg9XFxcIjJcXFwiIC8+PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+OjwvdGQ+XFxuXCIgK1xyXG4gICAgXCJcdFx0PHRkIGNsYXNzPVxcXCJjb250cm9sLWdyb3VwXFxcIiBuZy1jbGFzcz1cXFwieydlcnJvcic6IGludmFsaWRNaW51dGVzfVxcXCI+PGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5nLW1vZGVsPVxcXCJtaW51dGVzXFxcIiBuZy1jaGFuZ2U9XFxcInVwZGF0ZU1pbnV0ZXMoKVxcXCIgY2xhc3M9XFxcInNwYW4xIHRleHQtY2VudGVyXFxcIiBuZy1yZWFkb25seT1cXFwicmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIj48L3RkPlxcblwiICtcclxuICAgIFwiXHRcdDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTWVyaWRpYW4oKVxcXCIgY2xhc3M9XFxcImJ0biB0ZXh0LWNlbnRlclxcXCI+e3ttZXJpZGlhbn19PC9idXR0b24+PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0PC90cj5cXG5cIiArXHJcbiAgICBcIlx0PHRyIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+XFxuXCIgK1xyXG4gICAgXCJcdFx0PHRkPjxhIG5nLWNsaWNrPVxcXCJkZWNyZW1lbnRIb3VycygpXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIj48aSBjbGFzcz1cXFwiaWNvbi1jaGV2cm9uLWRvd25cXFwiPjwvaT48L2E+PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0XHQ8dGQ+PGEgbmctY2xpY2s9XFxcImRlY3JlbWVudE1pbnV0ZXMoKVxcXCIgY2xhc3M9XFxcImJ0biBidG4tbGlua1xcXCI+PGkgY2xhc3M9XFxcImljb24tY2hldnJvbi1kb3duXFxcIj48L2k+PC9hPjwvdGQ+XFxuXCIgK1xyXG4gICAgXCJcdFx0PHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCI+PC90ZD5cXG5cIiArXHJcbiAgICBcIlx0PC90cj5cXG5cIiArXHJcbiAgICBcIjwvdGFibGU+XCIpO1xyXG59XSk7XHJcblxyXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXHJcbiAgICBcIjxhIHRhYmluZGV4PVxcXCItMVxcXCIgYmluZC1odG1sLXVuc2FmZT1cXFwibWF0Y2gubGFiZWwgfCB0eXBlYWhlYWRIaWdobGlnaHQ6cXVlcnlcXFwiPjwvYT5cIik7XHJcbn1dKTtcclxuXHJcbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcclxuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIixcclxuICAgIFwiPHVsIGNsYXNzPVxcXCJ0eXBlYWhlYWQgZHJvcGRvd24tbWVudVxcXCIgbmctc3R5bGU9XFxcIntkaXNwbGF5OiBpc09wZW4oKSYmJ2Jsb2NrJyB8fCAnbm9uZScsIHRvcDogcG9zaXRpb24udG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQrJ3B4J31cXFwiPlxcblwiICtcclxuICAgIFwiICAgIDxsaSBuZy1yZXBlYXQ9XFxcIm1hdGNoIGluIG1hdGNoZXNcXFwiIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBpc0FjdGl2ZSgkaW5kZXgpIH1cXFwiIG5nLW1vdXNlZW50ZXI9XFxcInNlbGVjdEFjdGl2ZSgkaW5kZXgpXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0TWF0Y2goJGluZGV4KVxcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgICAgIDx0eXBlYWhlYWQtbWF0Y2ggaW5kZXg9XFxcIiRpbmRleFxcXCIgbWF0Y2g9XFxcIm1hdGNoXFxcIiBxdWVyeT1cXFwicXVlcnlcXFwiIHRlbXBsYXRlLXVybD1cXFwidGVtcGxhdGVVcmxcXFwiPjwvdHlwZWFoZWFkLW1hdGNoPlxcblwiICtcclxuICAgIFwiICAgIDwvbGk+XFxuXCIgK1xyXG4gICAgXCI8L3VsPlwiKTtcclxufV0pO1xyXG5cclxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQuaHRtbFwiLFxyXG4gICAgXCI8dWwgY2xhc3M9XFxcInR5cGVhaGVhZCBkcm9wZG93bi1tZW51XFxcIiBuZy1zdHlsZT1cXFwie2Rpc3BsYXk6IGlzT3BlbigpJiYnYmxvY2snIHx8ICdub25lJywgdG9wOiBwb3NpdGlvbi50b3ArJ3B4JywgbGVmdDogcG9zaXRpb24ubGVmdCsncHgnfVxcXCI+XFxuXCIgK1xyXG4gICAgXCIgICAgPGxpIG5nLXJlcGVhdD1cXFwibWF0Y2ggaW4gbWF0Y2hlc1xcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6IGlzQWN0aXZlKCRpbmRleCkgfVxcXCIgbmctbW91c2VlbnRlcj1cXFwic2VsZWN0QWN0aXZlKCRpbmRleClcXFwiPlxcblwiICtcclxuICAgIFwiICAgICAgICA8YSB0YWJpbmRleD1cXFwiLTFcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3RNYXRjaCgkaW5kZXgpXFxcIiBuZy1iaW5kLWh0bWwtdW5zYWZlPVxcXCJtYXRjaC5sYWJlbCB8IHR5cGVhaGVhZEhpZ2hsaWdodDpxdWVyeVxcXCI+PC9hPlxcblwiICtcclxuICAgIFwiICAgIDwvbGk+XFxuXCIgK1xyXG4gICAgXCI8L3VsPlwiKTtcclxufV0pOyIsIi8qKlxyXG4gKiBTdGF0ZS1iYXNlZCByb3V0aW5nIGZvciBBbmd1bGFySlNcclxuICogQHZlcnNpb24gdjAuMi4wXHJcbiAqIEBsaW5rIGh0dHA6Ly9hbmd1bGFyLXVpLmdpdGh1Yi5jb20vXHJcbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4gKi9cclxuKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xyXG4vKmpzaGludCBnbG9iYWxzdHJpY3Q6dHJ1ZSovXHJcbi8qZ2xvYmFsIGFuZ3VsYXI6ZmFsc2UqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG52YXIgaXNEZWZpbmVkID0gYW5ndWxhci5pc0RlZmluZWQsXHJcbiAgICBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uLFxyXG4gICAgaXNTdHJpbmcgPSBhbmd1bGFyLmlzU3RyaW5nLFxyXG4gICAgaXNPYmplY3QgPSBhbmd1bGFyLmlzT2JqZWN0LFxyXG4gICAgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheSxcclxuICAgIGZvckVhY2ggPSBhbmd1bGFyLmZvckVhY2gsXHJcbiAgICBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZCxcclxuICAgIGNvcHkgPSBhbmd1bGFyLmNvcHk7XHJcblxyXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcclxuICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHsgcHJvdG90eXBlOiBwYXJlbnQgfSkpKCksIGV4dHJhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XHJcbiAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKG9iaiAhPT0gZHN0KSB7XHJcbiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgaWYgKCFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkgZHN0W2tleV0gPSB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGRzdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbmRzIHRoZSBjb21tb24gYW5jZXN0b3IgcGF0aCBiZXR3ZWVuIHR3byBzdGF0ZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBmaXJzdCBUaGUgZmlyc3Qgc3RhdGUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWNvbmQgVGhlIHNlY29uZCBzdGF0ZS5cclxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2Ygc3RhdGUgbmFtZXMgaW4gZGVzY2VuZGluZyBvcmRlciwgbm90IGluY2x1ZGluZyB0aGUgcm9vdC5cclxuICovXHJcbmZ1bmN0aW9uIGFuY2VzdG9ycyhmaXJzdCwgc2Vjb25kKSB7XHJcbiAgdmFyIHBhdGggPSBbXTtcclxuXHJcbiAgZm9yICh2YXIgbiBpbiBmaXJzdC5wYXRoKSB7XHJcbiAgICBpZiAoZmlyc3QucGF0aFtuXSA9PT0gXCJcIikgY29udGludWU7XHJcbiAgICBpZiAoIXNlY29uZC5wYXRoW25dKSBicmVhaztcclxuICAgIHBhdGgucHVzaChmaXJzdC5wYXRoW25dKTtcclxuICB9XHJcbiAgcmV0dXJuIHBhdGg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgYSBzZXQgb2YgcGFyYW1ldGVycyB3aXRoIGFsbCBwYXJhbWV0ZXJzIGluaGVyaXRlZCBiZXR3ZWVuIHRoZSBjb21tb24gcGFyZW50cyBvZiB0aGVcclxuICogY3VycmVudCBzdGF0ZSBhbmQgYSBnaXZlbiBkZXN0aW5hdGlvbiBzdGF0ZS5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGN1cnJlbnRQYXJhbXMgVGhlIHZhbHVlIG9mIHRoZSBjdXJyZW50IHN0YXRlIHBhcmFtZXRlcnMgKCRzdGF0ZVBhcmFtcykuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdQYXJhbXMgVGhlIHNldCBvZiBwYXJhbWV0ZXJzIHdoaWNoIHdpbGwgYmUgY29tcG9zaXRlZCB3aXRoIGluaGVyaXRlZCBwYXJhbXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSAkY3VycmVudCBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc3RhdGUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSAkdG8gSW50ZXJuYWwgZGVmaW5pdGlvbiBvZiBvYmplY3QgcmVwcmVzZW50aW5nIHN0YXRlIHRvIHRyYW5zaXRpb24gdG8uXHJcbiAqL1xyXG5mdW5jdGlvbiBpbmhlcml0UGFyYW1zKGN1cnJlbnRQYXJhbXMsIG5ld1BhcmFtcywgJGN1cnJlbnQsICR0bykge1xyXG4gIHZhciBwYXJlbnRzID0gYW5jZXN0b3JzKCRjdXJyZW50LCAkdG8pLCBwYXJlbnRQYXJhbXMsIGluaGVyaXRlZCA9IHt9LCBpbmhlcml0TGlzdCA9IFtdO1xyXG5cclxuICBmb3IgKHZhciBpIGluIHBhcmVudHMpIHtcclxuICAgIGlmICghcGFyZW50c1tpXS5wYXJhbXMgfHwgIXBhcmVudHNbaV0ucGFyYW1zLmxlbmd0aCkgY29udGludWU7XHJcbiAgICBwYXJlbnRQYXJhbXMgPSBwYXJlbnRzW2ldLnBhcmFtcztcclxuXHJcbiAgICBmb3IgKHZhciBqIGluIHBhcmVudFBhcmFtcykge1xyXG4gICAgICBpZiAoaW5oZXJpdExpc3QuaW5kZXhPZihwYXJlbnRQYXJhbXNbal0pID49IDApIGNvbnRpbnVlO1xyXG4gICAgICBpbmhlcml0TGlzdC5wdXNoKHBhcmVudFBhcmFtc1tqXSk7XHJcbiAgICAgIGluaGVyaXRlZFtwYXJlbnRQYXJhbXNbal1dID0gY3VycmVudFBhcmFtc1twYXJlbnRQYXJhbXNbal1dO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZXh0ZW5kKHt9LCBpbmhlcml0ZWQsIG5ld1BhcmFtcyk7XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcsIFsnbmcnXSk7XHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIucm91dGVyJywgWyd1aS5yb3V0ZXIudXRpbCddKTtcclxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScsIFsndWkucm91dGVyLnJvdXRlcicsICd1aS5yb3V0ZXIudXRpbCddKTtcclxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlcicsIFsndWkucm91dGVyLnN0YXRlJ10pO1xyXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLmNvbXBhdCcsIFsndWkucm91dGVyJ10pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXJ2aWNlIChgdWktdXRpbGApLiBNYW5hZ2VzIHJlc29sdXRpb24gb2YgKGFjeWNsaWMpIGdyYXBocyBvZiBwcm9taXNlcy5cclxuICogQG1vZHVsZSAkcmVzb2x2ZVxyXG4gKiBAcmVxdWlyZXMgJHFcclxuICogQHJlcXVpcmVzICRpbmplY3RvclxyXG4gKi9cclxuJFJlc29sdmUuJGluamVjdCA9IFsnJHEnLCAnJGluamVjdG9yJ107XHJcbmZ1bmN0aW9uICRSZXNvbHZlKCAgJHEsICAgICRpbmplY3Rvcikge1xyXG4gIFxyXG4gIHZhciBWSVNJVF9JTl9QUk9HUkVTUyA9IDEsXHJcbiAgICAgIFZJU0lUX0RPTkUgPSAyLFxyXG4gICAgICBOT1RISU5HID0ge30sXHJcbiAgICAgIE5PX0RFUEVOREVOQ0lFUyA9IFtdLFxyXG4gICAgICBOT19MT0NBTFMgPSBOT1RISU5HLFxyXG4gICAgICBOT19QQVJFTlQgPSBleHRlbmQoJHEud2hlbihOT1RISU5HKSwgeyAkJHByb21pc2VzOiBOT1RISU5HLCAkJHZhbHVlczogTk9USElORyB9KTtcclxuICBcclxuXHJcbiAgLyoqXHJcbiAgICogU3R1ZGllcyBhIHNldCBvZiBpbnZvY2FibGVzIHRoYXQgYXJlIGxpa2VseSB0byBiZSB1c2VkIG11bHRpcGxlIHRpbWVzLlxyXG4gICAqICAgICAgJHJlc29sdmUuc3R1ZHkoaW52b2NhYmxlcykobG9jYWxzLCBwYXJlbnQsIHNlbGYpXHJcbiAgICogaXMgZXF1aXZhbGVudCB0b1xyXG4gICAqICAgICAgJHJlc29sdmUucmVzb2x2ZShpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZilcclxuICAgKiBidXQgdGhlIGZvcm1lciBpcyBtb3JlIGVmZmljaWVudCAoaW4gZmFjdCBgcmVzb2x2ZWAganVzdCBjYWxscyBgc3R1ZHlgIGludGVybmFsbHkpLlxyXG4gICAqIFNlZSB7QGxpbmsgbW9kdWxlOiRyZXNvbHZlL3Jlc29sdmV9IGZvciBkZXRhaWxzLlxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnZvY2FibGVzXHJcbiAgICogQHJldHVybiB7RnVuY3Rpb259XHJcbiAgICovXHJcbiAgdGhpcy5zdHVkeSA9IGZ1bmN0aW9uIChpbnZvY2FibGVzKSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KGludm9jYWJsZXMpKSB0aHJvdyBuZXcgRXJyb3IoXCInaW52b2NhYmxlcycgbXVzdCBiZSBhbiBvYmplY3RcIik7XHJcbiAgICBcclxuICAgIC8vIFBlcmZvcm0gYSB0b3BvbG9naWNhbCBzb3J0IG9mIGludm9jYWJsZXMgdG8gYnVpbGQgYW4gb3JkZXJlZCBwbGFuXHJcbiAgICB2YXIgcGxhbiA9IFtdLCBjeWNsZSA9IFtdLCB2aXNpdGVkID0ge307XHJcbiAgICBmdW5jdGlvbiB2aXNpdCh2YWx1ZSwga2V5KSB7XHJcbiAgICAgIGlmICh2aXNpdGVkW2tleV0gPT09IFZJU0lUX0RPTkUpIHJldHVybjtcclxuICAgICAgXHJcbiAgICAgIGN5Y2xlLnB1c2goa2V5KTtcclxuICAgICAgaWYgKHZpc2l0ZWRba2V5XSA9PT0gVklTSVRfSU5fUFJPR1JFU1MpIHtcclxuICAgICAgICBjeWNsZS5zcGxpY2UoMCwgY3ljbGUuaW5kZXhPZihrZXkpKTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDeWNsaWMgZGVwZW5kZW5jeTogXCIgKyBjeWNsZS5qb2luKFwiIC0+IFwiKSk7XHJcbiAgICAgIH1cclxuICAgICAgdmlzaXRlZFtrZXldID0gVklTSVRfSU5fUFJPR1JFU1M7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcGxhbi5wdXNoKGtleSwgWyBmdW5jdGlvbigpIHsgcmV0dXJuICRpbmplY3Rvci5nZXQoa2V5KTsgfV0sIE5PX0RFUEVOREVOQ0lFUyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHBhcmFtcyA9ICRpbmplY3Rvci5hbm5vdGF0ZSh2YWx1ZSk7XHJcbiAgICAgICAgZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIChwYXJhbSkge1xyXG4gICAgICAgICAgaWYgKHBhcmFtICE9PSBrZXkgJiYgaW52b2NhYmxlcy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHZpc2l0KGludm9jYWJsZXNbcGFyYW1dLCBwYXJhbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGxhbi5wdXNoKGtleSwgdmFsdWUsIHBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGN5Y2xlLnBvcCgpO1xyXG4gICAgICB2aXNpdGVkW2tleV0gPSBWSVNJVF9ET05FO1xyXG4gICAgfVxyXG4gICAgZm9yRWFjaChpbnZvY2FibGVzLCB2aXNpdCk7XHJcbiAgICBpbnZvY2FibGVzID0gY3ljbGUgPSB2aXNpdGVkID0gbnVsbDsgLy8gcGxhbiBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkXHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGlzUmVzb2x2ZSh2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpICYmIHZhbHVlLnRoZW4gJiYgdmFsdWUuJCRwcm9taXNlcztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChsb2NhbHMsIHBhcmVudCwgc2VsZikge1xyXG4gICAgICBpZiAoaXNSZXNvbHZlKGxvY2FscykgJiYgc2VsZiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc2VsZiA9IHBhcmVudDsgcGFyZW50ID0gbG9jYWxzOyBsb2NhbHMgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghbG9jYWxzKSBsb2NhbHMgPSBOT19MT0NBTFM7XHJcbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChsb2NhbHMpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ2xvY2FscycgbXVzdCBiZSBhbiBvYmplY3RcIik7XHJcbiAgICAgIH0gICAgICAgXHJcbiAgICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSBOT19QQVJFTlQ7XHJcbiAgICAgIGVsc2UgaWYgKCFpc1Jlc29sdmUocGFyZW50KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIidwYXJlbnQnIG11c3QgYmUgYSBwcm9taXNlIHJldHVybmVkIGJ5ICRyZXNvbHZlLnJlc29sdmUoKVwiKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVG8gY29tcGxldGUgdGhlIG92ZXJhbGwgcmVzb2x1dGlvbiwgd2UgaGF2ZSB0byB3YWl0IGZvciB0aGUgcGFyZW50XHJcbiAgICAgIC8vIHByb21pc2UgYW5kIGZvciB0aGUgcHJvbWlzZSBmb3IgZWFjaCBpbnZva2FibGUgaW4gb3VyIHBsYW4uXHJcbiAgICAgIHZhciByZXNvbHV0aW9uID0gJHEuZGVmZXIoKSxcclxuICAgICAgICAgIHJlc3VsdCA9IHJlc29sdXRpb24ucHJvbWlzZSxcclxuICAgICAgICAgIHByb21pc2VzID0gcmVzdWx0LiQkcHJvbWlzZXMgPSB7fSxcclxuICAgICAgICAgIHZhbHVlcyA9IGV4dGVuZCh7fSwgbG9jYWxzKSxcclxuICAgICAgICAgIHdhaXQgPSAxICsgcGxhbi5sZW5ndGgvMyxcclxuICAgICAgICAgIG1lcmdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgXHJcbiAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XHJcbiAgICAgICAgLy8gTWVyZ2UgcGFyZW50IHZhbHVlcyB3ZSBoYXZlbid0IGdvdCB5ZXQgYW5kIHB1Ymxpc2ggb3VyIG93biAkJHZhbHVlc1xyXG4gICAgICAgIGlmICghLS13YWl0KSB7XHJcbiAgICAgICAgICBpZiAoIW1lcmdlZCkgbWVyZ2UodmFsdWVzLCBwYXJlbnQuJCR2YWx1ZXMpOyBcclxuICAgICAgICAgIHJlc3VsdC4kJHZhbHVlcyA9IHZhbHVlcztcclxuICAgICAgICAgIHJlc3VsdC4kJHByb21pc2VzID0gdHJ1ZTsgLy8ga2VlcCBmb3IgaXNSZXNvbHZlKClcclxuICAgICAgICAgIHJlc29sdXRpb24ucmVzb2x2ZSh2YWx1ZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gZmFpbChyZWFzb24pIHtcclxuICAgICAgICByZXN1bHQuJCRmYWlsdXJlID0gcmVhc29uO1xyXG4gICAgICAgIHJlc29sdXRpb24ucmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIFNob3J0LWNpcmN1aXQgaWYgcGFyZW50IGhhcyBhbHJlYWR5IGZhaWxlZFxyXG4gICAgICBpZiAoaXNEZWZpbmVkKHBhcmVudC4kJGZhaWx1cmUpKSB7XHJcbiAgICAgICAgZmFpbChwYXJlbnQuJCRmYWlsdXJlKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBNZXJnZSBwYXJlbnQgdmFsdWVzIGlmIHRoZSBwYXJlbnQgaGFzIGFscmVhZHkgcmVzb2x2ZWQsIG9yIG1lcmdlXHJcbiAgICAgIC8vIHBhcmVudCBwcm9taXNlcyBhbmQgd2FpdCBpZiB0aGUgcGFyZW50IHJlc29sdmUgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgIGlmIChwYXJlbnQuJCR2YWx1ZXMpIHtcclxuICAgICAgICBtZXJnZWQgPSBtZXJnZSh2YWx1ZXMsIHBhcmVudC4kJHZhbHVlcyk7XHJcbiAgICAgICAgZG9uZSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4dGVuZChwcm9taXNlcywgcGFyZW50LiQkcHJvbWlzZXMpO1xyXG4gICAgICAgIHBhcmVudC50aGVuKGRvbmUsIGZhaWwpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBQcm9jZXNzIGVhY2ggaW52b2NhYmxlIGluIHRoZSBwbGFuLCBidXQgaWdub3JlIGFueSB3aGVyZSBhIGxvY2FsIG9mIHRoZSBzYW1lIG5hbWUgZXhpc3RzLlxyXG4gICAgICBmb3IgKHZhciBpPTAsIGlpPXBsYW4ubGVuZ3RoOyBpPGlpOyBpKz0zKSB7XHJcbiAgICAgICAgaWYgKGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShwbGFuW2ldKSkgZG9uZSgpO1xyXG4gICAgICAgIGVsc2UgaW52b2tlKHBsYW5baV0sIHBsYW5baSsxXSwgcGxhbltpKzJdKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gaW52b2tlKGtleSwgaW52b2NhYmxlLCBwYXJhbXMpIHtcclxuICAgICAgICAvLyBDcmVhdGUgYSBkZWZlcnJlZCBmb3IgdGhpcyBpbnZvY2F0aW9uLiBGYWlsdXJlcyB3aWxsIHByb3BhZ2F0ZSB0byB0aGUgcmVzb2x1dGlvbiBhcyB3ZWxsLlxyXG4gICAgICAgIHZhciBpbnZvY2F0aW9uID0gJHEuZGVmZXIoKSwgd2FpdFBhcmFtcyA9IDA7XHJcbiAgICAgICAgZnVuY3Rpb24gb25mYWlsdXJlKHJlYXNvbikge1xyXG4gICAgICAgICAgaW52b2NhdGlvbi5yZWplY3QocmVhc29uKTtcclxuICAgICAgICAgIGZhaWwocmVhc29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2FpdCBmb3IgYW55IHBhcmFtZXRlciB0aGF0IHdlIGhhdmUgYSBwcm9taXNlIGZvciAoZWl0aGVyIGZyb20gcGFyZW50IG9yIGZyb20gdGhpc1xyXG4gICAgICAgIC8vIHJlc29sdmU7IGluIHRoYXQgY2FzZSBzdHVkeSgpIHdpbGwgaGF2ZSBtYWRlIHN1cmUgaXQncyBvcmRlcmVkIGJlZm9yZSB1cyBpbiB0aGUgcGxhbikuXHJcbiAgICAgICAgcGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xyXG4gICAgICAgICAgaWYgKHByb21pc2VzLmhhc093blByb3BlcnR5KGRlcCkgJiYgIWxvY2Fscy5oYXNPd25Qcm9wZXJ0eShkZXApKSB7XHJcbiAgICAgICAgICAgIHdhaXRQYXJhbXMrKztcclxuICAgICAgICAgICAgcHJvbWlzZXNbZGVwXS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICB2YWx1ZXNbZGVwXSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICBpZiAoISgtLXdhaXRQYXJhbXMpKSBwcm9jZWVkKCk7XHJcbiAgICAgICAgICAgIH0sIG9uZmFpbHVyZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCF3YWl0UGFyYW1zKSBwcm9jZWVkKCk7XHJcbiAgICAgICAgZnVuY3Rpb24gcHJvY2VlZCgpIHtcclxuICAgICAgICAgIGlmIChpc0RlZmluZWQocmVzdWx0LiQkZmFpbHVyZSkpIHJldHVybjtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGludm9jYXRpb24ucmVzb2x2ZSgkaW5qZWN0b3IuaW52b2tlKGludm9jYWJsZSwgc2VsZiwgdmFsdWVzKSk7XHJcbiAgICAgICAgICAgIGludm9jYXRpb24ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICB2YWx1ZXNba2V5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgIH0sIG9uZmFpbHVyZSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIG9uZmFpbHVyZShlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHVibGlzaCBwcm9taXNlIHN5bmNocm9ub3VzbHk7IGludm9jYXRpb25zIGZ1cnRoZXIgZG93biBpbiB0aGUgcGxhbiBtYXkgZGVwZW5kIG9uIGl0LlxyXG4gICAgICAgIHByb21pc2VzW2tleV0gPSBpbnZvY2F0aW9uLnByb21pc2U7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gIH07XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogUmVzb2x2ZXMgYSBzZXQgb2YgaW52b2NhYmxlcy4gQW4gaW52b2NhYmxlIGlzIGEgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB2aWEgYCRpbmplY3Rvci5pbnZva2UoKWAsXHJcbiAgICogYW5kIGNhbiBoYXZlIGFuIGFyYml0cmFyeSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzLiBBbiBpbnZvY2FibGUgY2FuIGVpdGhlciByZXR1cm4gYSB2YWx1ZSBkaXJlY3RseSxcclxuICAgKiBvciBhIGAkcWAgcHJvbWlzZS4gSWYgYSBwcm9taXNlIGlzIHJldHVybmVkIGl0IHdpbGwgYmUgcmVzb2x2ZWQgYW5kIHRoZSByZXN1bHRpbmcgdmFsdWUgd2lsbCBiZVxyXG4gICAqIHVzZWQgaW5zdGVhZC4gRGVwZW5kZW5jaWVzIG9mIGludm9jYWJsZXMgYXJlIHJlc29sdmVkIChpbiB0aGlzIG9yZGVyIG9mIHByZWNlZGVuY2UpXHJcbiAgICpcclxuICAgKiAtIGZyb20gdGhlIHNwZWNpZmllZCBgbG9jYWxzYFxyXG4gICAqIC0gZnJvbSBhbm90aGVyIGludm9jYWJsZSB0aGF0IGlzIHBhcnQgb2YgdGhpcyBgJHJlc29sdmVgIGNhbGxcclxuICAgKiAtIGZyb20gYW4gaW52b2NhYmxlIHRoYXQgaXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAgKG9yIHJlY3Vyc2l2ZWx5XHJcbiAgICogICBmcm9tIGFueSBhbmNlc3RvciBgJHJlc29sdmVgIG9mIHRoYXQgcGFyZW50KS5cclxuICAgKlxyXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgYCRyZXNvbHZlYCBpcyBhIHByb21pc2UgZm9yIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIChpbiB0aGlzIG9yZGVyIG9mIHByZWNlZGVuY2UpXHJcbiAgICpcclxuICAgKiAtIGFueSBgbG9jYWxzYCAoaWYgc3BlY2lmaWVkKVxyXG4gICAqIC0gdGhlIHJlc29sdmVkIHJldHVybiB2YWx1ZXMgb2YgYWxsIGluamVjdGFibGVzXHJcbiAgICogLSBhbnkgdmFsdWVzIGluaGVyaXRlZCBmcm9tIGEgYHBhcmVudGAgY2FsbCB0byBgJHJlc29sdmVgIChpZiBzcGVjaWZpZWQpXHJcbiAgICpcclxuICAgKiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUgYWZ0ZXIgdGhlIGBwYXJlbnRgIHByb21pc2UgKGlmIGFueSkgYW5kIGFsbCBwcm9taXNlcyByZXR1cm5lZCBieSBpbmplY3RhYmxlc1xyXG4gICAqIGhhdmUgYmVlbiByZXNvbHZlZC4gSWYgYW55IGludm9jYWJsZSAob3IgYCRpbmplY3Rvci5pbnZva2VgKSB0aHJvd3MgYW4gZXhjZXB0aW9uLCBvciBpZiBhIHByb21pc2VcclxuICAgKiByZXR1cm5lZCBieSBhbiBpbnZvY2FibGUgaXMgcmVqZWN0ZWQsIHRoZSBgJHJlc29sdmVgIHByb21pc2UgaXMgaW1tZWRpYXRlbHkgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZSBlcnJvci5cclxuICAgKiBBIHJlamVjdGlvbiBvZiBhIGBwYXJlbnRgIHByb21pc2UgKGlmIHNwZWNpZmllZCkgd2lsbCBsaWtld2lzZSBiZSBwcm9wYWdhdGVkIGltbWVkaWF0ZWx5LiBPbmNlIHRoZVxyXG4gICAqIGAkcmVzb2x2ZWAgcHJvbWlzZSBoYXMgYmVlbiByZWplY3RlZCwgbm8gZnVydGhlciBpbnZvY2FibGVzIHdpbGwgYmUgY2FsbGVkLlxyXG4gICAqIFxyXG4gICAqIEN5Y2xpYyBkZXBlbmRlbmNpZXMgYmV0d2VlbiBpbnZvY2FibGVzIGFyZSBub3QgcGVybWl0dGVkIGFuZCB3aWxsIGNhdWVzIGAkcmVzb2x2ZWAgdG8gdGhyb3cgYW5cclxuICAgKiBlcnJvci4gQXMgYSBzcGVjaWFsIGNhc2UsIGFuIGluamVjdGFibGUgY2FuIGRlcGVuZCBvbiBhIHBhcmFtZXRlciB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGluamVjdGFibGUsXHJcbiAgICogd2hpY2ggd2lsbCBiZSBmdWxmaWxsZWQgZnJvbSB0aGUgYHBhcmVudGAgaW5qZWN0YWJsZSBvZiB0aGUgc2FtZSBuYW1lLiBUaGlzIGFsbG93cyBpbmhlcml0ZWQgdmFsdWVzXHJcbiAgICogdG8gYmUgZGVjb3JhdGVkLiBOb3RlIHRoYXQgaW4gdGhpcyBjYXNlIGFueSBvdGhlciBpbmplY3RhYmxlIGluIHRoZSBzYW1lIGAkcmVzb2x2ZWAgd2l0aCB0aGUgc2FtZVxyXG4gICAqIGRlcGVuZGVuY3kgd291bGQgc2VlIHRoZSBkZWNvcmF0ZWQgdmFsdWUsIG5vdCB0aGUgaW5oZXJpdGVkIHZhbHVlLlxyXG4gICAqXHJcbiAgICogTm90ZSB0aGF0IG1pc3NpbmcgZGVwZW5kZW5jaWVzIC0tIHVubGlrZSBjeWNsaWMgZGVwZW5kZW5jaWVzIC0tIHdpbGwgY2F1c2UgYW4gKGFzeW5jaHJvbm91cykgcmVqZWN0aW9uXHJcbiAgICogb2YgdGhlIGAkcmVzb2x2ZWAgcHJvbWlzZSByYXRoZXIgdGhhbiBhIChzeW5jaHJvbm91cykgZXhjZXB0aW9uLlxyXG4gICAqXHJcbiAgICogSW52b2NhYmxlcyBhcmUgaW52b2tlZCBlYWdlcmx5IGFzIHNvb24gYXMgYWxsIGRlcGVuZGVuY2llcyBhcmUgYXZhaWxhYmxlLiBUaGlzIGlzIHRydWUgZXZlbiBmb3JcclxuICAgKiBkZXBlbmRlbmNpZXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAuXHJcbiAgICpcclxuICAgKiBBcyBhIHNwZWNpYWwgY2FzZSwgYW4gaW52b2NhYmxlIGNhbiBiZSBhIHN0cmluZywgaW4gd2hpY2ggY2FzZSBpdCBpcyB0YWtlbiB0byBiZSBhIHNlcnZpY2UgbmFtZVxyXG4gICAqIHRvIGJlIHBhc3NlZCB0byBgJGluamVjdG9yLmdldCgpYC4gVGhpcyBpcyBzdXBwb3J0ZWQgcHJpbWFyaWx5IGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSB3aXRoIHRoZVxyXG4gICAqIGByZXNvbHZlYCBwcm9wZXJ0eSBvZiBgJHJvdXRlUHJvdmlkZXJgIHJvdXRlcy5cclxuICAgKlxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIEZ1bmN0aW9ufHN0cmluZz59IGludm9jYWJsZXMgIGZ1bmN0aW9ucyB0byBpbnZva2Ugb3IgYCRpbmplY3RvcmAgc2VydmljZXMgdG8gZmV0Y2guXHJcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IFtsb2NhbHNdICB2YWx1ZXMgdG8gbWFrZSBhdmFpbGFibGUgdG8gdGhlIGluamVjdGFibGVzXHJcbiAgICogQHBhcmFtIHtQcm9taXNlLjxPYmplY3Q+fSBbcGFyZW50XSAgYSBwcm9taXNlIHJldHVybmVkIGJ5IGFub3RoZXIgY2FsbCB0byBgJHJlc29sdmVgLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbc2VsZl0gIHRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZHNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxPYmplY3Q+fSAgUHJvbWlzZSBmb3IgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHJlc29sdmVkIHJldHVybiB2YWx1ZVxyXG4gICAqICAgIG9mIGFsbCBpbnZvY2FibGVzLCBhcyB3ZWxsIGFzIGFueSBpbmhlcml0ZWQgYW5kIGxvY2FsIHZhbHVlcy5cclxuICAgKi9cclxuICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbiAoaW52b2NhYmxlcywgbG9jYWxzLCBwYXJlbnQsIHNlbGYpIHtcclxuICAgIHJldHVybiB0aGlzLnN0dWR5KGludm9jYWJsZXMpKGxvY2FscywgcGFyZW50LCBzZWxmKTtcclxuICB9O1xyXG59XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5zZXJ2aWNlKCckcmVzb2x2ZScsICRSZXNvbHZlKTtcclxuXHJcblxyXG4vKipcclxuICogU2VydmljZS4gTWFuYWdlcyBsb2FkaW5nIG9mIHRlbXBsYXRlcy5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBuYW1lICR0ZW1wbGF0ZUZhY3RvcnlcclxuICogQHJlcXVpcmVzICRodHRwXHJcbiAqIEByZXF1aXJlcyAkdGVtcGxhdGVDYWNoZVxyXG4gKiBAcmVxdWlyZXMgJGluamVjdG9yXHJcbiAqL1xyXG4kVGVtcGxhdGVGYWN0b3J5LiRpbmplY3QgPSBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRpbmplY3RvciddO1xyXG5mdW5jdGlvbiAkVGVtcGxhdGVGYWN0b3J5KCAgJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJGluamVjdG9yKSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmcm9tIGEgY29uZmlndXJhdGlvbiBvYmplY3QuIFxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEBuYW1lICR0ZW1wbGF0ZUZhY3RvcnkjZnJvbUNvbmZpZ1xyXG4gICAqIEBtZXRob2RPZiAkdGVtcGxhdGVGYWN0b3J5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIHdoaWNoIHRvIGxvYWQgYSB0ZW1wbGF0ZS4gVGhlIGZvbGxvd2luZ1xyXG4gICAqICAgIHByb3BlcnRpZXMgYXJlIHNlYXJjaCBpbiB0aGUgc3BlY2lmaWVkIG9yZGVyLCBhbmQgdGhlIGZpcnN0IG9uZSB0aGF0IGlzIGRlZmluZWQgaXNcclxuICAgKiAgICB1c2VkIHRvIGNyZWF0ZSB0aGUgdGVtcGxhdGU6XHJcbiAgICogQHBhcmFtIHtzdHJpbmd8RnVuY3Rpb259IGNvbmZpZy50ZW1wbGF0ZSAgaHRtbCBzdHJpbmcgdGVtcGxhdGUgb3IgZnVuY3Rpb24gdG8gbG9hZCB2aWFcclxuICAgKiAgICB7QGxpbmsgJHRlbXBsYXRlRmFjdG9yeSNmcm9tU3RyaW5nIGZyb21TdHJpbmd9LlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSBjb25maWcudGVtcGxhdGVVcmwgIHVybCB0byBsb2FkIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB1cmxcclxuICAgKiAgICB0byBsb2FkIHZpYSB7QGxpbmsgJHRlbXBsYXRlRmFjdG9yeSNmcm9tVXJsIGZyb21Vcmx9LlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyICBmdW5jdGlvbiB0byBpbnZva2UgdmlhXHJcbiAgICogICAge0BsaW5rICR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVByb3ZpZGVyIGZyb21Qcm92aWRlcn0uXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAgUGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbi5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW2xvY2Fsc10gTG9jYWxzIHRvIHBhc3MgdG8gYGludm9rZWAgaWYgdGhlIHRlbXBsYXRlIGlzIGxvYWRlZCB2aWEgYVxyXG4gICAqICAgICAgYHRlbXBsYXRlUHJvdmlkZXJgLiBEZWZhdWx0cyB0byBgeyBwYXJhbXM6IHBhcmFtcyB9YC5cclxuICAgKiBAcmV0dXJuIHtzdHJpbmd8UHJvbWlzZS48c3RyaW5nPn0gIFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIHRoYXQgc3RyaW5nLFxyXG4gICAqICAgICAgb3IgYG51bGxgIGlmIG5vIHRlbXBsYXRlIGlzIGNvbmZpZ3VyZWQuXHJcbiAgICovXHJcbiAgdGhpcy5mcm9tQ29uZmlnID0gZnVuY3Rpb24gKGNvbmZpZywgcGFyYW1zLCBsb2NhbHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGUpID8gdGhpcy5mcm9tU3RyaW5nKGNvbmZpZy50ZW1wbGF0ZSwgcGFyYW1zKSA6XHJcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGVVcmwpID8gdGhpcy5mcm9tVXJsKGNvbmZpZy50ZW1wbGF0ZVVybCwgcGFyYW1zKSA6XHJcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGVQcm92aWRlcikgPyB0aGlzLmZyb21Qcm92aWRlcihjb25maWcudGVtcGxhdGVQcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIDpcclxuICAgICAgbnVsbFxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgdGVtcGxhdGUgZnJvbSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHN0cmluZy5cclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAbmFtZSAkdGVtcGxhdGVGYWN0b3J5I2Zyb21TdHJpbmdcclxuICAgKiBAbWV0aG9kT2YgJHRlbXBsYXRlRmFjdG9yeVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB0ZW1wbGF0ZSAgaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaHRtbFxyXG4gICAqICAgICAgdGVtcGxhdGUgYXMgYSBzdHJpbmcuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAgUGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJuIHtzdHJpbmd8UHJvbWlzZS48c3RyaW5nPn0gIFRoZSB0ZW1wbGF0ZSBodG1sIGFzIGEgc3RyaW5nLCBvciBhIHByb21pc2UgZm9yIHRoYXQgc3RyaW5nLlxyXG4gICAqL1xyXG4gIHRoaXMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih0ZW1wbGF0ZSkgPyB0ZW1wbGF0ZShwYXJhbXMpIDogdGVtcGxhdGU7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZHMgYSB0ZW1wbGF0ZSBmcm9tIHRoZSBhIFVSTCB2aWEgYCRodHRwYCBhbmQgYCR0ZW1wbGF0ZUNhY2hlYC5cclxuICAgKiBAZnVuY3Rpb25cclxuICAgKiBAbmFtZSAkdGVtcGxhdGVGYWN0b3J5I2Zyb21VcmxcclxuICAgKiBAbWV0aG9kT2YgJHRlbXBsYXRlRmFjdG9yeVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB1cmwgIHVybCBvZiB0aGUgdGVtcGxhdGUgdG8gbG9hZCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB1cmwuXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAgUGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSB1cmwgZnVuY3Rpb24uXHJcbiAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2UuPHN0cmluZz59ICBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciB0aGF0IHN0cmluZy5cclxuICAgKi9cclxuICB0aGlzLmZyb21VcmwgPSBmdW5jdGlvbiAodXJsLCBwYXJhbXMpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHVybCkpIHVybCA9IHVybChwYXJhbXMpO1xyXG4gICAgaWYgKHVybCA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgIGVsc2UgcmV0dXJuICRodHRwXHJcbiAgICAgICAgLmdldCh1cmwsIHsgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsgcmV0dXJuIHJlc3BvbnNlLmRhdGE7IH0pO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBieSBpbnZva2luZyBhbiBpbmplY3RhYmxlIHByb3ZpZGVyIGZ1bmN0aW9uLlxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqIEBuYW1lICR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVVybFxyXG4gICAqIEBtZXRob2RPZiAkdGVtcGxhdGVGYWN0b3J5XHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXIgRnVuY3Rpb24gdG8gaW52b2tlIHZpYSBgJGluamVjdG9yLmludm9rZWBcclxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFBhcmFtZXRlcnMgZm9yIHRoZSB0ZW1wbGF0ZS5cclxuICAgKiBAcGFyYW0ge09iamVjdH0gW2xvY2Fsc10gTG9jYWxzIHRvIHBhc3MgdG8gYGludm9rZWAuIERlZmF1bHRzIHRvIGB7IHBhcmFtczogcGFyYW1zIH1gLlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQcm9taXNlLjxzdHJpbmc+fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciB0aGF0IHN0cmluZy5cclxuICAgKi9cclxuICB0aGlzLmZyb21Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIHtcclxuICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLCBudWxsLCBsb2NhbHMgfHwgeyBwYXJhbXM6IHBhcmFtcyB9KTtcclxuICB9O1xyXG59XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5zZXJ2aWNlKCckdGVtcGxhdGVGYWN0b3J5JywgJFRlbXBsYXRlRmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogTWF0Y2hlcyBVUkxzIGFnYWluc3QgcGF0dGVybnMgYW5kIGV4dHJhY3RzIG5hbWVkIHBhcmFtZXRlcnMgZnJvbSB0aGUgcGF0aCBvciB0aGUgc2VhcmNoXHJcbiAqIHBhcnQgb2YgdGhlIFVSTC4gQSBVUkwgcGF0dGVybiBjb25zaXN0cyBvZiBhIHBhdGggcGF0dGVybiwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSAnPycgYW5kIGEgbGlzdFxyXG4gKiBvZiBzZWFyY2ggcGFyYW1ldGVycy4gTXVsdGlwbGUgc2VhcmNoIHBhcmFtZXRlciBuYW1lcyBhcmUgc2VwYXJhdGVkIGJ5ICcmJy4gU2VhcmNoIHBhcmFtZXRlcnNcclxuICogZG8gbm90IGluZmx1ZW5jZSB3aGV0aGVyIG9yIG5vdCBhIFVSTCBpcyBtYXRjaGVkLCBidXQgdGhlaXIgdmFsdWVzIGFyZSBwYXNzZWQgdGhyb3VnaCBpbnRvXHJcbiAqIHRoZSBtYXRjaGVkIHBhcmFtZXRlcnMgcmV0dXJuZWQgYnkge0BsaW5rIFVybE1hdGNoZXIjZXhlYyBleGVjfS5cclxuICogXHJcbiAqIFBhdGggcGFyYW1ldGVyIHBsYWNlaG9sZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHNpbXBsZSBjb2xvbi9jYXRjaC1hbGwgc3ludGF4IG9yIGN1cmx5IGJyYWNlXHJcbiAqIHN5bnRheCwgd2hpY2ggb3B0aW9uYWxseSBhbGxvd3MgYSByZWd1bGFyIGV4cHJlc3Npb24gZm9yIHRoZSBwYXJhbWV0ZXIgdG8gYmUgc3BlY2lmaWVkOlxyXG4gKlxyXG4gKiAqICc6JyBuYW1lIC0gY29sb24gcGxhY2Vob2xkZXJcclxuICogKiAnKicgbmFtZSAtIGNhdGNoLWFsbCBwbGFjZWhvbGRlclxyXG4gKiAqICd7JyBuYW1lICd9JyAtIGN1cmx5IHBsYWNlaG9sZGVyXHJcbiAqICogJ3snIG5hbWUgJzonIHJlZ2V4cCAnfScgLSBjdXJseSBwbGFjZWhvbGRlciB3aXRoIHJlZ2V4cC4gU2hvdWxkIHRoZSByZWdleHAgaXRzZWxmIGNvbnRhaW5cclxuICogICBjdXJseSBicmFjZXMsIHRoZXkgbXVzdCBiZSBpbiBtYXRjaGVkIHBhaXJzIG9yIGVzY2FwZWQgd2l0aCBhIGJhY2tzbGFzaC5cclxuICpcclxuICogUGFyYW1ldGVyIG5hbWVzIG1heSBjb250YWluIG9ubHkgd29yZCBjaGFyYWN0ZXJzIChsYXRpbiBsZXR0ZXJzLCBkaWdpdHMsIGFuZCB1bmRlcnNjb3JlKSBhbmRcclxuICogbXVzdCBiZSB1bmlxdWUgd2l0aGluIHRoZSBwYXR0ZXJuIChhY3Jvc3MgYm90aCBwYXRoIGFuZCBzZWFyY2ggcGFyYW1ldGVycykuIEZvciBjb2xvbiBcclxuICogcGxhY2Vob2xkZXJzIG9yIGN1cmx5IHBsYWNlaG9sZGVycyB3aXRob3V0IGFuIGV4cGxpY2l0IHJlZ2V4cCwgYSBwYXRoIHBhcmFtZXRlciBtYXRjaGVzIGFueVxyXG4gKiBudW1iZXIgb2YgY2hhcmFjdGVycyBvdGhlciB0aGFuICcvJy4gRm9yIGNhdGNoLWFsbCBwbGFjZWhvbGRlcnMgdGhlIHBhdGggcGFyYW1ldGVyIG1hdGNoZXNcclxuICogYW55IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxyXG4gKiBcclxuICogIyMjIEV4YW1wbGVzXHJcbiAqIFxyXG4gKiAqICcvaGVsbG8vJyAtIE1hdGNoZXMgb25seSBpZiB0aGUgcGF0aCBpcyBleGFjdGx5ICcvaGVsbG8vJy4gVGhlcmUgaXMgbm8gc3BlY2lhbCB0cmVhdG1lbnQgZm9yXHJcbiAqICAgdHJhaWxpbmcgc2xhc2hlcywgYW5kIHBhdHRlcm5zIGhhdmUgdG8gbWF0Y2ggdGhlIGVudGlyZSBwYXRoLCBub3QganVzdCBhIHByZWZpeC5cclxuICogKiAnL3VzZXIvOmlkJyAtIE1hdGNoZXMgJy91c2VyL2JvYicgb3IgJy91c2VyLzEyMzQhISEnIG9yIGV2ZW4gJy91c2VyLycgYnV0IG5vdCAnL3VzZXInIG9yXHJcbiAqICAgJy91c2VyL2JvYi9kZXRhaWxzJy4gVGhlIHNlY29uZCBwYXRoIHNlZ21lbnQgd2lsbCBiZSBjYXB0dXJlZCBhcyB0aGUgcGFyYW1ldGVyICdpZCcuXHJcbiAqICogJy91c2VyL3tpZH0nIC0gU2FtZSBhcyB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IHVzaW5nIGN1cmx5IGJyYWNlIHN5bnRheC5cclxuICogKiAnL3VzZXIve2lkOlteL10qfScgLSBTYW1lIGFzIHRoZSBwcmV2aW91cyBleGFtcGxlLlxyXG4gKiAqICcvdXNlci97aWQ6WzAtOWEtZkEtRl17MSw4fX0nIC0gU2ltaWxhciB0byB0aGUgcHJldmlvdXMgZXhhbXBsZSwgYnV0IG9ubHkgbWF0Y2hlcyBpZiB0aGUgaWRcclxuICogICBwYXJhbWV0ZXIgY29uc2lzdHMgb2YgMSB0byA4IGhleCBkaWdpdHMuXHJcbiAqICogJy9maWxlcy97cGF0aDouKn0nIC0gTWF0Y2hlcyBhbnkgVVJMIHN0YXJ0aW5nIHdpdGggJy9maWxlcy8nIGFuZCBjYXB0dXJlcyB0aGUgcmVzdCBvZiB0aGVcclxuICogICBwYXRoIGludG8gdGhlIHBhcmFtZXRlciAncGF0aCcuXHJcbiAqICogJy9maWxlcy8qcGF0aCcgLSBkaXR0by5cclxuICpcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuICB0aGUgcGF0dGVybiB0byBjb21waWxlIGludG8gYSBtYXRjaGVyLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHJlZml4ICBBIHN0YXRpYyBwcmVmaXggb2YgdGhpcyBwYXR0ZXJuLiBUaGUgbWF0Y2hlciBndWFyYW50ZWVzIHRoYXQgYW55XHJcbiAqICAgVVJMIG1hdGNoaW5nIHRoaXMgbWF0Y2hlciAoaS5lLiBhbnkgc3RyaW5nIGZvciB3aGljaCB7QGxpbmsgVXJsTWF0Y2hlciNleGVjIGV4ZWMoKX0gcmV0dXJuc1xyXG4gKiAgIG5vbi1udWxsKSB3aWxsIHN0YXJ0IHdpdGggdGhpcyBwcmVmaXguXHJcbiAqL1xyXG5mdW5jdGlvbiBVcmxNYXRjaGVyKHBhdHRlcm4pIHtcclxuXHJcbiAgLy8gRmluZCBhbGwgcGxhY2Vob2xkZXJzIGFuZCBjcmVhdGUgYSBjb21waWxlZCBwYXR0ZXJuLCB1c2luZyBlaXRoZXIgY2xhc3NpYyBvciBjdXJseSBzeW50YXg6XHJcbiAgLy8gICAnKicgbmFtZVxyXG4gIC8vICAgJzonIG5hbWVcclxuICAvLyAgICd7JyBuYW1lICd9J1xyXG4gIC8vICAgJ3snIG5hbWUgJzonIHJlZ2V4cCAnfSdcclxuICAvLyBUaGUgcmVndWxhciBleHByZXNzaW9uIGlzIHNvbWV3aGF0IGNvbXBsaWNhdGVkIGR1ZSB0byB0aGUgbmVlZCB0byBhbGxvdyBjdXJseSBicmFjZXNcclxuICAvLyBpbnNpZGUgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbi4gVGhlIHBsYWNlaG9sZGVyIHJlZ2V4cCBicmVha3MgZG93biBhcyBmb2xsb3dzOlxyXG4gIC8vICAgIChbOipdKShcXHcrKSAgICAgICAgICAgICAgIGNsYXNzaWMgcGxhY2Vob2xkZXIgKCQxIC8gJDIpXHJcbiAgLy8gICAgXFx7KFxcdyspKD86XFw6KCAuLi4gKSk/XFx9ICAgY3VybHkgYnJhY2UgcGxhY2Vob2xkZXIgKCQzKSB3aXRoIG9wdGlvbmFsIHJlZ2V4cCAuLi4gKCQ0KVxyXG4gIC8vICAgICg/OiAuLi4gfCAuLi4gfCAuLi4gKSsgICAgdGhlIHJlZ2V4cCBjb25zaXN0cyBvZiBhbnkgbnVtYmVyIG9mIGF0b21zLCBhbiBhdG9tIGJlaW5nIGVpdGhlclxyXG4gIC8vICAgIFtee31cXFxcXSsgICAgICAgICAgICAgICAgICAtIGFueXRoaW5nIG90aGVyIHRoYW4gY3VybHkgYnJhY2VzIG9yIGJhY2tzbGFzaFxyXG4gIC8vICAgIFxcXFwuICAgICAgICAgICAgICAgICAgICAgICAtIGEgYmFja3NsYXNoIGVzY2FwZVxyXG4gIC8vICAgIFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSAgICAgLSBhIG1hdGNoZWQgc2V0IG9mIGN1cmx5IGJyYWNlcyBjb250YWluaW5nIG90aGVyIGF0b21zXHJcbiAgdmFyIHBsYWNlaG9sZGVyID0gLyhbOipdKShcXHcrKXxcXHsoXFx3KykoPzpcXDooKD86W157fVxcXFxdK3xcXFxcLnxcXHsoPzpbXnt9XFxcXF0rfFxcXFwuKSpcXH0pKykpP1xcfS9nLFxyXG4gICAgICBuYW1lcyA9IHt9LCBjb21waWxlZCA9ICdeJywgbGFzdCA9IDAsIG0sXHJcbiAgICAgIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cyA9IFtdLFxyXG4gICAgICBwYXJhbXMgPSB0aGlzLnBhcmFtcyA9IFtdO1xyXG5cclxuICBmdW5jdGlvbiBhZGRQYXJhbWV0ZXIoaWQpIHtcclxuICAgIGlmICghL15cXHcrKC0rXFx3KykqJC8udGVzdChpZCkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xyXG4gICAgaWYgKG5hbWVzW2lkXSkgdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIHBhcmFtZXRlciBuYW1lICdcIiArIGlkICsgXCInIGluIHBhdHRlcm4gJ1wiICsgcGF0dGVybiArIFwiJ1wiKTtcclxuICAgIG5hbWVzW2lkXSA9IHRydWU7XHJcbiAgICBwYXJhbXMucHVzaChpZCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBxdW90ZVJlZ0V4cChzdHJpbmcpIHtcclxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW1xcXFxcXFtcXF1cXF4kKis/LigpfHt9XS9nLCBcIlxcXFwkJlwiKTtcclxuICB9XHJcblxyXG4gIHRoaXMuc291cmNlID0gcGF0dGVybjtcclxuXHJcbiAgLy8gU3BsaXQgaW50byBzdGF0aWMgc2VnbWVudHMgc2VwYXJhdGVkIGJ5IHBhdGggcGFyYW1ldGVyIHBsYWNlaG9sZGVycy5cclxuICAvLyBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGlzIGFsd2F5cyAxIG1vcmUgdGhhbiB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMuXHJcbiAgdmFyIGlkLCByZWdleHAsIHNlZ21lbnQ7XHJcbiAgd2hpbGUgKChtID0gcGxhY2Vob2xkZXIuZXhlYyhwYXR0ZXJuKSkpIHtcclxuICAgIGlkID0gbVsyXSB8fCBtWzNdOyAvLyBJRVs3OF0gcmV0dXJucyAnJyBmb3IgdW5tYXRjaGVkIGdyb3VwcyBpbnN0ZWFkIG9mIG51bGxcclxuICAgIHJlZ2V4cCA9IG1bNF0gfHwgKG1bMV0gPT0gJyonID8gJy4qJyA6ICdbXi9dKicpO1xyXG4gICAgc2VnbWVudCA9IHBhdHRlcm4uc3Vic3RyaW5nKGxhc3QsIG0uaW5kZXgpO1xyXG4gICAgaWYgKHNlZ21lbnQuaW5kZXhPZignPycpID49IDApIGJyZWFrOyAvLyB3ZSdyZSBpbnRvIHRoZSBzZWFyY2ggcGFydFxyXG4gICAgY29tcGlsZWQgKz0gcXVvdGVSZWdFeHAoc2VnbWVudCkgKyAnKCcgKyByZWdleHAgKyAnKSc7XHJcbiAgICBhZGRQYXJhbWV0ZXIoaWQpO1xyXG4gICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcclxuICAgIGxhc3QgPSBwbGFjZWhvbGRlci5sYXN0SW5kZXg7XHJcbiAgfVxyXG4gIHNlZ21lbnQgPSBwYXR0ZXJuLnN1YnN0cmluZyhsYXN0KTtcclxuXHJcbiAgLy8gRmluZCBhbnkgc2VhcmNoIHBhcmFtZXRlciBuYW1lcyBhbmQgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbGFzdCBzZWdtZW50XHJcbiAgdmFyIGkgPSBzZWdtZW50LmluZGV4T2YoJz8nKTtcclxuICBpZiAoaSA+PSAwKSB7XHJcbiAgICB2YXIgc2VhcmNoID0gdGhpcy5zb3VyY2VTZWFyY2ggPSBzZWdtZW50LnN1YnN0cmluZyhpKTtcclxuICAgIHNlZ21lbnQgPSBzZWdtZW50LnN1YnN0cmluZygwLCBpKTtcclxuICAgIHRoaXMuc291cmNlUGF0aCA9IHBhdHRlcm4uc3Vic3RyaW5nKDAsIGxhc3QraSk7XHJcblxyXG4gICAgLy8gQWxsb3cgcGFyYW1ldGVycyB0byBiZSBzZXBhcmF0ZWQgYnkgJz8nIGFzIHdlbGwgYXMgJyYnIHRvIG1ha2UgY29uY2F0KCkgZWFzaWVyXHJcbiAgICBmb3JFYWNoKHNlYXJjaC5zdWJzdHJpbmcoMSkuc3BsaXQoL1smP10vKSwgYWRkUGFyYW1ldGVyKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5zb3VyY2VQYXRoID0gcGF0dGVybjtcclxuICAgIHRoaXMuc291cmNlU2VhcmNoID0gJyc7XHJcbiAgfVxyXG5cclxuICBjb21waWxlZCArPSBxdW90ZVJlZ0V4cChzZWdtZW50KSArICckJztcclxuICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xyXG4gIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChjb21waWxlZCk7XHJcbiAgdGhpcy5wcmVmaXggPSBzZWdtZW50c1swXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBuZXcgbWF0Y2hlciBmb3IgYSBwYXR0ZXJuIGNvbnN0cnVjdGVkIGJ5IGFwcGVuZGluZyB0aGUgcGF0aCBwYXJ0IGFuZCBhZGRpbmcgdGhlXHJcbiAqIHNlYXJjaCBwYXJhbWV0ZXJzIG9mIHRoZSBzcGVjaWZpZWQgcGF0dGVybiB0byB0aGlzIHBhdHRlcm4uIFRoZSBjdXJyZW50IHBhdHRlcm4gaXMgbm90XHJcbiAqIG1vZGlmaWVkLiBUaGlzIGNhbiBiZSB1bmRlcnN0b29kIGFzIGNyZWF0aW5nIGEgcGF0dGVybiBmb3IgVVJMcyB0aGF0IGFyZSByZWxhdGl2ZSB0byAob3JcclxuICogc3VmZml4ZXMgb2YpIHRoZSBjdXJyZW50IHBhdHRlcm4uXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqIFRoZSBmb2xsb3dpbmcgdHdvIG1hdGNoZXJzIGFyZSBlcXVpdmFsZW50OlxyXG4gKiBgYGBcclxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cScpLmNvbmNhdCgnL2RldGFpbHM/ZGF0ZScpO1xyXG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfS9kZXRhaWxzP3EmZGF0ZScpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBwYXR0ZXJuIHRvIGFwcGVuZC5cclxuICogQHJldHVybiB7VXJsTWF0Y2hlcn0gIEEgbWF0Y2hlciBmb3IgdGhlIGNvbmNhdGVuYXRlZCBwYXR0ZXJuLlxyXG4gKi9cclxuVXJsTWF0Y2hlci5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKHBhdHRlcm4pIHtcclxuICAvLyBCZWNhdXNlIG9yZGVyIG9mIHNlYXJjaCBwYXJhbWV0ZXJzIGlzIGlycmVsZXZhbnQsIHdlIGNhbiBhZGQgb3VyIG93biBzZWFyY2hcclxuICAvLyBwYXJhbWV0ZXJzIHRvIHRoZSBlbmQgb2YgdGhlIG5ldyBwYXR0ZXJuLiBQYXJzZSB0aGUgbmV3IHBhdHRlcm4gYnkgaXRzZWxmXHJcbiAgLy8gYW5kIHRoZW4gam9pbiB0aGUgYml0cyB0b2dldGhlciwgYnV0IGl0J3MgbXVjaCBlYXNpZXIgdG8gZG8gdGhpcyBvbiBhIHN0cmluZyBsZXZlbC5cclxuICByZXR1cm4gbmV3IFVybE1hdGNoZXIodGhpcy5zb3VyY2VQYXRoICsgcGF0dGVybiArIHRoaXMuc291cmNlU2VhcmNoKTtcclxufTtcclxuXHJcblVybE1hdGNoZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLnNvdXJjZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyB0aGUgc3BlY2lmaWVkIHBhdGggYWdhaW5zdCB0aGlzIG1hdGNoZXIsIGFuZCByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjYXB0dXJlZFxyXG4gKiBwYXJhbWV0ZXIgdmFsdWVzLCBvciBudWxsIGlmIHRoZSBwYXRoIGRvZXMgbm90IG1hdGNoLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGNvbnRhaW5zIHRoZSB2YWx1ZXNcclxuICogb2YgYW55IHNlYXJjaCBwYXJhbWV0ZXJzIHRoYXQgYXJlIG1lbnRpb25lZCBpbiB0aGUgcGF0dGVybiwgYnV0IHRoZWlyIHZhbHVlIG1heSBiZSBudWxsIGlmXHJcbiAqIHRoZXkgYXJlIG5vdCBwcmVzZW50IGluIGBzZWFyY2hQYXJhbXNgLiBUaGlzIG1lYW5zIHRoYXQgc2VhcmNoIHBhcmFtZXRlcnMgYXJlIGFsd2F5cyB0cmVhdGVkXHJcbiAqIGFzIG9wdGlvbmFsLlxyXG4gKlxyXG4gKiAjIyMgRXhhbXBsZVxyXG4gKiBgYGBcclxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cSZyJykuZXhlYygnL3VzZXIvYm9iJywgeyB4OicxJywgcTonaGVsbG8nIH0pO1xyXG4gKiAvLyByZXR1cm5zIHsgaWQ6J2JvYicsIHE6J2hlbGxvJywgcjpudWxsIH1cclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoICBUaGUgVVJMIHBhdGggdG8gbWF0Y2gsIGUuZy4gYCRsb2NhdGlvbi5wYXRoKClgLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gc2VhcmNoUGFyYW1zICBVUkwgc2VhcmNoIHBhcmFtZXRlcnMsIGUuZy4gYCRsb2NhdGlvbi5zZWFyY2goKWAuXHJcbiAqIEByZXR1cm4ge09iamVjdH0gIFRoZSBjYXB0dXJlZCBwYXJhbWV0ZXIgdmFsdWVzLlxyXG4gKi9cclxuVXJsTWF0Y2hlci5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChwYXRoLCBzZWFyY2hQYXJhbXMpIHtcclxuICB2YXIgbSA9IHRoaXMucmVnZXhwLmV4ZWMocGF0aCk7XHJcbiAgaWYgKCFtKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgdmFyIHBhcmFtcyA9IHRoaXMucGFyYW1zLCBuVG90YWwgPSBwYXJhbXMubGVuZ3RoLFxyXG4gICAgblBhdGggPSB0aGlzLnNlZ21lbnRzLmxlbmd0aC0xLFxyXG4gICAgdmFsdWVzID0ge30sIGk7XHJcblxyXG4gIGlmIChuUGF0aCAhPT0gbS5sZW5ndGggLSAxKSB0aHJvdyBuZXcgRXJyb3IoXCJVbmJhbGFuY2VkIGNhcHR1cmUgZ3JvdXAgaW4gcm91dGUgJ1wiICsgdGhpcy5zb3VyY2UgKyBcIidcIik7XHJcblxyXG4gIGZvciAoaT0wOyBpPG5QYXRoOyBpKyspIHZhbHVlc1twYXJhbXNbaV1dID0gbVtpKzFdO1xyXG4gIGZvciAoLyoqLzsgaTxuVG90YWw7IGkrKykgdmFsdWVzW3BhcmFtc1tpXV0gPSBzZWFyY2hQYXJhbXNbcGFyYW1zW2ldXTtcclxuXHJcbiAgcmV0dXJuIHZhbHVlcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBuYW1lcyBvZiBhbGwgcGF0aCBhbmQgc2VhcmNoIHBhcmFtZXRlcnMgb2YgdGhpcyBwYXR0ZXJuIGluIGFuIHVuc3BlY2lmaWVkIG9yZGVyLlxyXG4gKiBAcmV0dXJuIHtBcnJheS48c3RyaW5nPn0gIEFuIGFycmF5IG9mIHBhcmFtZXRlciBuYW1lcy4gTXVzdCBiZSB0cmVhdGVkIGFzIHJlYWQtb25seS4gSWYgdGhlXHJcbiAqICAgIHBhdHRlcm4gaGFzIG5vIHBhcmFtZXRlcnMsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkLlxyXG4gKi9cclxuVXJsTWF0Y2hlci5wcm90b3R5cGUucGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5wYXJhbXM7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIFVSTCB0aGF0IG1hdGNoZXMgdGhpcyBwYXR0ZXJuIGJ5IHN1YnN0aXR1dGluZyB0aGUgc3BlY2lmaWVkIHZhbHVlc1xyXG4gKiBmb3IgdGhlIHBhdGggYW5kIHNlYXJjaCBwYXJhbWV0ZXJzLiBOdWxsIHZhbHVlcyBmb3IgcGF0aCBwYXJhbWV0ZXJzIGFyZVxyXG4gKiB0cmVhdGVkIGFzIGVtcHR5IHN0cmluZ3MuXHJcbiAqXHJcbiAqICMjIyBFeGFtcGxlXHJcbiAqIGBgYFxyXG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfT9xJykuZm9ybWF0KHsgaWQ6J2JvYicsIHE6J3llcycgfSk7XHJcbiAqIC8vIHJldHVybnMgJy91c2VyL2JvYj9xPXllcydcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMgIHRoZSB2YWx1ZXMgdG8gc3Vic3RpdHV0ZSBmb3IgdGhlIHBhcmFtZXRlcnMgaW4gdGhpcyBwYXR0ZXJuLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICB0aGUgZm9ybWF0dGVkIFVSTCAocGF0aCBhbmQgb3B0aW9uYWxseSBzZWFyY2ggcGFydCkuXHJcbiAqL1xyXG5VcmxNYXRjaGVyLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAodmFsdWVzKSB7XHJcbiAgdmFyIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cywgcGFyYW1zID0gdGhpcy5wYXJhbXM7XHJcbiAgaWYgKCF2YWx1ZXMpIHJldHVybiBzZWdtZW50cy5qb2luKCcnKTtcclxuXHJcbiAgdmFyIG5QYXRoID0gc2VnbWVudHMubGVuZ3RoLTEsIG5Ub3RhbCA9IHBhcmFtcy5sZW5ndGgsXHJcbiAgICByZXN1bHQgPSBzZWdtZW50c1swXSwgaSwgc2VhcmNoLCB2YWx1ZTtcclxuXHJcbiAgZm9yIChpPTA7IGk8blBhdGg7IGkrKykge1xyXG4gICAgdmFsdWUgPSB2YWx1ZXNbcGFyYW1zW2ldXTtcclxuICAgIC8vIFRPRE86IE1heWJlIHdlIHNob3VsZCB0aHJvdyBvbiBudWxsIGhlcmU/IEl0J3Mgbm90IHJlYWxseSBnb29kIHN0eWxlIHRvIHVzZSAnJyBhbmQgbnVsbCBpbnRlcmNoYW5nZWFibGV5XHJcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkgcmVzdWx0ICs9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICByZXN1bHQgKz0gc2VnbWVudHNbaSsxXTtcclxuICB9XHJcbiAgZm9yICgvKiovOyBpPG5Ub3RhbDsgaSsrKSB7XHJcbiAgICB2YWx1ZSA9IHZhbHVlc1twYXJhbXNbaV1dO1xyXG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgcmVzdWx0ICs9IChzZWFyY2ggPyAnJicgOiAnPycpICsgcGFyYW1zW2ldICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAgICAgc2VhcmNoID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogU2VydmljZS4gRmFjdG9yeSBmb3Ige0BsaW5rIFVybE1hdGNoZXJ9IGluc3RhbmNlcy4gVGhlIGZhY3RvcnkgaXMgYWxzbyBhdmFpbGFibGUgdG8gcHJvdmlkZXJzXHJcbiAqIHVuZGVyIHRoZSBuYW1lIGAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlcmAuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAbmFtZSAkdXJsTWF0Y2hlckZhY3RvcnlcclxuICovXHJcbmZ1bmN0aW9uICRVcmxNYXRjaGVyRmFjdG9yeSgpIHtcclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEge0BsaW5rIFVybE1hdGNoZXJ9IGZvciB0aGUgc3BlY2lmaWVkIHBhdHRlcm4uXHJcbiAgICogQGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgJHVybE1hdGNoZXJGYWN0b3J5I2NvbXBpbGVcclxuICAgKiBAbWV0aG9kT2YgJHVybE1hdGNoZXJGYWN0b3J5XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBVUkwgcGF0dGVybi5cclxuICAgKiBAcmV0dXJuIHtVcmxNYXRjaGVyfSAgVGhlIFVybE1hdGNoZXIuXHJcbiAgICovXHJcbiAgdGhpcy5jb21waWxlID0gZnVuY3Rpb24gKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBuZXcgVXJsTWF0Y2hlcihwYXR0ZXJuKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBVcmxNYXRjaGVyLCBvciBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICogQGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgJHVybE1hdGNoZXJGYWN0b3J5I2lzTWF0Y2hlclxyXG4gICAqIEBtZXRob2RPZiAkdXJsTWF0Y2hlckZhY3RvcnlcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb1xyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgdGhpcy5pc01hdGNoZXIgPSBmdW5jdGlvbiAobykge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KG8pICYmIGlzRnVuY3Rpb24oby5leGVjKSAmJiBpc0Z1bmN0aW9uKG8uZm9ybWF0KSAmJiBpc0Z1bmN0aW9uKG8uY29uY2F0KTtcclxuICB9O1xyXG5cclxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG59XHJcblxyXG4vLyBSZWdpc3RlciBhcyBhIHByb3ZpZGVyIHNvIGl0J3MgYXZhaWxhYmxlIHRvIG90aGVyIHByb3ZpZGVyc1xyXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnV0aWwnKS5wcm92aWRlcignJHVybE1hdGNoZXJGYWN0b3J5JywgJFVybE1hdGNoZXJGYWN0b3J5KTtcclxuXHJcblxyXG4kVXJsUm91dGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXInXTtcclxuZnVuY3Rpb24gJFVybFJvdXRlclByb3ZpZGVyKCAgJHVybE1hdGNoZXJGYWN0b3J5KSB7XHJcbiAgdmFyIHJ1bGVzID0gW10sIFxyXG4gICAgICBvdGhlcndpc2UgPSBudWxsO1xyXG5cclxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgYSBwcmVmaXggb2YgYWxsIHN0cmluZ3MgbWF0Y2hpbmcgdGhlIFJlZ0V4cFxyXG4gIGZ1bmN0aW9uIHJlZ0V4cFByZWZpeChyZSkge1xyXG4gICAgdmFyIHByZWZpeCA9IC9eXFxeKCg/OlxcXFxbXmEtekEtWjAtOV18W15cXFxcXFxbXFxdXFxeJCorPy4oKXx7fV0rKSopLy5leGVjKHJlLnNvdXJjZSk7XHJcbiAgICByZXR1cm4gKHByZWZpeCAhPSBudWxsKSA/IHByZWZpeFsxXS5yZXBsYWNlKC9cXFxcKC4pL2csIFwiJDFcIikgOiAnJztcclxuICB9XHJcblxyXG4gIC8vIEludGVycG9sYXRlcyBtYXRjaGVkIHZhbHVlcyBpbnRvIGEgU3RyaW5nLnJlcGxhY2UoKS1zdHlsZSBwYXR0ZXJuXHJcbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUocGF0dGVybiwgbWF0Y2gpIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoL1xcJChcXCR8XFxkezEsMn0pLywgZnVuY3Rpb24gKG0sIHdoYXQpIHtcclxuICAgICAgcmV0dXJuIG1hdGNoW3doYXQgPT09ICckJyA/IDAgOiBOdW1iZXIod2hhdCldO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0aGlzLnJ1bGUgPVxyXG4gICAgZnVuY3Rpb24gKHJ1bGUpIHtcclxuICAgICAgaWYgKCFpc0Z1bmN0aW9uKHJ1bGUpKSB0aHJvdyBuZXcgRXJyb3IoXCIncnVsZScgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgICBydWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gIHRoaXMub3RoZXJ3aXNlID1cclxuICAgIGZ1bmN0aW9uIChydWxlKSB7XHJcbiAgICAgIGlmIChpc1N0cmluZyhydWxlKSkge1xyXG4gICAgICAgIHZhciByZWRpcmVjdCA9IHJ1bGU7XHJcbiAgICAgICAgcnVsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZGlyZWN0OyB9O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCFpc0Z1bmN0aW9uKHJ1bGUpKSB0aHJvdyBuZXcgRXJyb3IoXCIncnVsZScgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgICBvdGhlcndpc2UgPSBydWxlO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVJZk1hdGNoKCRpbmplY3RvciwgaGFuZGxlciwgbWF0Y2gpIHtcclxuICAgIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZTtcclxuICAgIHZhciByZXN1bHQgPSAkaW5qZWN0b3IuaW52b2tlKGhhbmRsZXIsIGhhbmRsZXIsIHsgJG1hdGNoOiBtYXRjaCB9KTtcclxuICAgIHJldHVybiBpc0RlZmluZWQocmVzdWx0KSA/IHJlc3VsdCA6IHRydWU7XHJcbiAgfVxyXG5cclxuICB0aGlzLndoZW4gPVxyXG4gICAgZnVuY3Rpb24gKHdoYXQsIGhhbmRsZXIpIHtcclxuICAgICAgdmFyIHJlZGlyZWN0LCBoYW5kbGVySXNTdHJpbmcgPSBpc1N0cmluZyhoYW5kbGVyKTtcclxuICAgICAgaWYgKGlzU3RyaW5nKHdoYXQpKSB3aGF0ID0gJHVybE1hdGNoZXJGYWN0b3J5LmNvbXBpbGUod2hhdCk7XHJcblxyXG4gICAgICBpZiAoIWhhbmRsZXJJc1N0cmluZyAmJiAhaXNGdW5jdGlvbihoYW5kbGVyKSAmJiAhaXNBcnJheShoYW5kbGVyKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkICdoYW5kbGVyJyBpbiB3aGVuKClcIik7XHJcblxyXG4gICAgICB2YXIgc3RyYXRlZ2llcyA9IHtcclxuICAgICAgICBtYXRjaGVyOiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xyXG4gICAgICAgICAgaWYgKGhhbmRsZXJJc1N0cmluZykge1xyXG4gICAgICAgICAgICByZWRpcmVjdCA9ICR1cmxNYXRjaGVyRmFjdG9yeS5jb21waWxlKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiByZWRpcmVjdC5mb3JtYXQoJG1hdGNoKTsgfV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgkaW5qZWN0b3IsICRsb2NhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpLCAkbG9jYXRpb24uc2VhcmNoKCkpKTtcclxuICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcHJlZml4OiBpc1N0cmluZyh3aGF0LnByZWZpeCkgPyB3aGF0LnByZWZpeCA6ICcnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZ2V4OiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xyXG4gICAgICAgICAgaWYgKHdoYXQuZ2xvYmFsIHx8IHdoYXQuc3RpY2t5KSB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuKCkgUmVnRXhwIG11c3Qgbm90IGJlIGdsb2JhbCBvciBzdGlja3lcIik7XHJcblxyXG4gICAgICAgICAgaWYgKGhhbmRsZXJJc1N0cmluZykge1xyXG4gICAgICAgICAgICByZWRpcmVjdCA9IGhhbmRsZXI7XHJcbiAgICAgICAgICAgIGhhbmRsZXIgPSBbJyRtYXRjaCcsIGZ1bmN0aW9uICgkbWF0Y2gpIHsgcmV0dXJuIGludGVycG9sYXRlKHJlZGlyZWN0LCAkbWF0Y2gpOyB9XTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCRpbmplY3RvciwgJGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVJZk1hdGNoKCRpbmplY3RvciwgaGFuZGxlciwgd2hhdC5leGVjKCRsb2NhdGlvbi5wYXRoKCkpKTtcclxuICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcHJlZml4OiByZWdFeHBQcmVmaXgod2hhdClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBjaGVjayA9IHsgbWF0Y2hlcjogJHVybE1hdGNoZXJGYWN0b3J5LmlzTWF0Y2hlcih3aGF0KSwgcmVnZXg6IHdoYXQgaW5zdGFuY2VvZiBSZWdFeHAgfTtcclxuXHJcbiAgICAgIGZvciAodmFyIG4gaW4gY2hlY2spIHtcclxuICAgICAgICBpZiAoY2hlY2tbbl0pIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bGUoc3RyYXRlZ2llc1tuXSh3aGF0LCBoYW5kbGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkICd3aGF0JyBpbiB3aGVuKClcIik7XHJcbiAgICB9O1xyXG5cclxuICB0aGlzLiRnZXQgPVxyXG4gICAgWyAgICAgICAgJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJyRpbmplY3RvcicsXHJcbiAgICBmdW5jdGlvbiAoJGxvY2F0aW9uLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yKSB7XHJcbiAgICAgIC8vIFRPRE86IE9wdGltaXplIGdyb3VwcyBvZiBydWxlcyB3aXRoIG5vbi1lbXB0eSBwcmVmaXggaW50byBzb21lIHNvcnQgb2YgZGVjaXNpb24gdHJlZVxyXG4gICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2socnVsZSkge1xyXG4gICAgICAgICAgdmFyIGhhbmRsZWQgPSBydWxlKCRpbmplY3RvciwgJGxvY2F0aW9uKTtcclxuICAgICAgICAgIGlmIChoYW5kbGVkKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhoYW5kbGVkKSkgJGxvY2F0aW9uLnJlcGxhY2UoKS51cmwoaGFuZGxlZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbj1ydWxlcy5sZW5ndGgsIGk7XHJcbiAgICAgICAgZm9yIChpPTA7IGk8bjsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoY2hlY2socnVsZXNbaV0pKSByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsd2F5cyBjaGVjayBvdGhlcndpc2UgbGFzdCB0byBhbGxvdyBkeW5hbWljIHVwZGF0ZXMgdG8gdGhlIHNldCBvZiBydWxlc1xyXG4gICAgICAgIGlmIChvdGhlcndpc2UpIGNoZWNrKG90aGVyd2lzZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgdXBkYXRlKTtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfV07XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIucm91dGVyJykucHJvdmlkZXIoJyR1cmxSb3V0ZXInLCAkVXJsUm91dGVyUHJvdmlkZXIpO1xyXG5cclxuJFN0YXRlUHJvdmlkZXIuJGluamVjdCA9IFsnJHVybFJvdXRlclByb3ZpZGVyJywgJyR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyJywgJyRsb2NhdGlvblByb3ZpZGVyJ107XHJcbmZ1bmN0aW9uICRTdGF0ZVByb3ZpZGVyKCAgICR1cmxSb3V0ZXJQcm92aWRlciwgICAkdXJsTWF0Y2hlckZhY3RvcnksICAgICAgICAgICAkbG9jYXRpb25Qcm92aWRlcikge1xyXG5cclxuICB2YXIgcm9vdCwgc3RhdGVzID0ge30sICRzdGF0ZTtcclxuXHJcbiAgLy8gQnVpbGRzIHN0YXRlIHByb3BlcnRpZXMgZnJvbSBkZWZpbml0aW9uIHBhc3NlZCB0byByZWdpc3RlclN0YXRlKClcclxuICB2YXIgc3RhdGVCdWlsZGVyID0ge1xyXG5cclxuICAgIC8vIERlcml2ZSBwYXJlbnQgc3RhdGUgZnJvbSBhIGhpZXJhcmNoaWNhbCBuYW1lIG9ubHkgaWYgJ3BhcmVudCcgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZC5cclxuICAgIC8vIHN0YXRlLmNoaWxkcmVuID0gW107XHJcbiAgICAvLyBpZiAocGFyZW50KSBwYXJlbnQuY2hpbGRyZW4ucHVzaChzdGF0ZSk7XHJcbiAgICBwYXJlbnQ6IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgIGlmIChpc0RlZmluZWQoc3RhdGUucGFyZW50KSAmJiBzdGF0ZS5wYXJlbnQpIHJldHVybiBmaW5kU3RhdGUoc3RhdGUucGFyZW50KTtcclxuICAgICAgLy8gcmVnZXggbWF0Y2hlcyBhbnkgdmFsaWQgY29tcG9zaXRlIHN0YXRlIG5hbWVcclxuICAgICAgLy8gd291bGQgbWF0Y2ggXCJjb250YWN0Lmxpc3RcIiBidXQgbm90IFwiY29udGFjdHNcIlxyXG4gICAgICB2YXIgY29tcG9zaXRlTmFtZSA9IC9eKC4rKVxcLlteLl0rJC8uZXhlYyhzdGF0ZS5uYW1lKTtcclxuICAgICAgcmV0dXJuIGNvbXBvc2l0ZU5hbWUgPyBmaW5kU3RhdGUoY29tcG9zaXRlTmFtZVsxXSkgOiByb290O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBpbmhlcml0ICdkYXRhJyBmcm9tIHBhcmVudCBhbmQgb3ZlcnJpZGUgYnkgb3duIHZhbHVlcyAoaWYgYW55KVxyXG4gICAgZGF0YTogZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgaWYgKHN0YXRlLnBhcmVudCAmJiBzdGF0ZS5wYXJlbnQuZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLmRhdGEgPSBzdGF0ZS5zZWxmLmRhdGEgPSBhbmd1bGFyLmV4dGVuZCh7fSwgc3RhdGUucGFyZW50LmRhdGEsIHN0YXRlLmRhdGEpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBzdGF0ZS5kYXRhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBCdWlsZCBhIFVSTE1hdGNoZXIgaWYgbmVjZXNzYXJ5LCBlaXRoZXIgdmlhIGEgcmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMXHJcbiAgICB1cmw6IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgIHZhciB1cmwgPSBzdGF0ZS51cmw7XHJcblxyXG4gICAgICBpZiAoaXNTdHJpbmcodXJsKSkge1xyXG4gICAgICAgIGlmICh1cmwuY2hhckF0KDApID09ICdeJykge1xyXG4gICAgICAgICAgcmV0dXJuICR1cmxNYXRjaGVyRmFjdG9yeS5jb21waWxlKHVybC5zdWJzdHJpbmcoMSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHN0YXRlLnBhcmVudC5uYXZpZ2FibGUgfHwgcm9vdCkudXJsLmNvbmNhdCh1cmwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoJHVybE1hdGNoZXJGYWN0b3J5LmlzTWF0Y2hlcih1cmwpIHx8IHVybCA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVybCAnXCIgKyB1cmwgKyBcIicgaW4gc3RhdGUgJ1wiICsgc3RhdGUgKyBcIidcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igc3RhdGUgdGhhdCBoYXMgYSBVUkwgKGkuZS4gaXMgbmF2aWdhYmxlKVxyXG4gICAgbmF2aWdhYmxlOiBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICByZXR1cm4gc3RhdGUudXJsID8gc3RhdGUgOiAoc3RhdGUucGFyZW50ID8gc3RhdGUucGFyZW50Lm5hdmlnYWJsZSA6IG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBEZXJpdmUgcGFyYW1ldGVycyBmb3IgdGhpcyBzdGF0ZSBhbmQgZW5zdXJlIHRoZXkncmUgYSBzdXBlci1zZXQgb2YgcGFyZW50J3MgcGFyYW1ldGVyc1xyXG4gICAgcGFyYW1zOiBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICBpZiAoIXN0YXRlLnBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiBzdGF0ZS51cmwgPyBzdGF0ZS51cmwucGFyYW1ldGVycygpIDogc3RhdGUucGFyZW50LnBhcmFtcztcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWlzQXJyYXkoc3RhdGUucGFyYW1zKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbXMgaW4gc3RhdGUgJ1wiICsgc3RhdGUgKyBcIidcIik7XHJcbiAgICAgIGlmIChzdGF0ZS51cmwpIHRocm93IG5ldyBFcnJvcihcIkJvdGggcGFyYW1zIGFuZCB1cmwgc3BlY2ljaWZpZWQgaW4gc3RhdGUgJ1wiICsgc3RhdGUgKyBcIidcIik7XHJcbiAgICAgIHJldHVybiBzdGF0ZS5wYXJhbXM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIElmIHRoZXJlIGlzIG5vIGV4cGxpY2l0IG11bHRpLXZpZXcgY29uZmlndXJhdGlvbiwgbWFrZSBvbmUgdXAgc28gd2UgZG9uJ3QgaGF2ZVxyXG4gICAgLy8gdG8gaGFuZGxlIGJvdGggY2FzZXMgaW4gdGhlIHZpZXcgZGlyZWN0aXZlIGxhdGVyLiBOb3RlIHRoYXQgaGF2aW5nIGFuIGV4cGxpY2l0XHJcbiAgICAvLyAndmlld3MnIHByb3BlcnR5IHdpbGwgbWVhbiB0aGUgZGVmYXVsdCB1bm5hbWVkIHZpZXcgcHJvcGVydGllcyBhcmUgaWdub3JlZC4gVGhpc1xyXG4gICAgLy8gaXMgYWxzbyBhIGdvb2QgdGltZSB0byByZXNvbHZlIHZpZXcgbmFtZXMgdG8gYWJzb2x1dGUgbmFtZXMsIHNvIGV2ZXJ5dGhpbmcgaXMgYVxyXG4gICAgLy8gc3RyYWlnaHQgbG9va3VwIGF0IGxpbmsgdGltZS5cclxuICAgIHZpZXdzOiBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICB2YXIgdmlld3MgPSB7fTtcclxuXHJcbiAgICAgIGZvckVhY2goaXNEZWZpbmVkKHN0YXRlLnZpZXdzKSA/IHN0YXRlLnZpZXdzIDogeyAnJzogc3RhdGUgfSwgZnVuY3Rpb24gKHZpZXcsIG5hbWUpIHtcclxuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCdAJykgPCAwKSBuYW1lICs9ICdAJyArIHN0YXRlLnBhcmVudC5uYW1lO1xyXG4gICAgICAgIHZpZXdzW25hbWVdID0gdmlldztcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB2aWV3cztcclxuICAgIH0sXHJcblxyXG4gICAgb3duUGFyYW1zOiBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICBpZiAoIXN0YXRlLnBhcmVudCkge1xyXG4gICAgICAgIHJldHVybiBzdGF0ZS5wYXJhbXM7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSB7fTsgZm9yRWFjaChzdGF0ZS5wYXJhbXMsIGZ1bmN0aW9uIChwKSB7IHBhcmFtTmFtZXNbcF0gPSB0cnVlOyB9KTtcclxuXHJcbiAgICAgIGZvckVhY2goc3RhdGUucGFyZW50LnBhcmFtcywgZnVuY3Rpb24gKHApIHtcclxuICAgICAgICBpZiAoIXBhcmFtTmFtZXNbcF0pIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyICdcIiArIHAgKyBcIicgaW4gc3RhdGUgJ1wiICsgc3RhdGUubmFtZSArIFwiJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGFyYW1OYW1lc1twXSA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIG93blBhcmFtcyA9IFtdO1xyXG5cclxuICAgICAgZm9yRWFjaChwYXJhbU5hbWVzLCBmdW5jdGlvbiAob3duLCBwKSB7XHJcbiAgICAgICAgaWYgKG93bikgb3duUGFyYW1zLnB1c2gocCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gb3duUGFyYW1zO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBLZWVwIGEgZnVsbCBwYXRoIGZyb20gdGhlIHJvb3QgZG93biB0byB0aGlzIHN0YXRlIGFzIHRoaXMgaXMgbmVlZGVkIGZvciBzdGF0ZSBhY3RpdmF0aW9uLlxyXG4gICAgcGF0aDogZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgcmV0dXJuIHN0YXRlLnBhcmVudCA/IHN0YXRlLnBhcmVudC5wYXRoLmNvbmNhdChzdGF0ZSkgOiBbXTsgLy8gZXhjbHVkZSByb290IGZyb20gcGF0aFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTcGVlZCB1cCAkc3RhdGUuY29udGFpbnMoKSBhcyBpdCdzIHVzZWQgYSBsb3RcclxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbihzdGF0ZSkge1xyXG4gICAgICB2YXIgaW5jbHVkZXMgPSBzdGF0ZS5wYXJlbnQgPyBleHRlbmQoe30sIHN0YXRlLnBhcmVudC5pbmNsdWRlcykgOiB7fTtcclxuICAgICAgaW5jbHVkZXNbc3RhdGUubmFtZV0gPSB0cnVlO1xyXG4gICAgICByZXR1cm4gaW5jbHVkZXM7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGZpbmRTdGF0ZShzdGF0ZU9yTmFtZSwgYmFzZSkge1xyXG4gICAgdmFyIGlzU3RyID0gaXNTdHJpbmcoc3RhdGVPck5hbWUpLFxyXG4gICAgICAgIG5hbWUgID0gaXNTdHIgPyBzdGF0ZU9yTmFtZSA6IHN0YXRlT3JOYW1lLm5hbWUsXHJcbiAgICAgICAgcGF0aCAgPSBuYW1lLmluZGV4T2YoXCIuXCIpID09PSAwIHx8IG5hbWUuaW5kZXhPZihcIl5cIikgPT09IDA7XHJcblxyXG4gICAgaWYgKHBhdGgpIHtcclxuICAgICAgaWYgKCFiYXNlKSB0aHJvdyBuZXcgRXJyb3IoXCJObyByZWZlcmVuY2UgcG9pbnQgZ2l2ZW4gZm9yIHBhdGggJ1wiICArIG5hbWUgKyBcIidcIik7XHJcbiAgICAgIHZhciByZWwgPSBuYW1lLnNwbGl0KFwiLlwiKSwgaSA9IDAsIHBhdGhMZW5ndGggPSByZWwubGVuZ3RoLCBjdXJyZW50ID0gYmFzZTtcclxuXHJcbiAgICAgIGZvciAoOyBpIDwgcGF0aExlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHJlbFtpXSA9PT0gXCJcIiAmJiBpID09PSAwKSB7XHJcbiAgICAgICAgICBjdXJyZW50ID0gYmFzZTtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVsW2ldID09PSBcIl5cIikge1xyXG4gICAgICAgICAgaWYgKCFjdXJyZW50LnBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwiUGF0aCAnXCIgKyBuYW1lICsgXCInIG5vdCB2YWxpZCBmb3Igc3RhdGUgJ1wiICsgYmFzZS5uYW1lICsgXCInXCIpO1xyXG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHJlbCA9IHJlbC5zbGljZShpKS5qb2luKFwiLlwiKTtcclxuICAgICAgbmFtZSA9IGN1cnJlbnQubmFtZSArIChjdXJyZW50Lm5hbWUgJiYgcmVsID8gXCIuXCIgOiBcIlwiKSArIHJlbDtcclxuICAgIH1cclxuICAgIHZhciBzdGF0ZSA9IHN0YXRlc1tuYW1lXTtcclxuXHJcbiAgICBpZiAoc3RhdGUgJiYgKGlzU3RyIHx8ICghaXNTdHIgJiYgKHN0YXRlID09PSBzdGF0ZU9yTmFtZSB8fCBzdGF0ZS5zZWxmID09PSBzdGF0ZU9yTmFtZSkpKSkge1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyU3RhdGUoc3RhdGUpIHtcclxuICAgIC8vIFdyYXAgYSBuZXcgb2JqZWN0IGFyb3VuZCB0aGUgc3RhdGUgc28gd2UgY2FuIHN0b3JlIG91ciBwcml2YXRlIGRldGFpbHMgZWFzaWx5LlxyXG4gICAgc3RhdGUgPSBpbmhlcml0KHN0YXRlLCB7XHJcbiAgICAgIHNlbGY6IHN0YXRlLFxyXG4gICAgICByZXNvbHZlOiBzdGF0ZS5yZXNvbHZlIHx8IHt9LFxyXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLm5hbWU7IH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBuYW1lID0gc3RhdGUubmFtZTtcclxuICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgbmFtZS5pbmRleE9mKCdAJykgPj0gMCkgdGhyb3cgbmV3IEVycm9yKFwiU3RhdGUgbXVzdCBoYXZlIGEgdmFsaWQgbmFtZVwiKTtcclxuICAgIGlmIChzdGF0ZXNbbmFtZV0pIHRocm93IG5ldyBFcnJvcihcIlN0YXRlICdcIiArIG5hbWUgKyBcIicnIGlzIGFscmVhZHkgZGVmaW5lZFwiKTtcclxuXHJcbiAgICBmb3IgKHZhciBrZXkgaW4gc3RhdGVCdWlsZGVyKSB7XHJcbiAgICAgIHN0YXRlW2tleV0gPSBzdGF0ZUJ1aWxkZXJba2V5XShzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBzdGF0ZXNbbmFtZV0gPSBzdGF0ZTtcclxuXHJcbiAgICAvLyBSZWdpc3RlciB0aGUgc3RhdGUgaW4gdGhlIGdsb2JhbCBzdGF0ZSBsaXN0IGFuZCB3aXRoICR1cmxSb3V0ZXIgaWYgbmVjZXNzYXJ5LlxyXG4gICAgaWYgKCFzdGF0ZVsnYWJzdHJhY3QnXSAmJiBzdGF0ZS51cmwpIHtcclxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oc3RhdGUudXJsLCBbJyRtYXRjaCcsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICBpZiAoJHN0YXRlLiRjdXJyZW50Lm5hdmlnYWJsZSAhPSBzdGF0ZSB8fCAhZXF1YWxGb3JLZXlzKCRtYXRjaCwgJHN0YXRlUGFyYW1zKSkge1xyXG4gICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbyhzdGF0ZSwgJG1hdGNoLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gSW1wbGljaXQgcm9vdCBzdGF0ZSB0aGF0IGlzIGFsd2F5cyBhY3RpdmVcclxuICByb290ID0gcmVnaXN0ZXJTdGF0ZSh7XHJcbiAgICBuYW1lOiAnJyxcclxuICAgIHVybDogJ14nLFxyXG4gICAgdmlld3M6IG51bGwsXHJcbiAgICAnYWJzdHJhY3QnOiB0cnVlXHJcbiAgfSk7XHJcbiAgcm9vdC5uYXZpZ2FibGUgPSBudWxsO1xyXG5cclxuXHJcbiAgLy8gLnN0YXRlKHN0YXRlKVxyXG4gIC8vIC5zdGF0ZShuYW1lLCBzdGF0ZSlcclxuICB0aGlzLnN0YXRlID0gc3RhdGU7XHJcbiAgZnVuY3Rpb24gc3RhdGUobmFtZSwgZGVmaW5pdGlvbikge1xyXG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIGRlZmluaXRpb24gPSBuYW1lO1xyXG4gICAgZWxzZSBkZWZpbml0aW9uLm5hbWUgPSBuYW1lO1xyXG4gICAgcmVnaXN0ZXJTdGF0ZShkZWZpbml0aW9uKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gJHVybFJvdXRlciBpcyBpbmplY3RlZCBqdXN0IHRvIGVuc3VyZSBpdCBnZXRzIGluc3RhbnRpYXRlZFxyXG4gIHRoaXMuJGdldCA9ICRnZXQ7XHJcbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRxJywgJyR2aWV3JywgJyRpbmplY3RvcicsICckcmVzb2x2ZScsICckc3RhdGVQYXJhbXMnLCAnJGxvY2F0aW9uJywgJyR1cmxSb3V0ZXInXTtcclxuICBmdW5jdGlvbiAkZ2V0KCAgICRyb290U2NvcGUsICAgJHEsICAgJHZpZXcsICAgJGluamVjdG9yLCAgICRyZXNvbHZlLCAgICRzdGF0ZVBhcmFtcywgICAkbG9jYXRpb24sICAgJHVybFJvdXRlcikge1xyXG5cclxuICAgIHZhciBUcmFuc2l0aW9uU3VwZXJzZWRlZCA9ICRxLnJlamVjdChuZXcgRXJyb3IoJ3RyYW5zaXRpb24gc3VwZXJzZWRlZCcpKTtcclxuICAgIHZhciBUcmFuc2l0aW9uUHJldmVudGVkID0gJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBwcmV2ZW50ZWQnKSk7XHJcblxyXG4gICAgcm9vdC5sb2NhbHMgPSB7IHJlc29sdmU6IG51bGwsIGdsb2JhbHM6IHsgJHN0YXRlUGFyYW1zOiB7fSB9IH07XHJcbiAgICAkc3RhdGUgPSB7XHJcbiAgICAgIHBhcmFtczoge30sXHJcbiAgICAgIGN1cnJlbnQ6IHJvb3Quc2VsZixcclxuICAgICAgJGN1cnJlbnQ6IHJvb3QsXHJcbiAgICAgIHRyYW5zaXRpb246IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgJHN0YXRlLmdvID0gZnVuY3Rpb24gZ28odG8sIHBhcmFtcywgb3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uVG8odG8sIHBhcmFtcywgZXh0ZW5kKHsgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCB9LCBvcHRpb25zKSk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzdGF0ZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8odG8sIHRvUGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICAgIGlmICghaXNEZWZpbmVkKG9wdGlvbnMpKSBvcHRpb25zID0gKG9wdGlvbnMgPT09IHRydWUgfHwgb3B0aW9ucyA9PT0gZmFsc2UpID8geyBsb2NhdGlvbjogb3B0aW9ucyB9IDoge307XHJcbiAgICAgIHRvUGFyYW1zID0gdG9QYXJhbXMgfHwge307XHJcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoeyBsb2NhdGlvbjogdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIHJlbGF0aXZlOiBudWxsIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgdmFyIHRvU3RhdGUgPSBmaW5kU3RhdGUodG8sIG9wdGlvbnMucmVsYXRpdmUpO1xyXG4gICAgICBpZiAoIWlzRGVmaW5lZCh0b1N0YXRlKSkgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBzdGF0ZSBcIiArIHRvU3RhdGUpO1xyXG4gICAgICBpZiAodG9TdGF0ZVsnYWJzdHJhY3QnXSkgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHRyYW5zaXRpb24gdG8gYWJzdHJhY3Qgc3RhdGUgJ1wiICsgdG8gKyBcIidcIik7XHJcbiAgICAgIGlmIChvcHRpb25zLmluaGVyaXQpIHRvUGFyYW1zID0gaW5oZXJpdFBhcmFtcygkc3RhdGVQYXJhbXMsIHRvUGFyYW1zIHx8IHt9LCAkc3RhdGUuJGN1cnJlbnQsIHRvU3RhdGUpO1xyXG4gICAgICB0byA9IHRvU3RhdGU7XHJcblxyXG4gICAgICB2YXIgdG9QYXRoID0gdG8ucGF0aCxcclxuICAgICAgICAgIGZyb20gPSAkc3RhdGUuJGN1cnJlbnQsIGZyb21QYXJhbXMgPSAkc3RhdGUucGFyYW1zLCBmcm9tUGF0aCA9IGZyb20ucGF0aDtcclxuXHJcbiAgICAgIC8vIFN0YXJ0aW5nIGZyb20gdGhlIHJvb3Qgb2YgdGhlIHBhdGgsIGtlZXAgYWxsIGxldmVscyB0aGF0IGhhdmVuJ3QgY2hhbmdlZFxyXG4gICAgICB2YXIga2VlcCwgc3RhdGUsIGxvY2FscyA9IHJvb3QubG9jYWxzLCB0b0xvY2FscyA9IFtdO1xyXG4gICAgICBmb3IgKGtlZXAgPSAwLCBzdGF0ZSA9IHRvUGF0aFtrZWVwXTtcclxuICAgICAgICAgICBzdGF0ZSAmJiBzdGF0ZSA9PT0gZnJvbVBhdGhba2VlcF0gJiYgZXF1YWxGb3JLZXlzKHRvUGFyYW1zLCBmcm9tUGFyYW1zLCBzdGF0ZS5vd25QYXJhbXMpO1xyXG4gICAgICAgICAgIGtlZXArKywgc3RhdGUgPSB0b1BhdGhba2VlcF0pIHtcclxuICAgICAgICBsb2NhbHMgPSB0b0xvY2Fsc1trZWVwXSA9IHN0YXRlLmxvY2FscztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgd2UncmUgZ29pbmcgdG8gdGhlIHNhbWUgc3RhdGUgYW5kIGFsbCBsb2NhbHMgYXJlIGtlcHQsIHdlJ3ZlIGdvdCBub3RoaW5nIHRvIGRvLlxyXG4gICAgICAvLyBCdXQgY2xlYXIgJ3RyYW5zaXRpb24nLCBhcyB3ZSBzdGlsbCB3YW50IHRvIGNhbmNlbCBhbnkgb3RoZXIgcGVuZGluZyB0cmFuc2l0aW9ucy5cclxuICAgICAgLy8gVE9ETzogV2UgbWF5IG5vdCB3YW50IHRvIGJ1bXAgJ3RyYW5zaXRpb24nIGlmIHdlJ3JlIGNhbGxlZCBmcm9tIGEgbG9jYXRpb24gY2hhbmdlIHRoYXQgd2UndmUgaW5pdGlhdGVkIG91cnNlbHZlcyxcclxuICAgICAgLy8gYmVjYXVzZSB3ZSBtaWdodCBhY2NpZGVudGFsbHkgYWJvcnQgYSBsZWdpdGltYXRlIHRyYW5zaXRpb24gaW5pdGlhdGVkIGZyb20gY29kZT9cclxuICAgICAgaWYgKHRvID09PSBmcm9tICYmIGxvY2FscyA9PT0gZnJvbS5sb2NhbHMpIHtcclxuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuICRxLndoZW4oJHN0YXRlLmN1cnJlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBOb3JtYWxpemUvZmlsdGVyIHBhcmFtZXRlcnMgYmVmb3JlIHdlIHBhc3MgdGhlbSB0byBldmVudCBoYW5kbGVycyBldGMuXHJcbiAgICAgIHRvUGFyYW1zID0gbm9ybWFsaXplKHRvLnBhcmFtcywgdG9QYXJhbXMgfHwge30pO1xyXG5cclxuICAgICAgLy8gQnJvYWRjYXN0IHN0YXJ0IGV2ZW50IGFuZCBjYW5jZWwgdGhlIHRyYW5zaXRpb24gaWYgcmVxdWVzdGVkXHJcbiAgICAgIHZhciBldnQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZVN0YXJ0JywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcyk7XHJcbiAgICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuIFRyYW5zaXRpb25QcmV2ZW50ZWQ7XHJcblxyXG4gICAgICAvLyBSZXNvbHZlIGxvY2FscyBmb3IgdGhlIHJlbWFpbmluZyBzdGF0ZXMsIGJ1dCBkb24ndCB1cGRhdGUgYW55IGdsb2JhbCBzdGF0ZSBqdXN0XHJcbiAgICAgIC8vIHlldCAtLSBpZiBhbnl0aGluZyBmYWlscyB0byByZXNvbHZlIHRoZSBjdXJyZW50IHN0YXRlIG5lZWRzIHRvIHJlbWFpbiB1bnRvdWNoZWQuXHJcbiAgICAgIC8vIFdlIGFsc28gc2V0IHVwIGFuIGluaGVyaXRhbmNlIGNoYWluIGZvciB0aGUgbG9jYWxzIGhlcmUuIFRoaXMgYWxsb3dzIHRoZSB2aWV3IGRpcmVjdGl2ZVxyXG4gICAgICAvLyB0byBxdWlja2x5IGxvb2sgdXAgdGhlIGNvcnJlY3QgZGVmaW5pdGlvbiBmb3IgZWFjaCB2aWV3IGluIHRoZSBjdXJyZW50IHN0YXRlLiBFdmVuXHJcbiAgICAgIC8vIHRob3VnaCB3ZSBjcmVhdGUgdGhlIGxvY2FscyBvYmplY3QgaXRzZWxmIG91dHNpZGUgcmVzb2x2ZVN0YXRlKCksIGl0IGlzIGluaXRpYWxseVxyXG4gICAgICAvLyBlbXB0eSBhbmQgZ2V0cyBmaWxsZWQgYXN5bmNocm9ub3VzbHkuIFdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgcHJvbWlzZSBmb3IgdGhlXHJcbiAgICAgIC8vIChmdWxseSByZXNvbHZlZCkgY3VycmVudCBsb2NhbHMsIGFuZCBwYXNzIHRoaXMgZG93biB0aGUgY2hhaW4uXHJcbiAgICAgIHZhciByZXNvbHZlZCA9ICRxLndoZW4obG9jYWxzKTtcclxuICAgICAgZm9yICh2YXIgbD1rZWVwOyBsPHRvUGF0aC5sZW5ndGg7IGwrKywgc3RhdGU9dG9QYXRoW2xdKSB7XHJcbiAgICAgICAgbG9jYWxzID0gdG9Mb2NhbHNbbF0gPSBpbmhlcml0KGxvY2Fscyk7XHJcbiAgICAgICAgcmVzb2x2ZWQgPSByZXNvbHZlU3RhdGUoc3RhdGUsIHRvUGFyYW1zLCBzdGF0ZT09PXRvLCByZXNvbHZlZCwgbG9jYWxzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gT25jZSBldmVyeXRoaW5nIGlzIHJlc29sdmVkLCB3ZXIgYXJlIHJlYWR5IHRvIHBlcmZvcm0gdGhlIGFjdHVhbCB0cmFuc2l0aW9uXHJcbiAgICAgIC8vIGFuZCByZXR1cm4gYSBwcm9taXNlIGZvciB0aGUgbmV3IHN0YXRlLiBXZSBhbHNvIGtlZXAgdHJhY2sgb2Ygd2hhdCB0aGVcclxuICAgICAgLy8gY3VycmVudCBwcm9taXNlIGlzLCBzbyB0aGF0IHdlIGNhbiBkZXRlY3Qgb3ZlcmxhcHBpbmcgdHJhbnNpdGlvbnMgYW5kXHJcbiAgICAgIC8vIGtlZXAgb25seSB0aGUgb3V0Y29tZSBvZiB0aGUgbGFzdCB0cmFuc2l0aW9uLlxyXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRzdGF0ZS50cmFuc2l0aW9uID0gcmVzb2x2ZWQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGwsIGVudGVyaW5nLCBleGl0aW5nO1xyXG5cclxuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcclxuXHJcbiAgICAgICAgLy8gRXhpdCAnZnJvbScgc3RhdGVzIG5vdCBrZXB0XHJcbiAgICAgICAgZm9yIChsPWZyb21QYXRoLmxlbmd0aC0xOyBsPj1rZWVwOyBsLS0pIHtcclxuICAgICAgICAgIGV4aXRpbmcgPSBmcm9tUGF0aFtsXTtcclxuICAgICAgICAgIGlmIChleGl0aW5nLnNlbGYub25FeGl0KSB7XHJcbiAgICAgICAgICAgICRpbmplY3Rvci5pbnZva2UoZXhpdGluZy5zZWxmLm9uRXhpdCwgZXhpdGluZy5zZWxmLCBleGl0aW5nLmxvY2Fscy5nbG9iYWxzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGV4aXRpbmcubG9jYWxzID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVudGVyICd0bycgc3RhdGVzIG5vdCBrZXB0XHJcbiAgICAgICAgZm9yIChsPWtlZXA7IGw8dG9QYXRoLmxlbmd0aDsgbCsrKSB7XHJcbiAgICAgICAgICBlbnRlcmluZyA9IHRvUGF0aFtsXTtcclxuICAgICAgICAgIGVudGVyaW5nLmxvY2FscyA9IHRvTG9jYWxzW2xdO1xyXG4gICAgICAgICAgaWYgKGVudGVyaW5nLnNlbGYub25FbnRlcikge1xyXG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGVudGVyaW5nLnNlbGYub25FbnRlciwgZW50ZXJpbmcuc2VsZiwgZW50ZXJpbmcubG9jYWxzLmdsb2JhbHMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGdsb2JhbHMgaW4gJHN0YXRlXHJcbiAgICAgICAgJHN0YXRlLiRjdXJyZW50ID0gdG87XHJcbiAgICAgICAgJHN0YXRlLmN1cnJlbnQgPSB0by5zZWxmO1xyXG4gICAgICAgICRzdGF0ZS5wYXJhbXMgPSB0b1BhcmFtcztcclxuICAgICAgICBjb3B5KCRzdGF0ZS5wYXJhbXMsICRzdGF0ZVBhcmFtcyk7XHJcbiAgICAgICAgJHN0YXRlLnRyYW5zaXRpb24gPSBudWxsO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgJGxvY2F0aW9uXHJcbiAgICAgICAgdmFyIHRvTmF2ID0gdG8ubmF2aWdhYmxlO1xyXG4gICAgICAgIGlmIChvcHRpb25zLmxvY2F0aW9uICYmIHRvTmF2KSB7XHJcbiAgICAgICAgICAkbG9jYXRpb24udXJsKHRvTmF2LnVybC5mb3JtYXQodG9OYXYubG9jYWxzLmdsb2JhbHMuJHN0YXRlUGFyYW1zKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICRzdGF0ZS5jdXJyZW50O1xyXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcclxuXHJcbiAgICAgICAgJHN0YXRlLnRyYW5zaXRpb24gPSBudWxsO1xyXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlQ2hhbmdlRXJyb3InLCB0by5zZWxmLCB0b1BhcmFtcywgZnJvbS5zZWxmLCBmcm9tUGFyYW1zLCBlcnJvcik7XHJcblxyXG4gICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc3RhdGUuaXMgPSBmdW5jdGlvbiBpcyhzdGF0ZU9yTmFtZSkge1xyXG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUpO1xyXG4gICAgICByZXR1cm4gKGlzRGVmaW5lZChzdGF0ZSkpID8gJHN0YXRlLiRjdXJyZW50ID09PSBzdGF0ZSA6IHVuZGVmaW5lZDtcclxuICAgIH07XHJcblxyXG4gICAgJHN0YXRlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMoc3RhdGVPck5hbWUpIHtcclxuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lKTtcclxuICAgICAgcmV0dXJuIChpc0RlZmluZWQoc3RhdGUpKSA/IGlzRGVmaW5lZCgkc3RhdGUuJGN1cnJlbnQuaW5jbHVkZXNbc3RhdGUubmFtZV0pIDogdW5kZWZpbmVkO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc3RhdGUuaHJlZiA9IGZ1bmN0aW9uIGhyZWYoc3RhdGVPck5hbWUsIHBhcmFtcywgb3B0aW9ucykge1xyXG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHsgbG9zc3k6IHRydWUsIGluaGVyaXQ6IGZhbHNlLCByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMgfHwge30pO1xyXG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIG9wdGlvbnMucmVsYXRpdmUpO1xyXG4gICAgICBpZiAoIWlzRGVmaW5lZChzdGF0ZSkpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgcGFyYW1zID0gaW5oZXJpdFBhcmFtcygkc3RhdGVQYXJhbXMsIHBhcmFtcyB8fCB7fSwgJHN0YXRlLiRjdXJyZW50LCBzdGF0ZSk7XHJcbiAgICAgIHZhciBuYXYgPSAoc3RhdGUgJiYgb3B0aW9ucy5sb3NzeSkgPyBzdGF0ZS5uYXZpZ2FibGUgOiBzdGF0ZTtcclxuICAgICAgdmFyIHVybCA9IChuYXYgJiYgbmF2LnVybCkgPyBuYXYudXJsLmZvcm1hdChub3JtYWxpemUoc3RhdGUucGFyYW1zLCBwYXJhbXMgfHwge30pKSA6IG51bGw7XHJcbiAgICAgIHJldHVybiAhJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKCkgJiYgdXJsID8gXCIjXCIgKyB1cmwgOiB1cmw7XHJcbiAgICB9O1xyXG5cclxuICAgICRzdGF0ZS5nZXQgPSBmdW5jdGlvbiAoc3RhdGVPck5hbWUpIHtcclxuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lKTtcclxuICAgICAgcmV0dXJuIChzdGF0ZSAmJiBzdGF0ZS5zZWxmKSA/IHN0YXRlLnNlbGYgOiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiByZXNvbHZlU3RhdGUoc3RhdGUsIHBhcmFtcywgcGFyYW1zQXJlRmlsdGVyZWQsIGluaGVyaXRlZCwgZHN0KSB7XHJcbiAgICAgIC8vIE1ha2UgYSByZXN0cmljdGVkICRzdGF0ZVBhcmFtcyB3aXRoIG9ubHkgdGhlIHBhcmFtZXRlcnMgdGhhdCBhcHBseSB0byB0aGlzIHN0YXRlIGlmXHJcbiAgICAgIC8vIG5lY2Vzc2FyeS4gSW4gYWRkaXRpb24gdG8gYmVpbmcgYXZhaWxhYmxlIHRvIHRoZSBjb250cm9sbGVyIGFuZCBvbkVudGVyL29uRXhpdCBjYWxsYmFja3MsXHJcbiAgICAgIC8vIHdlIGFsc28gbmVlZCAkc3RhdGVQYXJhbXMgdG8gYmUgYXZhaWxhYmxlIGZvciBhbnkgJGluamVjdG9yIGNhbGxzIHdlIG1ha2UgZHVyaW5nIHRoZVxyXG4gICAgICAvLyBkZXBlbmRlbmN5IHJlc29sdXRpb24gcHJvY2Vzcy5cclxuICAgICAgdmFyICRzdGF0ZVBhcmFtcyA9IChwYXJhbXNBcmVGaWx0ZXJlZCkgPyBwYXJhbXMgOiBmaWx0ZXJCeUtleXMoc3RhdGUucGFyYW1zLCBwYXJhbXMpO1xyXG4gICAgICB2YXIgbG9jYWxzID0geyAkc3RhdGVQYXJhbXM6ICRzdGF0ZVBhcmFtcyB9O1xyXG5cclxuICAgICAgLy8gUmVzb2x2ZSAnZ2xvYmFsJyBkZXBlbmRlbmNpZXMgZm9yIHRoZSBzdGF0ZSwgaS5lLiB0aG9zZSBub3Qgc3BlY2lmaWMgdG8gYSB2aWV3LlxyXG4gICAgICAvLyBXZSdyZSBhbHNvIGluY2x1ZGluZyAkc3RhdGVQYXJhbXMgaW4gdGhpczsgdGhhdCB3YXkgdGhlIHBhcmFtZXRlcnMgYXJlIHJlc3RyaWN0ZWRcclxuICAgICAgLy8gdG8gdGhlIHNldCB0aGF0IHNob3VsZCBiZSB2aXNpYmxlIHRvIHRoZSBzdGF0ZSwgYW5kIGFyZSBpbmRlcGVuZGVudCBvZiB3aGVuIHdlIHVwZGF0ZVxyXG4gICAgICAvLyB0aGUgZ2xvYmFsICRzdGF0ZSBhbmQgJHN0YXRlUGFyYW1zIHZhbHVlcy5cclxuICAgICAgZHN0LnJlc29sdmUgPSAkcmVzb2x2ZS5yZXNvbHZlKHN0YXRlLnJlc29sdmUsIGxvY2FscywgZHN0LnJlc29sdmUsIHN0YXRlKTtcclxuICAgICAgdmFyIHByb21pc2VzID0gWyBkc3QucmVzb2x2ZS50aGVuKGZ1bmN0aW9uIChnbG9iYWxzKSB7XHJcbiAgICAgICAgZHN0Lmdsb2JhbHMgPSBnbG9iYWxzO1xyXG4gICAgICB9KSBdO1xyXG4gICAgICBpZiAoaW5oZXJpdGVkKSBwcm9taXNlcy5wdXNoKGluaGVyaXRlZCk7XHJcblxyXG4gICAgICAvLyBSZXNvbHZlIHRlbXBsYXRlIGFuZCBkZXBlbmRlbmNpZXMgZm9yIGFsbCB2aWV3cy5cclxuICAgICAgZm9yRWFjaChzdGF0ZS52aWV3cywgZnVuY3Rpb24gKHZpZXcsIG5hbWUpIHtcclxuICAgICAgICB2YXIgaW5qZWN0YWJsZXMgPSAodmlldy5yZXNvbHZlICYmIHZpZXcucmVzb2x2ZSAhPT0gc3RhdGUucmVzb2x2ZSA/IHZpZXcucmVzb2x2ZSA6IHt9KTtcclxuICAgICAgICBpbmplY3RhYmxlcy4kdGVtcGxhdGUgPSBbIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiAkdmlldy5sb2FkKG5hbWUsIHsgdmlldzogdmlldywgbG9jYWxzOiBsb2NhbHMsIHBhcmFtczogJHN0YXRlUGFyYW1zLCBub3RpZnk6IGZhbHNlIH0pIHx8ICcnO1xyXG4gICAgICAgIH1dO1xyXG5cclxuICAgICAgICBwcm9taXNlcy5wdXNoKCRyZXNvbHZlLnJlc29sdmUoaW5qZWN0YWJsZXMsIGxvY2FscywgZHN0LnJlc29sdmUsIHN0YXRlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgIC8vIFJlZmVyZW5jZXMgdG8gdGhlIGNvbnRyb2xsZXIgKG9ubHkgaW5zdGFudGlhdGVkIGF0IGxpbmsgdGltZSlcclxuICAgICAgICAgIHJlc3VsdC4kJGNvbnRyb2xsZXIgPSB2aWV3LmNvbnRyb2xsZXI7XHJcbiAgICAgICAgICAvLyBQcm92aWRlIGFjY2VzcyB0byB0aGUgc3RhdGUgaXRzZWxmIGZvciBpbnRlcm5hbCB1c2VcclxuICAgICAgICAgIHJlc3VsdC4kJHN0YXRlID0gc3RhdGU7XHJcbiAgICAgICAgICBkc3RbbmFtZV0gPSByZXN1bHQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFdhaXQgZm9yIGFsbCB0aGUgcHJvbWlzZXMgYW5kIHRoZW4gcmV0dXJuIHRoZSBhY3RpdmF0aW9uIG9iamVjdFxyXG4gICAgICByZXR1cm4gJHEuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9ybWFsaXplKGtleXMsIHZhbHVlcykge1xyXG4gICAgdmFyIG5vcm1hbGl6ZWQgPSB7fTtcclxuXHJcbiAgICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tuYW1lXTtcclxuICAgICAgbm9ybWFsaXplZFtuYW1lXSA9ICh2YWx1ZSAhPSBudWxsKSA/IFN0cmluZyh2YWx1ZSkgOiBudWxsO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVxdWFsRm9yS2V5cyhhLCBiLCBrZXlzKSB7XHJcbiAgICAvLyBJZiBrZXlzIG5vdCBwcm92aWRlZCwgYXNzdW1lIGtleXMgZnJvbSBvYmplY3QgJ2EnXHJcbiAgICBpZiAoIWtleXMpIHtcclxuICAgICAga2V5cyA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBuIGluIGEpIGtleXMucHVzaChuKTsgLy8gVXNlZCBpbnN0ZWFkIG9mIE9iamVjdC5rZXlzKCkgZm9yIElFOCBjb21wYXRpYmlsaXR5XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgaT0wOyBpPGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGsgPSBrZXlzW2ldO1xyXG4gICAgICBpZiAoYVtrXSAhPSBiW2tdKSByZXR1cm4gZmFsc2U7IC8vIE5vdCAnPT09JywgdmFsdWVzIGFyZW4ndCBuZWNlc3NhcmlseSBub3JtYWxpemVkXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZpbHRlckJ5S2V5cyhrZXlzLCB2YWx1ZXMpIHtcclxuICAgIHZhciBmaWx0ZXJlZCA9IHt9O1xyXG5cclxuICAgIGZvckVhY2goa2V5cywgZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgZmlsdGVyZWRbbmFtZV0gPSB2YWx1ZXNbbmFtZV07XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmaWx0ZXJlZDtcclxuICB9XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKVxyXG4gIC52YWx1ZSgnJHN0YXRlUGFyYW1zJywge30pXHJcbiAgLnByb3ZpZGVyKCckc3RhdGUnLCAkU3RhdGVQcm92aWRlcik7XHJcblxyXG5cclxuJFZpZXdQcm92aWRlci4kaW5qZWN0ID0gW107XHJcbmZ1bmN0aW9uICRWaWV3UHJvdmlkZXIoKSB7XHJcblxyXG4gIHRoaXMuJGdldCA9ICRnZXQ7XHJcbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR0ZW1wbGF0ZUZhY3RvcnknXTtcclxuICBmdW5jdGlvbiAkZ2V0KCAgICRyb290U2NvcGUsICAgJHRlbXBsYXRlRmFjdG9yeSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLy8gJHZpZXcubG9hZCgnZnVsbC52aWV3TmFtZScsIHsgdGVtcGxhdGU6IC4uLiwgY29udHJvbGxlcjogLi4uLCByZXNvbHZlOiAuLi4sIGFzeW5jOiBmYWxzZSwgcGFyYW1zOiAuLi4gfSlcclxuICAgICAgbG9hZDogZnVuY3Rpb24gbG9hZChuYW1lLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCwgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICB0ZW1wbGF0ZTogbnVsbCwgY29udHJvbGxlcjogbnVsbCwgdmlldzogbnVsbCwgbG9jYWxzOiBudWxsLCBub3RpZnk6IHRydWUsIGFzeW5jOiB0cnVlLCBwYXJhbXM6IHt9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnMudmlldykge1xyXG4gICAgICAgICAgcmVzdWx0ID0gJHRlbXBsYXRlRmFjdG9yeS5mcm9tQ29uZmlnKG9wdGlvbnMudmlldywgb3B0aW9ucy5wYXJhbXMsIG9wdGlvbnMubG9jYWxzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBvcHRpb25zLm5vdGlmeSkge1xyXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckdmlld0NvbnRlbnRMb2FkaW5nJywgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJykucHJvdmlkZXIoJyR2aWV3JywgJFZpZXdQcm92aWRlcik7XHJcblxyXG5cclxuJFZpZXdEaXJlY3RpdmUuJGluamVjdCA9IFsnJHN0YXRlJywgJyRjb21waWxlJywgJyRjb250cm9sbGVyJywgJyRpbmplY3RvcicsICckYW5jaG9yU2Nyb2xsJ107XHJcbmZ1bmN0aW9uICRWaWV3RGlyZWN0aXZlKCAgICRzdGF0ZSwgICAkY29tcGlsZSwgICAkY29udHJvbGxlciwgICAkaW5qZWN0b3IsICAgJGFuY2hvclNjcm9sbCkge1xyXG4gIC8vIFRPRE86IENoYW5nZSB0byAkaW5qZWN0b3IuaGFzKCkgd2hlbiB3ZSB2ZXJzaW9uIGJ1bXAgdG8gQW5ndWxhciAxLjEuNS5cclxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi9tYXN0ZXIvQ0hBTkdFTE9HLm1kIzExNS10cmlhbmdsZS1zcXVhcmlmaWNhdGlvbi0yMDEzLTA1LTIyXHJcbiAgdmFyICRhbmltYXRvcjsgdHJ5IHsgJGFuaW1hdG9yID0gJGluamVjdG9yLmdldCgnJGFuaW1hdG9yJyk7IH0gY2F0Y2ggKGUpIHsgLyogZG8gbm90aGluZyAqLyB9XHJcbiAgdmFyIHZpZXdJc1VwZGF0aW5nID0gZmFsc2U7XHJcblxyXG4gIHZhciBkaXJlY3RpdmUgPSB7XHJcbiAgICByZXN0cmljdDogJ0VDQScsXHJcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcclxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXHJcbiAgICBjb21waWxlOiBmdW5jdGlvbiAoZWxlbWVudCwgYXR0ciwgdHJhbnNjbHVkZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICB2YXIgdmlld1Njb3BlLCB2aWV3TG9jYWxzLFxyXG4gICAgICAgICAgICBuYW1lID0gYXR0cltkaXJlY3RpdmUubmFtZV0gfHwgYXR0ci5uYW1lIHx8ICcnLFxyXG4gICAgICAgICAgICBvbmxvYWRFeHAgPSBhdHRyLm9ubG9hZCB8fCAnJyxcclxuICAgICAgICAgICAgYW5pbWF0ZSA9IGlzRGVmaW5lZCgkYW5pbWF0b3IpICYmICRhbmltYXRvcihzY29wZSwgYXR0cik7XHJcblxyXG4gICAgICAgIC8vIFJldHVybnMgYSBzZXQgb2YgRE9NIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgYmFzZWQgb24gd2hldGhlciBhbmltYXRpb25cclxuICAgICAgICAvLyBzaG91bGQgYmUgcGVyZm9ybWVkXHJcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gZnVuY3Rpb24oZG9BbmltYXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgXCJ0cnVlXCI6IHtcclxuICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHsgYW5pbWF0ZS5sZWF2ZShlbGVtZW50LmNvbnRlbnRzKCksIGVsZW1lbnQpOyB9LFxyXG4gICAgICAgICAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uKGNvbXBpbGVkLCBlbGVtZW50KSB7IGFuaW1hdGUuZW50ZXIoY29tcGlsZWQsIGVsZW1lbnQpOyB9LFxyXG4gICAgICAgICAgICAgIHBvcHVsYXRlOiBmdW5jdGlvbih0ZW1wbGF0ZSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRzID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2PjwvZGl2PicpLmh0bWwodGVtcGxhdGUpLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRlLmVudGVyKGNvbnRlbnRzLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwiZmFsc2VcIjoge1xyXG4gICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oZWxlbWVudCkgeyBlbGVtZW50Lmh0bWwoJycpOyB9LFxyXG4gICAgICAgICAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uKGNvbXBpbGVkLCBlbGVtZW50KSB7IGVsZW1lbnQuYXBwZW5kKGNvbXBpbGVkKTsgfSxcclxuICAgICAgICAgICAgICBwb3B1bGF0ZTogZnVuY3Rpb24odGVtcGxhdGUsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5jb250ZW50cygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlbZG9BbmltYXRlLnRvU3RyaW5nKCldO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFB1dCBiYWNrIHRoZSBjb21waWxlZCBpbml0aWFsIHZpZXdcclxuICAgICAgICBlbGVtZW50LmFwcGVuZCh0cmFuc2NsdWRlKHNjb3BlKSk7XHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGhlIGRldGFpbHMgb2YgdGhlIHBhcmVudCB2aWV3IGRpcmVjdGl2ZSAoaWYgYW55KSBhbmQgdXNlIGl0XHJcbiAgICAgICAgLy8gdG8gZGVyaXZlIG91ciBvd24gcXVhbGlmaWVkIHZpZXcgbmFtZSwgdGhlbiBoYW5nIG91ciBvd24gZGV0YWlsc1xyXG4gICAgICAgIC8vIG9mZiB0aGUgRE9NIHNvIGNoaWxkIGRpcmVjdGl2ZXMgY2FuIGZpbmQgaXQuXHJcbiAgICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCkuaW5oZXJpdGVkRGF0YSgnJHVpVmlldycpO1xyXG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YoJ0AnKSA8IDApIG5hbWUgID0gbmFtZSArICdAJyArIChwYXJlbnQgPyBwYXJlbnQuc3RhdGUubmFtZSA6ICcnKTtcclxuICAgICAgICB2YXIgdmlldyA9IHsgbmFtZTogbmFtZSwgc3RhdGU6IG51bGwgfTtcclxuICAgICAgICBlbGVtZW50LmRhdGEoJyR1aVZpZXcnLCB2aWV3KTtcclxuXHJcbiAgICAgICAgdmFyIGV2ZW50SG9vayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHZpZXdJc1VwZGF0aW5nKSByZXR1cm47XHJcbiAgICAgICAgICB2aWV3SXNVcGRhdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgdHJ5IHsgdXBkYXRlVmlldyh0cnVlKTsgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB2aWV3SXNVcGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmlld0lzVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBldmVudEhvb2spO1xyXG4gICAgICAgIHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGluZycsIGV2ZW50SG9vayk7XHJcbiAgICAgICAgdXBkYXRlVmlldyhmYWxzZSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVZpZXcoZG9BbmltYXRlKSB7XHJcbiAgICAgICAgICB2YXIgbG9jYWxzID0gJHN0YXRlLiRjdXJyZW50ICYmICRzdGF0ZS4kY3VycmVudC5sb2NhbHNbbmFtZV07XHJcbiAgICAgICAgICBpZiAobG9jYWxzID09PSB2aWV3TG9jYWxzKSByZXR1cm47IC8vIG5vdGhpbmcgdG8gZG9cclxuICAgICAgICAgIHZhciByZW5kZXIgPSByZW5kZXJlcihhbmltYXRlICYmIGRvQW5pbWF0ZSk7XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGNvbnRlbnRcclxuICAgICAgICAgIHJlbmRlci5yZW1vdmUoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgLy8gRGVzdHJveSBwcmV2aW91cyB2aWV3IHNjb3BlXHJcbiAgICAgICAgICBpZiAodmlld1Njb3BlKSB7XHJcbiAgICAgICAgICAgIHZpZXdTY29wZS4kZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB2aWV3U2NvcGUgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICghbG9jYWxzKSB7XHJcbiAgICAgICAgICAgIHZpZXdMb2NhbHMgPSBudWxsO1xyXG4gICAgICAgICAgICB2aWV3LnN0YXRlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIGluaXRpYWwgdmlld1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyLnJlc3RvcmUodHJhbnNjbHVkZShzY29wZSksIGVsZW1lbnQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZpZXdMb2NhbHMgPSBsb2NhbHM7XHJcbiAgICAgICAgICB2aWV3LnN0YXRlID0gbG9jYWxzLiQkc3RhdGU7XHJcblxyXG4gICAgICAgICAgdmFyIGxpbmsgPSAkY29tcGlsZShyZW5kZXIucG9wdWxhdGUobG9jYWxzLiR0ZW1wbGF0ZSwgZWxlbWVudCkpO1xyXG4gICAgICAgICAgdmlld1Njb3BlID0gc2NvcGUuJG5ldygpO1xyXG5cclxuICAgICAgICAgIGlmIChsb2NhbHMuJCRjb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgIGxvY2Fscy4kc2NvcGUgPSB2aWV3U2NvcGU7XHJcbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gJGNvbnRyb2xsZXIobG9jYWxzLiQkY29udHJvbGxlciwgbG9jYWxzKTtcclxuICAgICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigpLmRhdGEoJyRuZ0NvbnRyb2xsZXJDb250cm9sbGVyJywgY29udHJvbGxlcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsaW5rKHZpZXdTY29wZSk7XHJcbiAgICAgICAgICB2aWV3U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudExvYWRlZCcpO1xyXG4gICAgICAgICAgaWYgKG9ubG9hZEV4cCkgdmlld1Njb3BlLiRldmFsKG9ubG9hZEV4cCk7XHJcblxyXG4gICAgICAgICAgLy8gVE9ETzogVGhpcyBzZWVtcyBzdHJhbmdlLCBzaG91bGRuJ3QgJGFuY2hvclNjcm9sbCBsaXN0ZW4gZm9yICR2aWV3Q29udGVudExvYWRlZCBpZiBuZWNlc3Nhcnk/XHJcbiAgICAgICAgICAvLyAkYW5jaG9yU2Nyb2xsIG1pZ2h0IGxpc3RlbiBvbiBldmVudC4uLlxyXG4gICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiBkaXJlY3RpdmU7XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlKTtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlU3RhdGVSZWYocmVmKSB7XHJcbiAgdmFyIHBhcnNlZCA9IHJlZi5tYXRjaCgvXihbXihdKz8pXFxzKihcXCgoLiopXFwpKT8kLyk7XHJcbiAgaWYgKCFwYXJzZWQgfHwgcGFyc2VkLmxlbmd0aCAhPT0gNCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdGF0ZSByZWYgJ1wiICsgcmVmICsgXCInXCIpO1xyXG4gIHJldHVybiB7IHN0YXRlOiBwYXJzZWRbMV0sIHBhcmFtRXhwcjogcGFyc2VkWzNdIHx8IG51bGwgfTtcclxufVxyXG5cclxuJFN0YXRlUmVmRGlyZWN0aXZlLiRpbmplY3QgPSBbJyRzdGF0ZSddO1xyXG5mdW5jdGlvbiAkU3RhdGVSZWZEaXJlY3RpdmUoJHN0YXRlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIHJlZiA9IHBhcnNlU3RhdGVSZWYoYXR0cnMudWlTcmVmKTtcclxuICAgICAgdmFyIHBhcmFtcyA9IG51bGwsIHVybCA9IG51bGwsIGJhc2UgPSAkc3RhdGUuJGN1cnJlbnQ7XHJcbiAgICAgIHZhciBpc0Zvcm0gPSBlbGVtZW50WzBdLm5vZGVOYW1lID09PSBcIkZPUk1cIjtcclxuICAgICAgdmFyIGF0dHIgPSBpc0Zvcm0gPyBcImFjdGlvblwiIDogXCJocmVmXCIsIG5hdiA9IHRydWU7XHJcblxyXG4gICAgICB2YXIgc3RhdGVEYXRhID0gZWxlbWVudC5wYXJlbnQoKS5pbmhlcml0ZWREYXRhKCckdWlWaWV3Jyk7XHJcblxyXG4gICAgICBpZiAoc3RhdGVEYXRhICYmIHN0YXRlRGF0YS5zdGF0ZSAmJiBzdGF0ZURhdGEuc3RhdGUubmFtZSkge1xyXG4gICAgICAgIGJhc2UgPSBzdGF0ZURhdGEuc3RhdGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbihuZXdWYWwpIHtcclxuICAgICAgICBpZiAobmV3VmFsKSBwYXJhbXMgPSBuZXdWYWw7XHJcbiAgICAgICAgaWYgKCFuYXYpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIG5ld0hyZWYgPSAkc3RhdGUuaHJlZihyZWYuc3RhdGUsIHBhcmFtcywgeyByZWxhdGl2ZTogYmFzZSB9KTtcclxuXHJcbiAgICAgICAgaWYgKCFuZXdIcmVmKSB7XHJcbiAgICAgICAgICBuYXYgPSBmYWxzZTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxlbWVudFswXVthdHRyXSA9IG5ld0hyZWY7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAocmVmLnBhcmFtRXhwcikge1xyXG4gICAgICAgIHNjb3BlLiR3YXRjaChyZWYucGFyYW1FeHByLCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xyXG4gICAgICAgICAgaWYgKG5ld1ZhbCAhPT0gb2xkVmFsKSB1cGRhdGUobmV3VmFsKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgICBwYXJhbXMgPSBzY29wZS4kZXZhbChyZWYucGFyYW1FeHByKTtcclxuICAgICAgfVxyXG4gICAgICB1cGRhdGUoKTtcclxuXHJcbiAgICAgIGlmIChpc0Zvcm0pIHJldHVybjtcclxuXHJcbiAgICAgIGVsZW1lbnQuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoKGUud2hpY2ggPT0gMSkgJiYgIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5ICYmICFlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAkc3RhdGUuZ28ocmVmLnN0YXRlLCBwYXJhbXMsIHsgcmVsYXRpdmU6IGJhc2UgfSk7XHJcbiAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpU3JlZicsICRTdGF0ZVJlZkRpcmVjdGl2ZSk7XHJcblxyXG4kUm91dGVQcm92aWRlci4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInXTtcclxuZnVuY3Rpb24gJFJvdXRlUHJvdmlkZXIoICAkc3RhdGVQcm92aWRlciwgICAgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcblxyXG4gIHZhciByb3V0ZXMgPSBbXTtcclxuXHJcbiAgb25FbnRlclJvdXRlLiRpbmplY3QgPSBbJyQkc3RhdGUnXTtcclxuICBmdW5jdGlvbiBvbkVudGVyUm91dGUoICAgJCRzdGF0ZSkge1xyXG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICB0aGlzLmxvY2FscyA9ICQkc3RhdGUubG9jYWxzLmdsb2JhbHM7XHJcbiAgICB0aGlzLnBhcmFtcyA9IHRoaXMubG9jYWxzLiRzdGF0ZVBhcmFtcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRXhpdFJvdXRlKCkge1xyXG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICB0aGlzLmxvY2FscyA9IG51bGw7XHJcbiAgICB0aGlzLnBhcmFtcyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICB0aGlzLndoZW4gPSB3aGVuO1xyXG4gIGZ1bmN0aW9uIHdoZW4odXJsLCByb3V0ZSkge1xyXG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXHJcbiAgICBpZiAocm91dGUucmVkaXJlY3RUbyAhPSBudWxsKSB7XHJcbiAgICAgIC8vIFJlZGlyZWN0LCBjb25maWd1cmUgZGlyZWN0bHkgb24gJHVybFJvdXRlclByb3ZpZGVyXHJcbiAgICAgIHZhciByZWRpcmVjdCA9IHJvdXRlLnJlZGlyZWN0VG8sIGhhbmRsZXI7XHJcbiAgICAgIGlmIChpc1N0cmluZyhyZWRpcmVjdCkpIHtcclxuICAgICAgICBoYW5kbGVyID0gcmVkaXJlY3Q7IC8vIGxlYXZlICR1cmxSb3V0ZXJQcm92aWRlciB0byBoYW5kbGVcclxuICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHJlZGlyZWN0KSkge1xyXG4gICAgICAgIC8vIEFkYXB0IHRvICR1cmxSb3V0ZXJQcm92aWRlciBBUElcclxuICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24gKHBhcmFtcywgJGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVkaXJlY3QocGFyYW1zLCAkbG9jYXRpb24ucGF0aCgpLCAkbG9jYXRpb24uc2VhcmNoKCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCAncmVkaXJlY3RUbycgaW4gd2hlbigpXCIpO1xyXG4gICAgICB9XHJcbiAgICAgICR1cmxSb3V0ZXJQcm92aWRlci53aGVuKHVybCwgaGFuZGxlcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBSZWd1bGFyIHJvdXRlLCBjb25maWd1cmUgYXMgc3RhdGVcclxuICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoaW5oZXJpdChyb3V0ZSwge1xyXG4gICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICBuYW1lOiAncm91dGU6JyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpLFxyXG4gICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgIG9uRW50ZXI6IG9uRW50ZXJSb3V0ZSxcclxuICAgICAgICBvbkV4aXQ6IG9uRXhpdFJvdXRlXHJcbiAgICAgIH0pKTtcclxuICAgIH1cclxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgdGhpcy4kZ2V0ID0gJGdldDtcclxuICAkZ2V0LiRpbmplY3QgPSBbJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyRyb3V0ZVBhcmFtcyddO1xyXG4gIGZ1bmN0aW9uICRnZXQoICAgJHN0YXRlLCAgICRyb290U2NvcGUsICAgJHJvdXRlUGFyYW1zKSB7XHJcblxyXG4gICAgdmFyICRyb3V0ZSA9IHtcclxuICAgICAgcm91dGVzOiByb3V0ZXMsXHJcbiAgICAgIHBhcmFtczogJHJvdXRlUGFyYW1zLFxyXG4gICAgICBjdXJyZW50OiB1bmRlZmluZWRcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhdGVBc1JvdXRlKHN0YXRlKSB7XHJcbiAgICAgIHJldHVybiAoc3RhdGUubmFtZSAhPT0gJycpID8gc3RhdGUgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKGV2LCB0bywgdG9QYXJhbXMsIGZyb20sIGZyb21QYXJhbXMpIHtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VTdGFydCcsIHN0YXRlQXNSb3V0ZSh0byksIHN0YXRlQXNSb3V0ZShmcm9tKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uIChldiwgdG8sIHRvUGFyYW1zLCBmcm9tLCBmcm9tUGFyYW1zKSB7XHJcbiAgICAgICRyb3V0ZS5jdXJyZW50ID0gc3RhdGVBc1JvdXRlKHRvKTtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VTdWNjZXNzJywgc3RhdGVBc1JvdXRlKHRvKSwgc3RhdGVBc1JvdXRlKGZyb20pKTtcclxuICAgICAgY29weSh0b1BhcmFtcywgJHJvdXRlLnBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXYsIHRvLCB0b1BhcmFtcywgZnJvbSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckcm91dGVDaGFuZ2VFcnJvcicsIHN0YXRlQXNSb3V0ZSh0byksIHN0YXRlQXNSb3V0ZShmcm9tKSwgZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuICRyb3V0ZTtcclxuICB9XHJcbn1cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuY29tcGF0JylcclxuICAucHJvdmlkZXIoJyRyb3V0ZScsICRSb3V0ZVByb3ZpZGVyKVxyXG4gIC5kaXJlY3RpdmUoJ25nVmlldycsICRWaWV3RGlyZWN0aXZlKTtcclxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7IiwiLyoqXHJcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4yLjAtcmMuMlxyXG4gKiAoYykgMjAxMC0yMDEyIEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xyXG4gKiBMaWNlbnNlOiBNSVRcclxuICovXHJcbihmdW5jdGlvbih3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcclxuICogQG5hbWUgbmdDb29raWVzXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiAjIG5nQ29va2llc1xyXG4gKlxyXG4gKiBQcm92aWRlcyB0aGUge0BsaW5rIG5nQ29va2llcy4kY29va2llcyBgJGNvb2tpZXNgfSBhbmRcclxuICoge0BsaW5rIG5nQ29va2llcy4kY29va2llU3RvcmUgYCRjb29raWVTdG9yZWB9IHNlcnZpY2VzLlxyXG4gKlxyXG4gKiB7QGluc3RhbGxNb2R1bGUgY29va2llc31cclxuICpcclxuICogU2VlIHtAbGluayBuZ0Nvb2tpZXMuJGNvb2tpZXMgYCRjb29raWVzYH0gYW5kXHJcbiAqIHtAbGluayBuZ0Nvb2tpZXMuJGNvb2tpZVN0b3JlIGAkY29va2llU3RvcmVgfSBmb3IgdXNhZ2UuXHJcbiAqL1xyXG5cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCduZ0Nvb2tpZXMnLCBbJ25nJ10pLlxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBvYmplY3RcclxuICAgKiBAbmFtZSBuZ0Nvb2tpZXMuJGNvb2tpZXNcclxuICAgKiBAcmVxdWlyZXMgJGJyb3dzZXJcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFByb3ZpZGVzIHJlYWQvd3JpdGUgYWNjZXNzIHRvIGJyb3dzZXIncyBjb29raWVzLlxyXG4gICAqXHJcbiAgICogT25seSBhIHNpbXBsZSBPYmplY3QgaXMgZXhwb3NlZCBhbmQgYnkgYWRkaW5nIG9yIHJlbW92aW5nIHByb3BlcnRpZXMgdG8vZnJvbVxyXG4gICAqIHRoaXMgb2JqZWN0LCBuZXcgY29va2llcyBhcmUgY3JlYXRlZC9kZWxldGVkIGF0IHRoZSBlbmQgb2YgY3VycmVudCAkZXZhbC5cclxuICAgKlxyXG4gICAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgbmdDb29raWVzIGBuZ0Nvb2tpZXNgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgZnVuY3Rpb24gRXhhbXBsZUNvbnRyb2xsZXIoJGNvb2tpZXMpIHtcclxuICAgICAgICAgICAvLyBSZXRyaWV2aW5nIGEgY29va2llXHJcbiAgICAgICAgICAgdmFyIGZhdm9yaXRlQ29va2llID0gJGNvb2tpZXMubXlGYXZvcml0ZTtcclxuICAgICAgICAgICAvLyBTZXR0aW5nIGEgY29va2llXHJcbiAgICAgICAgICAgJGNvb2tpZXMubXlGYXZvcml0ZSA9ICdvYXRtZWFsJztcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgPC9kb2M6c291cmNlPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gICAqL1xyXG4gICBmYWN0b3J5KCckY29va2llcycsIFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkYnJvd3Nlcikge1xyXG4gICAgICB2YXIgY29va2llcyA9IHt9LFxyXG4gICAgICAgICAgbGFzdENvb2tpZXMgPSB7fSxcclxuICAgICAgICAgIGxhc3RCcm93c2VyQ29va2llcyxcclxuICAgICAgICAgIHJ1bkV2YWwgPSBmYWxzZSxcclxuICAgICAgICAgIGNvcHkgPSBhbmd1bGFyLmNvcHksXHJcbiAgICAgICAgICBpc1VuZGVmaW5lZCA9IGFuZ3VsYXIuaXNVbmRlZmluZWQ7XHJcblxyXG4gICAgICAvL2NyZWF0ZXMgYSBwb2xsZXIgZm4gdGhhdCBjb3BpZXMgYWxsIGNvb2tpZXMgZnJvbSB0aGUgJGJyb3dzZXIgdG8gc2VydmljZSAmIGluaXRzIHRoZSBzZXJ2aWNlXHJcbiAgICAgICRicm93c2VyLmFkZFBvbGxGbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY3VycmVudENvb2tpZXMgPSAkYnJvd3Nlci5jb29raWVzKCk7XHJcbiAgICAgICAgaWYgKGxhc3RCcm93c2VyQ29va2llcyAhPSBjdXJyZW50Q29va2llcykgeyAvL3JlbGllcyBvbiBicm93c2VyLmNvb2tpZXMoKSBpbXBsXHJcbiAgICAgICAgICBsYXN0QnJvd3NlckNvb2tpZXMgPSBjdXJyZW50Q29va2llcztcclxuICAgICAgICAgIGNvcHkoY3VycmVudENvb2tpZXMsIGxhc3RDb29raWVzKTtcclxuICAgICAgICAgIGNvcHkoY3VycmVudENvb2tpZXMsIGNvb2tpZXMpO1xyXG4gICAgICAgICAgaWYgKHJ1bkV2YWwpICRyb290U2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSgpO1xyXG5cclxuICAgICAgcnVuRXZhbCA9IHRydWU7XHJcblxyXG4gICAgICAvL2F0IHRoZSBlbmQgb2YgZWFjaCBldmFsLCBwdXNoIGNvb2tpZXNcclxuICAgICAgLy9UT0RPOiB0aGlzIHNob3VsZCBoYXBwZW4gYmVmb3JlIHRoZSBcImRlbGF5ZWRcIiB3YXRjaGVzIGZpcmUsIGJlY2F1c2UgaWYgc29tZSBjb29raWVzIGFyZSBub3RcclxuICAgICAgLy8gICAgICBzdHJpbmdzIG9yIGJyb3dzZXIgcmVmdXNlcyB0byBzdG9yZSBzb21lIGNvb2tpZXMsIHdlIHVwZGF0ZSB0aGUgbW9kZWwgaW4gdGhlIHB1c2ggZm4uXHJcbiAgICAgICRyb290U2NvcGUuJHdhdGNoKHB1c2gpO1xyXG5cclxuICAgICAgcmV0dXJuIGNvb2tpZXM7XHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFB1c2hlcyBhbGwgdGhlIGNvb2tpZXMgZnJvbSB0aGUgc2VydmljZSB0byB0aGUgYnJvd3NlciBhbmQgdmVyaWZpZXMgaWYgYWxsIGNvb2tpZXMgd2VyZSBzdG9yZWQuXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiBwdXNoKCkge1xyXG4gICAgICAgIHZhciBuYW1lLFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgYnJvd3NlckNvb2tpZXMsXHJcbiAgICAgICAgICAgIHVwZGF0ZWQ7XHJcblxyXG4gICAgICAgIC8vZGVsZXRlIGFueSBjb29raWVzIGRlbGV0ZWQgaW4gJGNvb2tpZXNcclxuICAgICAgICBmb3IgKG5hbWUgaW4gbGFzdENvb2tpZXMpIHtcclxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChjb29raWVzW25hbWVdKSkge1xyXG4gICAgICAgICAgICAkYnJvd3Nlci5jb29raWVzKG5hbWUsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3VwZGF0ZSBhbGwgY29va2llcyB1cGRhdGVkIGluICRjb29raWVzXHJcbiAgICAgICAgZm9yKG5hbWUgaW4gY29va2llcykge1xyXG4gICAgICAgICAgdmFsdWUgPSBjb29raWVzW25hbWVdO1xyXG4gICAgICAgICAgaWYgKCFhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobGFzdENvb2tpZXNbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgY29va2llc1tuYW1lXSA9IGxhc3RDb29raWVzW25hbWVdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSBjb29raWVzW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSBsYXN0Q29va2llc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAkYnJvd3Nlci5jb29raWVzKG5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgdXBkYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3ZlcmlmeSB3aGF0IHdhcyBhY3R1YWxseSBzdG9yZWRcclxuICAgICAgICBpZiAodXBkYXRlZCl7XHJcbiAgICAgICAgICB1cGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBicm93c2VyQ29va2llcyA9ICRicm93c2VyLmNvb2tpZXMoKTtcclxuXHJcbiAgICAgICAgICBmb3IgKG5hbWUgaW4gY29va2llcykge1xyXG4gICAgICAgICAgICBpZiAoY29va2llc1tuYW1lXSAhPT0gYnJvd3NlckNvb2tpZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAvL2RlbGV0ZSBvciByZXNldCBhbGwgY29va2llcyB0aGF0IHRoZSBicm93c2VyIGRyb3BwZWQgZnJvbSAkY29va2llc1xyXG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChicm93c2VyQ29va2llc1tuYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb29raWVzW25hbWVdO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb29raWVzW25hbWVdID0gYnJvd3NlckNvb2tpZXNbbmFtZV07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XSkuXHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2Mgb2JqZWN0XHJcbiAgICogQG5hbWUgbmdDb29raWVzLiRjb29raWVTdG9yZVxyXG4gICAqIEByZXF1aXJlcyAkY29va2llc1xyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUHJvdmlkZXMgYSBrZXktdmFsdWUgKHN0cmluZy1vYmplY3QpIHN0b3JhZ2UsIHRoYXQgaXMgYmFja2VkIGJ5IHNlc3Npb24gY29va2llcy5cclxuICAgKiBPYmplY3RzIHB1dCBvciByZXRyaWV2ZWQgZnJvbSB0aGlzIHN0b3JhZ2UgYXJlIGF1dG9tYXRpY2FsbHkgc2VyaWFsaXplZCBvclxyXG4gICAqIGRlc2VyaWFsaXplZCBieSBhbmd1bGFyJ3MgdG9Kc29uL2Zyb21Kc29uLlxyXG4gICAqXHJcbiAgICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ0Nvb2tpZXMgYG5nQ29va2llc2B9IG1vZHVsZSB0byBiZSBpbnN0YWxsZWQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqL1xyXG4gICBmYWN0b3J5KCckY29va2llU3RvcmUnLCBbJyRjb29raWVzJywgZnVuY3Rpb24oJGNvb2tpZXMpIHtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIG5nQ29va2llcy4kY29va2llU3RvcmUjZ2V0XHJcbiAgICAgICAgICogQG1ldGhvZE9mIG5nQ29va2llcy4kY29va2llU3RvcmVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGdpdmVuIGNvb2tpZSBrZXlcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgSWQgdG8gdXNlIGZvciBsb29rdXAuXHJcbiAgICAgICAgICogQHJldHVybnMge09iamVjdH0gRGVzZXJpYWxpemVkIGNvb2tpZSB2YWx1ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgdmFyIHZhbHVlID0gJGNvb2tpZXNba2V5XTtcclxuICAgICAgICAgIHJldHVybiB2YWx1ZSA/IGFuZ3VsYXIuZnJvbUpzb24odmFsdWUpIDogdmFsdWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIG5nQ29va2llcy4kY29va2llU3RvcmUjcHV0XHJcbiAgICAgICAgICogQG1ldGhvZE9mIG5nQ29va2llcy4kY29va2llU3RvcmVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFNldHMgYSB2YWx1ZSBmb3IgZ2l2ZW4gY29va2llIGtleVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBJZCBmb3IgdGhlIGB2YWx1ZWAuXHJcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFZhbHVlIHRvIGJlIHN0b3JlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICRjb29raWVzW2tleV0gPSBhbmd1bGFyLnRvSnNvbih2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAqIEBuYW1lIG5nQ29va2llcy4kY29va2llU3RvcmUjcmVtb3ZlXHJcbiAgICAgICAgICogQG1ldGhvZE9mIG5nQ29va2llcy4kY29va2llU3RvcmVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAqIFJlbW92ZSBnaXZlbiBjb29raWVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgSWQgb2YgdGhlIGtleS12YWx1ZSBwYWlyIHRvIGRlbGV0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgZGVsZXRlICRjb29raWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgIH1dKTtcclxuXHJcblxyXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTsiLCIvKipcclxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjIuMC1yYy4yXHJcbiAqIChjKSAyMDEwLTIwMTIgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXHJcbiAqIExpY2Vuc2U6IE1JVFxyXG4gKi9cclxuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkgeyd1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cclxuICogQW5ndWxhci4gSXQgY2FuIGJlIGNhbGxlZCBhcyBmb2xsb3dzOlxyXG4gKlxyXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xyXG4gKiB0aHJvdyBleGFtcGxlTWluRXJyKCdvbmUnLCAnVGhpcyB7MH0gaXMgezF9JywgZm9vLCBiYXIpO1xyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcclxuICogcmVzdWx0aW5nIGVycm9yIHdpbGwgaGF2ZSBhIG5hbWVzcGFjZWQgZXJyb3IgY29kZSBvZiBleGFtcGxlLm9uZS4gIFRoZVxyXG4gKiByZXN1bHRpbmcgZXJyb3Igd2lsbCByZXBsYWNlIHswfSB3aXRoIHRoZSB2YWx1ZSBvZiBmb28sIGFuZCB7MX0gd2l0aCB0aGVcclxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxyXG4gKiB0YWtlLlxyXG4gKlxyXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXHJcbiAqIGludGVycG9sYXRpb24gbWFya2VycyB3aWxsIGJlIHByZXNlcnZlZCBpbiB0aGUgZmluYWwgc3RyaW5nLlxyXG4gKlxyXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcclxuICogYXJlIGFwcGxpZWQgd2l0aCByZXNwZWN0IHRvIGhvdyBtaW5FcnIgaW5zdGFuY2VzIGFyZSBjcmVhdGVkIGFuZCBjYWxsZWQuXHJcbiAqIEluc3RhbmNlcyBzaG91bGQgaGF2ZSBuYW1lcyBvZiB0aGUgZm9ybSBuYW1lc3BhY2VNaW5FcnIgZm9yIGEgbWluRXJyIGNyZWF0ZWRcclxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXHJcbiAqIHNob3VsZCBhbGwgYmUgc3RhdGljIHN0cmluZ3MsIG5vdCB2YXJpYWJsZXMgb3IgZ2VuZXJhbCBleHByZXNzaW9ucy5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXHJcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIHN0cmluZywgLi4uKTogRXJyb3J9IGluc3RhbmNlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gbWluRXJyKG1vZHVsZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY29kZSA9IGFyZ3VtZW50c1swXSxcclxuICAgICAgcHJlZml4ID0gJ1snICsgKG1vZHVsZSA/IG1vZHVsZSArICc6JyA6ICcnKSArIGNvZGUgKyAnXSAnLFxyXG4gICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcclxuICAgICAgdGVtcGxhdGVBcmdzID0gYXJndW1lbnRzLFxyXG4gICAgICBzdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xyXG4gICAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaW5nKG9iaikpIHtcclxuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICB9LFxyXG4gICAgICBtZXNzYWdlLCBpO1xyXG5cclxuICAgIG1lc3NhZ2UgPSBwcmVmaXggKyB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXGQrXFx9L2csIGZ1bmN0aW9uIChtYXRjaCkge1xyXG4gICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpLCBhcmc7XHJcblxyXG4gICAgICBpZiAoaW5kZXggKyAyIDwgdGVtcGxhdGVBcmdzLmxlbmd0aCkge1xyXG4gICAgICAgIGFyZyA9IHRlbXBsYXRlQXJnc1tpbmRleCArIDJdO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFyZykpIHtcclxuICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKS5yZXBsYWNlKC8gP1xce1tcXHNcXFNdKiQvLCAnJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1VuZGVmaW5lZChhcmcpKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcoYXJnKSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRvSnNvbihhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJnO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBtYXRjaDtcclxuICAgIH0pO1xyXG5cclxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8nICsgdmVyc2lvbi5mdWxsICsgJy8nICtcclxuICAgICAgKG1vZHVsZSA/IG1vZHVsZSArICcvJyA6ICcnKSArIGNvZGU7XHJcbiAgICBmb3IgKGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgKGkgPT0gMiA/ICc/JyA6ICcmJykgKyAncCcgKyAoaS0yKSArICc9JyArXHJcbiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeShhcmd1bWVudHNbaV0pKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIGhhc093blByb3BlcnR5IG1heSBiZSBvdmVyd3JpdHRlbiBieSBhIHByb3BlcnR5IG9mIHRoZSBzYW1lIG5hbWUsIG9yIGVudGlyZWx5XHJcbiAqIGFic2VudCBmcm9tIGFuIG9iamVjdCB0aGF0IGRvZXMgbm90IGluaGVyaXQgT2JqZWN0LnByb3RvdHlwZTsgdGhpcyBjb3B5IGlzXHJcbiAqIHVzZWQgaW5zdGVhZFxyXG4gKi9cclxudmFyIGhhc093blByb3BlcnR5Rm4gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgaGFzT3duUHJvcGVydHlMb2NhbCA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XHJcbiAgcmV0dXJuIGhhc093blByb3BlcnR5Rm4uY2FsbChvYmosIGtleSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIubG93ZXJjYXNlXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb3dlcmNhc2VkIHN0cmluZy5cclxuICovXHJcbnZhciBsb3dlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpe3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvTG93ZXJDYXNlKCkgOiBzdHJpbmc7fTtcclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIudXBwZXJjYXNlXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBiZSBjb252ZXJ0ZWQgdG8gdXBwZXJjYXNlLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVcHBlcmNhc2VkIHN0cmluZy5cclxuICovXHJcbnZhciB1cHBlcmNhc2UgPSBmdW5jdGlvbihzdHJpbmcpe3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvVXBwZXJDYXNlKCkgOiBzdHJpbmc7fTtcclxuXHJcblxyXG52YXIgbWFudWFsTG93ZXJjYXNlID0gZnVuY3Rpb24ocykge1xyXG4gIHJldHVybiBpc1N0cmluZyhzKVxyXG4gICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIHwgMzIpO30pXHJcbiAgICAgIDogcztcclxufTtcclxudmFyIG1hbnVhbFVwcGVyY2FzZSA9IGZ1bmN0aW9uKHMpIHtcclxuICByZXR1cm4gaXNTdHJpbmcocylcclxuICAgICAgPyBzLnJlcGxhY2UoL1thLXpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSlcclxuICAgICAgOiBzO1xyXG59O1xyXG5cclxuXHJcbi8vIFN0cmluZyN0b0xvd2VyQ2FzZSBhbmQgU3RyaW5nI3RvVXBwZXJDYXNlIGRvbid0IHByb2R1Y2UgY29ycmVjdCByZXN1bHRzIGluIGJyb3dzZXJzIHdpdGggVHVya2lzaFxyXG4vLyBsb2NhbGUsIGZvciB0aGlzIHJlYXNvbiB3ZSBuZWVkIHRvIGRldGVjdCB0aGlzIGNhc2UgYW5kIHJlZGVmaW5lIGxvd2VyY2FzZS91cHBlcmNhc2UgbWV0aG9kc1xyXG4vLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuXHJcbmlmICgnaScgIT09ICdJJy50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlO1xyXG4gIHVwcGVyY2FzZSA9IG1hbnVhbFVwcGVyY2FzZTtcclxufVxyXG5cclxuXHJcbnZhciAvKiogaG9sZHMgbWFqb3IgdmVyc2lvbiBudW1iZXIgZm9yIElFIG9yIE5hTiBmb3IgcmVhbCBicm93c2VycyAqL1xyXG4gICAgbXNpZSxcclxuICAgIGpxTGl0ZSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmcgc2luY2UgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBhZnRlciB1cy5cclxuICAgIGpRdWVyeSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmdcclxuICAgIHNsaWNlICAgICAgICAgICAgID0gW10uc2xpY2UsXHJcbiAgICBwdXNoICAgICAgICAgICAgICA9IFtdLnB1c2gsXHJcbiAgICB0b1N0cmluZyAgICAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXHJcbiAgICBuZ01pbkVyciAgICAgICAgICA9IG1pbkVycignbmcnKSxcclxuXHJcblxyXG4gICAgX2FuZ3VsYXIgICAgICAgICAgPSB3aW5kb3cuYW5ndWxhcixcclxuICAgIC8qKiBAbmFtZSBhbmd1bGFyICovXHJcbiAgICBhbmd1bGFyICAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyIHx8ICh3aW5kb3cuYW5ndWxhciA9IHt9KSxcclxuICAgIGFuZ3VsYXJNb2R1bGUsXHJcbiAgICBub2RlTmFtZV8sXHJcbiAgICB1aWQgICAgICAgICAgICAgICA9IFsnMCcsICcwJywgJzAnXTtcclxuXHJcbi8qKlxyXG4gKiBJRSAxMSBjaGFuZ2VkIHRoZSBmb3JtYXQgb2YgdGhlIFVzZXJBZ2VudCBzdHJpbmcuXHJcbiAqIFNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1Mzc1MDMuYXNweFxyXG4gKi9cclxubXNpZSA9IGludCgoL21zaWUgKFxcZCspLy5leGVjKGxvd2VyY2FzZShuYXZpZ2F0b3IudXNlckFnZW50KSkgfHwgW10pWzFdKTtcclxuaWYgKGlzTmFOKG1zaWUpKSB7XHJcbiAgbXNpZSA9IGludCgoL3RyaWRlbnRcXC8uKjsgcnY6KFxcZCspLy5leGVjKGxvd2VyY2FzZShuYXZpZ2F0b3IudXNlckFnZW50KSkgfHwgW10pWzFdKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9ialxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsIC4uLilcclxuICovXHJcbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikge1xyXG4gIGlmIChvYmogPT0gbnVsbCB8fCBpc1dpbmRvdyhvYmopKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xyXG5cclxuICBpZiAob2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXNBcnJheShvYmopIHx8ICFpc0Z1bmN0aW9uKG9iaikgJiYgKFxyXG4gICAgbGVuZ3RoID09PSAwIHx8IHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAobGVuZ3RoIC0gMSkgaW4gb2JqXHJcbiAgKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmZvckVhY2hcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBJbnZva2VzIHRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIG9uY2UgZm9yIGVhY2ggaXRlbSBpbiBgb2JqYCBjb2xsZWN0aW9uLCB3aGljaCBjYW4gYmUgZWl0aGVyIGFuXHJcbiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5KWAsIHdoZXJlIGB2YWx1ZWBcclxuICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50IGFuZCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxyXG4gKiBhcnJheSBlbGVtZW50IGluZGV4LiBTcGVjaWZ5aW5nIGEgYGNvbnRleHRgIGZvciB0aGUgZnVuY3Rpb24gaXMgb3B0aW9uYWwuXHJcbiAqXHJcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gd2FzIHByZXZpb3VzbHkga25vd24gYXMgYGFuZ3VsYXIuZm9yZWFjaGAuXHJcbiAqXHJcbiAgIDxwcmU+XHJcbiAgICAgdmFyIHZhbHVlcyA9IHtuYW1lOiAnbWlza28nLCBnZW5kZXI6ICdtYWxlJ307XHJcbiAgICAgdmFyIGxvZyA9IFtdO1xyXG4gICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpe1xyXG4gICAgICAgdGhpcy5wdXNoKGtleSArICc6ICcgKyB2YWx1ZSk7XHJcbiAgICAgfSwgbG9nKTtcclxuICAgICBleHBlY3QobG9nKS50b0VxdWFsKFsnbmFtZTogbWlza28nLCAnZ2VuZGVyOm1hbGUnXSk7XHJcbiAgIDwvcHJlPlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbnRleHQgT2JqZWN0IHRvIGJlY29tZSBjb250ZXh0IChgdGhpc2ApIGZvciB0aGUgaXRlcmF0b3IgZnVuY3Rpb24uXHJcbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFJlZmVyZW5jZSB0byBgb2JqYC5cclxuICovXHJcbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xyXG4gIHZhciBrZXk7XHJcbiAgaWYgKG9iaikge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSl7XHJcbiAgICAgIGZvciAoa2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChrZXkgIT0gJ3Byb3RvdHlwZScgJiYga2V5ICE9ICdsZW5ndGgnICYmIGtleSAhPSAnbmFtZScgJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKG9iai5mb3JFYWNoICYmIG9iai5mb3JFYWNoICE9PSBmb3JFYWNoKSB7XHJcbiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcclxuICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2Uob2JqKSkge1xyXG4gICAgICBmb3IgKGtleSA9IDA7IGtleSA8IG9iai5sZW5ndGg7IGtleSsrKVxyXG4gICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7XHJcbiAgdmFyIGtleXMgPSBbXTtcclxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAga2V5cy5wdXNoKGtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBrZXlzLnNvcnQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZm9yRWFjaFNvcnRlZChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XHJcbiAgdmFyIGtleXMgPSBzb3J0ZWRLZXlzKG9iaik7XHJcbiAgZm9yICggdmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0pO1xyXG4gIH1cclxuICByZXR1cm4ga2V5cztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiB3aGVuIHVzaW5nIGZvckVhY2ggdGhlIHBhcmFtcyBhcmUgdmFsdWUsIGtleSwgYnV0IGl0IGlzIG9mdGVuIHVzZWZ1bCB0byBoYXZlIGtleSwgdmFsdWUuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nLCAqKX0gaXRlcmF0b3JGblxyXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKiwgc3RyaW5nKX1cclxuICovXHJcbmZ1bmN0aW9uIHJldmVyc2VQYXJhbXMoaXRlcmF0b3JGbikge1xyXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IGl0ZXJhdG9yRm4oa2V5LCB2YWx1ZSkgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgY29uc2lzdGVudCB3YXkgb2YgY3JlYXRpbmcgdW5pcXVlIElEcyBpbiBhbmd1bGFyLiBUaGUgSUQgaXMgYSBzZXF1ZW5jZSBvZiBhbHBoYSBudW1lcmljXHJcbiAqIGNoYXJhY3RlcnMgc3VjaCBhcyAnMDEyQUJDJy4gVGhlIHJlYXNvbiB3aHkgd2UgYXJlIG5vdCB1c2luZyBzaW1wbHkgYSBudW1iZXIgY291bnRlciBpcyB0aGF0XHJcbiAqIHRoZSBudW1iZXIgc3RyaW5nIGdldHMgbG9uZ2VyIG92ZXIgdGltZSwgYW5kIGl0IGNhbiBhbHNvIG92ZXJmbG93LCB3aGVyZSBhcyB0aGUgbmV4dElkXHJcbiAqIHdpbGwgZ3JvdyBtdWNoIHNsb3dlciwgaXQgaXMgYSBzdHJpbmcsIGFuZCBpdCB3aWxsIG5ldmVyIG92ZXJmbG93LlxyXG4gKlxyXG4gKiBAcmV0dXJucyBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIG5leHRVaWQoKSB7XHJcbiAgdmFyIGluZGV4ID0gdWlkLmxlbmd0aDtcclxuICB2YXIgZGlnaXQ7XHJcblxyXG4gIHdoaWxlKGluZGV4KSB7XHJcbiAgICBpbmRleC0tO1xyXG4gICAgZGlnaXQgPSB1aWRbaW5kZXhdLmNoYXJDb2RlQXQoMCk7XHJcbiAgICBpZiAoZGlnaXQgPT0gNTcgLyonOScqLykge1xyXG4gICAgICB1aWRbaW5kZXhdID0gJ0EnO1xyXG4gICAgICByZXR1cm4gdWlkLmpvaW4oJycpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpZ2l0ID09IDkwICAvKidaJyovKSB7XHJcbiAgICAgIHVpZFtpbmRleF0gPSAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB1aWRbaW5kZXhdID0gU3RyaW5nLmZyb21DaGFyQ29kZShkaWdpdCArIDEpO1xyXG4gICAgICByZXR1cm4gdWlkLmpvaW4oJycpO1xyXG4gICAgfVxyXG4gIH1cclxuICB1aWQudW5zaGlmdCgnMCcpO1xyXG4gIHJldHVybiB1aWQuam9pbignJyk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogU2V0IG9yIGNsZWFyIHRoZSBoYXNoa2V5IGZvciBhbiBvYmplY3QuXHJcbiAqIEBwYXJhbSBvYmogb2JqZWN0XHJcbiAqIEBwYXJhbSBoIHRoZSBoYXNoa2V5ICghdHJ1dGh5IHRvIGRlbGV0ZSB0aGUgaGFzaGtleSlcclxuICovXHJcbmZ1bmN0aW9uIHNldEhhc2hLZXkob2JqLCBoKSB7XHJcbiAgaWYgKGgpIHtcclxuICAgIG9iai4kJGhhc2hLZXkgPSBoO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIGRlbGV0ZSBvYmouJCRoYXNoS2V5O1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmV4dGVuZFxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEV4dGVuZHMgdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBgZHN0YCBieSBjb3B5aW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcclxuICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cclxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZWZlcmVuY2UgdG8gYGRzdGAuXHJcbiAqL1xyXG5mdW5jdGlvbiBleHRlbmQoZHN0KSB7XHJcbiAgdmFyIGggPSBkc3QuJCRoYXNoS2V5O1xyXG4gIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihvYmope1xyXG4gICAgaWYgKG9iaiAhPT0gZHN0KSB7XHJcbiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KXtcclxuICAgICAgICBkc3Rba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc2V0SGFzaEtleShkc3QsaCk7XHJcbiAgcmV0dXJuIGRzdDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW50KHN0cikge1xyXG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkge1xyXG4gIHJldHVybiBleHRlbmQobmV3IChleHRlbmQoZnVuY3Rpb24oKSB7fSwge3Byb3RvdHlwZTpwYXJlbnR9KSkoKSwgZXh0cmEpO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXHJcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXHJcbiAgIDxwcmU+XHJcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XHJcbiAgICAgICB2YXIgcmVzdWx0ID0gY2FsY3VsYXRlUmVzdWx0KCk7XHJcbiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpO1xyXG4gICAgIH1cclxuICAgPC9wcmU+XHJcbiAqL1xyXG5mdW5jdGlvbiBub29wKCkge31cclxubm9vcC4kaW5qZWN0ID0gW107XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcclxuICogZnVuY3Rpb25hbCBzdHlsZS5cclxuICpcclxuICAgPHByZT5cclxuICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1lcih0cmFuc2Zvcm1hdGlvbkZuLCB2YWx1ZSkge1xyXG4gICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcclxuICAgICB9O1xyXG4gICA8L3ByZT5cclxuICovXHJcbmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9XHJcbmlkZW50aXR5LiRpbmplY3QgPSBbXTtcclxuXHJcblxyXG5mdW5jdGlvbiB2YWx1ZUZuKHZhbHVlKSB7cmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiB2YWx1ZTt9O31cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5pc1VuZGVmaW5lZFxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgdW5kZWZpbmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAndW5kZWZpbmVkJzt9XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGVmaW5lZFxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgZGVmaW5lZC5cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgZGVmaW5lZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSAhPSAndW5kZWZpbmVkJzt9XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlzT2JqZWN0XHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhbiBgT2JqZWN0YC4gVW5saWtlIGB0eXBlb2ZgIGluIEphdmFTY3JpcHQsIGBudWxsYHMgYXJlIG5vdFxyXG4gKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIGJ1dCBub3QgYG51bGxgLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpe3JldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jzt9XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlzU3RyaW5nXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBTdHJpbmdgLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBTdHJpbmdgLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpe3JldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZyc7fVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5pc051bWJlclxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgTnVtYmVyYC5cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgTnVtYmVyYC5cclxuICovXHJcbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKXtyZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInO31cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIuaXNEYXRlXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZGF0ZS5cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRGF0ZWAuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpe1xyXG4gIHJldHVybiB0b1N0cmluZy5hcHBseSh2YWx1ZSkgPT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXlcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PSAnW29iamVjdCBBcnJheV0nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cclxuICpcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSl7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nO31cclxuXHJcblxyXG4vKipcclxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nLmFwcGx5KHZhbHVlKSA9PSAnW29iamVjdCBSZWdFeHBdJztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2tcclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XHJcbiAgcmV0dXJuIG9iaiAmJiBvYmouZG9jdW1lbnQgJiYgb2JqLmxvY2F0aW9uICYmIG9iai5hbGVydCAmJiBvYmouc2V0SW50ZXJ2YWw7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc1Njb3BlKG9iaikge1xyXG4gIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcclxuICByZXR1cm4gdG9TdHJpbmcuYXBwbHkob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnYm9vbGVhbic7XHJcbn1cclxuXHJcblxyXG52YXIgdHJpbSA9IChmdW5jdGlvbigpIHtcclxuICAvLyBuYXRpdmUgdHJpbSBpcyB3YXkgZmFzdGVyOiBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyLXRyaW0tdGVzdFxyXG4gIC8vIGJ1dCBJRSBkb2Vzbid0IGhhdmUgaXQuLi4gOi0oXHJcbiAgLy8gVE9ETzogd2Ugc2hvdWxkIG1vdmUgdGhpcyBpbnRvIElFL0VTNSBwb2x5ZmlsbFxyXG4gIGlmICghU3RyaW5nLnByb3RvdHlwZS50cmltKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpIDogdmFsdWU7XHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcclxuICB9O1xyXG59KSgpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5pc0VsZW1lbnRcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cclxuICovXHJcbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XHJcbiAgcmV0dXJuIG5vZGUgJiZcclxuICAgIChub2RlLm5vZGVOYW1lICAvLyB3ZSBhcmUgYSBkaXJlY3QgZWxlbWVudFxyXG4gICAgfHwgKG5vZGUub24gJiYgbm9kZS5maW5kKSk7ICAvLyB3ZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUElcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSBzdHIgJ2tleTEsa2V5MiwuLi4nXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZU1hcChzdHIpe1xyXG4gIHZhciBvYmogPSB7fSwgaXRlbXMgPSBzdHIuc3BsaXQoXCIsXCIpLCBpO1xyXG4gIGZvciAoIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKysgKVxyXG4gICAgb2JqWyBpdGVtc1tpXSBdID0gdHJ1ZTtcclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5cclxuaWYgKG1zaWUgPCA5KSB7XHJcbiAgbm9kZU5hbWVfID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgZWxlbWVudCA9IGVsZW1lbnQubm9kZU5hbWUgPyBlbGVtZW50IDogZWxlbWVudFswXTtcclxuICAgIHJldHVybiAoZWxlbWVudC5zY29wZU5hbWUgJiYgZWxlbWVudC5zY29wZU5hbWUgIT0gJ0hUTUwnKVxyXG4gICAgICA/IHVwcGVyY2FzZShlbGVtZW50LnNjb3BlTmFtZSArICc6JyArIGVsZW1lbnQubm9kZU5hbWUpIDogZWxlbWVudC5ub2RlTmFtZTtcclxuICB9O1xyXG59IGVsc2Uge1xyXG4gIG5vZGVOYW1lXyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIHJldHVybiBlbGVtZW50Lm5vZGVOYW1lID8gZWxlbWVudC5ub2RlTmFtZSA6IGVsZW1lbnRbMF0ubm9kZU5hbWU7XHJcbiAgfTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIG1hcChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XHJcbiAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICBmb3JFYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XHJcbiAgICByZXN1bHRzLnB1c2goaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKTtcclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIGFycmF5LCB0aGUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYW4gb2JqZWN0IGhhcywgb3JcclxuICogdGhlIGxlbmd0aCBvZiBhIHN0cmluZy5cclxuICpcclxuICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGF1Z21lbnQgdGhlIE9iamVjdCB0eXBlIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFNlZVxyXG4gKiB7QGxpbmsgYW5ndWxhci5PYmplY3R9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxzdHJpbmd9IG9iaiBPYmplY3QsIGFycmF5LCBvciBzdHJpbmcgdG8gaW5zcGVjdC5cclxuICogQHBhcmFtIHtib29sZWFufSBbb3duUHJvcHNPbmx5PWZhbHNlXSBDb3VudCBvbmx5IFwib3duXCIgcHJvcGVydGllcyBpbiBhbiBvYmplY3RcclxuICogQHJldHVybnMge251bWJlcn0gVGhlIHNpemUgb2YgYG9iamAgb3IgYDBgIGlmIGBvYmpgIGlzIG5laXRoZXIgYW4gb2JqZWN0IG5vciBhbiBhcnJheS5cclxuICovXHJcbmZ1bmN0aW9uIHNpemUob2JqLCBvd25Qcm9wc09ubHkpIHtcclxuICB2YXIgc2l6ZSA9IDAsIGtleTtcclxuXHJcbiAgaWYgKGlzQXJyYXkob2JqKSB8fCBpc1N0cmluZyhvYmopKSB7XHJcbiAgICByZXR1cm4gb2JqLmxlbmd0aDtcclxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KG9iaikpe1xyXG4gICAgZm9yIChrZXkgaW4gb2JqKVxyXG4gICAgICBpZiAoIW93blByb3BzT25seSB8fCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSlcclxuICAgICAgICBzaXplKys7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2l6ZTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHtcclxuICByZXR1cm4gaW5kZXhPZihhcnJheSwgb2JqKSAhPSAtMTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgb2JqKSB7XHJcbiAgaWYgKGFycmF5LmluZGV4T2YpIHJldHVybiBhcnJheS5pbmRleE9mKG9iaik7XHJcblxyXG4gIGZvciAoIHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAob2JqID09PSBhcnJheVtpXSkgcmV0dXJuIGk7XHJcbiAgfVxyXG4gIHJldHVybiAtMTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXJyYXlSZW1vdmUoYXJyYXksIHZhbHVlKSB7XHJcbiAgdmFyIGluZGV4ID0gaW5kZXhPZihhcnJheSwgdmFsdWUpO1xyXG4gIGlmIChpbmRleCA+PTApXHJcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNMZWFmTm9kZSAobm9kZSkge1xyXG4gIGlmIChub2RlKSB7XHJcbiAgICBzd2l0Y2ggKG5vZGUubm9kZU5hbWUpIHtcclxuICAgIGNhc2UgXCJPUFRJT05cIjpcclxuICAgIGNhc2UgXCJQUkVcIjpcclxuICAgIGNhc2UgXCJUSVRMRVwiOlxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIuY29weVxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAsIHdoaWNoIHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuXHJcbiAqXHJcbiAqICogSWYgbm8gZGVzdGluYXRpb24gaXMgc3VwcGxpZWQsIGEgY29weSBvZiB0aGUgb2JqZWN0IG9yIGFycmF5IGlzIGNyZWF0ZWQuXHJcbiAqICogSWYgYSBkZXN0aW5hdGlvbiBpcyBwcm92aWRlZCwgYWxsIG9mIGl0cyBlbGVtZW50cyAoZm9yIGFycmF5KSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cylcclxuICogICBhcmUgZGVsZXRlZCBhbmQgdGhlbiBhbGwgZWxlbWVudHMvcHJvcGVydGllcyBmcm9tIHRoZSBzb3VyY2UgYXJlIGNvcGllZCB0byBpdC5cclxuICogKiBJZiAgYHNvdXJjZWAgaXMgbm90IGFuIG9iamVjdCBvciBhcnJheSwgYHNvdXJjZWAgaXMgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBPYmplY3QgdHlwZSBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBTZWVcclxuICoge0BsaW5rIG5nLiRmaWx0ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEFuZ3VsYXIgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBUaGUgc291cmNlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1ha2UgYSBjb3B5LlxyXG4gKiAgICAgICAgICAgICAgICAgICBDYW4gYmUgYW55IHR5cGUsIGluY2x1ZGluZyBwcmltaXRpdmVzLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYC5cclxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXHJcbiAqICAgICBwcm92aWRlZCwgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlIGFzIGBzb3VyY2VgLlxyXG4gKiBAcmV0dXJucyB7Kn0gVGhlIGNvcHkgb3IgdXBkYXRlZCBgZGVzdGluYXRpb25gLCBpZiBgZGVzdGluYXRpb25gIHdhcyBzcGVjaWZpZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdGluYXRpb24pe1xyXG4gIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xyXG4gICAgdGhyb3cgbmdNaW5FcnIoJ2Nwd3MnLCBcIkNhbid0IGNvcHkhIE1ha2luZyBjb3BpZXMgb2YgV2luZG93IG9yIFNjb3BlIGluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcclxuICB9XHJcblxyXG4gIGlmICghZGVzdGluYXRpb24pIHtcclxuICAgIGRlc3RpbmF0aW9uID0gc291cmNlO1xyXG4gICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XHJcbiAgICAgICAgZGVzdGluYXRpb24gPSBjb3B5KHNvdXJjZSwgW10pO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzRGF0ZShzb3VyY2UpKSB7XHJcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgRGF0ZShzb3VyY2UuZ2V0VGltZSgpKTtcclxuICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChzb3VyY2UpKSB7XHJcbiAgICAgICAgZGVzdGluYXRpb24gPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UpO1xyXG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICBkZXN0aW5hdGlvbiA9IGNvcHkoc291cmNlLCB7fSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHRocm93IG5nTWluRXJyKCdjcGknLCBcIkNhbid0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC5cIik7XHJcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpKSB7XHJcbiAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7XHJcbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY29weShzb3VyY2VbaV0pKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIGggPSBkZXN0aW5hdGlvbi4kJGhhc2hLZXk7XHJcbiAgICAgIGZvckVhY2goZGVzdGluYXRpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpe1xyXG4gICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldO1xyXG4gICAgICB9KTtcclxuICAgICAgZm9yICggdmFyIGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weShzb3VyY2Vba2V5XSk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbixoKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGRlc3RpbmF0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd0NvcHkoc3JjLCBkc3QpIHtcclxuICBkc3QgPSBkc3QgfHwge307XHJcblxyXG4gIGZvcih2YXIga2V5IGluIHNyYykge1xyXG4gICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5zdWJzdHIoMCwgMikgIT09ICckJCcpIHtcclxuICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBkc3Q7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhciBleHByZXNzaW9ucywgYXJyYXlzIGFuZFxyXG4gKiBvYmplY3RzLlxyXG4gKlxyXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxyXG4gKlxyXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgcGFzcyBgPT09YCBjb21wYXJpc29uLlxyXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIHBhc3MgYD09PWAgY29tcGFyaXNvbi5cclxuICogKiBCb3RoIHZhbHVlcyBhcmUgTmFOLiAoSW4gSmF2YXNTY3JpcHQsIE5hTiA9PSBOYU4gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gTmFOIGFzIGVxdWFsKVxyXG4gKiAqIEJvdGggdmFsdWVzIHJlcHJlc2VudCB0aGUgc2FtZSByZWd1bGFyIGV4cHJlc3Npb24gKEluIEphdmFzU2NyaXB0LFxyXG4gKiAgIC9hYmMvID09IC9hYmMvID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXMgZXF1YWwgd2hlbiB0aGVpciB0ZXh0dWFsXHJcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXHJcbiAqXHJcbiAqIER1cmluZyBhIHByb3BlcnR5IGNvbXBhcmlzb24sIHByb3BlcnRpZXMgb2YgYGZ1bmN0aW9uYCB0eXBlIGFuZCBwcm9wZXJ0aWVzIHdpdGggbmFtZXNcclxuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cclxuICpcclxuICogU2NvcGUgYW5kIERPTVdpbmRvdyBvYmplY3RzIGFyZSBiZWluZyBjb21wYXJlZCBvbmx5IGJ5IGlkZW50aWZ5IChgPT09YCkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gbzEgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXHJcbiAqIEBwYXJhbSB7Kn0gbzIgT2JqZWN0IG9yIHZhbHVlIHRvIGNvbXBhcmUuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXHJcbiAqL1xyXG5mdW5jdGlvbiBlcXVhbHMobzEsIG8yKSB7XHJcbiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7XHJcbiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7XHJcbiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTlxyXG4gIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7XHJcbiAgaWYgKHQxID09IHQyKSB7XHJcbiAgICBpZiAodDEgPT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKGlzQXJyYXkobzEpKSB7XHJcbiAgICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICgobGVuZ3RoID0gbzEubGVuZ3RoKSA9PSBvMi5sZW5ndGgpIHtcclxuICAgICAgICAgIGZvcihrZXk9MDsga2V5PGxlbmd0aDsga2V5KyspIHtcclxuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChpc0RhdGUobzEpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzRGF0ZShvMikgJiYgbzEuZ2V0VGltZSgpID09IG8yLmdldFRpbWUoKTtcclxuICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChvMSkgJiYgaXNSZWdFeHAobzIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT0gbzIudG9TdHJpbmcoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNTY29wZShvMSkgfHwgaXNTY29wZShvMikgfHwgaXNXaW5kb3cobzEpIHx8IGlzV2luZG93KG8yKSB8fCBpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGtleVNldCA9IHt9O1xyXG4gICAgICAgIGZvcihrZXkgaW4gbzEpIHtcclxuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XHJcbiAgICAgICAgICBpZiAoIWVxdWFscyhvMVtrZXldLCBvMltrZXldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAga2V5U2V0W2tleV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3Ioa2V5IGluIG8yKSB7XHJcbiAgICAgICAgICBpZiAoIWtleVNldC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXHJcbiAgICAgICAgICAgICAga2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmXHJcbiAgICAgICAgICAgICAgbzJba2V5XSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY29uY2F0KGFycmF5MSwgYXJyYXkyLCBpbmRleCkge1xyXG4gIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xyXG4gIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIGFuZ3VsYXIuYmluZFxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBjYWxscyBmdW5jdGlvbiBgZm5gIGJvdW5kIHRvIGBzZWxmYCAoYHNlbGZgIGJlY29tZXMgdGhlIGB0aGlzYCBmb3JcclxuICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvXHJcbiAqIGtub3duIGFzIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZykuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEZ1bmN0aW9uIHRvIGJlIGJvdW5kLlxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuXHJcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuXHJcbiAqL1xyXG5mdW5jdGlvbiBiaW5kKHNlbGYsIGZuKSB7XHJcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcclxuICBpZiAoaXNGdW5jdGlvbihmbikgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgIHJldHVybiBjdXJyeUFyZ3MubGVuZ3RoXHJcbiAgICAgID8gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgICAgICA/IGZuLmFwcGx5KHNlbGYsIGN1cnJ5QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKSlcclxuICAgICAgICAgICAgOiBmbi5hcHBseShzZWxmLCBjdXJyeUFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxyXG4gICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7XHJcbiAgICAgICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpXHJcbiAgICByZXR1cm4gZm47XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xyXG4gIHZhciB2YWwgPSB2YWx1ZTtcclxuXHJcbiAgaWYgKC9eXFwkKy8udGVzdChrZXkpKSB7XHJcbiAgICB2YWwgPSB1bmRlZmluZWQ7XHJcbiAgfSBlbHNlIGlmIChpc1dpbmRvdyh2YWx1ZSkpIHtcclxuICAgIHZhbCA9ICckV0lORE9XJztcclxuICB9IGVsc2UgaWYgKHZhbHVlICYmICBkb2N1bWVudCA9PT0gdmFsdWUpIHtcclxuICAgIHZhbCA9ICckRE9DVU1FTlQnO1xyXG4gIH0gZWxzZSBpZiAoaXNTY29wZSh2YWx1ZSkpIHtcclxuICAgIHZhbCA9ICckU0NPUEUnO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHZhbDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci50b0pzb25cclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQgY2hhcmFjdGVycyB3aWxsIGJlXHJcbiAqIHN0cmlwcGVkIHNpbmNlIGFuZ3VsYXIgdXNlcyB0aGlzIG5vdGF0aW9uIGludGVybmFsbHkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcn0gb2JqIElucHV0IHRvIGJlIHNlcmlhbGl6ZWQgaW50byBKU09OLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBwcmV0dHkgSWYgc2V0IHRvIHRydWUsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgYW5kIHdoaXRlc3BhY2UuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBKU09OLWlmaWVkIHN0cmluZyByZXByZXNlbnRpbmcgYG9iamAuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHtcclxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSA/ICcgICcgOiBudWxsKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvbiBKU09OIHN0cmluZyB0byBkZXNlcmlhbGl6ZS5cclxuICogQHJldHVybnMge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IERlc2VyaWFsaXplZCB0aGluZ3kuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7XHJcbiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pXHJcbiAgICAgID8gSlNPTi5wYXJzZShqc29uKVxyXG4gICAgICA6IGpzb247XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiB0b0Jvb2xlYW4odmFsdWUpIHtcclxuICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICB2YXIgdiA9IGxvd2VyY2FzZShcIlwiICsgdmFsdWUpO1xyXG4gICAgdmFsdWUgPSAhKHYgPT0gJ2YnIHx8IHYgPT0gJzAnIHx8IHYgPT0gJ2ZhbHNlJyB8fCB2ID09ICdubycgfHwgdiA9PSAnbicgfHwgdiA9PSAnW10nKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFsdWUgPSBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG4vKipcclxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkge1xyXG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKTtcclxuICB0cnkge1xyXG4gICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2hcclxuICAgIC8vIGFyZSBub3QgYWxsb3dlZCB0byBoYXZlIGNoaWxkcmVuLiBTbyB3ZSBqdXN0IGlnbm9yZSBpdC5cclxuICAgIGVsZW1lbnQuaHRtbCgnJyk7XHJcbiAgfSBjYXRjaChlKSB7fVxyXG4gIC8vIEFzIFBlciBET00gU3RhbmRhcmRzXHJcbiAgdmFyIFRFWFRfTk9ERSA9IDM7XHJcbiAgdmFyIGVsZW1IdG1sID0ganFMaXRlKCc8ZGl2PicpLmFwcGVuZChlbGVtZW50KS5odG1sKCk7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBlbGVtZW50WzBdLm5vZGVUeXBlID09PSBURVhUX05PREUgPyBsb3dlcmNhc2UoZWxlbUh0bWwpIDpcclxuICAgICAgICBlbGVtSHRtbC5cclxuICAgICAgICAgIG1hdGNoKC9eKDxbXj5dKz4pLylbMV0uXHJcbiAgICAgICAgICByZXBsYWNlKC9ePChbXFx3XFwtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4vKipcclxuICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXHJcbiAqIHdpdGggdGhlIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICB9IGNhdGNoKGUpIHtcclxuICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuXHJcbiAqIEByZXR1cm5zIE9iamVjdC48KHN0cmluZ3xib29sZWFuKT5cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xyXG4gIHZhciBvYmogPSB7fSwga2V5X3ZhbHVlLCBrZXk7XHJcbiAgZm9yRWFjaCgoa2V5VmFsdWUgfHwgXCJcIikuc3BsaXQoJyYnKSwgZnVuY3Rpb24oa2V5VmFsdWUpe1xyXG4gICAgaWYgKCBrZXlWYWx1ZSApIHtcclxuICAgICAga2V5X3ZhbHVlID0ga2V5VmFsdWUuc3BsaXQoJz0nKTtcclxuICAgICAga2V5ID0gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVswXSk7XHJcbiAgICAgIGlmICggaXNEZWZpbmVkKGtleSkgKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGlzRGVmaW5lZChrZXlfdmFsdWVbMV0pID8gdHJ5RGVjb2RlVVJJQ29tcG9uZW50KGtleV92YWx1ZVsxXSkgOiB0cnVlO1xyXG4gICAgICAgIGlmICghb2JqW2tleV0pIHtcclxuICAgICAgICAgIG9ialtrZXldID0gdmFsO1xyXG4gICAgICAgIH0gZWxzZSBpZihpc0FycmF5KG9ialtrZXldKSkge1xyXG4gICAgICAgICAgb2JqW2tleV0ucHVzaCh2YWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvS2V5VmFsdWUob2JqKSB7XHJcbiAgdmFyIHBhcnRzID0gW107XHJcbiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7XHJcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICsgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XHJcbiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aFxyXG4gKiBzZWdtZW50czpcclxuICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxyXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcclxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcclxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxyXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXHJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkge1xyXG4gIHJldHVybiBlbmNvZGVVcmlRdWVyeSh2YWwsIHRydWUpLlxyXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLlxyXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLlxyXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJCL2dpLCAnKycpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbVxyXG4gKiBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGVuY29kZXMgc3R1ZmYgdGhhdCBkb2Vzbid0IGhhdmUgdG8gYmVcclxuICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcclxuICogICAgcXVlcnkgICAgICAgPSAqKCBwY2hhciAvIFwiL1wiIC8gXCI/XCIgKVxyXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcclxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxyXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xyXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXHJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xyXG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cclxuICAgICAgICAgICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cclxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cclxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxyXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxyXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQXBwXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2FuZ3VsYXIuTW9kdWxlfSBuZ0FwcCBhbiBvcHRpb25hbCBhcHBsaWNhdGlvblxyXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBhdXRvLWJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi4gT25seVxyXG4gKiBvbmUgbmdBcHAgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHBlciBIVE1MIGRvY3VtZW50LiBUaGUgZGlyZWN0aXZlXHJcbiAqIGRlc2lnbmF0ZXMgdGhlIHJvb3Qgb2YgdGhlIGFwcGxpY2F0aW9uIGFuZCBpcyB0eXBpY2FsbHkgcGxhY2VkXHJcbiAqIGF0IHRoZSByb290IG9mIHRoZSBwYWdlLlxyXG4gKlxyXG4gKiBUaGUgZmlyc3QgbmdBcHAgZm91bmQgaW4gdGhlIGRvY3VtZW50IHdpbGwgYmUgYXV0by1ib290c3RyYXBwZWQuIFRvIHVzZSBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW5cclxuICogSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZyB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9LlxyXG4gKiBBcHBsaWNhdGlvbnMgY2Fubm90IGJlIG5lc3RlZC5cclxuICpcclxuICogSW4gdGhlIGV4YW1wbGUgYmVsb3cgaWYgdGhlIGBuZ0FwcGAgZGlyZWN0aXZlIHdvdWxkIG5vdCBiZSBwbGFjZWRcclxuICogb24gdGhlIGBodG1sYCBlbGVtZW50IHRoZW4gdGhlIGRvY3VtZW50IHdvdWxkIG5vdCBiZSBjb21waWxlZFxyXG4gKiBhbmQgdGhlIGB7eyAxKzIgfX1gIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuXHJcbiAqXHJcbiAqIGBuZ0FwcGAgaXMgdGhlIGVhc2llc3Qgd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi5cclxuICpcclxuIDxkb2M6ZXhhbXBsZT5cclxuICAgPGRvYzpzb3VyY2U+XHJcbiAgICBJIGNhbiBhZGQ6IDEgKyAyID0gIHt7IDErMiB9fVxyXG4gICA8L2RvYzpzb3VyY2U+XHJcbiA8L2RvYzpleGFtcGxlPlxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gYW5ndWxhckluaXQoZWxlbWVudCwgYm9vdHN0cmFwKSB7XHJcbiAgdmFyIGVsZW1lbnRzID0gW2VsZW1lbnRdLFxyXG4gICAgICBhcHBFbGVtZW50LFxyXG4gICAgICBtb2R1bGUsXHJcbiAgICAgIG5hbWVzID0gWyduZzphcHAnLCAnbmctYXBwJywgJ3gtbmctYXBwJywgJ2RhdGEtbmctYXBwJ10sXHJcbiAgICAgIE5HX0FQUF9DTEFTU19SRUdFWFAgPSAvXFxzbmdbOlxcLV1hcHAoOlxccyooW1xcd1xcZF9dKyk7Pyk/XFxzLztcclxuXHJcbiAgZnVuY3Rpb24gYXBwZW5kKGVsZW1lbnQpIHtcclxuICAgIGVsZW1lbnQgJiYgZWxlbWVudHMucHVzaChlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIG5hbWVzW25hbWVdID0gdHJ1ZTtcclxuICAgIGFwcGVuZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChuYW1lKSk7XHJcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6Jyk7XHJcbiAgICBpZiAoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7XHJcbiAgICAgIGZvckVhY2goZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIG5hbWUpLCBhcHBlbmQpO1xyXG4gICAgICBmb3JFYWNoKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBuYW1lICsgJ1xcXFw6JyksIGFwcGVuZCk7XHJcbiAgICAgIGZvckVhY2goZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIG5hbWUgKyAnXScpLCBhcHBlbmQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBpZiAoIWFwcEVsZW1lbnQpIHtcclxuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnO1xyXG4gICAgICB2YXIgbWF0Y2ggPSBOR19BUFBfQ0xBU1NfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKTtcclxuICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgYXBwRWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgbW9kdWxlID0gKG1hdGNoWzJdIHx8ICcnKS5yZXBsYWNlKC9cXHMrL2csICcsJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yRWFjaChlbGVtZW50LmF0dHJpYnV0ZXMsIGZ1bmN0aW9uKGF0dHIpIHtcclxuICAgICAgICAgIGlmICghYXBwRWxlbWVudCAmJiBuYW1lc1thdHRyLm5hbWVdKSB7XHJcbiAgICAgICAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICBtb2R1bGUgPSBhdHRyLnZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaWYgKGFwcEVsZW1lbnQpIHtcclxuICAgIGJvb3RzdHJhcChhcHBFbGVtZW50LCBtb2R1bGUgPyBbbW9kdWxlXSA6IFtdKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFNlZToge0BsaW5rIGd1aWRlL2Jvb3RzdHJhcCBCb290c3RyYXB9XHJcbiAqXHJcbiAqIE5vdGUgdGhhdCBuZ1NjZW5hcmlvLWJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS5cclxuICogVGhleSBtdXN0IHVzZSB7QGxpbmsgYXBpL25nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0uXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxyXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbj49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZSBkZWNsYXJhdGlvbnMuIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XHJcbiAqIEByZXR1cm5zIHtBVVRPLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXHJcbiAqL1xyXG5mdW5jdGlvbiBib290c3RyYXAoZWxlbWVudCwgbW9kdWxlcykge1xyXG4gIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcclxuXHJcbiAgICBpZiAoZWxlbWVudC5pbmplY3RvcigpKSB7XHJcbiAgICAgIHZhciB0YWcgPSAoZWxlbWVudFswXSA9PT0gZG9jdW1lbnQpID8gJ2RvY3VtZW50JyA6IHN0YXJ0aW5nVGFnKGVsZW1lbnQpO1xyXG4gICAgICB0aHJvdyBuZ01pbkVycignYnRzdHJwZCcsIFwiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nXCIsIHRhZyk7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XHJcbiAgICBtb2R1bGVzLnVuc2hpZnQoWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XHJcbiAgICAgICRwcm92aWRlLnZhbHVlKCckcm9vdEVsZW1lbnQnLCBlbGVtZW50KTtcclxuICAgIH1dKTtcclxuICAgIG1vZHVsZXMudW5zaGlmdCgnbmcnKTtcclxuICAgIHZhciBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1vZHVsZXMpO1xyXG4gICAgaW5qZWN0b3IuaW52b2tlKFsnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGNvbXBpbGUnLCAnJGluamVjdG9yJywgJyRhbmltYXRlJyxcclxuICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3RvciwgYW5pbWF0ZSkge1xyXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGluamVjdG9yJywgaW5qZWN0b3IpO1xyXG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5pbWF0ZS5lbmFibGVkKHRydWUpO1xyXG4gICAgICB9XVxyXG4gICAgKTtcclxuICAgIHJldHVybiBpbmplY3RvcjtcclxuICB9O1xyXG5cclxuICB2YXIgTkdfREVGRVJfQk9PVFNUUkFQID0gL15OR19ERUZFUl9CT09UU1RSQVAhLztcclxuXHJcbiAgaWYgKHdpbmRvdyAmJiAhTkdfREVGRVJfQk9PVFNUUkFQLnRlc3Qod2luZG93Lm5hbWUpKSB7XHJcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcclxuICB9XHJcblxyXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcclxuICBhbmd1bGFyLnJlc3VtZUJvb3RzdHJhcCA9IGZ1bmN0aW9uKGV4dHJhTW9kdWxlcykge1xyXG4gICAgZm9yRWFjaChleHRyYU1vZHVsZXMsIGZ1bmN0aW9uKG1vZHVsZSkge1xyXG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcclxuICAgIH0pO1xyXG4gICAgZG9Cb290c3RyYXAoKTtcclxuICB9O1xyXG59XHJcblxyXG52YXIgU05BS0VfQ0FTRV9SRUdFWFAgPSAvW0EtWl0vZztcclxuZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3Ipe1xyXG4gIHNlcGFyYXRvciA9IHNlcGFyYXRvciB8fCAnXyc7XHJcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShTTkFLRV9DQVNFX1JFR0VYUCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcclxuICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJpbmRKUXVlcnkoKSB7XHJcbiAgLy8gYmluZCB0byBqUXVlcnkgaWYgcHJlc2VudDtcclxuICBqUXVlcnkgPSB3aW5kb3cualF1ZXJ5O1xyXG4gIC8vIHJlc2V0IHRvIGpRdWVyeSBvciBkZWZhdWx0IHRvIHVzLlxyXG4gIGlmIChqUXVlcnkpIHtcclxuICAgIGpxTGl0ZSA9IGpRdWVyeTtcclxuICAgIGV4dGVuZChqUXVlcnkuZm4sIHtcclxuICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSxcclxuICAgICAgY29udHJvbGxlcjogSlFMaXRlUHJvdG90eXBlLmNvbnRyb2xsZXIsXHJcbiAgICAgIGluamVjdG9yOiBKUUxpdGVQcm90b3R5cGUuaW5qZWN0b3IsXHJcbiAgICAgIGluaGVyaXRlZERhdGE6IEpRTGl0ZVByb3RvdHlwZS5pbmhlcml0ZWREYXRhXHJcbiAgICB9KTtcclxuICAgIC8vIE1ldGhvZCBzaWduYXR1cmU6IEpRTGl0ZVBhdGNoSlF1ZXJ5UmVtb3ZlKG5hbWUsIGRpc3BhdGNoVGhpcywgZmlsdGVyRWxlbXMsIGdldHRlcklmTm9Bcmd1bWVudHMpXHJcbiAgICBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgncmVtb3ZlJywgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgSlFMaXRlUGF0Y2hKUXVlcnlSZW1vdmUoJ2VtcHR5JywgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZSgnaHRtbCcsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGpxTGl0ZSA9IEpRTGl0ZTtcclxuICB9XHJcbiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlO1xyXG59XHJcblxyXG4vKipcclxuICogdGhyb3cgZXJyb3IgaWYgdGhlIGFyZ3VtZW50IGlzIGZhbHN5LlxyXG4gKi9cclxuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XHJcbiAgaWYgKCFhcmcpIHtcclxuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgXCJBcmd1bWVudCAnezB9JyBpcyB7MX1cIiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCBcInJlcXVpcmVkXCIpKTtcclxuICB9XHJcbiAgcmV0dXJuIGFyZztcclxufVxyXG5cclxuZnVuY3Rpb24gYXNzZXJ0QXJnRm4oYXJnLCBuYW1lLCBhY2NlcHRBcnJheUFubm90YXRpb24pIHtcclxuICBpZiAoYWNjZXB0QXJyYXlBbm5vdGF0aW9uICYmIGlzQXJyYXkoYXJnKSkge1xyXG4gICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdO1xyXG4gIH1cclxuXHJcbiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArXHJcbiAgICAgIChhcmcgJiYgdHlwZW9mIGFyZyA9PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpO1xyXG4gIHJldHVybiBhcmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc2libGUgZnJvbSB0aGUgb2JqZWN0IGJ5IHBhdGguIEFueSB1bmRlZmluZWQgdHJhdmVyc2FscyBhcmUgaWdub3JlZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHN0YXJ0aW5nIG9iamVjdFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj10cnVlfSBiaW5kRm5Ub1Njb3BlXHJcbiAqIEByZXR1cm5zIHZhbHVlIGFzIGFjY2Vzc2libGUgYnkgcGF0aFxyXG4gKi9cclxuLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkXHJcbmZ1bmN0aW9uIGdldHRlcihvYmosIHBhdGgsIGJpbmRGblRvU2NvcGUpIHtcclxuICBpZiAoIXBhdGgpIHJldHVybiBvYmo7XHJcbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgdmFyIGtleTtcclxuICB2YXIgbGFzdEluc3RhbmNlID0gb2JqO1xyXG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAga2V5ID0ga2V5c1tpXTtcclxuICAgIGlmIChvYmopIHtcclxuICAgICAgb2JqID0gKGxhc3RJbnN0YW5jZSA9IG9iailba2V5XTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKCFiaW5kRm5Ub1Njb3BlICYmIGlzRnVuY3Rpb24ob2JqKSkge1xyXG4gICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGludGVyZmFjZVxyXG4gKiBAbmFtZSBhbmd1bGFyLk1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogSW50ZXJmYWNlIGZvciBjb25maWd1cmluZyBhbmd1bGFyIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfS5cclxuICovXHJcblxyXG5mdW5jdGlvbiBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpIHtcclxuXHJcbiAgZnVuY3Rpb24gZW5zdXJlKG9iaiwgbmFtZSwgZmFjdG9yeSkge1xyXG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBlbnN1cmUoZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpLCAnbW9kdWxlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBhbmd1bGFyLk1vZHVsZT59ICovXHJcbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgKiBAbmFtZSBhbmd1bGFyLm1vZHVsZVxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKlxyXG4gICAgICogVGhlIGBhbmd1bGFyLm1vZHVsZWAgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyIG1vZHVsZXMuXHJcbiAgICAgKiBBbGwgbW9kdWxlcyAoYW5ndWxhciBjb3JlIG9yIDNyZCBwYXJ0eSkgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIHRvIGFuIGFwcGxpY2F0aW9uIG11c3QgYmVcclxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXHJcbiAgICAgKlxyXG4gICAgICogV2hlbiBwYXNzZWQgdHdvIG9yIG1vcmUgYXJndW1lbnRzLCBhIG5ldyBtb2R1bGUgaXMgY3JlYXRlZC4gIElmIHBhc3NlZCBvbmx5IG9uZSBhcmd1bWVudCwgYW5cclxuICAgICAqIGV4aXN0aW5nIG1vZHVsZSAodGhlIG5hbWUgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgbW9kdWxlYCkgaXMgcmV0cmlldmVkLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiAjIE1vZHVsZVxyXG4gICAgICpcclxuICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgZmlsdGVycywgYW5kIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXHJcbiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS5cclxuICAgICAqXHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZVxyXG4gICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pO1xyXG4gICAgICpcclxuICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2VcclxuICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpO1xyXG4gICAgICpcclxuICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLlxyXG4gICAgICogbXlNb2R1bGUuY29uZmlnKGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XHJcbiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcclxuICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xyXG4gICAgICogfSk7XHJcbiAgICAgKiA8L3ByZT5cclxuICAgICAqXHJcbiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6XHJcbiAgICAgKlxyXG4gICAgICogPHByZT5cclxuICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdNeU1vZHVsZSddKVxyXG4gICAgICogPC9wcmU+XHJcbiAgICAgKlxyXG4gICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlXHJcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvclxyXG4gICAgICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfSB0byBzaW1wbGlmeSB0aGlzIHByb2Nlc3MgZm9yIHlvdS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZiB1bnNwZWNpZmllZCB0aGVuIHRoZVxyXG4gICAgICogICAgICAgIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBPcHRpb25hbCBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGUgbW9kdWxlLiBTYW1lIGFzXHJcbiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LlxyXG4gICAgICogQHJldHVybnMge21vZHVsZX0gbmV3IG1vZHVsZSB3aXRoIHRoZSB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9IGFwaS5cclxuICAgICAqL1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHtcclxuICAgICAgaWYgKHJlcXVpcmVzICYmIG1vZHVsZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZW5zdXJlKG1vZHVsZXMsIG5hbWUsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghcmVxdWlyZXMpIHtcclxuICAgICAgICAgIHRocm93IG1pbkVycignJGluamVjdG9yJykoJ25vbW9kJywgXCJNb2R1bGUgJ3swfScgaXMgbm90IGF2YWlsYWJsZSEgWW91IGVpdGhlciBtaXNzcGVsbGVkIHRoZSBtb2R1bGUgbmFtZSBcIiArXHJcbiAgICAgICAgICAgICAgXCJvciBmb3Jnb3QgdG8gbG9hZCBpdC4gSWYgcmVnaXN0ZXJpbmcgYSBtb2R1bGUgZW5zdXJlIHRoYXQgeW91IHNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBhcyB0aGUgc2Vjb25kIFwiICtcclxuICAgICAgICAgICAgICBcImFyZ3VtZW50LlwiLCBuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqL1xyXG4gICAgICAgIHZhciBpbnZva2VRdWV1ZSA9IFtdO1xyXG5cclxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xyXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcclxuXHJcbiAgICAgICAgdmFyIGNvbmZpZyA9IGludm9rZUxhdGVyKCckaW5qZWN0b3InLCAnaW52b2tlJyk7XHJcblxyXG4gICAgICAgIC8qKiBAdHlwZSB7YW5ndWxhci5Nb2R1bGV9ICovXHJcbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xyXG4gICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZVxyXG4gICAgICAgICAgX2ludm9rZVF1ZXVlOiBpbnZva2VRdWV1ZSxcclxuICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcyxcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcmVxdWlyZXNcclxuICAgICAgICAgICAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59IExpc3Qgb2YgbW9kdWxlIG5hbWVzIHdoaWNoIG11c3QgYmUgbG9hZGVkIGJlZm9yZSB0aGlzIG1vZHVsZS5cclxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXMgbG9hZGVkLlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICByZXF1aXJlczogcmVxdWlyZXMsXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcclxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI25hbWVcclxuICAgICAgICAgICAqIEBwcm9wZXJ0eU9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBOYW1lIG9mIHRoZSBtb2R1bGUuXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgbmFtZTogbmFtZSxcclxuXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNwcm92aWRlclxyXG4gICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyVHlwZSBDb25zdHJ1Y3Rpb24gZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VydmljZS5cclxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3Byb3ZpZGVyICRwcm92aWRlLnByb3ZpZGVyKCl9LlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmYWN0b3J5XHJcbiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGVcclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxyXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxyXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgKiBTZWUge0BsaW5rIEFVVE8uJHByb3ZpZGUjZmFjdG9yeSAkcHJvdmlkZS5mYWN0b3J5KCl9LlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnZmFjdG9yeScpLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZVxyXG4gICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIEEgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGluc3RhbnRpYXRlZC5cclxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS5cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSxcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3ZhbHVlXHJcbiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGVcclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHNlcnZpY2UgbmFtZVxyXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgU2VydmljZSBpbnN0YW5jZSBvYmplY3QuXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgQVVUTy4kcHJvdmlkZSN2YWx1ZSAkcHJvdmlkZS52YWx1ZSgpfS5cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uc3RhbnRcclxuICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZVxyXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgY29uc3RhbnQgbmFtZVxyXG4gICAgICAgICAgICogQHBhcmFtIHsqfSBvYmplY3QgQ29uc3RhbnQgdmFsdWUuXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqIEJlY2F1c2UgdGhlIGNvbnN0YW50IGFyZSBmaXhlZCwgdGhleSBnZXQgYXBwbGllZCBiZWZvcmUgb3RoZXIgcHJvdmlkZSBtZXRob2RzLlxyXG4gICAgICAgICAgICogU2VlIHtAbGluayBBVVRPLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBjb25zdGFudDogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ2NvbnN0YW50JywgJ3Vuc2hpZnQnKSxcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxyXG4gICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxyXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW4gYW5pbWF0aW9uLlxyXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgKlxyXG4gICAgICAgICAgICogKipOT1RFKio6IGFuaW1hdGlvbnMgYXJlIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC5cclxuICAgICAgICAgICAqXHJcbiAgICAgICAgICAgKlxyXG4gICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGgge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZSAkYW5pbWF0ZX0gc2VydmljZSBhbmRcclxuICAgICAgICAgICAqIGRpcmVjdGl2ZXMgdGhhdCB1c2UgdGhpcyBzZXJ2aWNlLlxyXG4gICAgICAgICAgICpcclxuICAgICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICAgKiBtb2R1bGUuYW5pbWF0aW9uKCcuYW5pbWF0aW9uLW5hbWUnLCBmdW5jdGlvbigkaW5qZWN0MSwgJGluamVjdDIpIHtcclxuICAgICAgICAgICAqICAgcmV0dXJuIHtcclxuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XHJcbiAgICAgICAgICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cclxuICAgICAgICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpXHJcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICogICAgICAgICAvL2NvZGUgdG8gY2FuY2VsIHRoZSBhbmltYXRpb25cclxuICAgICAgICAgICAqICAgICAgIH1cclxuICAgICAgICAgICAqICAgICB9XHJcbiAgICAgICAgICAgKiAgIH1cclxuICAgICAgICAgICAqIH0pXHJcbiAgICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgICAqXHJcbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nQW5pbWF0ZS4kYW5pbWF0ZVByb3ZpZGVyI3JlZ2lzdGVyICRhbmltYXRlUHJvdmlkZXIucmVnaXN0ZXIoKX0gYW5kXHJcbiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlIG5nQW5pbWF0ZSBtb2R1bGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBhbmltYXRpb246IGludm9rZUxhdGVyKCckYW5pbWF0ZVByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcclxuICAgICAgICAgICAqIEBtZXRob2RPZiBhbmd1bGFyLk1vZHVsZVxyXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUuXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBmaWx0ZXIuXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigpfS5cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgZmlsdGVyOiBpbnZva2VMYXRlcignJGZpbHRlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXHJcblxyXG4gICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXHJcbiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGVcclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENvbnRyb2xsZXIgbmFtZS5cclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciAkY29udHJvbGxlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlcignJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxyXG5cclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlXHJcbiAgICAgICAgICAgKiBAbWV0aG9kT2YgYW5ndWxhci5Nb2R1bGVcclxuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGRpcmVjdGl2ZSBuYW1lXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxyXG4gICAgICAgICAgICogZGlyZWN0aXZlcy5cclxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlcignJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ1xyXG4gICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWdGbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gb24gbW9kdWxlIGxvYWQuIFVzZWZ1bCBmb3Igc2VydmljZVxyXG4gICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi5cclxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlZ2lzdGVyIHdvcmsgd2hpY2ggbmVlZHMgdG8gYmUgcGVyZm9ybWVkIG9uIG1vZHVsZSBsb2FkaW5nLlxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcclxuXHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1blxyXG4gICAgICAgICAgICogQG1ldGhvZE9mIGFuZ3VsYXIuTW9kdWxlXHJcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cclxuICAgICAgICAgICAqICAgIFVzZWZ1bCBmb3IgYXBwbGljYXRpb24gaW5pdGlhbGl6YXRpb24uXHJcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxyXG4gICAgICAgICAgICogbG9hZGluZyBhbGwgbW9kdWxlcy5cclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykge1xyXG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChjb25maWdGbikge1xyXG4gICAgICAgICAgY29uZmlnKGNvbmZpZ0ZuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAgbW9kdWxlSW5zdGFuY2U7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcclxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QpIHtcclxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW52b2tlUXVldWVbaW5zZXJ0TWV0aG9kIHx8ICdwdXNoJ10oW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIHByb3BlcnR5XHJcbiAqIEBuYW1lIGFuZ3VsYXIudmVyc2lvblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uIFRoaXMgb2JqZWN0IGhhcyB0aGVcclxuICogZm9sbG93aW5nIHByb3BlcnRpZXM6XHJcbiAqXHJcbiAqIC0gYGZ1bGxgIMOi4oKs4oCcIGB7c3RyaW5nfWAgw6LigqzigJwgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxyXG4gKiAtIGBtYWpvcmAgw6LigqzigJwgYHtudW1iZXJ9YCDDouKCrOKAnCBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cclxuICogLSBgbWlub3JgIMOi4oKs4oCcIGB7bnVtYmVyfWAgw6LigqzigJwgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXHJcbiAqIC0gYGRvdGAgw6LigqzigJwgYHtudW1iZXJ9YCDDouKCrOKAnCBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxyXG4gKiAtIGBjb2RlTmFtZWAgw6LigqzigJwgYHtzdHJpbmd9YCDDouKCrOKAnCBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cclxuICovXHJcbnZhciB2ZXJzaW9uID0ge1xyXG4gIGZ1bGw6ICcxLjIuMC1yYy4yJywgICAgLy8gYWxsIG9mIHRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzXHJcbiAgbWFqb3I6IDEsICAgIC8vIHBhY2thZ2UgdGFza1xyXG4gIG1pbm9yOiAyLFxyXG4gIGRvdDogMCxcclxuICBjb2RlTmFtZTogJ2JhcmVoYW5kLWF0b21zcGxpdHRpbmcnXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpe1xyXG4gIGV4dGVuZChhbmd1bGFyLCB7XHJcbiAgICAnYm9vdHN0cmFwJzogYm9vdHN0cmFwLFxyXG4gICAgJ2NvcHknOiBjb3B5LFxyXG4gICAgJ2V4dGVuZCc6IGV4dGVuZCxcclxuICAgICdlcXVhbHMnOiBlcXVhbHMsXHJcbiAgICAnZWxlbWVudCc6IGpxTGl0ZSxcclxuICAgICdmb3JFYWNoJzogZm9yRWFjaCxcclxuICAgICdpbmplY3Rvcic6IGNyZWF0ZUluamVjdG9yLFxyXG4gICAgJ25vb3AnOm5vb3AsXHJcbiAgICAnYmluZCc6YmluZCxcclxuICAgICd0b0pzb24nOiB0b0pzb24sXHJcbiAgICAnZnJvbUpzb24nOiBmcm9tSnNvbixcclxuICAgICdpZGVudGl0eSc6aWRlbnRpdHksXHJcbiAgICAnaXNVbmRlZmluZWQnOiBpc1VuZGVmaW5lZCxcclxuICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsXHJcbiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZyxcclxuICAgICdpc0Z1bmN0aW9uJzogaXNGdW5jdGlvbixcclxuICAgICdpc09iamVjdCc6IGlzT2JqZWN0LFxyXG4gICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsXHJcbiAgICAnaXNFbGVtZW50JzogaXNFbGVtZW50LFxyXG4gICAgJ2lzQXJyYXknOiBpc0FycmF5LFxyXG4gICAgJyQkbWluRXJyJzogbWluRXJyLFxyXG4gICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLFxyXG4gICAgJ2lzRGF0ZSc6IGlzRGF0ZSxcclxuICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsXHJcbiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLFxyXG4gICAgJ2NhbGxiYWNrcyc6IHtjb3VudGVyOiAwfVxyXG4gIH0pO1xyXG5cclxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcclxuICB0cnkge1xyXG4gICAgYW5ndWxhck1vZHVsZSgnbmdMb2NhbGUnKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScsIFtdKS5wcm92aWRlcignJGxvY2FsZScsICRMb2NhbGVQcm92aWRlcik7XHJcbiAgfVxyXG5cclxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXHJcbiAgICBmdW5jdGlvbiBuZ01vZHVsZSgkcHJvdmlkZSkge1xyXG4gICAgICAkcHJvdmlkZS5wcm92aWRlcignJGNvbXBpbGUnLCAkQ29tcGlsZVByb3ZpZGVyKS5cclxuICAgICAgICBkaXJlY3RpdmUoe1xyXG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBpbnB1dDogaW5wdXREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIHRleHRhcmVhOiBpbnB1dERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcclxuICAgICAgICAgICAgc2NyaXB0OiBzY3JpcHREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIHNlbGVjdDogc2VsZWN0RGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG9wdGlvbjogb3B0aW9uRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ0JpbmQ6IG5nQmluZERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdCaW5kVGVtcGxhdGU6IG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ0NsYXNzOiBuZ0NsYXNzRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nQ2xhc3NPZGQ6IG5nQ2xhc3NPZGREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nQ3NwOiBuZ0NzcERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdDb250cm9sbGVyOiBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nRm9ybTogbmdGb3JtRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdJZjogbmdJZkRpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdJbmNsdWRlOiBuZ0luY2x1ZGVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ05vbkJpbmRhYmxlOiBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ1BsdXJhbGl6ZTogbmdQbHVyYWxpemVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdTaG93OiBuZ1Nob3dEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nU3R5bGU6IG5nU3R5bGVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdTd2l0Y2hXaGVuOiBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nU3dpdGNoRGVmYXVsdDogbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdUcmFuc2NsdWRlOiBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nTW9kZWw6IG5nTW9kZWxEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxyXG4gICAgICAgICAgICBuZ0NoYW5nZTogbmdDaGFuZ2VEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcclxuICAgICAgICAgICAgbmdSZXF1aXJlZDogcmVxdWlyZWREaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG5nVmFsdWU6IG5nVmFsdWVEaXJlY3RpdmVcclxuICAgICAgICB9KS5cclxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxyXG4gICAgICAgIGRpcmVjdGl2ZShuZ0V2ZW50RGlyZWN0aXZlcyk7XHJcbiAgICAgICRwcm92aWRlLnByb3ZpZGVyKHtcclxuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXHJcbiAgICAgICAgJGFuaW1hdGU6ICRBbmltYXRlUHJvdmlkZXIsXHJcbiAgICAgICAgJGJyb3dzZXI6ICRCcm93c2VyUHJvdmlkZXIsXHJcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxyXG4gICAgICAgICRjb250cm9sbGVyOiAkQ29udHJvbGxlclByb3ZpZGVyLFxyXG4gICAgICAgICRkb2N1bWVudDogJERvY3VtZW50UHJvdmlkZXIsXHJcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXHJcbiAgICAgICAgJGZpbHRlcjogJEZpbHRlclByb3ZpZGVyLFxyXG4gICAgICAgICRpbnRlcnBvbGF0ZTogJEludGVycG9sYXRlUHJvdmlkZXIsXHJcbiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsXHJcbiAgICAgICAgJGh0dHBCYWNrZW5kOiAkSHR0cEJhY2tlbmRQcm92aWRlcixcclxuICAgICAgICAkbG9jYXRpb246ICRMb2NhdGlvblByb3ZpZGVyLFxyXG4gICAgICAgICRsb2c6ICRMb2dQcm92aWRlcixcclxuICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLFxyXG4gICAgICAgICRyb290U2NvcGU6ICRSb290U2NvcGVQcm92aWRlcixcclxuICAgICAgICAkcTogJFFQcm92aWRlcixcclxuICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsXHJcbiAgICAgICAgJHNjZURlbGVnYXRlOiAkU2NlRGVsZWdhdGVQcm92aWRlcixcclxuICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlcixcclxuICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlcixcclxuICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlcixcclxuICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsXHJcbiAgICAgICAgJCR1cmxVdGlsczogJCRVcmxVdGlsc1Byb3ZpZGVyXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIF0pO1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vSlFMaXRlXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5lbGVtZW50XHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC5cclxuICogYGFuZ3VsYXIuZWxlbWVudGAgY2FuIGJlIGVpdGhlciBhbiBhbGlhcyBmb3IgW2pRdWVyeV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pRdWVyeS8pIGZ1bmN0aW9uLCBpZlxyXG4gKiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBvciBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIGVsZW1lbnQgb3Igc3RyaW5nIGluIEFuZ3VsYXIncyBqUXVlcnkgbGl0ZVxyXG4gKiBpbXBsZW1lbnRhdGlvbiAoY29tbW9ubHkgcmVmZXJyZWQgdG8gYXMganFMaXRlKS5cclxuICpcclxuICogUmVhbCBqUXVlcnkgYWx3YXlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBqcUxpdGUsIHByb3ZpZGVkIGl0IHdhcyBsb2FkZWQgYmVmb3JlIGBET01Db250ZW50TG9hZGVkYFxyXG4gKiBldmVudCBmaXJlZC5cclxuICpcclxuICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93c1xyXG4gKiBBbmd1bGFyIHRvIG1hbmlwdWxhdGUgdGhlIERPTS4ganFMaXRlIGltcGxlbWVudHMgb25seSB0aGUgbW9zdCBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eVxyXG4gKiB3aXRoaW4gYSB2ZXJ5IHNtYWxsIGZvb3RwcmludCwgc28gb25seSBhIHN1YnNldCBvZiB0aGUgalF1ZXJ5IEFQSSAtIG1ldGhvZHMsIGFyZ3VtZW50cyBhbmRcclxuICogaW52b2NhdGlvbiBzdHlsZXMgLSBhcmUgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBOb3RlOiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yIGpxTGl0ZTsgdGhleSBhcmUgbmV2ZXJcclxuICogcmF3IERPTSByZWZlcmVuY2VzLlxyXG4gKlxyXG4gKiAjIyBBbmd1bGFyJ3MganFMaXRlXHJcbiAqIEFuZ3VsYXIncyBsaXRlIHZlcnNpb24gb2YgalF1ZXJ5IHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczpcclxuICpcclxuICogLSBbYWRkQ2xhc3MoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FkZENsYXNzLylcclxuICogLSBbYWZ0ZXIoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FmdGVyLylcclxuICogLSBbYXBwZW5kKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmQvKVxyXG4gKiAtIFthdHRyKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hdHRyLylcclxuICogLSBbYmluZCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50RGF0YVxyXG4gKiAtIFtjaGlsZHJlbigpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2hpbGRyZW4vKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXHJcbiAqIC0gW2Nsb25lKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jbG9uZS8pXHJcbiAqIC0gW2NvbnRlbnRzKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZW50cy8pXHJcbiAqIC0gW2NzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY3NzLylcclxuICogLSBbZGF0YSgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZGF0YS8pXHJcbiAqIC0gW2VxKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pXHJcbiAqIC0gW2ZpbmQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxyXG4gKiAtIFtoYXNDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKVxyXG4gKiAtIFtodG1sKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLylcclxuICogLSBbbmV4dCgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcclxuICogLSBbb24oKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcclxuICogLSBbb2ZmKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcclxuICogLSBbcGFyZW50KCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXHJcbiAqIC0gW3ByZXBlbmQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKVxyXG4gKiAtIFtwcm9wKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcclxuICogLSBbcmVhZHkoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlYWR5LylcclxuICogLSBbcmVtb3ZlKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmUvKVxyXG4gKiAtIFtyZW1vdmVBdHRyKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVBdHRyLylcclxuICogLSBbcmVtb3ZlQ2xhc3MoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUNsYXNzLylcclxuICogLSBbcmVtb3ZlRGF0YSgpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlRGF0YS8pXHJcbiAqIC0gW3JlcGxhY2VXaXRoKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZXBsYWNlV2l0aC8pXHJcbiAqIC0gW3RleHQoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RleHQvKVxyXG4gKiAtIFt0b2dnbGVDbGFzcygpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvKVxyXG4gKiAtIFt0cmlnZ2VySGFuZGxlcigpXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdHJpZ2dlckhhbmRsZXIvKSAtIFBhc3NlcyBhIGR1bW15IGV2ZW50IG9iamVjdCB0byBoYW5kbGVycy5cclxuICogLSBbdW5iaW5kKCldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlc1xyXG4gKiAtIFt2YWwoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pXHJcbiAqIC0gW3dyYXAoKV0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3dyYXAvKVxyXG4gKlxyXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xyXG4gKiBBbmd1bGFyIGFsc28gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG1ldGhvZHMgYW5kIGV2ZW50cyB0byBib3RoIGpRdWVyeSBhbmQganFMaXRlOlxyXG4gKlxyXG4gKiAjIyMgRXZlbnRzXHJcbiAqIC0gYCRkZXN0cm95YCAtIEFuZ3VsYXJKUyBpbnRlcmNlcHRzIGFsbCBqcUxpdGUvalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIHRoaXMgZXZlbnRcclxuICogICAgb24gYWxsIERPTSBub2RlcyBiZWluZyByZW1vdmVkLiAgVGhpcyBjYW4gYmUgdXNlZCB0byBjbGVhbiB1cCBhbmQgM3JkIHBhcnR5IGJpbmRpbmdzIHRvIHRoZSBET01cclxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cclxuICogIyMjIE1ldGhvZHNcclxuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XHJcbiAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhc1xyXG4gKiAgIGNhbWVsQ2FzZSBkaXJlY3RpdmUgbmFtZSwgdGhlbiB0aGUgY29udHJvbGxlciBmb3IgdGhpcyBkaXJlY3RpdmUgd2lsbCBiZSByZXRyaWV2ZWQgKGUuZy5cclxuICogICBgJ25nTW9kZWwnYCkuXHJcbiAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXHJcbiAqIC0gYHNjb3BlKClgIC0gcmV0cmlldmVzIHRoZSB7QGxpbmsgYXBpL25nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IG9mIHRoZSBjdXJyZW50XHJcbiAqICAgZWxlbWVudCBvciBpdHMgcGFyZW50LlxyXG4gKiAtIGBpbmhlcml0ZWREYXRhKClgIC0gc2FtZSBhcyBgZGF0YSgpYCwgYnV0IHdhbGtzIHVwIHRoZSBET00gdW50aWwgYSB2YWx1ZSBpcyBmb3VuZCBvciB0aGUgdG9wXHJcbiAqICAgcGFyZW50IGVsZW1lbnQgaXMgcmVhY2hlZC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZWxlbWVudCBIVE1MIHN0cmluZyBvciBET01FbGVtZW50IHRvIGJlIHdyYXBwZWQgaW50byBqUXVlcnkuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3QuXHJcbiAqL1xyXG5cclxudmFyIGpxQ2FjaGUgPSBKUUxpdGUuY2FjaGUgPSB7fSxcclxuICAgIGpxTmFtZSA9IEpRTGl0ZS5leHBhbmRvID0gJ25nLScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgIGpxSWQgPSAxLFxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gKHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyXHJcbiAgICAgID8gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTt9XHJcbiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmbik7fSksXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyRm4gPSAod2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXJcclxuICAgICAgPyBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpOyB9XHJcbiAgICAgIDogZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtlbGVtZW50LmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBmbik7IH0pO1xyXG5cclxuZnVuY3Rpb24ganFOZXh0SWQoKSB7IHJldHVybiArK2pxSWQ7IH1cclxuXHJcblxyXG52YXIgU1BFQ0lBTF9DSEFSU19SRUdFWFAgPSAvKFtcXDpcXC1cXF9dKyguKSkvZztcclxudmFyIE1PWl9IQUNLX1JFR0VYUCA9IC9ebW96KFtBLVpdKS87XHJcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxyXG4gKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxyXG4gKi9cclxuZnVuY3Rpb24gY2FtZWxDYXNlKG5hbWUpIHtcclxuICByZXR1cm4gbmFtZS5cclxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcclxuICAgICAgcmV0dXJuIG9mZnNldCA/IGxldHRlci50b1VwcGVyQ2FzZSgpIDogbGV0dGVyO1xyXG4gICAgfSkuXHJcbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBqUXVlcnkgbXV0YXRpb24gcGF0Y2hcclxuLy9cclxuLy8gSW4gY29uanVuY3Rpb24gd2l0aCBiaW5kSlF1ZXJ5IGludGVyY2VwdHMgYWxsIGpRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyBhXHJcbi8vICRkZXN0cm95IGV2ZW50IG9uIGFsbCBET00gbm9kZXMgYmVpbmcgcmVtb3ZlZC5cclxuLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5mdW5jdGlvbiBKUUxpdGVQYXRjaEpRdWVyeVJlbW92ZShuYW1lLCBkaXNwYXRjaFRoaXMsIGZpbHRlckVsZW1zLCBnZXR0ZXJJZk5vQXJndW1lbnRzKSB7XHJcbiAgdmFyIG9yaWdpbmFsSnFGbiA9IGpRdWVyeS5mbltuYW1lXTtcclxuICBvcmlnaW5hbEpxRm4gPSBvcmlnaW5hbEpxRm4uJG9yaWdpbmFsIHx8IG9yaWdpbmFsSnFGbjtcclxuICByZW1vdmVQYXRjaC4kb3JpZ2luYWwgPSBvcmlnaW5hbEpxRm47XHJcbiAgalF1ZXJ5LmZuW25hbWVdID0gcmVtb3ZlUGF0Y2g7XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZVBhdGNoKHBhcmFtKSB7XHJcbiAgICB2YXIgbGlzdCA9IGZpbHRlckVsZW1zICYmIHBhcmFtID8gW3RoaXMuZmlsdGVyKHBhcmFtKV0gOiBbdGhpc10sXHJcbiAgICAgICAgZmlyZUV2ZW50ID0gZGlzcGF0Y2hUaGlzLFxyXG4gICAgICAgIHNldCwgc2V0SW5kZXgsIHNldExlbmd0aCxcclxuICAgICAgICBlbGVtZW50LCBjaGlsZEluZGV4LCBjaGlsZExlbmd0aCwgY2hpbGRyZW47XHJcblxyXG4gICAgaWYgKCFnZXR0ZXJJZk5vQXJndW1lbnRzIHx8IHBhcmFtICE9IG51bGwpIHtcclxuICAgICAgd2hpbGUobGlzdC5sZW5ndGgpIHtcclxuICAgICAgICBzZXQgPSBsaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgZm9yKHNldEluZGV4ID0gMCwgc2V0TGVuZ3RoID0gc2V0Lmxlbmd0aDsgc2V0SW5kZXggPCBzZXRMZW5ndGg7IHNldEluZGV4KyspIHtcclxuICAgICAgICAgIGVsZW1lbnQgPSBqcUxpdGUoc2V0W3NldEluZGV4XSk7XHJcbiAgICAgICAgICBpZiAoZmlyZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJyRkZXN0cm95Jyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmaXJlRXZlbnQgPSAhZmlyZUV2ZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKGNoaWxkSW5kZXggPSAwLCBjaGlsZExlbmd0aCA9IChjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4oKSkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIGNoaWxkSW5kZXggPCBjaGlsZExlbmd0aDtcclxuICAgICAgICAgICAgICBjaGlsZEluZGV4KyspIHtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGpRdWVyeShjaGlsZHJlbltjaGlsZEluZGV4XSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9yaWdpbmFsSnFGbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxufVxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbmZ1bmN0aW9uIEpRTGl0ZShlbGVtZW50KSB7XHJcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHtcclxuICAgIHJldHVybiBlbGVtZW50O1xyXG4gIH1cclxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xyXG4gICAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpICYmIGVsZW1lbnQuY2hhckF0KDApICE9ICc8Jykge1xyXG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgSlFMaXRlKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzU3RyaW5nKGVsZW1lbnQpKSB7XHJcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAvLyBSZWFkIGFib3V0IHRoZSBOb1Njb3BlIGVsZW1lbnRzIGhlcmU6XHJcbiAgICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzM4OTcoVlMuODUpLmFzcHhcclxuICAgIGRpdi5pbm5lckhUTUwgPSAnPGRpdj4mIzE2MDs8L2Rpdj4nICsgZWxlbWVudDsgLy8gSUUgaW5zYW5pdHkgdG8gbWFrZSBOb1Njb3BlIGVsZW1lbnRzIHdvcmshXHJcbiAgICBkaXYucmVtb3ZlQ2hpbGQoZGl2LmZpcnN0Q2hpbGQpOyAvLyByZW1vdmUgdGhlIHN1cGVyZmx1b3VzIGRpdlxyXG4gICAgSlFMaXRlQWRkTm9kZXModGhpcywgZGl2LmNoaWxkTm9kZXMpO1xyXG4gICAgdmFyIGZyYWdtZW50ID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7XHJcbiAgICBmcmFnbWVudC5hcHBlbmQodGhpcyk7IC8vIGRldGFjaCB0aGUgZWxlbWVudHMgZnJvbSB0aGUgdGVtcG9yYXJ5IERPTSBkaXYuXHJcbiAgfSBlbHNlIHtcclxuICAgIEpRTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlQ2xvbmUoZWxlbWVudCkge1xyXG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlRGVhbG9jKGVsZW1lbnQpe1xyXG4gIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCk7XHJcbiAgZm9yICggdmFyIGkgPSAwLCBjaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBKUUxpdGVEZWFsb2MoY2hpbGRyZW5baV0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlT2ZmKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xyXG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcclxuXHJcbiAgdmFyIGV2ZW50cyA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJyksXHJcbiAgICAgIGhhbmRsZSA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7XHJcblxyXG4gIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWRcclxuXHJcbiAgaWYgKGlzVW5kZWZpbmVkKHR5cGUpKSB7XHJcbiAgICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCB0eXBlKSB7XHJcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBldmVudEhhbmRsZXIpO1xyXG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgIGlmIChpc1VuZGVmaW5lZChmbikpIHtcclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgZXZlbnRzW3R5cGVdKTtcclxuICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFycmF5UmVtb3ZlKGV2ZW50c1t0eXBlXSB8fCBbXSwgZm4pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEpRTGl0ZVJlbW92ZURhdGEoZWxlbWVudCwgbmFtZSkge1xyXG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50W2pxTmFtZV0sXHJcbiAgICAgIGV4cGFuZG9TdG9yZSA9IGpxQ2FjaGVbZXhwYW5kb0lkXTtcclxuXHJcbiAgaWYgKGV4cGFuZG9TdG9yZSkge1xyXG4gICAgaWYgKG5hbWUpIHtcclxuICAgICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXS5kYXRhW25hbWVdO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4cGFuZG9TdG9yZS5oYW5kbGUpIHtcclxuICAgICAgZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTtcclxuICAgICAgSlFMaXRlT2ZmKGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTtcclxuICAgIGVsZW1lbnRbanFOYW1lXSA9IHVuZGVmaW5lZDsgLy8gaWUgZG9lcyBub3QgYWxsb3cgZGVsZXRpb24gb2YgYXR0cmlidXRlcyBvbiBlbGVtZW50cy5cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBrZXksIHZhbHVlKSB7XHJcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnRbanFOYW1lXSxcclxuICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWQgfHwgLTFdO1xyXG5cclxuICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgaWYgKCFleHBhbmRvU3RvcmUpIHtcclxuICAgICAgZWxlbWVudFtqcU5hbWVdID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTtcclxuICAgICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge307XHJcbiAgICB9XHJcbiAgICBleHBhbmRvU3RvcmVba2V5XSA9IHZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZVtrZXldO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7XHJcbiAgdmFyIGRhdGEgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2RhdGEnKSxcclxuICAgICAgaXNTZXR0ZXIgPSBpc0RlZmluZWQodmFsdWUpLFxyXG4gICAgICBrZXlEZWZpbmVkID0gIWlzU2V0dGVyICYmIGlzRGVmaW5lZChrZXkpLFxyXG4gICAgICBpc1NpbXBsZUdldHRlciA9IGtleURlZmluZWQgJiYgIWlzT2JqZWN0KGtleSk7XHJcblxyXG4gIGlmICghZGF0YSAmJiAhaXNTaW1wbGVHZXR0ZXIpIHtcclxuICAgIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZGF0YScsIGRhdGEgPSB7fSk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNTZXR0ZXIpIHtcclxuICAgIGRhdGFba2V5XSA9IHZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoa2V5RGVmaW5lZCkge1xyXG4gICAgICBpZiAoaXNTaW1wbGVHZXR0ZXIpIHtcclxuICAgICAgICAvLyBkb24ndCBjcmVhdGUgZGF0YSBpbiB0aGlzIGNhc2UuXHJcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgZGF0YVtrZXldO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4dGVuZChkYXRhLCBrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEpRTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XHJcbiAgcmV0dXJuICgoXCIgXCIgKyBlbGVtZW50LmNsYXNzTmFtZSArIFwiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIikuXHJcbiAgICAgIGluZGV4T2YoIFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIiApID4gLTEpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBKUUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XHJcbiAgaWYgKGNzc0NsYXNzZXMpIHtcclxuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xyXG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHRyaW0oXHJcbiAgICAgICAgICAoXCIgXCIgKyBlbGVtZW50LmNsYXNzTmFtZSArIFwiIFwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKVxyXG4gICAgICAgICAgLnJlcGxhY2UoXCIgXCIgKyB0cmltKGNzc0NsYXNzKSArIFwiIFwiLCBcIiBcIilcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlQWRkQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xyXG4gIGlmIChjc3NDbGFzc2VzKSB7XHJcbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcclxuICAgICAgaWYgKCFKUUxpdGVIYXNDbGFzcyhlbGVtZW50LCBjc3NDbGFzcykpIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHRyaW0oZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyB0cmltKGNzc0NsYXNzKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlQWRkTm9kZXMocm9vdCwgZWxlbWVudHMpIHtcclxuICBpZiAoZWxlbWVudHMpIHtcclxuICAgIGVsZW1lbnRzID0gKCFlbGVtZW50cy5ub2RlTmFtZSAmJiBpc0RlZmluZWQoZWxlbWVudHMubGVuZ3RoKSAmJiAhaXNXaW5kb3coZWxlbWVudHMpKVxyXG4gICAgICA/IGVsZW1lbnRzXHJcbiAgICAgIDogWyBlbGVtZW50cyBdO1xyXG4gICAgZm9yKHZhciBpPTA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICByb290LnB1c2goZWxlbWVudHNbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSlFMaXRlQ29udHJvbGxlcihlbGVtZW50LCBuYW1lKSB7XHJcbiAgcmV0dXJuIEpRTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicgKSArICdDb250cm9sbGVyJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEpRTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcclxuICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xyXG5cclxuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxyXG4gIC8vIHRoaXMgbWFrZXMgJChkb2N1bWVudCkuc2NvcGUoKSBwb3NzaWJsZVxyXG4gIGlmKGVsZW1lbnRbMF0ubm9kZVR5cGUgPT0gOSkge1xyXG4gICAgZWxlbWVudCA9IGVsZW1lbnQuZmluZCgnaHRtbCcpO1xyXG4gIH1cclxuXHJcbiAgd2hpbGUgKGVsZW1lbnQubGVuZ3RoKSB7XHJcbiAgICBpZiAoKHZhbHVlID0gZWxlbWVudC5kYXRhKG5hbWUpKSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7XHJcbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcclxuICB9XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBGdW5jdGlvbnMgd2hpY2ggYXJlIGRlY2xhcmVkIGRpcmVjdGx5LlxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxudmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7XHJcbiAgcmVhZHk6IGZ1bmN0aW9uKGZuKSB7XHJcbiAgICB2YXIgZmlyZWQgPSBmYWxzZTtcclxuXHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyKCkge1xyXG4gICAgICBpZiAoZmlyZWQpIHJldHVybjtcclxuICAgICAgZmlyZWQgPSB0cnVlO1xyXG4gICAgICBmbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGRvY3VtZW50IGFscmVhZHkgaXMgbG9hZGVkXHJcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyl7XHJcbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9uKCdET01Db250ZW50TG9hZGVkJywgdHJpZ2dlcik7IC8vIHdvcmtzIGZvciBtb2Rlcm4gYnJvd3NlcnMgYW5kIElFOVxyXG4gICAgICAvLyB3ZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXHJcbiAgICAgIEpRTGl0ZSh3aW5kb3cpLm9uKCdsb2FkJywgdHJpZ2dlcik7IC8vIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQgZm9yIG90aGVyc1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHZhbHVlID0gW107XHJcbiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uKGUpeyB2YWx1ZS5wdXNoKCcnICsgZSk7fSk7XHJcbiAgICByZXR1cm4gJ1snICsgdmFsdWUuam9pbignLCAnKSArICddJztcclxuICB9LFxyXG5cclxuICBlcTogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgcmV0dXJuIChpbmRleCA+PSAwKSA/IGpxTGl0ZSh0aGlzW2luZGV4XSkgOiBqcUxpdGUodGhpc1t0aGlzLmxlbmd0aCArIGluZGV4XSk7XHJcbiAgfSxcclxuXHJcbiAgbGVuZ3RoOiAwLFxyXG4gIHB1c2g6IHB1c2gsXHJcbiAgc29ydDogW10uc29ydCxcclxuICBzcGxpY2U6IFtdLnNwbGljZVxyXG59O1xyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuXHJcbi8vIHRoZXNlIGZ1bmN0aW9ucyByZXR1cm4gc2VsZiBvbiBzZXR0ZXIgYW5kXHJcbi8vIHZhbHVlIG9uIGdldC5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbnZhciBCT09MRUFOX0FUVFIgPSB7fTtcclxuZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlO1xyXG59KTtcclxudmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTtcclxuZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybSxkZXRhaWxzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIEJPT0xFQU5fRUxFTUVOVFNbdXBwZXJjYXNlKHZhbHVlKV0gPSB0cnVlO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGdldEJvb2xlYW5BdHRyTmFtZShlbGVtZW50LCBuYW1lKSB7XHJcbiAgLy8gY2hlY2sgZG9tIGxhc3Qgc2luY2Ugd2Ugd2lsbCBtb3N0IGxpa2VseSBmYWlsIG9uIG5hbWVcclxuICB2YXIgYm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbmFtZS50b0xvd2VyQ2FzZSgpXTtcclxuXHJcbiAgLy8gYm9vbGVhbkF0dHIgaXMgaGVyZSB0d2ljZSB0byBtaW5pbWl6ZSBET00gYWNjZXNzXHJcbiAgcmV0dXJuIGJvb2xlYW5BdHRyICYmIEJPT0xFQU5fRUxFTUVOVFNbZWxlbWVudC5ub2RlTmFtZV0gJiYgYm9vbGVhbkF0dHI7XHJcbn1cclxuXHJcbmZvckVhY2goe1xyXG4gIGRhdGE6IEpRTGl0ZURhdGEsXHJcbiAgaW5oZXJpdGVkRGF0YTogSlFMaXRlSW5oZXJpdGVkRGF0YSxcclxuXHJcbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIHJldHVybiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckc2NvcGUnKTtcclxuICB9LFxyXG5cclxuICBjb250cm9sbGVyOiBKUUxpdGVDb250cm9sbGVyICxcclxuXHJcbiAgaW5qZWN0b3I6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgIHJldHVybiBKUUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcclxuICB9LFxyXG5cclxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LG5hbWUpIHtcclxuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gIH0sXHJcblxyXG4gIGhhc0NsYXNzOiBKUUxpdGVIYXNDbGFzcyxcclxuXHJcbiAgY3NzOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgbmFtZSA9IGNhbWVsQ2FzZShuYW1lKTtcclxuXHJcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICBlbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgdmFsO1xyXG5cclxuICAgICAgaWYgKG1zaWUgPD0gOCkge1xyXG4gICAgICAgIC8vIHRoaXMgaXMgc29tZSBJRSBzcGVjaWZpYyB3ZWlyZG5lc3MgdGhhdCBqUXVlcnkgMS42LjQgZG9lcyBub3Qgc3VyZSB3aHlcclxuICAgICAgICB2YWwgPSBlbGVtZW50LmN1cnJlbnRTdHlsZSAmJiBlbGVtZW50LmN1cnJlbnRTdHlsZVtuYW1lXTtcclxuICAgICAgICBpZiAodmFsID09PSAnJykgdmFsID0gJ2F1dG8nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YWwgPSB2YWwgfHwgZWxlbWVudC5zdHlsZVtuYW1lXTtcclxuXHJcbiAgICAgIGlmIChtc2llIDw9IDgpIHtcclxuICAgICAgICAvLyBqcXVlcnkgd2VpcmRuZXNzIDotL1xyXG4gICAgICAgIHZhbCA9ICh2YWwgPT09ICcnKSA/IHVuZGVmaW5lZCA6IHZhbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuICB2YWw7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYXR0cjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpe1xyXG4gICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xyXG4gICAgaWYgKEJPT0xFQU5fQVRUUltsb3dlcmNhc2VkTmFtZV0pIHtcclxuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICBpZiAoISF2YWx1ZSkge1xyXG4gICAgICAgICAgZWxlbWVudFtuYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCBsb3dlcmNhc2VkTmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGxvd2VyY2FzZWROYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIChlbGVtZW50W25hbWVdIHx8XHJcbiAgICAgICAgICAgICAgICAgKGVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSl8fCBub29wKS5zcGVjaWZpZWQpXHJcbiAgICAgICAgICAgICAgID8gbG93ZXJjYXNlZE5hbWVcclxuICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XHJcbiAgICAgIC8vIHRoZSBleHRyYSBhcmd1bWVudCBcIjJcIiBpcyB0byBnZXQgdGhlIHJpZ2h0IHRoaW5nIGZvciBhLmhyZWYgaW4gSUUsIHNlZSBqUXVlcnkgY29kZVxyXG4gICAgICAvLyBzb21lIGVsZW1lbnRzIChlLmcuIERvY3VtZW50KSBkb24ndCBoYXZlIGdldCBhdHRyaWJ1dGUsIHNvIHJldHVybiB1bmRlZmluZWRcclxuICAgICAgdmFyIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUsIDIpO1xyXG4gICAgICAvLyBub3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpXHJcbiAgICAgIHJldHVybiByZXQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcclxuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgIGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50W25hbWVdO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHRleHQ6IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBOT0RFX1RZUEVfVEVYVF9QUk9QRVJUWSA9IFtdO1xyXG4gICAgaWYgKG1zaWUgPCA5KSB7XHJcbiAgICAgIE5PREVfVFlQRV9URVhUX1BST1BFUlRZWzFdID0gJ2lubmVyVGV4dCc7ICAgIC8qKiBFbGVtZW50ICoqL1xyXG4gICAgICBOT0RFX1RZUEVfVEVYVF9QUk9QRVJUWVszXSA9ICdub2RlVmFsdWUnOyAgICAvKiogVGV4dCAqKi9cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIE5PREVfVFlQRV9URVhUX1BST1BFUlRZWzFdID0gICAgICAgICAgICAgICAgIC8qKiBFbGVtZW50ICoqL1xyXG4gICAgICBOT0RFX1RZUEVfVEVYVF9QUk9QRVJUWVszXSA9ICd0ZXh0Q29udGVudCc7ICAvKiogVGV4dCAqKi9cclxuICAgIH1cclxuICAgIGdldFRleHQuJGR2ID0gJyc7XHJcbiAgICByZXR1cm4gZ2V0VGV4dDtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XHJcbiAgICAgIHZhciB0ZXh0UHJvcCA9IE5PREVfVFlQRV9URVhUX1BST1BFUlRZW2VsZW1lbnQubm9kZVR5cGVdXHJcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdGV4dFByb3AgPyBlbGVtZW50W3RleHRQcm9wXSA6ICcnO1xyXG4gICAgICB9XHJcbiAgICAgIGVsZW1lbnRbdGV4dFByb3BdID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfSkoKSxcclxuXHJcbiAgdmFsOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xyXG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xyXG4gICAgICBpZiAobm9kZU5hbWVfKGVsZW1lbnQpID09PSAnU0VMRUNUJyAmJiBlbGVtZW50Lm11bHRpcGxlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbiAob3B0aW9uKSB7XHJcbiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDAgPyBudWxsIDogcmVzdWx0O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xyXG4gIH0sXHJcblxyXG4gIGh0bWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XHJcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50LmlubmVySFRNTDtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwLCBjaGlsZE5vZGVzID0gZWxlbWVudC5jaGlsZE5vZGVzOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBKUUxpdGVEZWFsb2MoY2hpbGROb2Rlc1tpXSk7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xyXG4gIH1cclxufSwgZnVuY3Rpb24oZm4sIG5hbWUpe1xyXG4gIC8qKlxyXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcclxuICAgKi9cclxuICBKUUxpdGUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYXJnMSwgYXJnMikge1xyXG4gICAgdmFyIGksIGtleTtcclxuXHJcbiAgICAvLyBKUUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcclxuICAgIC8vIGluIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uLlxyXG4gICAgaWYgKCgoZm4ubGVuZ3RoID09IDIgJiYgKGZuICE9PSBKUUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0gSlFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XHJcblxyXG4gICAgICAgIC8vIHdlIGFyZSBhIHdyaXRlLCBidXQgdGhlIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSB0aGUga2V5L3ZhbHVlc1xyXG4gICAgICAgIGZvcihpPTA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoZm4gPT09IEpRTGl0ZURhdGEpIHtcclxuICAgICAgICAgICAgLy8gZGF0YSgpIHRha2VzIHRoZSB3aG9sZSBvYmplY3QgaW4galF1ZXJ5XHJcbiAgICAgICAgICAgIGZuKHRoaXNbaV0sIGFyZzEpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJnMSkge1xyXG4gICAgICAgICAgICAgIGZuKHRoaXNbaV0sIGtleSwgYXJnMVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXR1cm4gc2VsZiBmb3IgY2hhaW5pbmdcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyB3ZSBhcmUgYSByZWFkLCBzbyByZWFkIHRoZSBmaXJzdCBjaGlsZC5cclxuICAgICAgICB2YXIgdmFsdWUgPSBmbi4kZHY7XHJcbiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cclxuICAgICAgICB2YXIgamogPSB2YWx1ZSA9PSB1bmRlZmluZWQgPyBNYXRoLm1pbih0aGlzLmxlbmd0aCwgMSkgOiB0aGlzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpqOyBqKyspIHtcclxuICAgICAgICAgIHZhciBub2RlVmFsdWUgPSBmbih0aGlzW2pdLCBhcmcxLCBhcmcyKTtcclxuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZSArIG5vZGVWYWx1ZSA6IG5vZGVWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgc28gYXBwbHkgdG8gYWxsIGNoaWxkcmVuXHJcbiAgICAgIGZvcihpPTA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm4odGhpc1tpXSwgYXJnMSwgYXJnMik7XHJcbiAgICAgIH1cclxuICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykge1xyXG4gIHZhciBldmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQsIHR5cGUpIHtcclxuICAgIGlmICghZXZlbnQucHJldmVudERlZmF1bHQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBldmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlOyAvL2llXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsgLy9pZVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZXZlbnQudGFyZ2V0KSB7XHJcbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnNyY0VsZW1lbnQgfHwgZG9jdW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpKSB7XHJcbiAgICAgIHZhciBwcmV2ZW50ID0gZXZlbnQucHJldmVudERlZmF1bHQ7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcbiAgICAgICAgcHJldmVudC5jYWxsKGV2ZW50KTtcclxuICAgICAgfTtcclxuICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCBldmVudC5yZXR1cm5WYWx1ZSA9PSBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgZm9yRWFjaChldmVudHNbdHlwZSB8fCBldmVudC50eXBlXSwgZnVuY3Rpb24oZm4pIHtcclxuICAgICAgZm4uY2FsbChlbGVtZW50LCBldmVudCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZW1vdmUgbW9ua2V5LXBhdGNoZWQgbWV0aG9kcyAoSUUpLFxyXG4gICAgLy8gYXMgdGhleSB3b3VsZCBjYXVzZSBtZW1vcnkgbGVha3MgaW4gSUU4LlxyXG4gICAgaWYgKG1zaWUgPD0gOCkge1xyXG4gICAgICAvLyBJRTcvOCBkb2VzIG5vdCBhbGxvdyB0byBkZWxldGUgcHJvcGVydHkgb24gbmF0aXZlIG9iamVjdFxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IG51bGw7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IG51bGw7XHJcbiAgICAgIGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCA9IG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBJdCBzaG91bGRuJ3QgYWZmZWN0IG5vcm1hbCBicm93c2VycyAobmF0aXZlIG1ldGhvZHMgYXJlIGRlZmluZWQgb24gcHJvdG90eXBlKS5cclxuICAgICAgZGVsZXRlIGV2ZW50LnByZXZlbnREZWZhdWx0O1xyXG4gICAgICBkZWxldGUgZXZlbnQuc3RvcFByb3BhZ2F0aW9uO1xyXG4gICAgICBkZWxldGUgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgZXZlbnRIYW5kbGVyLmVsZW0gPSBlbGVtZW50O1xyXG4gIHJldHVybiBldmVudEhhbmRsZXI7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC5cclxuLy8gVGhlc2UgZnVuY3Rpb25zIGNoYWluIHJlc3VsdHMgaW50byBhIHNpbmdsZVxyXG4vLyBzZWxlY3Rvci5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbmZvckVhY2goe1xyXG4gIHJlbW92ZURhdGE6IEpRTGl0ZVJlbW92ZURhdGEsXHJcblxyXG4gIGRlYWxvYzogSlFMaXRlRGVhbG9jLFxyXG5cclxuICBvbjogZnVuY3Rpb24gb25GbihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpe1xyXG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpO1xyXG5cclxuICAgIHZhciBldmVudHMgPSBKUUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgJ2V2ZW50cycpLFxyXG4gICAgICAgIGhhbmRsZSA9IEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJyk7XHJcblxyXG4gICAgaWYgKCFldmVudHMpIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJywgZXZlbnRzID0ge30pO1xyXG4gICAgaWYgKCFoYW5kbGUpIEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnaGFuZGxlJywgaGFuZGxlID0gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykpO1xyXG5cclxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKXtcclxuICAgICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdO1xyXG5cclxuICAgICAgaWYgKCFldmVudEZucykge1xyXG4gICAgICAgIGlmICh0eXBlID09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09ICdtb3VzZWxlYXZlJykge1xyXG4gICAgICAgICAgdmFyIGNvbnRhaW5zID0gZG9jdW1lbnQuYm9keS5jb250YWlucyB8fCBkb2N1bWVudC5ib2R5LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID9cclxuICAgICAgICAgIGZ1bmN0aW9uKCBhLCBiICkge1xyXG4gICAgICAgICAgICB2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxyXG4gICAgICAgICAgICBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXHJcbiAgICAgICAgICAgICAgYWRvd24uY29udGFpbnMgP1xyXG4gICAgICAgICAgICAgIGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XHJcbiAgICAgICAgICAgICAgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XHJcbiAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgIH0gOlxyXG4gICAgICAgICAgICBmdW5jdGlvbiggYSwgYiApIHtcclxuICAgICAgICAgICAgICBpZiAoIGIgKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKCBiID09PSBhICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBbXTtcclxuXHJcbiAgICAgICAgICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZVxyXG4gICAgICAgICAgLy8gUmVhZCBhYm91dCBtb3VzZWVudGVyIGFuZCBtb3VzZWxlYXZlOlxyXG4gICAgICAgICAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOFxyXG4gICAgICAgICAgdmFyIGV2ZW50bWFwID0geyBtb3VzZWxlYXZlIDogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyIDogXCJtb3VzZW92ZXJcIn07XHJcblxyXG4gICAgICAgICAgb25GbihlbGVtZW50LCBldmVudG1hcFt0eXBlXSwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xyXG4gICAgICAgICAgICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XHJcbiAgICAgICAgICAgIGlmICggIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhY29udGFpbnModGFyZ2V0LCByZWxhdGVkKSkgKXtcclxuICAgICAgICAgICAgICBoYW5kbGUoZXZlbnQsIHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xyXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGVdXHJcbiAgICAgIH1cclxuICAgICAgZXZlbnRGbnMucHVzaChmbik7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICBvZmY6IEpRTGl0ZU9mZixcclxuXHJcbiAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlcGxhY2VOb2RlKSB7XHJcbiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIEpRTGl0ZURlYWxvYyhlbGVtZW50KTtcclxuICAgIGZvckVhY2gobmV3IEpRTGl0ZShyZXBsYWNlTm9kZSksIGZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICBpZiAoaW5kZXgpIHtcclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpO1xyXG4gICAgICB9XHJcbiAgICAgIGluZGV4ID0gbm9kZTtcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICB2YXIgY2hpbGRyZW4gPSBbXTtcclxuICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KXtcclxuICAgICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IDEpXHJcbiAgICAgICAgY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gIH0sXHJcblxyXG4gIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gZWxlbWVudC5jaGlsZE5vZGVzIHx8IFtdO1xyXG4gIH0sXHJcblxyXG4gIGFwcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xyXG4gICAgZm9yRWFjaChuZXcgSlFMaXRlKG5vZGUpLCBmdW5jdGlvbihjaGlsZCl7XHJcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSAxIHx8IGVsZW1lbnQubm9kZVR5cGUgPT09IDExKSB7XHJcbiAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcclxuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAgIHZhciBpbmRleCA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcclxuICAgICAgZm9yRWFjaChuZXcgSlFMaXRlKG5vZGUpLCBmdW5jdGlvbihjaGlsZCl7XHJcbiAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgd3JhcDogZnVuY3Rpb24oZWxlbWVudCwgd3JhcE5vZGUpIHtcclxuICAgIHdyYXBOb2RlID0ganFMaXRlKHdyYXBOb2RlKVswXTtcclxuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcE5vZGUsIGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcbiAgfSxcclxuXHJcbiAgcmVtb3ZlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICBKUUxpdGVEZWFsb2MoZWxlbWVudCk7XHJcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gIH0sXHJcblxyXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XHJcbiAgICB2YXIgaW5kZXggPSBlbGVtZW50LCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICBmb3JFYWNoKG5ldyBKUUxpdGUobmV3RWxlbWVudCksIGZ1bmN0aW9uKG5vZGUpe1xyXG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcclxuICAgICAgaW5kZXggPSBub2RlO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgYWRkQ2xhc3M6IEpRTGl0ZUFkZENsYXNzLFxyXG4gIHJlbW92ZUNsYXNzOiBKUUxpdGVSZW1vdmVDbGFzcyxcclxuXHJcbiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHtcclxuICAgIGlmIChpc1VuZGVmaW5lZChjb25kaXRpb24pKSB7XHJcbiAgICAgIGNvbmRpdGlvbiA9ICFKUUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcik7XHJcbiAgICB9XHJcbiAgICAoY29uZGl0aW9uID8gSlFMaXRlQWRkQ2xhc3MgOiBKUUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgc2VsZWN0b3IpO1xyXG4gIH0sXHJcblxyXG4gIHBhcmVudDogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XHJcbiAgfSxcclxuXHJcbiAgbmV4dDogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgaWYgKGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJRTggZG9lc24ndCBoYXZlIG5leHRFbGVtZW50U2libGluZ1xyXG4gICAgdmFyIGVsbSA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XHJcbiAgICB3aGlsZSAoZWxtICE9IG51bGwgJiYgZWxtLm5vZGVUeXBlICE9PSAxKSB7XHJcbiAgICAgIGVsbSA9IGVsbS5uZXh0U2libGluZztcclxuICAgIH1cclxuICAgIHJldHVybiBlbG07XHJcbiAgfSxcclxuXHJcbiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHtcclxuICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcclxuICB9LFxyXG5cclxuICBjbG9uZTogSlFMaXRlQ2xvbmUsXHJcblxyXG4gIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50LCBldmVudE5hbWUsIGV2ZW50RGF0YSkge1xyXG4gICAgdmFyIGV2ZW50Rm5zID0gKEpRTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAnZXZlbnRzJykgfHwge30pW2V2ZW50TmFtZV07XHJcbiAgICBldmVudERhdGEgPSBldmVudERhdGEgfHwge1xyXG4gICAgICBwcmV2ZW50RGVmYXVsdDogbm9vcCxcclxuICAgICAgc3RvcFByb3BhZ2F0aW9uOiBub29wXHJcbiAgICB9O1xyXG5cclxuICAgIGZvckVhY2goZXZlbnRGbnMsIGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgIGZuLmNhbGwoZWxlbWVudCwgZXZlbnREYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxufSwgZnVuY3Rpb24oZm4sIG5hbWUpe1xyXG4gIC8qKlxyXG4gICAqIGNoYWluaW5nIGZ1bmN0aW9uc1xyXG4gICAqL1xyXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XHJcbiAgICB2YXIgdmFsdWU7XHJcbiAgICBmb3IodmFyIGk9MDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMyk7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIC8vIGFueSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgbmVlZHMgdG8gYmUgd3JhcHBlZFxyXG4gICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBKUUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMykpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWUgPT0gdW5kZWZpbmVkID8gdGhpcyA6IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZlxyXG4gIEpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XHJcbiAgSlFMaXRlLnByb3RvdHlwZS51bmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9mZjtcclxufSk7XHJcblxyXG4vKipcclxuICogQ29tcHV0ZXMgYSBoYXNoIG9mIGFuICdvYmonLlxyXG4gKiBIYXNoIG9mIGE6XHJcbiAqICBzdHJpbmcgaXMgc3RyaW5nXHJcbiAqICBudW1iZXIgaXMgbnVtYmVyIGFzIHN0cmluZ1xyXG4gKiAgb2JqZWN0IGlzIGVpdGhlciByZXN1bHQgb2YgY2FsbGluZyAkJGhhc2hLZXkgZnVuY3Rpb24gb24gdGhlIG9iamVjdCBvciB1bmlxdWVseSBnZW5lcmF0ZWQgaWQsXHJcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9ialxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxyXG4gKiAgICAgICAgIFRoZSByZXN1bHRpbmcgc3RyaW5nIGtleSBpcyBpbiAndHlwZTpoYXNoS2V5JyBmb3JtYXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBoYXNoS2V5KG9iaikge1xyXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iaixcclxuICAgICAga2V5O1xyXG5cclxuICBpZiAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpIHtcclxuICAgIGlmICh0eXBlb2YgKGtleSA9IG9iai4kJGhhc2hLZXkpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgLy8gbXVzdCBpbnZva2Ugb24gb2JqZWN0IHRvIGtlZXAgdGhlIHJpZ2h0IHRoaXNcclxuICAgICAga2V5ID0gb2JqLiQkaGFzaEtleSgpO1xyXG4gICAgfSBlbHNlIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gbmV4dFVpZCgpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBrZXkgPSBvYmo7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb2JqVHlwZSArICc6JyArIGtleTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEhhc2hNYXAgd2hpY2ggY2FuIHVzZSBvYmplY3RzIGFzIGtleXNcclxuICovXHJcbmZ1bmN0aW9uIEhhc2hNYXAoYXJyYXkpe1xyXG4gIGZvckVhY2goYXJyYXksIHRoaXMucHV0LCB0aGlzKTtcclxufVxyXG5IYXNoTWFwLnByb3RvdHlwZSA9IHtcclxuICAvKipcclxuICAgKiBTdG9yZSBrZXkgdmFsdWUgcGFpclxyXG4gICAqIEBwYXJhbSBrZXkga2V5IHRvIHN0b3JlIGNhbiBiZSBhbnkgdHlwZVxyXG4gICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcclxuICAgKi9cclxuICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgIHRoaXNbaGFzaEtleShrZXkpXSA9IHZhbHVlO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBrZXlcclxuICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgZm9yIHRoZSBrZXlcclxuICAgKi9cclxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgcmV0dXJuIHRoaXNbaGFzaEtleShrZXkpXTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgdGhlIGtleS92YWx1ZSBwYWlyXHJcbiAgICogQHBhcmFtIGtleVxyXG4gICAqL1xyXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XHJcbiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleSA9IGhhc2hLZXkoa2V5KV07XHJcbiAgICBkZWxldGUgdGhpc1trZXldO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgYW5ndWxhci5pbmplY3RvclxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENyZWF0ZXMgYW4gaW5qZWN0b3IgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvclxyXG4gKiBkZXBlbmRlbmN5IGluamVjdGlvbiAoc2VlIHtAbGluayBndWlkZS9kaSBkZXBlbmRlbmN5IGluamVjdGlvbn0pLlxyXG4gKlxyXG5cclxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcclxuICogICAgICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuXHJcbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBJbmplY3RvciBmdW5jdGlvbi4gU2VlIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBUeXBpY2FsIHVzYWdlXHJcbiAqIDxwcmU+XHJcbiAqICAgLy8gY3JlYXRlIGFuIGluamVjdG9yXHJcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTtcclxuICpcclxuICogICAvLyB1c2UgdGhlIGluamVjdG9yIHRvIGtpY2sgb2ZmIHlvdXIgYXBwbGljYXRpb25cclxuICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvblxyXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCl7XHJcbiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xyXG4gKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XHJcbiAqICAgfSk7XHJcbiAqIDwvcHJlPlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIG92ZXJ2aWV3XHJcbiAqIEBuYW1lIEFVVE9cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfS5cclxuICovXHJcblxyXG52YXIgRk5fQVJHUyA9IC9eZnVuY3Rpb25cXHMqW15cXChdKlxcKFxccyooW15cXCldKilcXCkvbTtcclxudmFyIEZOX0FSR19TUExJVCA9IC8sLztcclxudmFyIEZOX0FSRyA9IC9eXFxzKihfPykoXFxTKz8pXFwxXFxzKiQvO1xyXG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XHJcbnZhciAkaW5qZWN0b3JNaW5FcnIgPSBtaW5FcnIoJyRpbmplY3RvcicpO1xyXG5mdW5jdGlvbiBhbm5vdGF0ZShmbikge1xyXG4gIHZhciAkaW5qZWN0LFxyXG4gICAgICBmblRleHQsXHJcbiAgICAgIGFyZ0RlY2wsXHJcbiAgICAgIGxhc3Q7XHJcblxyXG4gIGlmICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7XHJcbiAgICAgICRpbmplY3QgPSBbXTtcclxuICAgICAgaWYgKGZuLmxlbmd0aCkge1xyXG4gICAgICAgIGZuVGV4dCA9IGZuLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpO1xyXG4gICAgICAgIGFyZ0RlY2wgPSBmblRleHQubWF0Y2goRk5fQVJHUyk7XHJcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZyl7XHJcbiAgICAgICAgICBhcmcucmVwbGFjZShGTl9BUkcsIGZ1bmN0aW9uKGFsbCwgdW5kZXJzY29yZSwgbmFtZSl7XHJcbiAgICAgICAgICAgICRpbmplY3QucHVzaChuYW1lKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGZuLiRpbmplY3QgPSAkaW5qZWN0O1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaXNBcnJheShmbikpIHtcclxuICAgIGxhc3QgPSBmbi5sZW5ndGggLSAxO1xyXG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xyXG4gICAgJGluamVjdCA9IGZuLnNsaWNlKDAsIGxhc3QpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XHJcbiAgfVxyXG4gIHJldHVybiAkaW5qZWN0O1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgb2JqZWN0XHJcbiAqIEBuYW1lIEFVVE8uJGluamVjdG9yXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogYCRpbmplY3RvcmAgaXMgdXNlZCB0byByZXRyaWV2ZSBvYmplY3QgaW5zdGFuY2VzIGFzIGRlZmluZWQgYnlcclxuICoge0BsaW5rIEFVVE8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXHJcbiAqIGFuZCBsb2FkIG1vZHVsZXMuXHJcbiAqXHJcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcclxuICogICBleHBlY3QoJGluamVjdG9yLmdldCgnJGluamVjdG9yJykpLnRvQmUoJGluamVjdG9yKTtcclxuICogICBleHBlY3QoJGluamVjdG9yLmludm9rZShmdW5jdGlvbigkaW5qZWN0b3Ipe1xyXG4gKiAgICAgcmV0dXJuICRpbmplY3RvcjtcclxuICogICB9KS50b0JlKCRpbmplY3Rvcik7XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXHJcbiAqXHJcbiAqIEphdmFTY3JpcHQgZG9lcyBub3QgaGF2ZSBhbm5vdGF0aW9ucywgYW5kIGFubm90YXRpb25zIGFyZSBuZWVkZWQgZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uLiBUaGVcclxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcclxuICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKHNlcnZpY2VBKXt9KTtcclxuICpcclxuICogICAvLyBhbm5vdGF0ZWRcclxuICogICBmdW5jdGlvbiBleHBsaWNpdChzZXJ2aWNlQSkge307XHJcbiAqICAgZXhwbGljaXQuJGluamVjdCA9IFsnc2VydmljZUEnXTtcclxuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcclxuICpcclxuICogICAvLyBpbmxpbmVcclxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xyXG4gKiA8L3ByZT5cclxuICpcclxuICogIyMgSW5mZXJlbmNlXHJcbiAqXHJcbiAqIEluIEphdmFTY3JpcHQgY2FsbGluZyBgdG9TdHJpbmcoKWAgb24gYSBmdW5jdGlvbiByZXR1cm5zIHRoZSBmdW5jdGlvbiBkZWZpbml0aW9uLiBUaGUgZGVmaW5pdGlvbiBjYW4gdGhlbiBiZVxyXG4gKiBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gKk5PVEU6KiBUaGlzIGRvZXMgbm90IHdvcmsgd2l0aCBtaW5pZmljYXRpb24sIGFuZCBvYmZ1c2NhdGlvblxyXG4gKiB0b29scyBzaW5jZSB0aGVzZSB0b29scyBjaGFuZ2UgdGhlIGFyZ3VtZW50IG5hbWVzLlxyXG4gKlxyXG4gKiAjIyBgJGluamVjdGAgQW5ub3RhdGlvblxyXG4gKiBCeSBhZGRpbmcgYSBgJGluamVjdGAgcHJvcGVydHkgb250byBhIGZ1bmN0aW9uIHRoZSBpbmplY3Rpb24gcGFyYW1ldGVycyBjYW4gYmUgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiAjIyBJbmxpbmVcclxuICogQXMgYW4gYXJyYXkgb2YgaW5qZWN0aW9uIG5hbWVzLCB3aGVyZSB0aGUgbGFzdCBpdGVtIGluIHRoZSBhcnJheSBpcyB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRpbmplY3RvciNnZXRcclxuICogQG1ldGhvZE9mIEFVVE8uJGluamVjdG9yXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cclxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgbWV0aG9kXHJcbiAqIEBuYW1lIEFVVE8uJGluamVjdG9yI2ludm9rZVxyXG4gKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3JcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEludm9rZSB0aGUgbWV0aG9kIGFuZCBzdXBwbHkgdGhlIG1ldGhvZCBhcmd1bWVudHMgZnJvbSB0aGUgYCRpbmplY3RvcmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLiBUaGUgZnVuY3Rpb24gYXJndW1lbnRzIGNvbWUgZm9ybSB0aGUgZnVuY3Rpb24gYW5ub3RhdGlvbi5cclxuICogQHBhcmFtIHtPYmplY3Q9fSBzZWxmIFRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZC5cclxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzIG9iamVjdCBmaXJzdCwgYmVmb3JlXHJcbiAqICAgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cclxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgbWV0aG9kXHJcbiAqIEBuYW1lIEFVVE8uJGluamVjdG9yI2hhc1xyXG4gKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3JcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEFsbG93cyB0aGUgdXNlciB0byBxdWVyeSBpZiB0aGUgcGFydGljdWxhciBzZXJ2aWNlIGV4aXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gTmFtZSBvZiB0aGUgc2VydmljZSB0byBxdWVyeS5cclxuICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybnMgdHJ1ZSBpZiBpbmplY3RvciBoYXMgZ2l2ZW4gc2VydmljZS5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRpbmplY3RvciNpbnN0YW50aWF0ZVxyXG4gKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3JcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gaW52b2tlcyB0aGUgbmV3IG9wZXJhdG9yIGFuZCBzdXBwbGllc1xyXG4gKiBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZSBjb25zdHJ1Y3RvciBhbm5vdGF0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cclxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzIG9iamVjdCBmaXJzdCwgYmVmb3JlXHJcbiAqICAgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cclxuICogQHJldHVybnMge09iamVjdH0gbmV3IGluc3RhbmNlIG9mIGBUeXBlYC5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRpbmplY3RvciNhbm5vdGF0ZVxyXG4gKiBAbWV0aG9kT2YgQVVUTy4kaW5qZWN0b3JcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpcyB1c2VkIGJ5IHRoZSBpbmplY3RvclxyXG4gKiB0byBkZXRlcm1pbmUgd2hpY2ggc2VydmljZXMgbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbiB3aGVuIHRoZSBmdW5jdGlvbiBpcyBpbnZva2VkLiBUaGVyZSBhcmUgdGhyZWVcclxuICogd2F5cyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gY2FuIGJlIGFubm90YXRlZCB3aXRoIHRoZSBuZWVkZWQgZGVwZW5kZW5jaWVzLlxyXG4gKlxyXG4gKiAjIEFyZ3VtZW50IG5hbWVzXHJcbiAqXHJcbiAqIFRoZSBzaW1wbGVzdCBmb3JtIGlzIHRvIGV4dHJhY3QgdGhlIGRlcGVuZGVuY2llcyBmcm9tIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIGlzIGRvbmUgYnkgY29udmVydGluZ1xyXG4gKiB0aGUgZnVuY3Rpb24gaW50byBhIHN0cmluZyB1c2luZyBgdG9TdHJpbmcoKWAgbWV0aG9kIGFuZCBleHRyYWN0aW5nIHRoZSBhcmd1bWVudCBuYW1lcy5cclxuICogPHByZT5cclxuICogICAvLyBHaXZlblxyXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xyXG4gKiAgICAgLy8gLi4uXHJcbiAqICAgfVxyXG4gKlxyXG4gKiAgIC8vIFRoZW5cclxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB3b3JrIHdpdGggY29kZSBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbi4gRm9yIHRoaXMgcmVhc29uIHRoZSBmb2xsb3dpbmcgYW5ub3RhdGlvbiBzdHJhdGVnaWVzXHJcbiAqIGFyZSBzdXBwb3J0ZWQuXHJcbiAqXHJcbiAqICMgVGhlIGAkaW5qZWN0YCBwcm9wZXJ0eVxyXG4gKlxyXG4gKiBJZiBhIGZ1bmN0aW9uIGhhcyBhbiBgJGluamVjdGAgcHJvcGVydHkgYW5kIGl0cyB2YWx1ZSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzLCB0aGVuIHRoZSBzdHJpbmdzIHJlcHJlc2VudCBuYW1lcyBvZlxyXG4gKiBzZXJ2aWNlcyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmdW5jdGlvbi5cclxuICogPHByZT5cclxuICogICAvLyBHaXZlblxyXG4gKiAgIHZhciBNeUNvbnRyb2xsZXIgPSBmdW5jdGlvbihvYmZ1c2NhdGVkU2NvcGUsIG9iZnVzY2F0ZWRSb3V0ZSkge1xyXG4gKiAgICAgLy8gLi4uXHJcbiAqICAgfVxyXG4gKiAgIC8vIERlZmluZSBmdW5jdGlvbiBkZXBlbmRlbmNpZXNcclxuICogICBNeUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xyXG4gKlxyXG4gKiAgIC8vIFRoZW5cclxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxyXG4gKlxyXG4gKiBJdCBpcyBvZnRlbiBkZXNpcmFibGUgdG8gaW5saW5lIEluamVjdGVkIGZ1bmN0aW9ucyBhbmQgdGhhdCdzIHdoZW4gc2V0dGluZyB0aGUgYCRpbmplY3RgIHByb3BlcnR5IGlzIHZlcnlcclxuICogaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW4gYSB3YXkgdGhhdCBzdXJ2aXZlc1xyXG4gKiBtaW5pZmljYXRpb24gaXMgYSBiZXR0ZXIgY2hvaWNlOlxyXG4gKlxyXG4gKiA8cHJlPlxyXG4gKiAgIC8vIFdlIHdpc2ggdG8gd3JpdGUgdGhpcyAobm90IG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uIHNhZmUpXHJcbiAqICAgaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRjb21waWxlLCAkcm9vdFNjb3BlKSB7XHJcbiAqICAgICAvLyAuLi5cclxuICogICB9KTtcclxuICpcclxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXHJcbiAqICAgdmFyIHRtcEZuID0gZnVuY3Rpb24ob2JmdXNjYXRlZENvbXBpbGUsIG9iZnVzY2F0ZWRSb290U2NvcGUpIHtcclxuICogICAgIC8vIC4uLlxyXG4gKiAgIH07XHJcbiAqICAgdG1wRm4uJGluamVjdCA9IFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZSddO1xyXG4gKiAgIGluamVjdG9yLmludm9rZSh0bXBGbik7XHJcbiAqXHJcbiAqICAgLy8gVG8gYmV0dGVyIHN1cHBvcnQgaW5saW5lIGZ1bmN0aW9uIHRoZSBpbmxpbmUgYW5ub3RhdGlvbiBpcyBzdXBwb3J0ZWRcclxuICogICBpbmplY3Rvci5pbnZva2UoWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmQ29tcGlsZSwgb2JmUm9vdFNjb3BlKSB7XHJcbiAqICAgICAvLyAuLi5cclxuICogICB9XSk7XHJcbiAqXHJcbiAqICAgLy8gVGhlcmVmb3JlXHJcbiAqICAgZXhwZWN0KGluamVjdG9yLmFubm90YXRlKFxyXG4gKiAgICAgIFsnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKG9iZnVzXyRjb21waWxlLCBvYmZ1c18kcm9vdFNjb3BlKSB7fV0pXHJcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0byBiZSByZXRyaWV2ZWQgYXMgZGVzY3JpYmVkXHJcbiAqICAgYWJvdmUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gVGhlIG5hbWVzIG9mIHRoZSBzZXJ2aWNlcyB3aGljaCB0aGUgZnVuY3Rpb24gcmVxdWlyZXMuXHJcbiAqL1xyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgQVVUTy4kcHJvdmlkZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVXNlIGAkcHJvdmlkZWAgdG8gcmVnaXN0ZXIgbmV3IHByb3ZpZGVycyB3aXRoIHRoZSBgJGluamVjdG9yYC4gVGhlIHByb3ZpZGVycyBhcmUgdGhlIGZhY3RvcmllcyBmb3IgdGhlIGluc3RhbmNlLlxyXG4gKiBUaGUgcHJvdmlkZXJzIHNoYXJlIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGluc3RhbmNlIHRoZXkgY3JlYXRlIHdpdGggYFByb3ZpZGVyYCBzdWZmaXhlZCB0byB0aGVtLlxyXG4gKlxyXG4gKiBBIHByb3ZpZGVyIGlzIGFuIG9iamVjdCB3aXRoIGEgYCRnZXQoKWAgbWV0aG9kLiBUaGUgaW5qZWN0b3IgY2FsbHMgdGhlIGAkZ2V0YCBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mXHJcbiAqIGEgc2VydmljZS4gVGhlIFByb3ZpZGVyIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCB3b3VsZCBhbGxvdyBmb3IgY29uZmlndXJhdGlvbiBvZiB0aGUgcHJvdmlkZXIuXHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqICAgZnVuY3Rpb24gR3JlZXRQcm92aWRlcigpIHtcclxuICogICAgIHZhciBzYWx1dGF0aW9uID0gJ0hlbGxvJztcclxuICpcclxuICogICAgIHRoaXMuc2FsdXRhdGlvbiA9IGZ1bmN0aW9uKHRleHQpIHtcclxuICogICAgICAgc2FsdXRhdGlvbiA9IHRleHQ7XHJcbiAqICAgICB9O1xyXG4gKlxyXG4gKiAgICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAqICAgICAgIHJldHVybiBmdW5jdGlvbiAobmFtZSkge1xyXG4gKiAgICAgICAgIHJldHVybiBzYWx1dGF0aW9uICsgJyAnICsgbmFtZSArICchJztcclxuICogICAgICAgfTtcclxuICogICAgIH07XHJcbiAqICAgfVxyXG4gKlxyXG4gKiAgIGRlc2NyaWJlKCdHcmVldGVyJywgZnVuY3Rpb24oKXtcclxuICpcclxuICogICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XHJcbiAqICAgICAgICRwcm92aWRlLnByb3ZpZGVyKCdncmVldCcsIEdyZWV0UHJvdmlkZXIpO1xyXG4gKiAgICAgfSkpO1xyXG4gKlxyXG4gKiAgICAgaXQoJ3Nob3VsZCBncmVldCcsIGluamVjdChmdW5jdGlvbihncmVldCkge1xyXG4gKiAgICAgICBleHBlY3QoZ3JlZXQoJ2FuZ3VsYXInKSkudG9FcXVhbCgnSGVsbG8gYW5ndWxhciEnKTtcclxuICogICAgIH0pKTtcclxuICpcclxuICogICAgIGl0KCdzaG91bGQgYWxsb3cgY29uZmlndXJhdGlvbiBvZiBzYWx1dGF0aW9uJywgZnVuY3Rpb24oKSB7XHJcbiAqICAgICAgIG1vZHVsZShmdW5jdGlvbihncmVldFByb3ZpZGVyKSB7XHJcbiAqICAgICAgICAgZ3JlZXRQcm92aWRlci5zYWx1dGF0aW9uKCdBaG9qJyk7XHJcbiAqICAgICAgIH0pO1xyXG4gKiAgICAgICBpbmplY3QoZnVuY3Rpb24oZ3JlZXQpIHtcclxuICogICAgICAgICBleHBlY3QoZ3JlZXQoJ2FuZ3VsYXInKSkudG9FcXVhbCgnQWhvaiBhbmd1bGFyIScpO1xyXG4gKiAgICAgICB9KTtcclxuICogICAgIH0pO1xyXG4gKiA8L3ByZT5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRwcm92aWRlI3Byb3ZpZGVyXHJcbiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBSZWdpc3RlciBhIHByb3ZpZGVyIGZvciBhIHNlcnZpY2UuIFRoZSBwcm92aWRlcnMgY2FuIGJlIHJldHJpZXZlZCBhbmQgY2FuIGhhdmUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIG1ldGhvZHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS4gTk9URTogdGhlIHByb3ZpZGVyIHdpbGwgYmUgYXZhaWxhYmxlIHVuZGVyIGBuYW1lICsgJ1Byb3ZpZGVyJ2Aga2V5LlxyXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczpcclxuICpcclxuICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nXHJcbiAqICAgICAgICAgICAgICAge0BsaW5rIEFVVE8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC5cclxuICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcclxuICogICAgICAgICAgICAgICB7QGxpbmsgQVVUTy4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRwcm92aWRlI2ZhY3RvcnlcclxuICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEEgc2hvcnQgaGFuZCBmb3IgY29uZmlndXJpbmcgc2VydmljZXMgaWYgb25seSBgJGdldGAgbWV0aG9kIGlzIHJlcXVpcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gJGdldEZuIFRoZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi4gSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZCBmb3JcclxuICogYCRwcm92aWRlLnByb3ZpZGVyKG5hbWUsIHskZ2V0OiAkZ2V0Rm59KWAuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBtZXRob2RcclxuICogQG5hbWUgQVVUTy4kcHJvdmlkZSNzZXJ2aWNlXHJcbiAqIEBtZXRob2RPZiBBVVRPLiRwcm92aWRlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBBIHNob3J0IGhhbmQgZm9yIHJlZ2lzdGVyaW5nIHNlcnZpY2Ugb2YgZ2l2ZW4gY2xhc3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBtZXRob2RcclxuICogQG5hbWUgQVVUTy4kcHJvdmlkZSN2YWx1ZVxyXG4gKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQSBzaG9ydCBoYW5kIGZvciBjb25maWd1cmluZyBzZXJ2aWNlcyBpZiB0aGUgYCRnZXRgIG1ldGhvZCBpcyBhIGNvbnN0YW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgbWV0aG9kXHJcbiAqIEBuYW1lIEFVVE8uJHByb3ZpZGUjY29uc3RhbnRcclxuICogQG1ldGhvZE9mIEFVVE8uJHByb3ZpZGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEEgY29uc3RhbnQgdmFsdWUsIGJ1dCB1bmxpa2Uge0BsaW5rIEFVVE8uJHByb3ZpZGUjdmFsdWUgdmFsdWV9IGl0IGNhbiBiZSBpbmplY3RlZFxyXG4gKiBpbnRvIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gKG90aGVyIG1vZHVsZXMpIGFuZCBpdCBpcyBub3QgaW50ZXJjZXB0YWJsZSBieVxyXG4gKiB7QGxpbmsgQVVUTy4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBjb25zdGFudCB2YWx1ZS5cclxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBpbnN0YW5jZVxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIG1ldGhvZFxyXG4gKiBAbmFtZSBBVVRPLiRwcm92aWRlI2RlY29yYXRvclxyXG4gKiBAbWV0aG9kT2YgQVVUTy4kcHJvdmlkZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogRGVjb3JhdGlvbiBvZiBzZXJ2aWNlLCBhbGxvd3MgdGhlIGRlY29yYXRvciB0byBpbnRlcmNlcHQgdGhlIHNlcnZpY2UgaW5zdGFuY2UgY3JlYXRpb24uIFRoZVxyXG4gKiByZXR1cm5lZCBpbnN0YW5jZSBtYXkgYmUgdGhlIG9yaWdpbmFsIGluc3RhbmNlLCBvciBhIG5ldyBpbnN0YW5jZSB3aGljaCBkZWxlZ2F0ZXMgdG8gdGhlXHJcbiAqIG9yaWdpbmFsIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VydmljZSB0byBkZWNvcmF0ZS5cclxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxyXG4gKiAgICBpbnN0YW50aWF0ZWQuIFRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgdXNpbmcgdGhlIHtAbGluayBBVVRPLiRpbmplY3RvciNpbnZva2VcclxuICogICAgaW5qZWN0b3IuaW52b2tlfSBtZXRob2QgYW5kIGlzIHRoZXJlZm9yZSBmdWxseSBpbmplY3RhYmxlLiBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxyXG4gKlxyXG4gKiAgICAqIGAkZGVsZWdhdGVgIC0gVGhlIG9yaWdpbmFsIHNlcnZpY2UgaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCxcclxuICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLlxyXG4gKi9cclxuXHJcblxyXG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkKSB7XHJcbiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSxcclxuICAgICAgcHJvdmlkZXJTdWZmaXggPSAnUHJvdmlkZXInLFxyXG4gICAgICBwYXRoID0gW10sXHJcbiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcCgpLFxyXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xyXG4gICAgICAgICRwcm92aWRlOiB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVyOiBzdXBwb3J0T2JqZWN0KHByb3ZpZGVyKSxcclxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcclxuICAgICAgICAgICAgc2VydmljZTogc3VwcG9ydE9iamVjdChzZXJ2aWNlKSxcclxuICAgICAgICAgICAgdmFsdWU6IHN1cHBvcnRPYmplY3QodmFsdWUpLFxyXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXHJcbiAgICAgICAgICAgIGRlY29yYXRvcjogZGVjb3JhdG9yXHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHByb3ZpZGVySW5qZWN0b3IgPSAocHJvdmlkZXJDYWNoZS4kaW5qZWN0b3IgPVxyXG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3Rvcihwcm92aWRlckNhY2hlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCd1bnByJywgXCJVbmtub3duIHByb3ZpZGVyOiB7MH1cIiwgcGF0aC5qb2luKCcgPC0gJykpO1xyXG4gICAgICAgICAgfSkpLFxyXG4gICAgICBpbnN0YW5jZUNhY2hlID0ge30sXHJcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSAoaW5zdGFuY2VDYWNoZS4kaW5qZWN0b3IgPVxyXG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlbmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlbmFtZSArIHByb3ZpZGVyU3VmZml4KTtcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyKTtcclxuICAgICAgICAgIH0pKTtcclxuXHJcblxyXG4gIGZvckVhY2gobG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCksIGZ1bmN0aW9uKGZuKSB7IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKGZuIHx8IG5vb3ApOyB9KTtcclxuXHJcbiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7XHJcblxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gIC8vICRwcm92aWRlclxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xyXG4gICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7XHJcbiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTtcclxuICAgIH1cclxuICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHtcclxuICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgXCJQcm92aWRlciAnezB9JyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl87XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbikgeyByZXR1cm4gcHJvdmlkZXIobmFtZSwgeyAkZ2V0OiBmYWN0b3J5Rm4gfSk7IH1cclxuXHJcbiAgZnVuY3Rpb24gc2VydmljZShuYW1lLCBjb25zdHJ1Y3Rvcikge1xyXG4gICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcclxuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XHJcbiAgICB9XSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB2YWx1ZShuYW1lLCB2YWx1ZSkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbHVlKSk7IH1cclxuXHJcbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcclxuICAgIHByb3ZpZGVyQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcclxuICAgIGluc3RhbmNlQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xyXG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxyXG4gICAgICAgIG9yaWckZ2V0ID0gb3JpZ1Byb3ZpZGVyLiRnZXQ7XHJcblxyXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIG9yaWdJbnN0YW5jZSA9IGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKG9yaWckZ2V0LCBvcmlnUHJvdmlkZXIpO1xyXG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZGVjb3JGbiwgbnVsbCwgeyRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlfSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgLy8gTW9kdWxlIExvYWRpbmdcclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKXtcclxuICAgIHZhciBydW5CbG9ja3MgPSBbXTtcclxuICAgIGZvckVhY2gobW9kdWxlc1RvTG9hZCwgZnVuY3Rpb24obW9kdWxlKSB7XHJcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XHJcbiAgICAgIGxvYWRlZE1vZHVsZXMucHV0KG1vZHVsZSwgdHJ1ZSk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhtb2R1bGUpKSB7XHJcbiAgICAgICAgICB2YXIgbW9kdWxlRm4gPSBhbmd1bGFyTW9kdWxlKG1vZHVsZSk7XHJcbiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpO1xyXG5cclxuICAgICAgICAgIGZvcih2YXIgaW52b2tlUXVldWUgPSBtb2R1bGVGbi5faW52b2tlUXVldWUsIGkgPSAwLCBpaSA9IGludm9rZVF1ZXVlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGludm9rZUFyZ3MgPSBpbnZva2VRdWV1ZVtpXSxcclxuICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XHJcblxyXG4gICAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcclxuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcclxuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcclxuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PSAtMSkge1xyXG4gICAgICAgICAgLy8gU2FmYXJpICYgRkYncyBzdGFjayB0cmFjZXMgZG9uJ3QgY29udGFpbiBlcnJvci5tZXNzYWdlIGNvbnRlbnQgdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcclxuICAgICAgICAgIC8vIFNvIGlmIHN0YWNrIGRvZXNuJ3QgY29udGFpbiBtZXNzYWdlLCB3ZSBjcmVhdGUgYSBuZXcgc3RyaW5nIHRoYXQgY29udGFpbnMgYm90aC5cclxuICAgICAgICAgIC8vIFNpbmNlIGVycm9yLnN0YWNrIGlzIHJlYWQtb25seSBpbiBTYWZhcmksIEknbSBvdmVycmlkaW5nIGUgYW5kIG5vdCBlLnN0YWNrIGhlcmUuXHJcbiAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xcbicgKyBlLnN0YWNrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgXCJGYWlsZWQgdG8gaW5zdGFudGlhdGUgbW9kdWxlIHswfSBkdWUgdG86XFxuezF9XCIsIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJ1bkJsb2NrcztcclxuICB9XHJcblxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gIC8vIGludGVybmFsIEluamVjdG9yXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lKSB7XHJcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcclxuICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XHJcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2NkZXAnLCAnQ2lyY3VsYXIgZGVwZW5kZW5jeSBmb3VuZDogezB9JywgcGF0aC5qb2luKCcgPC0gJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xyXG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORztcclxuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgcGF0aC5zaGlmdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzKXtcclxuICAgICAgdmFyIGFyZ3MgPSBbXSxcclxuICAgICAgICAgICRpbmplY3QgPSBhbm5vdGF0ZShmbiksXHJcbiAgICAgICAgICBsZW5ndGgsIGksXHJcbiAgICAgICAgICBrZXk7XHJcblxyXG4gICAgICBmb3IoaSA9IDAsIGxlbmd0aCA9ICRpbmplY3QubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBrZXkgPSAkaW5qZWN0W2ldO1xyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdpdGtuJywgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhcmdzLnB1c2goXHJcbiAgICAgICAgICBsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSlcclxuICAgICAgICAgID8gbG9jYWxzW2tleV1cclxuICAgICAgICAgIDogZ2V0U2VydmljZShrZXkpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWZuLiRpbmplY3QpIHtcclxuICAgICAgICAvLyB0aGlzIG1lYW5zIHRoYXQgd2UgbXVzdCBiZSBhbiBhcnJheS5cclxuICAgICAgICBmbiA9IGZuW2xlbmd0aF07XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICAvLyBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IGh0dHA6Ly9qc3BlcmYuY29tL2FwcGx5LXZzLWNhbGwtdnMtaW52b2tlXHJcbiAgICAgIHN3aXRjaCAoc2VsZiA/IC0xIDogYXJncy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlICAwOiByZXR1cm4gZm4oKTtcclxuICAgICAgICBjYXNlICAxOiByZXR1cm4gZm4oYXJnc1swXSk7XHJcbiAgICAgICAgY2FzZSAgMjogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0pO1xyXG4gICAgICAgIGNhc2UgIDM6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcclxuICAgICAgICBjYXNlICA0OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XHJcbiAgICAgICAgY2FzZSAgNTogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xyXG4gICAgICAgIGNhc2UgIDY6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcclxuICAgICAgICBjYXNlICA3OiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XHJcbiAgICAgICAgY2FzZSAgODogcmV0dXJuIGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0sIGFyZ3NbN10pO1xyXG4gICAgICAgIGNhc2UgIDk6IHJldHVybiBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdLCBhcmdzWzddLCBhcmdzWzhdKTtcclxuICAgICAgICBjYXNlIDEwOiByZXR1cm4gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSwgYXJnc1s3XSwgYXJnc1s4XSwgYXJnc1s5XSk7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5zdGFudGlhdGUoVHlwZSwgbG9jYWxzKSB7XHJcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge30sXHJcbiAgICAgICAgICBpbnN0YW5jZSwgcmV0dXJuZWRWYWx1ZTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIFR5cGUgaXMgYW5ub3RhdGVkIGFuZCB1c2UganVzdCB0aGUgZ2l2ZW4gZnVuY3Rpb24gYXQgbi0xIGFzIHBhcmFtZXRlclxyXG4gICAgICAvLyBlLmcuIHNvbWVNb2R1bGUuZmFjdG9yeSgnZ3JlZXRlcicsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKHJlbmFtZWQkd2luZG93KSB7fV0pO1xyXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAoaXNBcnJheShUeXBlKSA/IFR5cGVbVHlwZS5sZW5ndGggLSAxXSA6IFR5cGUpLnByb3RvdHlwZTtcclxuICAgICAgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcclxuICAgICAgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzKTtcclxuXHJcbiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSA/IHJldHVybmVkVmFsdWUgOiBpbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbnZva2U6IGludm9rZSxcclxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxyXG4gICAgICBnZXQ6IGdldFNlcnZpY2UsXHJcbiAgICAgIGFubm90YXRlOiBhbm5vdGF0ZSxcclxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgbmcuJGFuY2hvclNjcm9sbFxyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xyXG4gKiBAcmVxdWlyZXMgJGxvY2F0aW9uXHJcbiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBXaGVuIGNhbGxlZCwgaXQgY2hlY2tzIGN1cnJlbnQgdmFsdWUgb2YgYCRsb2NhdGlvbi5oYXNoKClgIGFuZCBzY3JvbGwgdG8gcmVsYXRlZCBlbGVtZW50LFxyXG4gKiBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluXHJcbiAqIHtAbGluayBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjdGhlLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCBIdG1sNSBzcGVjfS5cclxuICpcclxuICogSXQgYWxzbyB3YXRjaGVzIHRoZSBgJGxvY2F0aW9uLmhhc2goKWAgYW5kIHNjcm9sbCB3aGVuZXZlciBpdCBjaGFuZ2VzIHRvIG1hdGNoIGFueSBhbmNob3IuXHJcbiAqIFRoaXMgY2FuIGJlIGRpc2FibGVkIGJ5IGNhbGxpbmcgYCRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpYC5cclxuICovXHJcbmZ1bmN0aW9uICRBbmNob3JTY3JvbGxQcm92aWRlcigpIHtcclxuXHJcbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgdGhpcy5kaXNhYmxlQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgYXV0b1Njcm9sbGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICB9O1xyXG5cclxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkd2luZG93LCAkbG9jYXRpb24sICRyb290U2NvcGUpIHtcclxuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XHJcblxyXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaXJzdCBhbmNob3IgZnJvbSBhIE5vZGVMaXN0XHJcbiAgICAvLyBjYW4ndCB1c2UgZmlsdGVyLmZpbHRlciwgYXMgaXQgYWNjZXB0cyBvbmx5IGluc3RhbmNlcyBvZiBBcnJheVxyXG4gICAgLy8gYW5kIElFIGNhbid0IGNvbnZlcnQgTm9kZUxpc3QgdG8gYW4gYXJyYXkgdXNpbmcgW10uc2xpY2VcclxuICAgIC8vIFRPRE8odm9qdGEpOiB1c2UgZmlsdGVyIGlmIHdlIGNoYW5nZSBpdCB0byBhY2NlcHQgbGlzdHMgYXMgd2VsbFxyXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RBbmNob3IobGlzdCkge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgZm9yRWFjaChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQgJiYgbG93ZXJjYXNlKGVsZW1lbnQubm9kZU5hbWUpID09PSAnYScpIHJlc3VsdCA9IGVsZW1lbnQ7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHtcclxuICAgICAgdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpLCBlbG07XHJcblxyXG4gICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxyXG4gICAgICBpZiAoIWhhc2gpICR3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcblxyXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcclxuICAgICAgZWxzZSBpZiAoKGVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7XHJcblxyXG4gICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRFxyXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgZWxtLnNjcm9sbEludG9WaWV3KCk7XHJcblxyXG4gICAgICAvLyBubyBlbGVtZW50IGFuZCBoYXNoID09ICd0b3AnLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxyXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgJHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkb2VzIG5vdCBzY3JvbGwgd2hlbiB1c2VyIGNsaWNrcyBvbiBhbmNob3IgbGluayB0aGF0IGlzIGN1cnJlbnRseSBvblxyXG4gICAgLy8gKG5vIHVybCBjaGFuZ2UsIG5vICRsb2NhdGlvbi5oYXNoKCkgY2hhbmdlKSwgYnJvd3NlciBuYXRpdmUgZG9lcyBzY3JvbGxcclxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xyXG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2goKSB7cmV0dXJuICRsb2NhdGlvbi5oYXNoKCk7fSxcclxuICAgICAgICBmdW5jdGlvbiBhdXRvU2Nyb2xsV2F0Y2hBY3Rpb24oKSB7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoc2Nyb2xsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2Nyb2xsO1xyXG4gIH1dO1xyXG59XHJcblxyXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kYW5pbWF0ZVByb3ZpZGVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mICRhbmltYXRlIHRoYXQgZG9lc24ndCBwZXJmb3JtIGFueSBhbmltYXRpb25zLCBpbnN0ZWFkIGp1c3Qgc3luY2hyb25vdXNseSBwZXJmb3JtcyBET01cclxuICogdXBkYXRlcyBhbmQgY2FsbHMgZG9uZSgpIGNhbGxiYWNrcy5cclxuICpcclxuICogSW4gb3JkZXIgdG8gZW5hYmxlIGFuaW1hdGlvbnMgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cclxuICpcclxuICogVG8gc2VlIHRoZSBmdW5jdGlvbmFsIGltcGxlbWVudGF0aW9uIGNoZWNrIG91dCBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNcclxuICovXHJcbnZhciAkQW5pbWF0ZVByb3ZpZGVyID0gWyckcHJvdmlkZScsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XHJcblxyXG4gIHRoaXMuJCRzZWxlY3RvcnMgPSB7fTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAqIEBuYW1lIG5nLiRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcclxuICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGVQcm92aWRlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmVnaXN0ZXJzIGEgbmV3IGluamVjdGFibGUgYW5pbWF0aW9uIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHByb2R1Y2VzIHRoZSBhbmltYXRpb24gb2JqZWN0IHdoaWNoXHJcbiAgICogY29udGFpbnMgY2FsbGJhY2sgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50IHRoYXQgaXMgZXhwZWN0ZWQgdG8gYmUgYW5pbWF0ZWQuXHJcbiAgICpcclxuICAgKiAgICogYGV2ZW50Rm5gOiBgZnVuY3Rpb24oRWxlbWVudCwgZG9uZUZ1bmN0aW9uKWAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIG11c3QgYmUgY2FsbGVkIG9uY2UgdGhlXHJcbiAgICogICBlbGVtZW50IGFuaW1hdGlvbiBpcyBjb21wbGV0ZS4gSWYgYSBmdW5jdGlvbiBpcyByZXR1cm5lZCB0aGVuIHRoZSBhbmltYXRpb24gc2VydmljZSB3aWxsIHVzZSB0aGlzIGZ1bmN0aW9uIHRvXHJcbiAgICogICBjYW5jZWwgdGhlIGFuaW1hdGlvbiB3aGVuZXZlciBhIGNhbmNlbCBldmVudCBpcyB0cmlnZ2VyZWQuXHJcbiAgICpcclxuICAgKlxyXG4gICAqPHByZT5cclxuICAgKiAgIHJldHVybiB7XHJcbiAgICAgKiAgICAgZXZlbnRGbiA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcclxuICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxyXG4gICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcclxuICAgICAqICAgICAgIHJldHVybiBmdW5jdGlvbiBjYW5jZWxsYXRpb25GdW5jdGlvbigpIHtcclxuICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXHJcbiAgICAgKiAgICAgICB9XHJcbiAgICAgKiAgICAgfVxyXG4gICAgICogICB9XHJcbiAgICo8L3ByZT5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24uXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZmFjdG9yeSBUaGUgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgdG8gcmV0dXJuIHRoZSBhbmltYXRpb24gb2JqZWN0LlxyXG4gICAqL1xyXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBmYWN0b3J5KSB7XHJcbiAgICB2YXIga2V5ID0gbmFtZSArICctYW5pbWF0aW9uJztcclxuICAgIGlmIChuYW1lICYmIG5hbWUuY2hhckF0KDApICE9ICcuJykgdGhyb3cgJGFuaW1hdGVNaW5FcnIoJ25vdGNzZWwnLFxyXG4gICAgICAgIFwiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy5cIiwgbmFtZSk7XHJcbiAgICB0aGlzLiQkc2VsZWN0b3JzW25hbWUuc3Vic3RyKDEpXSA9IGtleTtcclxuICAgICRwcm92aWRlLmZhY3Rvcnkoa2V5LCBmYWN0b3J5KTtcclxuICB9O1xyXG5cclxuICB0aGlzLiRnZXQgPSBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBvYmplY3RcclxuICAgICAqIEBuYW1lIG5nLiRhbmltYXRlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBUaGUgJGFuaW1hdGUgc2VydmljZSBwcm92aWRlcyBydWRpbWVudGFyeSBET00gbWFuaXB1bGF0aW9uIGZ1bmN0aW9ucyB0byBpbnNlcnQsIHJlbW92ZSwgbW92ZSBlbGVtZW50cyB3aXRoaW5cclxuICAgICAqIHRoZSBET00gYXMgd2VsbCBhcyBhZGRpbmcgYW5kIHJlbW92aW5nIGNsYXNzZXMuIFRoaXMgc2VydmljZSBpcyB0aGUgY29yZSBzZXJ2aWNlIHVzZWQgYnkgdGhlIG5nQW5pbWF0ZSAkYW5pbWF0b3JcclxuICAgICAqIHNlcnZpY2Ugd2hpY2ggcHJvdmlkZXMgaGlnaC1sZXZlbCBhbmltYXRpb24gaG9va3MgZm9yIENTUyBhbmQgSmF2YVNjcmlwdC4gXHJcbiAgICAgKlxyXG4gICAgICogJGFuaW1hdGUgaXMgYXZhaWxhYmxlIGluIHRoZSBBbmd1bGFySlMgY29yZSwgaG93ZXZlciwgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgbXVzdCBiZSBpbmNsdWRlZCB0byBlbmFibGUgZnVsbCBvdXRcclxuICAgICAqIGFuaW1hdGlvbiBzdXBwb3J0LiBPdGhlcndpc2UsICRhbmltYXRlIHdpbGwgb25seSBwZXJmb3JtIHNpbXBsZSBET00gbWFuaXB1bGF0aW9uIG9wZXJhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogVG8gbGVhcm4gbW9yZSBhYm91dCBlbmFibGluZyBhbmltYXRpb24gc3VwcG9ydCwgY2xpY2sgaGVyZSB0byB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZSBuZ0FuaW1hdGUgbW9kdWxlIHBhZ2V9XHJcbiAgICAgKiBhcyB3ZWxsIGFzIHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlIG5nQW5pbWF0ZSAkYW5pbWF0ZSBzZXJ2aWNlIHBhZ2V9LlxyXG4gICAgICovXHJcbiAgICByZXR1cm4ge1xyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNlbnRlclxyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBJbnNlcnRzIHRoZSBlbGVtZW50IGludG8gdGhlIERPTSBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvciB3aXRoaW4gdGhlIGBwYXJlbnRgIGVsZW1lbnQuIE9uY2UgY29tcGxldGUsXHJcbiAgICAgICAqIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxyXG4gICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gcGFyZW50IHRoZSBwYXJlbnQgZWxlbWVudCB3aGljaCB3aWxsIGFwcGVuZCB0aGUgZWxlbWVudCBhcyBhIGNoaWxkIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcclxuICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYWZ0ZXIgaXRzZWxmXHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBkb25lIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGVsZW1lbnQgaGFzIGJlZW4gaW5zZXJ0ZWQgaW50byB0aGUgRE9NXHJcbiAgICAgICAqL1xyXG4gICAgICBlbnRlciA6IGZ1bmN0aW9uKGVsZW1lbnQsIHBhcmVudCwgYWZ0ZXIsIGRvbmUpIHtcclxuICAgICAgICB2YXIgYWZ0ZXJOb2RlID0gYWZ0ZXIgJiYgYWZ0ZXJbYWZ0ZXIubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBwYXJlbnQgJiYgcGFyZW50WzBdIHx8IGFmdGVyTm9kZSAmJiBhZnRlck5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAvLyBJRSBkb2VzIG5vdCBsaWtlIHVuZGVmaW5lZCBzbyB3ZSBoYXZlIHRvIHBhc3MgbnVsbC5cclxuICAgICAgICB2YXIgYWZ0ZXJOZXh0U2libGluZyA9IChhZnRlck5vZGUgJiYgYWZ0ZXJOb2RlLm5leHRTaWJsaW5nKSB8fCBudWxsO1xyXG4gICAgICAgIGZvckVhY2goZWxlbWVudCwgZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgYWZ0ZXJOZXh0U2libGluZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZG9uZSAmJiAkdGltZW91dChkb25lLCAwLCBmYWxzZSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRhbmltYXRlI2xlYXZlXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kYW5pbWF0ZVxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIFJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLiBPbmNlIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIERPTVxyXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gZG9uZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NXHJcbiAgICAgICAqL1xyXG4gICAgICBsZWF2ZSA6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgIGRvbmUgJiYgJHRpbWVvdXQoZG9uZSwgMCwgZmFsc2UpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNtb3ZlXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kYW5pbWF0ZVxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIE1vdmVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoaW4gdGhlIERPTSB0byBiZSBwbGFjZWQgZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgb3IgaW5zaWRlIG9mIHRoZSBgcGFyZW50YCBlbGVtZW50LlxyXG4gICAgICAgKiBPbmNlIGNvbXBsZXRlLCB0aGUgZG9uZSgpIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBhcm91bmQgd2l0aGluIHRoZSBET01cclxuICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcclxuICAgICAgICogQHBhcmFtIHtqUXVlcnkvanFMaXRlIGVsZW1lbnR9IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZSBwb3NpdGlvbmVkIG5leHQgdG9cclxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbj19IGRvbmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIChpZiBwcm92aWRlZCkgdGhhdCB3aWxsIGJlIGZpcmVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIG1vdmVkIHRvIGl0J3MgbmV3IHBvc2l0aW9uXHJcbiAgICAgICAqL1xyXG4gICAgICBtb3ZlIDogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgZG9uZSkge1xyXG4gICAgICAgIC8vIERvIG5vdCByZW1vdmUgZWxlbWVudCBiZWZvcmUgaW5zZXJ0LiBSZW1vdmluZyB3aWxsIGNhdXNlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZVxyXG4gICAgICAgIC8vIGVsZW1lbnQgdG8gYmUgZHJvcHBlZC4gSW5zZXJ0IHdpbGwgaW1wbGljaXRseSBkbyB0aGUgcmVtb3ZlLlxyXG4gICAgICAgIHRoaXMuZW50ZXIoZWxlbWVudCwgcGFyZW50LCBhZnRlciwgZG9uZSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRhbmltYXRlI2FkZENsYXNzXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kYW5pbWF0ZVxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIEFkZHMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgdG8gdGhlIHByb3ZpZGVkIGVsZW1lbnQuIE9uY2UgY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGhhdmUgdGhlIGNsYXNzTmFtZSB2YWx1ZSBhZGRlZCB0byBpdFxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxyXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gZG9uZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHByb3ZpZGVkKSB0aGF0IHdpbGwgYmUgZmlyZWQgYWZ0ZXIgdGhlIGNsYXNzTmFtZSB2YWx1ZSBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZWxlbWVudFxyXG4gICAgICAgKi9cclxuICAgICAgYWRkQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcclxuICAgICAgICBjbGFzc05hbWUgPSBpc1N0cmluZyhjbGFzc05hbWUpID9cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5KGNsYXNzTmFtZSkgPyBjbGFzc05hbWUuam9pbignICcpIDogJyc7XHJcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIGRvbmUgJiYgJHRpbWVvdXQoZG9uZSwgMCwgZmFsc2UpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICAgKiBAbmFtZSBuZy4kYW5pbWF0ZSNyZW1vdmVDbGFzc1xyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGFuaW1hdGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBSZW1vdmVzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgQ1NTIGNsYXNzIHZhbHVlIGZyb20gdGhlIHByb3ZpZGVkIGVsZW1lbnQuIE9uY2UgY29tcGxldGUsIHRoZSBkb25lKCkgY2FsbGJhY2sgd2lsbCBiZSBmaXJlZCAoaWYgcHJvdmlkZWQpLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge2pRdWVyeS9qcUxpdGUgZWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGhhdmUgdGhlIGNsYXNzTmFtZSB2YWx1ZSByZW1vdmVkIGZyb20gaXRcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50XHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBkb25lIHRoZSBjYWxsYmFjayBmdW5jdGlvbiAoaWYgcHJvdmlkZWQpIHRoYXQgd2lsbCBiZSBmaXJlZCBhZnRlciB0aGUgY2xhc3NOYW1lIHZhbHVlIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxyXG4gICAgICAgKi9cclxuICAgICAgcmVtb3ZlQ2xhc3MgOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcclxuICAgICAgICBjbGFzc05hbWUgPSBpc1N0cmluZyhjbGFzc05hbWUpID9cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICBpc0FycmF5KGNsYXNzTmFtZSkgPyBjbGFzc05hbWUuam9pbignICcpIDogJyc7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICAgIGRvbmUgJiYgJHRpbWVvdXQoZG9uZSwgMCwgZmFsc2UpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZW5hYmxlZCA6IG5vb3BcclxuICAgIH07XHJcbiAgfV07XHJcbn1dO1xyXG5cclxuLyoqXHJcbiAqICEgVGhpcyBpcyBhIHByaXZhdGUgdW5kb2N1bWVudGVkIHNlcnZpY2UgIVxyXG4gKlxyXG4gKiBAbmFtZSBuZy4kYnJvd3NlclxyXG4gKiBAcmVxdWlyZXMgJGxvZ1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcclxuICpcclxuICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdFxyXG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcclxuICpcclxuICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYFxyXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXHJcbiAqIHRoZSByZWFsIGJyb3dzZXIgYXBpcy5cclxuICovXHJcbi8qKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gd2luZG93IFRoZSBnbG9iYWwgd2luZG93IG9iamVjdC5cclxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IFhIUiBYTUxIdHRwUmVxdWVzdCBjb25zdHJ1Y3Rvci5cclxuICogQHBhcmFtIHtvYmplY3R9ICRsb2cgY29uc29sZS5sb2cgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxyXG4gKi9cclxuZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xyXG4gIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgcmF3RG9jdW1lbnQgPSBkb2N1bWVudFswXSxcclxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXHJcbiAgICAgIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSxcclxuICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxyXG4gICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LFxyXG4gICAgICBwZW5kaW5nRGVmZXJJZHMgPSB7fTtcclxuXHJcbiAgc2VsZi5pc01vY2sgPSBmYWxzZTtcclxuXHJcbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDtcclxuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzID0gW107XHJcblxyXG4gIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXHJcbiAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7XHJcbiAgc2VsZi4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gZnVuY3Rpb24oKSB7IG91dHN0YW5kaW5nUmVxdWVzdENvdW50Kys7IH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uKHN1cHBvcnRzIGN1cnJ5aW5nKSBhbmQgZGVjcmVtZW50cyB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2BcclxuICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KGZuKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBmbi5hcHBseShudWxsLCBzbGljZUFyZ3MoYXJndW1lbnRzLCAxKSk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tO1xyXG4gICAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcclxuICAgICAgICB3aGlsZShvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MucG9wKCkoKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgJGxvZy5lcnJvcihlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICogTm90ZTogdGhpcyBtZXRob2QgaXMgdXNlZCBvbmx5IGJ5IHNjZW5hcmlvIHJ1bm5lclxyXG4gICAqIFRPRE8odm9qdGEpOiBwcmVmaXggdGhpcyBtZXRob2Qgd2l0aCAkJCA/XHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxyXG4gICAqL1xyXG4gIHNlbGYubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAvLyBmb3JjZSBicm93c2VyIHRvIGV4ZWN1dGUgYWxsIHBvbGxGbnMgLSB0aGlzIGlzIG5lZWRlZCBzbyB0aGF0IGNvb2tpZXMgYW5kIG90aGVyIHBvbGxlcnMgZmlyZVxyXG4gICAgLy8gYXQgc29tZSBkZXRlcm1pbmlzdGljIHRpbWUgaW4gcmVzcGVjdCB0byB0aGUgdGVzdCBydW5uZXIncyBhY3Rpb25zLiBMZWF2aW5nIHRoaW5ncyB1cCB0byB0aGVcclxuICAgIC8vIHJlZ3VsYXIgcG9sbGVyIHdvdWxkIHJlc3VsdCBpbiBmbGFreSB0ZXN0cy5cclxuICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKXsgcG9sbEZuKCk7IH0pO1xyXG5cclxuICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgLy8gUG9sbCBXYXRjaGVyIEFQSVxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgdmFyIHBvbGxGbnMgPSBbXSxcclxuICAgICAgcG9sbFRpbWVvdXQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuYW1lIG5nLiRicm93c2VyI2FkZFBvbGxGblxyXG4gICAqIEBtZXRob2RPZiBuZy4kYnJvd3NlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBQb2xsIGZ1bmN0aW9uIHRvIGFkZFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQWRkcyBhIGZ1bmN0aW9uIHRvIHRoZSBsaXN0IG9mIGZ1bmN0aW9ucyB0aGF0IHBvbGxlciBwZXJpb2RpY2FsbHkgZXhlY3V0ZXMsXHJcbiAgICogYW5kIHN0YXJ0cyBwb2xsaW5nIGlmIG5vdCBzdGFydGVkIHlldC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSB0aGUgYWRkZWQgZnVuY3Rpb25cclxuICAgKi9cclxuICBzZWxmLmFkZFBvbGxGbiA9IGZ1bmN0aW9uKGZuKSB7XHJcbiAgICBpZiAoaXNVbmRlZmluZWQocG9sbFRpbWVvdXQpKSBzdGFydFBvbGxlcigxMDAsIHNldFRpbWVvdXQpO1xyXG4gICAgcG9sbEZucy5wdXNoKGZuKTtcclxuICAgIHJldHVybiBmbjtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWwgSG93IG9mdGVuIHNob3VsZCBicm93c2VyIGNhbGwgcG9sbCBmdW5jdGlvbnMgKG1zKVxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gc2V0VGltZW91dCBSZWZlcmVuY2UgdG8gYSByZWFsIG9yIGZha2UgYHNldFRpbWVvdXRgIGZ1bmN0aW9uLlxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQ29uZmlndXJlcyB0aGUgcG9sbGVyIHRvIHJ1biBpbiB0aGUgc3BlY2lmaWVkIGludGVydmFscywgdXNpbmcgdGhlIHNwZWNpZmllZFxyXG4gICAqIHNldFRpbWVvdXQgZm4gYW5kIGtpY2tzIGl0IG9mZi5cclxuICAgKi9cclxuICBmdW5jdGlvbiBzdGFydFBvbGxlcihpbnRlcnZhbCwgc2V0VGltZW91dCkge1xyXG4gICAgKGZ1bmN0aW9uIGNoZWNrKCkge1xyXG4gICAgICBmb3JFYWNoKHBvbGxGbnMsIGZ1bmN0aW9uKHBvbGxGbil7IHBvbGxGbigpOyB9KTtcclxuICAgICAgcG9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCBpbnRlcnZhbCk7XHJcbiAgICB9KSgpO1xyXG4gIH1cclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAvLyBVUkwgQVBJXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgdmFyIGxhc3RCcm93c2VyVXJsID0gbG9jYXRpb24uaHJlZixcclxuICAgICAgYmFzZUVsZW1lbnQgPSBkb2N1bWVudC5maW5kKCdiYXNlJyksXHJcbiAgICAgIHJlcGxhY2VkVXJsID0gbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5hbWUgbmcuJGJyb3dzZXIjdXJsXHJcbiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBHRVRURVI6XHJcbiAgICogV2l0aG91dCBhbnkgYXJndW1lbnQsIHRoaXMgbWV0aG9kIGp1c3QgcmV0dXJucyBjdXJyZW50IHZhbHVlIG9mIGxvY2F0aW9uLmhyZWYuXHJcbiAgICpcclxuICAgKiBTRVRURVI6XHJcbiAgICogV2l0aCBhdCBsZWFzdCBvbmUgYXJndW1lbnQsIHRoaXMgbWV0aG9kIHNldHMgdXJsIHRvIG5ldyB2YWx1ZS5cclxuICAgKiBJZiBodG1sNSBoaXN0b3J5IGFwaSBzdXBwb3J0ZWQsIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUgaXMgdXNlZCwgb3RoZXJ3aXNlXHJcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXHJcbiAgICogUmV0dXJucyBpdHMgb3duIGluc3RhbmNlIHRvIGFsbG93IGNoYWluaW5nXHJcbiAgICpcclxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxyXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIGNoYW5nZSB1cmwuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXHJcbiAgICogQHBhcmFtIHtib29sZWFuPX0gcmVwbGFjZSBTaG91bGQgbmV3IHVybCByZXBsYWNlIGN1cnJlbnQgaGlzdG9yeSByZWNvcmQgP1xyXG4gICAqL1xyXG4gIHNlbGYudXJsID0gZnVuY3Rpb24odXJsLCByZXBsYWNlKSB7XHJcbiAgICAvLyBzZXR0ZXJcclxuICAgIGlmICh1cmwpIHtcclxuICAgICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHVybCkgcmV0dXJuO1xyXG4gICAgICBsYXN0QnJvd3NlclVybCA9IHVybDtcclxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIHtcclxuICAgICAgICBpZiAocmVwbGFjZSkgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgJycsIHVybCk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCAnJywgdXJsKTtcclxuICAgICAgICAgIC8vIENyYXp5IE9wZXJhIEJ1ZzogaHR0cDovL215Lm9wZXJhLmNvbS9jb21tdW5pdHkvZm9ydW1zL3RvcGljLmRtbD9pZD0xMTg1NDYyXHJcbiAgICAgICAgICBiYXNlRWxlbWVudC5hdHRyKCdocmVmJywgYmFzZUVsZW1lbnQuYXR0cignaHJlZicpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcclxuICAgICAgICAgIGxvY2F0aW9uLnJlcGxhY2UodXJsKTtcclxuICAgICAgICAgIHJlcGxhY2VkVXJsID0gdXJsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgICAgICAgcmVwbGFjZWRVcmwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc2VsZjtcclxuICAgIC8vIGdldHRlclxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gLSB0aGUgcmVwbGFjZWRVcmwgaXMgYSB3b3JrYXJvdW5kIGZvciBhbiBJRTgtOSBpc3N1ZSB3aXRoIGxvY2F0aW9uLnJlcGxhY2UgbWV0aG9kIHRoYXQgZG9lc24ndCB1cGRhdGVcclxuICAgICAgLy8gICBsb2NhdGlvbi5ocmVmIHN5bmNocm9ub3VzbHlcclxuICAgICAgLy8gLSB0aGUgcmVwbGFjZW1lbnQgaXMgYSB3b3JrYXJvdW5kIGZvciBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00MDcxNzJcclxuICAgICAgcmV0dXJuIHJlcGxhY2VkVXJsIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csXCInXCIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSxcclxuICAgICAgdXJsQ2hhbmdlSW5pdCA9IGZhbHNlO1xyXG5cclxuICBmdW5jdGlvbiBmaXJlVXJsQ2hhbmdlKCkge1xyXG4gICAgaWYgKGxhc3RCcm93c2VyVXJsID09IHNlbGYudXJsKCkpIHJldHVybjtcclxuXHJcbiAgICBsYXN0QnJvd3NlclVybCA9IHNlbGYudXJsKCk7XHJcbiAgICBmb3JFYWNoKHVybENoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuICAgICAgbGlzdGVuZXIoc2VsZi51cmwoKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuYW1lIG5nLiRicm93c2VyI29uVXJsQ2hhbmdlXHJcbiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyXHJcbiAgICogQFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBSZWdpc3RlciBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkLCB3aGVuIHVybCBjaGFuZ2VzLlxyXG4gICAqXHJcbiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBieSBvdXRzaWRlIG9mIGFuZ3VsYXI6XHJcbiAgICogLSB1c2VyIHR5cGVzIGRpZmZlcmVudCB1cmwgaW50byBhZGRyZXNzIGJhclxyXG4gICAqIC0gdXNlciBjbGlja3Mgb24gaGlzdG9yeSAoZm9yd2FyZC9iYWNrKSBidXR0b25cclxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xyXG4gICAqXHJcbiAgICogSXQncyBub3QgY2FsbGVkIHdoZW4gdXJsIGlzIGNoYW5nZWQgYnkgJGJyb3dzZXIudXJsKCkgbWV0aG9kXHJcbiAgICpcclxuICAgKiBUaGUgbGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2l0aCBuZXcgdXJsIGFzIHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXHJcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gbW9uaXRvciB1cmwgY2hhbmdlcyBpbiBhbmd1bGFyIGFwcHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxyXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9uKHN0cmluZyl9IFJldHVybnMgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXIgZm4gLSBoYW5keSBpZiB0aGUgZm4gaXMgYW5vbnltb3VzLlxyXG4gICAqL1xyXG4gIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7XHJcbiAgICAgIC8vIFdlIGxpc3RlbiBvbiBib3RoIChoYXNoY2hhbmdlL3BvcHN0YXRlKSB3aGVuIGF2YWlsYWJsZSwgYXMgc29tZSBicm93c2VycyAoZS5nLiBPcGVyYSlcclxuICAgICAgLy8gZG9uJ3QgZmlyZSBwb3BzdGF0ZSB3aGVuIHVzZXIgY2hhbmdlIHRoZSBhZGRyZXNzIGJhciBhbmQgZG9uJ3QgZmlyZSBoYXNoY2hhbmdlIHdoZW4gdXJsXHJcbiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGVcclxuXHJcbiAgICAgIC8vIGh0bWw1IGhpc3RvcnkgYXBpIC0gcG9wc3RhdGUgZXZlbnRcclxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGZpcmVVcmxDaGFuZ2UpO1xyXG4gICAgICAvLyBoYXNoY2hhbmdlIGV2ZW50XHJcbiAgICAgIGlmICgkc25pZmZlci5oYXNoY2hhbmdlKSBqcUxpdGUod2luZG93KS5vbignaGFzaGNoYW5nZScsIGZpcmVVcmxDaGFuZ2UpO1xyXG4gICAgICAvLyBwb2xsaW5nXHJcbiAgICAgIGVsc2Ugc2VsZi5hZGRQb2xsRm4oZmlyZVVybENoYW5nZSk7XHJcblxyXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB1cmxDaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gY2FsbGJhY2s7XHJcbiAgfTtcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAvLyBNaXNjIEFQSVxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgY3VycmVudCA8YmFzZSBocmVmPlxyXG4gICAqIChhbHdheXMgcmVsYXRpdmUgLSB3aXRob3V0IGRvbWFpbilcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmc9fVxyXG4gICAqL1xyXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBocmVmID0gYmFzZUVsZW1lbnQuYXR0cignaHJlZicpO1xyXG4gICAgcmV0dXJuIGhyZWYgPyBocmVmLnJlcGxhY2UoL15odHRwcz9cXDpcXC9cXC9bXlxcL10qLywgJycpIDogJyc7XHJcbiAgfTtcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAvLyBDb29raWVzIEFQSVxyXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgdmFyIGxhc3RDb29raWVzID0ge307XHJcbiAgdmFyIGxhc3RDb29raWVTdHJpbmcgPSAnJztcclxuICB2YXIgY29va2llUGF0aCA9IHNlbGYuYmFzZUhyZWYoKTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5hbWUgbmcuJGJyb3dzZXIjY29va2llc1xyXG4gICAqIEBtZXRob2RPZiBuZy4kYnJvd3NlclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIENvb2tpZSBuYW1lXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBDb29raWUgdmFsdWVcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFRoZSBjb29raWVzIG1ldGhvZCBwcm92aWRlcyBhICdwcml2YXRlJyBsb3cgbGV2ZWwgYWNjZXNzIHRvIGJyb3dzZXIgY29va2llcy5cclxuICAgKiBJdCBpcyBub3QgbWVhbnQgdG8gYmUgdXNlZCBkaXJlY3RseSwgdXNlIHRoZSAkY29va2llIHNlcnZpY2UgaW5zdGVhZC5cclxuICAgKlxyXG4gICAqIFRoZSByZXR1cm4gdmFsdWVzIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHMgdGhhdCB0aGUgbWV0aG9kIHdhcyBjYWxsZWQgd2l0aCBhcyBmb2xsb3dzOlxyXG4gICAqIDx1bD5cclxuICAgKiAgIDxsaT5jb29raWVzKCkgLT4gaGFzaCBvZiBhbGwgY29va2llcywgdGhpcyBpcyBOT1QgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBzdGF0ZSwgc28gZG8gbm90IG1vZGlmeSBpdDwvbGk+XHJcbiAgICogICA8bGk+Y29va2llcyhuYW1lLCB2YWx1ZSkgLT4gc2V0IG5hbWUgdG8gdmFsdWUsIGlmIHZhbHVlIGlzIHVuZGVmaW5lZCBkZWxldGUgdGhlIGNvb2tpZTwvbGk+XHJcbiAgICogICA8bGk+Y29va2llcyhuYW1lKSAtPiB0aGUgc2FtZSBhcyAobmFtZSwgdW5kZWZpbmVkKSA9PSBERUxFVEVTIChubyBvbmUgY2FsbHMgaXQgcmlnaHQgbm93IHRoYXQgd2F5KTwvbGk+XHJcbiAgICogPC91bD5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEhhc2ggb2YgYWxsIGNvb2tpZXMgKGlmIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIpXHJcbiAgICovXHJcbiAgc2VsZi5jb29raWVzID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBjb29raWVMZW5ndGgsIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4O1xyXG5cclxuICAgIGlmIChuYW1lKSB7XHJcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmF3RG9jdW1lbnQuY29va2llID0gZXNjYXBlKG5hbWUpICsgXCI9O3BhdGg9XCIgKyBjb29raWVQYXRoICsgXCI7ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICAgIGNvb2tpZUxlbmd0aCA9IChyYXdEb2N1bWVudC5jb29raWUgPSBlc2NhcGUobmFtZSkgKyAnPScgKyBlc2NhcGUodmFsdWUpICsgJztwYXRoPScgKyBjb29raWVQYXRoKS5sZW5ndGggKyAxO1xyXG5cclxuICAgICAgICAgIC8vIHBlciBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMyMTA5LnR4dCBicm93c2VyIG11c3QgYWxsb3cgYXQgbWluaW11bTpcclxuICAgICAgICAgIC8vIC0gMzAwIGNvb2tpZXNcclxuICAgICAgICAgIC8vIC0gMjAgY29va2llcyBwZXIgdW5pcXVlIGRvbWFpblxyXG4gICAgICAgICAgLy8gLSA0MDk2IGJ5dGVzIHBlciBjb29raWVcclxuICAgICAgICAgIGlmIChjb29raWVMZW5ndGggPiA0MDk2KSB7XHJcbiAgICAgICAgICAgICRsb2cud2FybihcIkNvb2tpZSAnXCIrIG5hbWUgK1wiJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlIChcIitcclxuICAgICAgICAgICAgICBjb29raWVMZW5ndGggKyBcIiA+IDQwOTYgYnl0ZXMpIVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChyYXdEb2N1bWVudC5jb29raWUgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcclxuICAgICAgICBsYXN0Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llO1xyXG4gICAgICAgIGNvb2tpZUFycmF5ID0gbGFzdENvb2tpZVN0cmluZy5zcGxpdChcIjsgXCIpO1xyXG4gICAgICAgIGxhc3RDb29raWVzID0ge307XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29raWVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29va2llID0gY29va2llQXJyYXlbaV07XHJcbiAgICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XHJcbiAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7IC8vaWdub3JlIG5hbWVsZXNzIGNvb2tpZXNcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSB1bmVzY2FwZShjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSk7XHJcbiAgICAgICAgICAgIC8vIHRoZSBmaXJzdCB2YWx1ZSB0aGF0IGlzIHNlZW4gZm9yIGEgY29va2llIGlzIHRoZSBtb3N0XHJcbiAgICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxyXG4gICAgICAgICAgICAvLyBmb2xsb3cgYXJlIGZvciBsZXNzIHNwZWNpZmljIHBhdGhzLlxyXG4gICAgICAgICAgICBpZiAobGFzdENvb2tpZXNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIGxhc3RDb29raWVzW25hbWVdID0gdW5lc2NhcGUoY29va2llLnN1YnN0cmluZyhpbmRleCArIDEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbGFzdENvb2tpZXM7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuYW1lIG5nLiRicm93c2VyI2RlZmVyXHJcbiAgICogQG1ldGhvZE9mIG5nLiRicm93c2VyXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uLCB3aG8ncyBleGVjdXRpb24gc2hvdWxkIGJlIGRlZmVycmVkLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLlxyXG4gICAqIEByZXR1cm5zIHsqfSBEZWZlcklkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSB0YXNrIHZpYSBgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKClgLlxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogRXhlY3V0ZXMgYSBmbiBhc3luY2hyb25vdXNseSB2aWEgYHNldFRpbWVvdXQoZm4sIGRlbGF5KWAuXHJcbiAgICpcclxuICAgKiBVbmxpa2Ugd2hlbiBjYWxsaW5nIGBzZXRUaW1lb3V0YCBkaXJlY3RseSwgaW4gdGVzdCB0aGlzIGZ1bmN0aW9uIGlzIG1vY2tlZCBhbmQgaW5zdGVhZCBvZiB1c2luZ1xyXG4gICAqIGBzZXRUaW1lb3V0YCBpbiB0ZXN0cywgdGhlIGZucyBhcmUgcXVldWVkIGluIGFuIGFycmF5LCB3aGljaCBjYW4gYmUgcHJvZ3JhbW1hdGljYWxseSBmbHVzaGVkXHJcbiAgICogdmlhIGAkYnJvd3Nlci5kZWZlci5mbHVzaCgpYC5cclxuICAgKlxyXG4gICAqL1xyXG4gIHNlbGYuZGVmZXIgPSBmdW5jdGlvbihmbiwgZGVsYXkpIHtcclxuICAgIHZhciB0aW1lb3V0SWQ7XHJcbiAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrO1xyXG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdO1xyXG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbik7XHJcbiAgICB9LCBkZWxheSB8fCAwKTtcclxuICAgIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcclxuICAgIHJldHVybiB0aW1lb3V0SWQ7XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuYW1lIG5nLiRicm93c2VyI2RlZmVyLmNhbmNlbFxyXG4gICAqIEBtZXRob2RPZiBuZy4kYnJvd3Nlci5kZWZlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQ2FuY2VscyBhIGRlZmVycmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Kn0gZGVmZXJJZCBUb2tlbiByZXR1cm5lZCBieSB0aGUgYCRicm93c2VyLmRlZmVyYCBmdW5jdGlvbi5cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC5cclxuICAgKi9cclxuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcclxuICAgIGlmIChwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF0pIHtcclxuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1tkZWZlcklkXTtcclxuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xyXG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uICRCcm93c2VyUHJvdmlkZXIoKXtcclxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGxvZycsICckc25pZmZlcicsICckZG9jdW1lbnQnLFxyXG4gICAgICBmdW5jdGlvbiggJHdpbmRvdywgICAkbG9nLCAgICRzbmlmZmVyLCAgICRkb2N1bWVudCl7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xyXG4gICAgICB9XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGNhY2hlRmFjdG9yeVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRmFjdG9yeSB0aGF0IGNvbnN0cnVjdHMgY2FjaGUgb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvIHRoZW0uXHJcbiAqIFxyXG4gKiA8cHJlPlxyXG4gKiBcclxuICogIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcclxuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnY2FjaGVJZCcpKS50b0JlKGNhY2hlKTtcclxuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnbm9TdWNoQ2FjaGVJZCcpKS5ub3QudG9CZURlZmluZWQoKTtcclxuICpcclxuICogIGNhY2hlLnB1dChcImtleVwiLCBcInZhbHVlXCIpO1xyXG4gKiAgY2FjaGUucHV0KFwiYW5vdGhlciBrZXlcIiwgXCJhbm90aGVyIHZhbHVlXCIpO1xyXG4gKiBcclxuICogIGV4cGVjdChjYWNoZS5pbmZvKCkpLnRvRXF1YWwoe2lkOiAnY2FjaGVJZCcsIHNpemU6IDJ9KTsgLy8gU2luY2Ugd2UndmUgc3BlY2lmaWVkIG5vIG9wdGlvbnMgb24gY3JlYXRpb25cclxuICogXHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxyXG4gKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGNhY2hlIGJlaGF2aW9yLiBQcm9wZXJ0aWVzOlxyXG4gKlxyXG4gKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDDouKCrOKAnSB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczpcclxuICpcclxuICogLSBge29iamVjdH1gIGBpbmZvKClgIMOi4oKs4oCdIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLlxyXG4gKiAtIGB7eyp9fWAgYHB1dCh7c3RyaW5nfSBrZXksIHsqfSB2YWx1ZSlgIMOi4oKs4oCdIFB1dHMgYSBuZXcga2V5LXZhbHVlIHBhaXIgaW50byB0aGUgY2FjaGUgYW5kIHJldHVybnMgaXQuXHJcbiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIMOi4oKs4oCdIFJldHVybnMgY2FjaGVkIHZhbHVlIGZvciBga2V5YCBvciB1bmRlZmluZWQgZm9yIGNhY2hlIG1pc3MuXHJcbiAqIC0gYHt2b2lkfWAgYHJlbW92ZSh7c3RyaW5nfSBrZXkpYCDDouKCrOKAnSBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuXHJcbiAqIC0gYHt2b2lkfWAgYHJlbW92ZUFsbCgpYCDDouKCrOKAnSBSZW1vdmVzIGFsbCBjYWNoZWQgdmFsdWVzLlxyXG4gKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIMOi4oKs4oCdIFJlbW92ZXMgcmVmZXJlbmNlcyB0byB0aGlzIGNhY2hlIGZyb20gJGNhY2hlRmFjdG9yeS5cclxuICpcclxuICovXHJcbmZ1bmN0aW9uICRDYWNoZUZhY3RvcnlQcm92aWRlcigpIHtcclxuXHJcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY2FjaGVzID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KGNhY2hlSWQsIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKGNhY2hlSWQgaW4gY2FjaGVzKSB7XHJcbiAgICAgICAgdGhyb3cgbWluRXJyKCckY2FjaGVGYWN0b3J5JykoJ2lpZCcsIFwiQ2FjaGVJZCAnezB9JyBpcyBhbHJlYWR5IHRha2VuIVwiLCBjYWNoZUlkKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNpemUgPSAwLFxyXG4gICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLFxyXG4gICAgICAgICAgZGF0YSA9IHt9LFxyXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgICAgICAgbHJ1SGFzaCA9IHt9LFxyXG4gICAgICAgICAgZnJlc2hFbmQgPSBudWxsLFxyXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xyXG5cclxuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXSA9IHtcclxuXHJcbiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICB2YXIgbHJ1RW50cnkgPSBscnVIYXNoW2tleV0gfHwgKGxydUhhc2hba2V5XSA9IHtrZXk6IGtleX0pO1xyXG5cclxuICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xyXG5cclxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcclxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrO1xyXG4gICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShzdGFsZUVuZC5rZXkpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcclxuXHJcbiAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgcmVmcmVzaChscnVFbnRyeSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcclxuXHJcbiAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaWYgKGxydUVudHJ5ID09IGZyZXNoRW5kKSBmcmVzaEVuZCA9IGxydUVudHJ5LnA7XHJcbiAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcclxuICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcclxuXHJcbiAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldO1xyXG4gICAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcclxuICAgICAgICAgIHNpemUtLTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICAgIHNpemUgPSAwO1xyXG4gICAgICAgICAgbHJ1SGFzaCA9IHt9O1xyXG4gICAgICAgICAgZnJlc2hFbmQgPSBzdGFsZUVuZCA9IG51bGw7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZGF0YSA9IG51bGw7XHJcbiAgICAgICAgICBzdGF0cyA9IG51bGw7XHJcbiAgICAgICAgICBscnVIYXNoID0gbnVsbDtcclxuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIGluZm86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgc3RhdHMsIHtzaXplOiBzaXplfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBtYWtlcyB0aGUgYGVudHJ5YCB0aGUgZnJlc2hFbmQgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxyXG4gICAgICAgKi9cclxuICAgICAgZnVuY3Rpb24gcmVmcmVzaChlbnRyeSkge1xyXG4gICAgICAgIGlmIChlbnRyeSAhPSBmcmVzaEVuZCkge1xyXG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xyXG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFsZUVuZCA9PSBlbnRyeSkge1xyXG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcclxuICAgICAgICAgIGxpbmsoZW50cnksIGZyZXNoRW5kKTtcclxuICAgICAgICAgIGZyZXNoRW5kID0gZW50cnk7XHJcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcclxuICAgICAgICovXHJcbiAgICAgIGZ1bmN0aW9uIGxpbmsobmV4dEVudHJ5LCBwcmV2RW50cnkpIHtcclxuICAgICAgICBpZiAobmV4dEVudHJ5ICE9IHByZXZFbnRyeSkge1xyXG4gICAgICAgICAgaWYgKG5leHRFbnRyeSkgbmV4dEVudHJ5LnAgPSBwcmV2RW50cnk7IC8vcCBzdGFuZHMgZm9yIHByZXZpb3VzLCAncHJldicgZGlkbid0IG1pbmlmeVxyXG4gICAgICAgICAgaWYgKHByZXZFbnRyeSkgcHJldkVudHJ5Lm4gPSBuZXh0RW50cnk7IC8vbiBzdGFuZHMgZm9yIG5leHQsICduZXh0JyBkaWRuJ3QgbWluaWZ5XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgbmcuJGNhY2hlRmFjdG9yeSNpbmZvXHJcbiAgICogQG1ldGhvZE9mIG5nLiRjYWNoZUZhY3RvcnlcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIG9mIHRoZSBjYWNoZXMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXHJcbiAgICovXHJcbiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgaW5mbyA9IHt9O1xyXG4gICAgICBmb3JFYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUsIGNhY2hlSWQpIHtcclxuICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGluZm87XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nLiRjYWNoZUZhY3RvcnkjZ2V0XHJcbiAgICogQG1ldGhvZE9mIG5nLiRjYWNoZUZhY3RvcnlcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEdldCBhY2Nlc3MgdG8gYSBjYWNoZSBvYmplY3QgYnkgdGhlIGBjYWNoZUlkYCB1c2VkIHdoZW4gaXQgd2FzIGNyZWF0ZWQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIGEgY2FjaGUgdG8gYWNjZXNzLlxyXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IENhY2hlIG9iamVjdCBpZGVudGlmaWVkIGJ5IHRoZSBjYWNoZUlkIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIGNhY2hlLlxyXG4gICAqL1xyXG4gICAgY2FjaGVGYWN0b3J5LmdldCA9IGZ1bmN0aW9uKGNhY2hlSWQpIHtcclxuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7XHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJHRlbXBsYXRlQ2FjaGVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3UgY2FuXHJcbiAqIGxvYWQgdGVtcGxhdGVzIGRpcmVjdGx5IGludG8gdGhlIGNhY2hlIGluIGEgYHNjcmlwdGAgdGFnLCBvciBieSBjb25zdW1pbmcgdGhlIGAkdGVtcGxhdGVDYWNoZWBcclxuICogc2VydmljZSBkaXJlY3RseS5cclxuICogXHJcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcclxuICogPHByZT5cclxuICogPGh0bWwgbmctYXBwPlxyXG4gKiA8aGVhZD5cclxuICogPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwidGVtcGxhdGVJZC5odG1sXCI+XHJcbiAqICAgVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgdGVtcGxhdGVcclxuICogPC9zY3JpcHQ+XHJcbiAqIDwvaGVhZD5cclxuICogICAuLi5cclxuICogPC9odG1sPlxyXG4gKiA8L3ByZT5cclxuICogXHJcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZiB0aGUgZG9jdW1lbnQsIGJ1dCBcclxuICogaXQgbXVzdCBiZSBiZWxvdyB0aGUgYG5nLWFwcGAgZGVmaW5pdGlvbi5cclxuICogXHJcbiAqIEFkZGluZyB2aWEgdGhlICR0ZW1wbGF0ZUNhY2hlIHNlcnZpY2U6XHJcbiAqIFxyXG4gKiA8cHJlPlxyXG4gKiB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSk7XHJcbiAqIG15QXBwLnJ1bihmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XHJcbiAqIH0pO1xyXG4gKiA8L3ByZT5cclxuICogXHJcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIEhUTUw6XHJcbiAqIDxwcmU+XHJcbiAqIDxkaXYgbmctaW5jbHVkZT1cIiAndGVtcGxhdGVJZC5odG1sJyBcIj48L2Rpdj5cclxuICogPC9wcmU+XHJcbiAqIFxyXG4gKiBvciBnZXQgaXQgdmlhIEphdmFzY3JpcHQ6XHJcbiAqIDxwcmU+XHJcbiAqICR0ZW1wbGF0ZUNhY2hlLmdldCgndGVtcGxhdGVJZC5odG1sJylcclxuICogPC9wcmU+XHJcbiAqIFxyXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xyXG4gIHRoaXMuJGdldCA9IFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcclxuICAgIHJldHVybiAkY2FjaGVGYWN0b3J5KCd0ZW1wbGF0ZXMnKTtcclxuICB9XTtcclxufVxyXG5cclxuLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhXHJcbiAqXHJcbiAqIERPTS1yZWxhdGVkIHZhcmlhYmxlczpcclxuICpcclxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXHJcbiAqIC0gXCJlbGVtZW50XCIgLSBET00gRWxlbWVudCBvciBOb2RlXHJcbiAqIC0gXCIkbm9kZVwiIG9yIFwiJGVsZW1lbnRcIiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudFxyXG4gKlxyXG4gKlxyXG4gKiBDb21waWxlciByZWxhdGVkIHN0dWZmOlxyXG4gKlxyXG4gKiAtIFwibGlua0ZuXCIgLSBsaW5raW5nIGZuIG9mIGEgc2luZ2xlIGRpcmVjdGl2ZVxyXG4gKiAtIFwibm9kZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGVcclxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcclxuICogLSBcImNvbXBvc2l0ZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBjb21waWxhdGlvbiByb290IChub2RlTGlzdClcclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBuZy4kY29tcGlsZVxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvbXBpbGVzIGEgcGllY2Ugb2YgSFRNTCBzdHJpbmcgb3IgRE9NIGludG8gYSB0ZW1wbGF0ZSBhbmQgcHJvZHVjZXMgYSB0ZW1wbGF0ZSBmdW5jdGlvbiwgd2hpY2hcclxuICogY2FuIHRoZW4gYmUgdXNlZCB0byBsaW5rIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBhbmQgdGhlIHRlbXBsYXRlIHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCB0cnlpbmcgdG8gbWF0Y2ggRE9NIGVsZW1lbnRzIHRvXHJcbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gRm9yIGVhY2ggbWF0Y2ggaXRcclxuICogZXhlY3V0ZXMgY29ycmVzcG9uZGluZyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgY29sbGVjdHMgdGhlXHJcbiAqIGluc3RhbmNlIGZ1bmN0aW9ucyBpbnRvIGEgc2luZ2xlIHRlbXBsYXRlIGZ1bmN0aW9uIHdoaWNoIGlzIHRoZW4gcmV0dXJuZWQuXHJcbiAqXHJcbiAqIFRoZSB0ZW1wbGF0ZSBmdW5jdGlvbiBjYW4gdGhlbiBiZSB1c2VkIG9uY2UgdG8gcHJvZHVjZSB0aGUgdmlldyBvciBhcyBpdCBpcyB0aGUgY2FzZSB3aXRoXHJcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgcmVwZWF0ZXJ9IG1hbnktdGltZXMsIGluIHdoaWNoXHJcbiAqIGNhc2UgZWFjaCBjYWxsIHJlc3VsdHMgaW4gYSB2aWV3IHRoYXQgaXMgYSBET00gY2xvbmUgb2YgdGhlIG9yaWdpbmFsIHRlbXBsYXRlLlxyXG4gKlxyXG4gPGRvYzpleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVcIj5cclxuICAgPGRvYzpzb3VyY2U+XHJcbiAgICA8c2NyaXB0PlxyXG4gICAgICAvLyBkZWNsYXJlIGEgbmV3IG1vZHVsZSwgYW5kIGluamVjdCB0aGUgJGNvbXBpbGVQcm92aWRlclxyXG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY29tcGlsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gY29uZmlndXJlIG5ldyAnY29tcGlsZScgZGlyZWN0aXZlIGJ5IHBhc3NpbmcgYSBkaXJlY3RpdmVcclxuICAgICAgICAvLyBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBpbmplY3RzIHRoZSAnJGNvbXBpbGUnXHJcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xyXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIGZhY3RvcnkgY3JlYXRlcyBhIGxpbmsgZnVuY3Rpb25cclxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxyXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICAgLy8gd2F0Y2ggdGhlICdjb21waWxlJyBleHByZXNzaW9uIGZvciBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzaWduIGl0IGludG8gdGhlIGN1cnJlbnQgRE9NXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lmh0bWwodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgdGhlIG5ldyBET00gYW5kIGxpbmsgaXQgdG8gdGhlIGN1cnJlbnRcclxuICAgICAgICAgICAgICAgIC8vIHNjb3BlLlxyXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcclxuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGdldCBpbnRvIGluZmluaXRlIGxvb3AgY29tcGlsaW5nIG91cnNlbHZlc1xyXG4gICAgICAgICAgICAgICAgJGNvbXBpbGUoZWxlbWVudC5jb250ZW50cygpKShzY29wZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgJHNjb3BlLm5hbWUgPSAnQW5ndWxhcic7XHJcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xyXG4gICAgICB9XHJcbiAgICA8L3NjcmlwdD5cclxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgPGlucHV0IG5nLW1vZGVsPVwibmFtZVwiPiA8YnI+XHJcbiAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImh0bWxcIj48L3RleHRhcmVhPiA8YnI+XHJcbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICA8L2RvYzpzb3VyY2U+XHJcbiAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgIGV4cGVjdChlbGVtZW50KCdkaXZbY29tcGlsZV0nKS50ZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcclxuICAgICAgIGlucHV0KCdodG1sJykuZW50ZXIoJ3t7bmFtZX19IScpO1xyXG4gICAgICAgZXhwZWN0KGVsZW1lbnQoJ2Rpdltjb21waWxlXScpLnRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcclxuICAgICB9KTtcclxuICAgPC9kb2M6c2NlbmFyaW8+XHJcbiA8L2RvYzpleGFtcGxlPlxyXG5cclxuICpcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd8RE9NRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IG9yIEhUTUwgc3RyaW5nIHRvIGNvbXBpbGUgaW50byBhIHRlbXBsYXRlIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGVbLCBjbG9uZUF0dGFjaEZuXX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcy5cclxuICogQHBhcmFtIHtudW1iZXJ9IG1heFByaW9yaXR5IG9ubHkgYXBwbHkgZGlyZWN0aXZlcyBsb3dlciB0aGVuIGdpdmVuIHByaW9yaXR5IChPbmx5IGVmZmVjdHMgdGhlXHJcbiAqICAgICAgICAgICAgICAgICByb290IGVsZW1lbnQocyksIG5vdCB0aGVpciBjaGlsZHJlbilcclxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlWywgY2xvbmVBdHRhY2hGbl0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXHJcbiAqIChhIERPTSBlbGVtZW50L3RyZWUpIHRvIGEgc2NvcGUuIFdoZXJlOlxyXG4gKlxyXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cclxuICogICogYGNsb25lQXR0YWNoRm5gIC0gSWYgYGNsb25lQXR0YWNoRm5gIGlzIHByb3ZpZGVkLCB0aGVuIHRoZSBsaW5rIGZ1bmN0aW9uIHdpbGwgY2xvbmUgdGhlXHJcbiAqICAgICAgICAgICAgICAgYHRlbXBsYXRlYCBhbmQgY2FsbCB0aGUgYGNsb25lQXR0YWNoRm5gIGZ1bmN0aW9uIGFsbG93aW5nIHRoZSBjYWxsZXIgdG8gYXR0YWNoIHRoZVxyXG4gKiAgICAgICAgICAgICAgIGNsb25lZCBlbGVtZW50cyB0byB0aGUgRE9NIGRvY3VtZW50IGF0IHRoZSBhcHByb3ByaWF0ZSBwbGFjZS4gVGhlIGBjbG9uZUF0dGFjaEZuYCBpc1xyXG4gKiAgICAgICAgICAgICAgIGNhbGxlZCBhczogPGJyPiBgY2xvbmVBdHRhY2hGbihjbG9uZWRFbGVtZW50LCBzY29wZSlgIHdoZXJlOlxyXG4gKlxyXG4gKiAgICAgICogYGNsb25lZEVsZW1lbnRgIC0gaXMgYSBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgYGVsZW1lbnRgIHBhc3NlZCBpbnRvIHRoZSBjb21waWxlci5cclxuICogICAgICAqIGBzY29wZWAgLSBpcyB0aGUgY3VycmVudCBzY29wZSB3aXRoIHdoaWNoIHRoZSBsaW5raW5nIGZ1bmN0aW9uIGlzIHdvcmtpbmcgd2l0aC5cclxuICpcclxuICogQ2FsbGluZyB0aGUgbGlua2luZyBmdW5jdGlvbiByZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSB0ZW1wbGF0ZS4gSXQgaXMgZWl0aGVyIHRoZSBvcmlnaW5hbCBlbGVtZW50XHJcbiAqIHBhc3NlZCBpbiwgb3IgdGhlIGNsb25lIG9mIHRoZSBlbGVtZW50IGlmIHRoZSBgY2xvbmVBdHRhY2hGbmAgaXMgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIEFmdGVyIGxpbmtpbmcgdGhlIHZpZXcgaXMgbm90IHVwZGF0ZWQgdW50aWwgYWZ0ZXIgYSBjYWxsIHRvICRkaWdlc3Qgd2hpY2ggdHlwaWNhbGx5IGlzIGRvbmUgYnlcclxuICogQW5ndWxhciBhdXRvbWF0aWNhbGx5LlxyXG4gKlxyXG4gKiBJZiB5b3UgbmVlZCBhY2Nlc3MgdG8gdGhlIGJvdW5kIHZpZXcsIHRoZXJlIGFyZSB0d28gd2F5cyB0byBkbyBpdDpcclxuICpcclxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXHJcbiAqICAgYmVmb3JlIHlvdSBzZW5kIHRoZW0gdG8gdGhlIGNvbXBpbGVyIGFuZCBrZWVwIHRoaXMgcmVmZXJlbmNlIGFyb3VuZC5cclxuICogICA8cHJlPlxyXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcclxuICogICA8L3ByZT5cclxuICpcclxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcclxuICogICBleGFtcGxlIHdvdWxkIG5vdCBwb2ludCB0byB0aGUgY2xvbmUsIGJ1dCByYXRoZXIgdG8gdGhlIG9yaWdpbmFsIHRlbXBsYXRlIHRoYXQgd2FzIGNsb25lZC4gSW5cclxuICogICB0aGlzIGNhc2UsIHlvdSBjYW4gYWNjZXNzIHRoZSBjbG9uZSB2aWEgdGhlIGNsb25lQXR0YWNoRm46XHJcbiAqICAgPHByZT5cclxuICogICAgIHZhciB0ZW1wbGF0ZUhUTUwgPSBhbmd1bGFyLmVsZW1lbnQoJzxwPnt7dG90YWx9fTwvcD4nKSxcclxuICogICAgICAgICBzY29wZSA9IC4uLi47XHJcbiAqXHJcbiAqICAgICB2YXIgY2xvbmVkRWxlbWVudCA9ICRjb21waWxlKHRlbXBsYXRlSFRNTCkoc2NvcGUsIGZ1bmN0aW9uKGNsb25lZEVsZW1lbnQsIHNjb3BlKSB7XHJcbiAqICAgICAgIC8vYXR0YWNoIHRoZSBjbG9uZSB0byBET00gZG9jdW1lbnQgYXQgdGhlIHJpZ2h0IHBsYWNlXHJcbiAqICAgICB9KTtcclxuICpcclxuICogICAgIC8vbm93IHdlIGhhdmUgcmVmZXJlbmNlIHRvIHRoZSBjbG9uZWQgRE9NIHZpYSBgY2xvbmVgXHJcbiAqICAgPC9wcmU+XHJcbiAqXHJcbiAqXHJcbiAqIEZvciBpbmZvcm1hdGlvbiBvbiBob3cgdGhlIGNvbXBpbGVyIHdvcmtzLCBzZWUgdGhlXHJcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cclxuICovXHJcblxyXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIHNlcnZpY2VcclxuICogQG5hbWUgbmcuJGNvbXBpbGVQcm92aWRlclxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG4kQ29tcGlsZVByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XHJcbmZ1bmN0aW9uICRDb21waWxlUHJvdmlkZXIoJHByb3ZpZGUpIHtcclxuICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxyXG4gICAgICBTdWZmaXggPSAnRGlyZWN0aXZlJyxcclxuICAgICAgQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQID0gL15cXHMqZGlyZWN0aXZlXFw6XFxzKihbXFxkXFx3XFwtX10rKVxccysoLiopJC8sXHJcbiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXFxkXFx3XFwtX10rKSg/OlxcOihbXjtdKykpPzs/KS8sXHJcbiAgICAgIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKGh0dHBzP3xmdHB8bWFpbHRvfGZpbGUpOi8sXHJcbiAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfGZpbGUpOnxkYXRhOmltYWdlXFwvLztcclxuXHJcbiAgLy8gUmVmOiBodHRwOi8vZGV2ZWxvcGVycy53aGF0d2cub3JnL3dlYmFwcGFwaXMuaHRtbCNldmVudC1oYW5kbGVyLWlkbC1hdHRyaWJ1dGVzXHJcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcclxuICAvLyAnb24nIGFuZCBiZSBjb21wb3NlZCBvZiBvbmx5IEVuZ2xpc2ggbGV0dGVycy5cclxuICB2YXIgRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCA9IC9eKG9uW2Etel0qfGZvcm1hY3Rpb24pJC87XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAqIEBuYW1lIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlXHJcbiAgICogQG1ldGhvZE9mIG5nLiRjb21waWxlUHJvdmlkZXJcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlLiAoaWUgPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaCB3aWxsIG1hdGNoIGFzXHJcbiAgICogICAgICAgICAgICAgICAgPGNvZGU+bmctYmluZDwvY29kZT4pLlxyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlIHtAbGluayBndWlkZS9kaXJlY3RpdmV9IGZvciBtb3JlXHJcbiAgICogICAgICAgICAgICAgICAgaW5mby5cclxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXHJcbiAgICovXHJcbiAgIHRoaXMuZGlyZWN0aXZlID0gZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlRmFjdG9yeSkge1xyXG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpKSB7XHJcbiAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlRmFjdG9yeScpO1xyXG4gICAgICBpZiAoIWhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICBoYXNEaXJlY3RpdmVzW25hbWVdID0gW107XHJcbiAgICAgICAgJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgU3VmZml4LCBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsXHJcbiAgICAgICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVzID0gW107XHJcbiAgICAgICAgICAgIGZvckVhY2goaGFzRGlyZWN0aXZlc1tuYW1lXSwgZnVuY3Rpb24oZGlyZWN0aXZlRmFjdG9yeSkge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlID0geyBjb21waWxlOiB2YWx1ZUZuKGRpcmVjdGl2ZSkgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7XHJcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5jb21waWxlID0gdmFsdWVGbihkaXJlY3RpdmUubGluayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5uYW1lID0gZGlyZWN0aXZlLm5hbWUgfHwgbmFtZTtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQSc7XHJcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcclxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlcztcclxuICAgICAgICAgIH1dKTtcclxuICAgICAgfVxyXG4gICAgICBoYXNEaXJlY3RpdmVzW25hbWVdLnB1c2goZGlyZWN0aXZlRmFjdG9yeSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3JFYWNoKG5hbWUsIHJldmVyc2VQYXJhbXMocmVnaXN0ZXJEaXJlY3RpdmUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy4kY29tcGlsZVByb3ZpZGVyI2FIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0XHJcbiAgICogQG1ldGhvZE9mIG5nLiRjb21waWxlUHJvdmlkZXJcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcclxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cclxuICAgKlxyXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXHJcbiAgICpcclxuICAgKiBBbnkgdXJsIGFib3V0IHRvIGJlIGFzc2lnbmVkIHRvIGFbaHJlZl0gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xyXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcclxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcclxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXHJcbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxyXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cclxuICAgKi9cclxuICB0aGlzLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gZnVuY3Rpb24ocmVnZXhwKSB7XHJcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcclxuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy4kY29tcGlsZVByb3ZpZGVyI2ltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdFxyXG4gICAqIEBtZXRob2RPZiBuZy4kY29tcGlsZVByb3ZpZGVyXHJcbiAgICogQGZ1bmN0aW9uXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXHJcbiAgICogdXJscyBkdXJpbmcgaW1nW3NyY10gc2FuaXRpemF0aW9uLlxyXG4gICAqXHJcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cclxuICAgKlxyXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50byBhblxyXG4gICAqIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgIHJlZ3VsYXJcclxuICAgKiBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsIHRoZVxyXG4gICAqIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxyXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcclxuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xyXG4gICAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdDtcclxuICB9O1xyXG5cclxuXHJcbiAgdGhpcy4kZ2V0ID0gW1xyXG4gICAgICAgICAgICAnJGluamVjdG9yJywgJyRpbnRlcnBvbGF0ZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckcGFyc2UnLFxyXG4gICAgICAgICAgICAnJGNvbnRyb2xsZXInLCAnJHJvb3RTY29wZScsICckZG9jdW1lbnQnLCAnJHNjZScsICckJHVybFV0aWxzJywgJyRhbmltYXRlJyxcclxuICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkaW50ZXJwb2xhdGUsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJHBhcnNlLFxyXG4gICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkZG9jdW1lbnQsICAgJHNjZSwgICAkJHVybFV0aWxzLCAkYW5pbWF0ZSkge1xyXG5cclxuICAgIHZhciBBdHRyaWJ1dGVzID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xyXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgIHRoaXMuJGF0dHIgPSBhdHRyIHx8IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHtcclxuICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlc1xyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIEFkZHMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciB0byB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9uc1xyXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NWYWwgVGhlIGNsYXNzTmFtZSB2YWx1ZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnRcclxuICAgICAgICovXHJcbiAgICAgICRhZGRDbGFzcyA6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XHJcbiAgICAgICAgaWYoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzc1xyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWYgYW5pbWF0aW9uc1xyXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIHJlbW92YWwuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcclxuICAgICAgICovXHJcbiAgICAgICRyZW1vdmVDbGFzcyA6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XHJcbiAgICAgICAgaWYoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzXHJcbiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IE5vcm1hbGl6ZWQga2V5LiAoaWUgbmdBdHRyaWJ1dGUpXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLlxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuXHJcbiAgICAgICAqICAgICBEZWZhdWx0cyB0byB0cnVlLlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuXHJcbiAgICAgICAqL1xyXG4gICAgICAkc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlLCB3cml0ZUF0dHIsIGF0dHJOYW1lKSB7XHJcbiAgICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIGNsYXNzIGF0dHJpYnV0ZSBhZGRpdGlvbiArIHJlbW92YWxcclxuICAgICAgICAvL3NvIHRoYXQgY2xhc3MgY2hhbmdlcyBjYW4gdGFwIGludG8gdGhlIGFuaW1hdGlvblxyXG4gICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2VcclxuICAgICAgICBpZihrZXkgPT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSB8fCAnJztcclxuICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy4kJGVsZW1lbnQuYXR0cignY2xhc3MnKSB8fCAnJztcclxuICAgICAgICAgIHRoaXMuJHJlbW92ZUNsYXNzKHRva2VuRGlmZmVyZW5jZShjdXJyZW50LCB2YWx1ZSkuam9pbignICcpKTtcclxuICAgICAgICAgIHRoaXMuJGFkZENsYXNzKHRva2VuRGlmZmVyZW5jZSh2YWx1ZSwgY3VycmVudCkuam9pbignICcpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGJvb2xlYW5LZXkgPSBnZXRCb29sZWFuQXR0ck5hbWUodGhpcy4kJGVsZW1lbnRbMF0sIGtleSksXHJcbiAgICAgICAgICAgICAgbm9ybWFsaXplZFZhbCxcclxuICAgICAgICAgICAgICBub2RlTmFtZTtcclxuXHJcbiAgICAgICAgICBpZiAoYm9vbGVhbktleSkge1xyXG4gICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5wcm9wKGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXlcclxuICAgICAgICAgIGlmIChhdHRyTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGF0dHJOYW1lID0gdGhpcy4kYXR0cltrZXldO1xyXG4gICAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcclxuICAgICAgICAgIGlmICgobm9kZU5hbWUgPT09ICdBJyAmJiBrZXkgPT09ICdocmVmJykgfHxcclxuICAgICAgICAgICAgICAobm9kZU5hbWUgPT09ICdJTUcnICYmIGtleSA9PT0gJ3NyYycpKSB7XHJcbiAgICAgICAgICAgIC8vIE5PVEU6ICQkdXJsVXRpbHMucmVzb2x2ZSgpIGRvZXNuJ3Qgc3VwcG9ydCBJRSA8IDggc28gd2UgZG9uJ3Qgc2FuaXRpemUgZm9yIHRoYXQgY2FzZS5cclxuICAgICAgICAgICAgaWYgKCFtc2llIHx8IG1zaWUgPj0gOCApIHtcclxuICAgICAgICAgICAgICBub3JtYWxpemVkVmFsID0gJCR1cmxVdGlscy5yZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoa2V5ID09PSAnaHJlZicgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2goYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChrZXkgPT09ICdzcmMnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlID0gJ3Vuc2FmZTonICsgbm9ybWFsaXplZFZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LmF0dHIoYXR0ck5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZmlyZSBvYnNlcnZlcnNcclxuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xyXG4gICAgICAgICQkb2JzZXJ2ZXJzICYmIGZvckVhY2goJCRvYnNlcnZlcnNba2V5XSwgZnVuY3Rpb24oZm4pIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZuKHZhbHVlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRva2VuRGlmZmVyZW5jZShzdHIxLCBzdHIyKSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWVzID0gW10sXHJcbiAgICAgICAgICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcclxuICAgICAgICAgICAgICB0b2tlbnMyID0gc3RyMi5zcGxpdCgvXFxzKy8pO1xyXG5cclxuICAgICAgICAgIG91dGVyOlxyXG4gICAgICAgICAgZm9yKHZhciBpPTA7aTx0b2tlbnMxLmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcclxuICAgICAgICAgICAgZm9yKHZhciBqPTA7ajx0b2tlbnMyLmxlbmd0aDtqKyspIHtcclxuICAgICAgICAgICAgICBpZih0b2tlbiA9PSB0b2tlbnMyW2pdKSBjb250aW51ZSBvdXRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWVzO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIE9ic2VydmUgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS5cclxuICAgICAgICogVGhlIG9ic2VydmVyIHdpbGwgbmV2ZXIgYmUgY2FsbGVkLCBpZiBnaXZlbiBhdHRyaWJ1dGUgaXMgbm90IGludGVycG9sYXRlZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuXHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKil9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBjaGFuZ2VzLlxyXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKil9IHRoZSBgZm5gIEZ1bmN0aW9uIHBhc3NlZCBpbi5cclxuICAgICAgICovXHJcbiAgICAgICRvYnNlcnZlOiBmdW5jdGlvbihrZXksIGZuKSB7XHJcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcyxcclxuICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0ge30pKSxcclxuICAgICAgICAgICAgbGlzdGVuZXJzID0gKCQkb2JzZXJ2ZXJzW2tleV0gfHwgKCQkb2JzZXJ2ZXJzW2tleV0gPSBbXSkpO1xyXG5cclxuICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKCFsaXN0ZW5lcnMuJCRpbnRlcikge1xyXG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XHJcbiAgICAgICAgICAgIGZuKGF0dHJzW2tleV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXJsU2FuaXRpemF0aW9uTm9kZSA9ICRkb2N1bWVudFswXS5jcmVhdGVFbGVtZW50KCdhJyksXHJcbiAgICAgICAgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcclxuICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXHJcbiAgICAgICAgZGVub3JtYWxpemVUZW1wbGF0ZSA9IChzdGFydFN5bWJvbCA9PSAne3snIHx8IGVuZFN5bWJvbCAgPT0gJ319JylcclxuICAgICAgICAgICAgPyBpZGVudGl0eVxyXG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFx7XFx7L2csIHN0YXJ0U3ltYm9sKS5yZXBsYWNlKC99fS9nLCBlbmRTeW1ib2wpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XHJcblxyXG5cclxuICAgIHJldHVybiBjb21waWxlO1xyXG5cclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xyXG4gICAgICBpZiAoISgkY29tcGlsZU5vZGVzIGluc3RhbmNlb2YganFMaXRlKSkge1xyXG4gICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhbiBtb2RpZnkgaXQuXHJcbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBXZSBjYW4gbm90IGNvbXBpbGUgdG9wIGxldmVsIHRleHQgZWxlbWVudHMgc2luY2UgdGV4dCBub2RlcyBjYW4gYmUgbWVyZ2VkIGFuZCB3ZSB3aWxsXHJcbiAgICAgIC8vIG5vdCBiZSBhYmxlIHRvIGF0dGFjaCBzY29wZSBkYXRhIHRvIHRoZW0sIHNvIHdlIHdpbGwgd3JhcCB0aGVtIGluIDxzcGFuPlxyXG4gICAgICBmb3JFYWNoKCRjb21waWxlTm9kZXMsIGZ1bmN0aW9uKG5vZGUsIGluZGV4KXtcclxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzIC8qIHRleHQgbm9kZSAqLyAmJiBub2RlLm5vZGVWYWx1ZS5tYXRjaCgvXFxTKy8pIC8qIG5vbi1lbXB0eSAqLyApIHtcclxuICAgICAgICAgICRjb21waWxlTm9kZXNbaW5kZXhdID0gbm9kZSA9IGpxTGl0ZShub2RlKS53cmFwKCc8c3Bhbj48L3NwYW4+JykucGFyZW50KClbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgdmFyIGNvbXBvc2l0ZUxpbmtGbiA9IGNvbXBpbGVOb2RlcygkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sICRjb21waWxlTm9kZXMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gcHVibGljTGlua0ZuKHNjb3BlLCBjbG9uZUNvbm5lY3RGbil7XHJcbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcclxuICAgICAgICAvLyBpbXBvcnRhbnQhITogd2UgbXVzdCBjYWxsIG91ciBqcUxpdGUuY2xvbmUoKSBzaW5jZSB0aGUgalF1ZXJ5IG9uZSBpcyB0cnlpbmcgdG8gYmUgc21hcnRcclxuICAgICAgICAvLyBhbmQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgRE9NLlxyXG4gICAgICAgIHZhciAkbGlua05vZGUgPSBjbG9uZUNvbm5lY3RGblxyXG4gICAgICAgICAgPyBKUUxpdGVQcm90b3R5cGUuY2xvbmUuY2FsbCgkY29tcGlsZU5vZGVzKSAvLyBJTVBPUlRBTlQhISFcclxuICAgICAgICAgIDogJGNvbXBpbGVOb2RlcztcclxuXHJcbiAgICAgICAgLy8gQXR0YWNoIHNjb3BlIG9ubHkgdG8gbm9uLXRleHQgbm9kZXMuXHJcbiAgICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSAkbGlua05vZGUubGVuZ3RoOyBpPGlpOyBpKyspIHtcclxuICAgICAgICAgIHZhciBub2RlID0gJGxpbmtOb2RlW2ldO1xyXG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAvKiBlbGVtZW50ICovIHx8IG5vZGUubm9kZVR5cGUgPT0gOSAvKiBkb2N1bWVudCAqLykge1xyXG4gICAgICAgICAgICAkbGlua05vZGUuZXEoaSkuZGF0YSgnJHNjb3BlJywgc2NvcGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzYWZlQWRkQ2xhc3MoJGxpbmtOb2RlLCAnbmctc2NvcGUnKTtcclxuICAgICAgICBpZiAoY2xvbmVDb25uZWN0Rm4pIGNsb25lQ29ubmVjdEZuKCRsaW5rTm9kZSwgc2NvcGUpO1xyXG4gICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUpO1xyXG4gICAgICAgIHJldHVybiAkbGlua05vZGU7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAvLyBpZ25vcmUsIHNpbmNlIGl0IG1lYW5zIHRoYXQgd2UgYXJlIHRyeWluZyB0byBzZXQgY2xhc3Mgb25cclxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBpbGUgZnVuY3Rpb24gbWF0Y2hlcyBlYWNoIG5vZGUgaW4gbm9kZUxpc3QgYWdhaW5zdCB0aGUgZGlyZWN0aXZlcy4gT25jZSBhbGwgZGlyZWN0aXZlc1xyXG4gICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxyXG4gICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nXHJcbiAgICAgKiBmdW5jdGlvbiwgd2hpY2ggaXMgdGhlIGEgbGlua2luZyBmdW5jdGlvbiBmb3IgdGhlIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZVxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxyXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cclxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlbiB0aGVcclxuICAgICAqICAgICAgICByb290RWxlbWVudCBtdXN0IGJlIHNldCB0aGUganFMaXRlIGNvbGxlY3Rpb24gb2YgdGhlIGNvbXBpbGUgcm9vdC4gVGhpcyBpc1xyXG4gICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXggZGlyZWN0aXZlIHByaW9yaXR5XHJcbiAgICAgKiBAcmV0dXJucyB7P2Z1bmN0aW9ufSBBIGNvbXBvc2l0ZSBsaW5raW5nIGZ1bmN0aW9uIG9mIGFsbCBvZiB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9yIG51bGwuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcclxuICAgICAgdmFyIGxpbmtGbnMgPSBbXSxcclxuICAgICAgICAgIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBkaXJlY3RpdmVzLCBhdHRycywgbGlua0ZuRm91bmQ7XHJcblxyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhdHRycyA9IG5ldyBBdHRyaWJ1dGVzKCk7XHJcblxyXG4gICAgICAgIC8vIHdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIG5vZGVMaXN0W2ldIHNpbmNlIHRoZSBub2RlcyBjYW4gYmUgcmVwbGFjZWQgdW5kZXJuZWF0aCB1cy5cclxuICAgICAgICBkaXJlY3RpdmVzID0gY29sbGVjdERpcmVjdGl2ZXMobm9kZUxpc3RbaV0sIFtdLCBhdHRycywgaSA9PSAwID8gbWF4UHJpb3JpdHkgOiB1bmRlZmluZWQsIGlnbm9yZURpcmVjdGl2ZSk7XHJcblxyXG4gICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpXHJcbiAgICAgICAgICAgID8gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIG5vZGVMaXN0W2ldLCBhdHRycywgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQpXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuXHJcbiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8ICFub2RlTGlzdFtpXS5jaGlsZE5vZGVzIHx8ICFub2RlTGlzdFtpXS5jaGlsZE5vZGVzLmxlbmd0aClcclxuICAgICAgICAgICAgPyBudWxsXHJcbiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKG5vZGVMaXN0W2ldLmNoaWxkTm9kZXMsXHJcbiAgICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IG5vZGVMaW5rRm4udHJhbnNjbHVkZSA6IHRyYW5zY2x1ZGVGbik7XHJcblxyXG4gICAgICAgIGxpbmtGbnMucHVzaChub2RlTGlua0ZuKTtcclxuICAgICAgICBsaW5rRm5zLnB1c2goY2hpbGRMaW5rRm4pO1xyXG4gICAgICAgIGxpbmtGbkZvdW5kID0gKGxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm4gfHwgY2hpbGRMaW5rRm4pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyByZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIGlmIHdlIGhhdmUgZm91bmQgYW55dGhpbmcsIG51bGwgb3RoZXJ3aXNlXHJcbiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XHJcblxyXG4gICAgICBmdW5jdGlvbiBjb21wb3NpdGVMaW5rRm4oc2NvcGUsIG5vZGVMaXN0LCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XHJcbiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBjaGlsZFRyYW5zY2x1ZGVGbiwgaSwgaWksIG47XHJcblxyXG4gICAgICAgIC8vIGNvcHkgbm9kZUxpc3Qgc28gdGhhdCBsaW5raW5nIGRvZXNuJ3QgYnJlYWsgZHVlIHRvIGxpdmUgbGlzdCB1cGRhdGVzLlxyXG4gICAgICAgIHZhciBzdGFibGVOb2RlTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gbm9kZUxpc3QubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgc3RhYmxlTm9kZUxpc3QucHVzaChub2RlTGlzdFtpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IoaSA9IDAsIG4gPSAwLCBpaSA9IGxpbmtGbnMubGVuZ3RoOyBpIDwgaWk7IG4rKykge1xyXG4gICAgICAgICAgbm9kZSA9IHN0YWJsZU5vZGVMaXN0W25dO1xyXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGxpbmtGbnNbaSsrXTtcclxuICAgICAgICAgIGNoaWxkTGlua0ZuID0gbGlua0Zuc1tpKytdO1xyXG5cclxuICAgICAgICAgIGlmIChub2RlTGlua0ZuKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlTGlua0ZuLnNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoaXNPYmplY3Qobm9kZUxpbmtGbi5zY29wZSkpO1xyXG4gICAgICAgICAgICAgIGpxTGl0ZShub2RlKS5kYXRhKCckc2NvcGUnLCBjaGlsZFNjb3BlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBub2RlTGlua0ZuLnRyYW5zY2x1ZGU7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZFRyYW5zY2x1ZGVGbiB8fCAoIWJvdW5kVHJhbnNjbHVkZUZuICYmIHRyYW5zY2x1ZGVGbikpIHtcclxuICAgICAgICAgICAgICBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBjaGlsZFNjb3BlLCBub2RlLCAkcm9vdEVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbih0cmFuc2NsdWRlRm4pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2xvbmVGbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zY2x1ZGVTY29wZSA9IHNjb3BlLiRuZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2x1ZGVTY29wZS4kJHRyYW5zY2x1ZGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVTY29wZSwgY2xvbmVGbikuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb24oJyRkZXN0cm95JywgYmluZCh0cmFuc2NsdWRlU2NvcGUsIHRyYW5zY2x1ZGVTY29wZS4kZGVzdHJveSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIH0pKGNoaWxkVHJhbnNjbHVkZUZuIHx8IHRyYW5zY2x1ZGVGbilcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIGNoaWxkU2NvcGUsIG5vZGUsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTGlua0ZuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzXHJcbiAgICAgKiBzb3J0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guXHJcbiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxyXG4gICAgICogICAgICAgIHRoZSBmdW5jdGlvbiByZXR1cm5zLlxyXG4gICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcclxuICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcclxuICAgICAgICAgIGF0dHJzTWFwID0gYXR0cnMuJGF0dHIsXHJcbiAgICAgICAgICBtYXRjaCxcclxuICAgICAgICAgIGNsYXNzTmFtZTtcclxuXHJcbiAgICAgIHN3aXRjaChub2RlVHlwZSkge1xyXG4gICAgICAgIGNhc2UgMTogLyogRWxlbWVudCAqL1xyXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XHJcbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcclxuICAgICAgICAgICAgICBkaXJlY3RpdmVOb3JtYWxpemUobm9kZU5hbWVfKG5vZGUpLnRvTG93ZXJDYXNlKCkpLCAnRScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xyXG5cclxuICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgYXR0cmlidXRlc1xyXG4gICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwgbk5hbWUsIG5nQXR0ck5hbWUsIHZhbHVlLCBuQXR0cnMgPSBub2RlLmF0dHJpYnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcclxuICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWU7XHJcbiAgICAgICAgICAgIHZhciBhdHRyRW5kTmFtZTtcclxuICAgICAgICAgICAgdmFyIGluZGV4O1xyXG5cclxuICAgICAgICAgICAgYXR0ciA9IG5BdHRyc1tqXTtcclxuICAgICAgICAgICAgaWYgKCFtc2llIHx8IG1zaWUgPj0gOCB8fCBhdHRyLnNwZWNpZmllZCkge1xyXG4gICAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7XHJcbiAgICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcclxuICAgICAgICAgICAgICBuZ0F0dHJOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpO1xyXG4gICAgICAgICAgICAgIGlmIChOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5nQXR0ck5hbWUuc3Vic3RyKDYpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmICgoaW5kZXggPSBuZ0F0dHJOYW1lLmxhc3RJbmRleE9mKCdTdGFydCcpKSAhPSAtMSAmJiBpbmRleCA9PSBuZ0F0dHJOYW1lLmxlbmd0aCAtIDUpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJTdGFydE5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSA2KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICBhdHRyc01hcFtuTmFtZV0gPSBuYW1lO1xyXG4gICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlID0gdHJpbSgobXNpZSAmJiBuYW1lID09ICdocmVmJylcclxuICAgICAgICAgICAgICAgID8gZGVjb2RlVVJJQ29tcG9uZW50KG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUsIDIpKVxyXG4gICAgICAgICAgICAgICAgOiBhdHRyLnZhbHVlKTtcclxuICAgICAgICAgICAgICBpZiAoZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIG5OYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJ1ZTsgLy8gcHJlc2VuY2UgbWVhbnMgdHJ1ZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lKTtcclxuICAgICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSwgYXR0ckVuZE5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxyXG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XHJcbiAgICAgICAgICBpZiAoaXNTdHJpbmcoY2xhc3NOYW1lKSAmJiBjbGFzc05hbWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IENMQVNTX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhjbGFzc05hbWUpKSB7XHJcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xyXG4gICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdDJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc3Vic3RyKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOiAvKiBUZXh0IE5vZGUgKi9cclxuICAgICAgICAgIGFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZShkaXJlY3RpdmVzLCBub2RlLm5vZGVWYWx1ZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDg6IC8qIENvbW1lbnQgKi9cclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ00nLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFsyXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkIGNvbW1lbnQncyBub2RlIHZhbHVlLlxyXG4gICAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpdCBhbmQgY29udGludWUuIChDYW4ndCBzZWVtIHRvIHJlcHJvZHVjZSBpbiB0ZXN0IGNhc2UuKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcclxuICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhbiBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kIGRpcmVjdGl2ZS1lbmQuXHJcbiAgICAgKiBAcGFyYW0gbm9kZVxyXG4gICAgICogQHBhcmFtIGF0dHJTdGFydFxyXG4gICAgICogQHBhcmFtIGF0dHJFbmRcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XHJcbiAgICAgIHZhciBub2RlcyA9IFtdO1xyXG4gICAgICB2YXIgZGVwdGggPSAwO1xyXG4gICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHtcclxuICAgICAgICB2YXIgc3RhcnROb2RlID0gbm9kZTtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLCBcIlVudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kICd7MH0nIGJ1dCBubyBtYXRjaGluZyAnezF9JyBmb3VuZC5cIiwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgLyoqIEVsZW1lbnQgKiovKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyU3RhcnQpKSBkZXB0aCsrO1xyXG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0ckVuZCkpIGRlcHRoLS07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV3JhcHBlciBmb3IgbGlua2luZyBmdW5jdGlvbiB3aGljaCBjb252ZXJ0cyBub3JtYWwgbGlua2luZyBmdW5jdGlvbiBpbnRvIGEgZ3JvdXBlZFxyXG4gICAgICogbGlua2luZyBmdW5jdGlvbi5cclxuICAgICAqIEBwYXJhbSBsaW5rRm5cclxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcclxuICAgICAqIEBwYXJhbSBhdHRyRW5kXHJcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xyXG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZFxyXG4gICAgICogaXMgcmVzcG9uc2libGUgZm9yIGlubGluaW5nIGRpcmVjdGl2ZSB0ZW1wbGF0ZXMgYXMgd2VsbCBhcyB0ZXJtaW5hdGluZyB0aGUgYXBwbGljYXRpb25cclxuICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkaXJlY3RpdmVzIEFycmF5IG9mIGNvbGxlY3RlZCBkaXJlY3RpdmVzIHRvIGV4ZWN1dGUgdGhlaXIgY29tcGlsZSBmdW5jdGlvbi5cclxuICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGVtcGxhdGVBdHRycyBUaGUgc2hhcmVkIGF0dHJpYnV0ZSBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlWywgY2xvbmVBdHRhY2hGbl19IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxyXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cclxuICAgICAqIEBwYXJhbSB7SlFMaXRlfSBqcUNvbGxlY3Rpb24gSWYgd2UgYXJlIHdvcmtpbmcgb24gdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZSB0aGVuIHRoaXNcclxuICAgICAqICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXMgb24gaXQuXHJcbiAgICAgKiBAcmV0dXJucyBsaW5rRm5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlKSB7XHJcbiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsXHJcbiAgICAgICAgICBwcmVMaW5rRm5zID0gW10sXHJcbiAgICAgICAgICBwb3N0TGlua0ZucyA9IFtdLFxyXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBudWxsLFxyXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gbnVsbCxcclxuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gbnVsbCxcclxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcclxuICAgICAgICAgIGRpcmVjdGl2ZSxcclxuICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsXHJcbiAgICAgICAgICAkdGVtcGxhdGUsXHJcbiAgICAgICAgICB0cmFuc2NsdWRlRGlyZWN0aXZlLFxyXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcclxuICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLFxyXG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMsXHJcbiAgICAgICAgICBsaW5rRm4sXHJcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZTtcclxuXHJcbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcclxuICAgICAgZm9yKHZhciBpID0gMCwgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xyXG4gICAgICAgIHZhciBhdHRyU3RhcnQgPSBkaXJlY3RpdmUuJCRzdGFydDtcclxuICAgICAgICB2YXIgYXR0ckVuZCA9IGRpcmVjdGl2ZS4kJGVuZDtcclxuXHJcbiAgICAgICAgLy8gY29sbGVjdCBtdWx0aWJsb2NrIHNlY3Rpb25zXHJcbiAgICAgICAgaWYgKGF0dHJTdGFydCkge1xyXG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgaWYgKHRlcm1pbmFsUHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpIHtcclxuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHtcclxuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCdpc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xyXG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xyXG4gICAgICAgICAgICBzYWZlQWRkQ2xhc3MoJGNvbXBpbGVOb2RlLCAnbmctaXNvbGF0ZS1zY29wZScpO1xyXG4gICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzYWZlQWRkQ2xhc3MoJGNvbXBpbGVOb2RlLCAnbmctc2NvcGUnKTtcclxuICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlID0gbmV3U2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZS5uYW1lO1xyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuY29udHJvbGxlcikge1xyXG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXMgPSBjb250cm9sbGVyRGlyZWN0aXZlcyB8fCB7fTtcclxuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKFwiJ1wiICsgZGlyZWN0aXZlTmFtZSArIFwiJyBjb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcclxuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdID0gZGlyZWN0aXZlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID0gZGlyZWN0aXZlLnRyYW5zY2x1ZGUpIHtcclxuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0cmFuc2NsdXNpb24nLCB0cmFuc2NsdWRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XHJcbiAgICAgICAgICB0cmFuc2NsdWRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xyXG4gICAgICAgICAgdGVybWluYWxQcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eTtcclxuICAgICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9PSAnZWxlbWVudCcpIHtcclxuICAgICAgICAgICAgJHRlbXBsYXRlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpXHJcbiAgICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID1cclxuICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICsgdGVtcGxhdGVBdHRyc1tkaXJlY3RpdmVOYW1lXSArICcgJykpO1xyXG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcclxuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBqcUxpdGUoc2xpY2VBcmdzKCR0ZW1wbGF0ZSkpLCBjb21waWxlTm9kZSk7XHJcblxyXG4gICAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IGNvbXBpbGUoJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlICYmIHJlcGxhY2VEaXJlY3RpdmUubmFtZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoSlFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xyXG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbCgnJyk7IC8vIGNsZWFyIGNvbnRlbnRzXHJcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsZSgkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xyXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XHJcblxyXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWUgPSAoaXNGdW5jdGlvbihkaXJlY3RpdmUudGVtcGxhdGUpKVxyXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcclxuICAgICAgICAgICAgICA6IGRpcmVjdGl2ZS50ZW1wbGF0ZTtcclxuXHJcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xyXG5cclxuICAgICAgICAgIGlmIChkaXJlY3RpdmUucmVwbGFjZSkge1xyXG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xyXG4gICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoJzxkaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaW0oZGlyZWN0aXZlVmFsdWUpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKS5jb250ZW50cygpO1xyXG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9IDEgfHwgY29tcGlsZU5vZGUubm9kZVR5cGUgIT09IDEpIHtcclxuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLCBcIlRlbXBsYXRlIGZvciBkaXJlY3RpdmUgJ3swfScgbXVzdCBoYXZlIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gezF9XCIsIGRpcmVjdGl2ZU5hbWUsICcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuZXdUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XHJcblxyXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XHJcbiAgICAgICAgICAgIC8vIC0gdGFrZSB0aGUgYXJyYXkgb2YgZGlyZWN0aXZlcyBmb3IgdGhpcyBlbGVtZW50XHJcbiAgICAgICAgICAgIC8vIC0gc3BsaXQgaXQgaW50byB0d28gcGFydHMsIHRob3NlIHRoYXQgd2VyZSBhbHJlYWR5IGFwcGxpZWQgYW5kIHRob3NlIHRoYXQgd2VyZW4ndFxyXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSwgYWRkIHRoZW0gdG8gdGhlIHNlY29uZCBncm91cCBhbmQgc29ydCB0aGVtXHJcbiAgICAgICAgICAgIC8vIC0gYXBwZW5kIHRoZSBzZWNvbmQgZ3JvdXAgd2l0aCBuZXcgZGlyZWN0aXZlcyB0byB0aGUgZmlyc3QgZ3JvdXBcclxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMuY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgY29sbGVjdERpcmVjdGl2ZXMoXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZU5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VGVtcGxhdGVBdHRyc1xyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0ZW1wbGF0ZUF0dHJzLCBuZXdUZW1wbGF0ZUF0dHJzKTtcclxuXHJcbiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XHJcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xyXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XHJcblxyXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XHJcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBub2RlTGlua0ZuID0gY29tcGlsZVRlbXBsYXRlVXJsKGRpcmVjdGl2ZXMuc3BsaWNlKGksIGRpcmVjdGl2ZXMubGVuZ3RoIC0gaSksXHJcbiAgICAgICAgICAgICAgbm9kZUxpbmtGbiwgJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGNoaWxkVHJhbnNjbHVkZUZuKTtcclxuICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGlua0ZuID0gZGlyZWN0aXZlLmNvbXBpbGUoJGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcclxuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGxpbmtGbiwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rRm4pIHtcclxuICAgICAgICAgICAgICBhZGRMaW5rRm5zKGxpbmtGbi5wcmUsIGxpbmtGbi5wb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xyXG4gICAgICAgICAgbm9kZUxpbmtGbi50ZXJtaW5hbCA9IHRydWU7XHJcbiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgICBub2RlTGlua0ZuLnNjb3BlID0gbmV3U2NvcGVEaXJlY3RpdmUgJiYgbmV3U2NvcGVEaXJlY3RpdmUuc2NvcGU7XHJcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZSA9IHRyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm47XHJcblxyXG4gICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50XHJcbiAgICAgIHJldHVybiBub2RlTGlua0ZuO1xyXG5cclxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcclxuICAgICAgICBpZiAocHJlKSB7XHJcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwcmUgPSBncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlcihwcmUsIGF0dHJTdGFydCwgYXR0ckVuZCk7XHJcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xyXG4gICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb3N0KSB7XHJcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwb3N0ID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcclxuICAgICAgICAgIHBvc3QucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xyXG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICBmdW5jdGlvbiBnZXRDb250cm9sbGVycyhyZXF1aXJlLCAkZWxlbWVudCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSwgcmV0cmlldmFsTWV0aG9kID0gJ2RhdGEnLCBvcHRpb25hbCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhyZXF1aXJlKSkge1xyXG4gICAgICAgICAgd2hpbGUoKHZhbHVlID0gcmVxdWlyZS5jaGFyQXQoMCkpID09ICdeJyB8fCB2YWx1ZSA9PSAnPycpIHtcclxuICAgICAgICAgICAgcmVxdWlyZSA9IHJlcXVpcmUuc3Vic3RyKDEpO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gJ14nKSB7XHJcbiAgICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wdGlvbmFsID0gb3B0aW9uYWwgfHwgdmFsdWUgPT0gJz8nO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFsdWUgPSAkZWxlbWVudFtyZXRyaWV2YWxNZXRob2RdKCckJyArIHJlcXVpcmUgKyAnQ29udHJvbGxlcicpO1xyXG4gICAgICAgICAgaWYgKCF2YWx1ZSAmJiAhb3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJywgXCJDb250cm9sbGVyICd7MH0nLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgJ3sxfScsIGNhbid0IGJlIGZvdW5kIVwiLCByZXF1aXJlLCBkaXJlY3RpdmVOYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHtcclxuICAgICAgICAgIHZhbHVlID0gW107XHJcbiAgICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKHJlcXVpcmUpIHtcclxuICAgICAgICAgICAgdmFsdWUucHVzaChnZXRDb250cm9sbGVycyhyZXF1aXJlLCAkZWxlbWVudCkpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LCBib3VuZFRyYW5zY2x1ZGVGbikge1xyXG4gICAgICAgIHZhciBhdHRycywgJGVsZW1lbnQsIGksIGlpLCBsaW5rRm4sIGNvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgIGlmIChjb21waWxlTm9kZSA9PT0gbGlua05vZGUpIHtcclxuICAgICAgICAgIGF0dHJzID0gdGVtcGxhdGVBdHRycztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYXR0cnMgPSBzaGFsbG93Q29weSh0ZW1wbGF0ZUF0dHJzLCBuZXcgQXR0cmlidXRlcyhqcUxpdGUobGlua05vZGUpLCB0ZW1wbGF0ZUF0dHJzLiRhdHRyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRlbGVtZW50ID0gYXR0cnMuJCRlbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAPSZdKShcXD8/KVxccyooXFx3KilcXHMqJC87XHJcblxyXG4gICAgICAgICAgdmFyIHBhcmVudFNjb3BlID0gc2NvcGUuJHBhcmVudCB8fCBzY29wZTtcclxuXHJcbiAgICAgICAgICBmb3JFYWNoKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5zY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGRlZmluaXRpb24ubWF0Y2goTE9DQUxfUkVHRVhQKSB8fCBbXSxcclxuICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gbWF0Y2hbM10gfHwgc2NvcGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uYWwgPSAobWF0Y2hbMl0gPT0gJz8nKSxcclxuICAgICAgICAgICAgICAgIG1vZGUgPSBtYXRjaFsxXSwgLy8gQCwgPSwgb3IgJlxyXG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQ7XHJcblxyXG4gICAgICAgICAgICBzY29wZS4kJGlzb2xhdGVCaW5kaW5nc1tzY29wZU5hbWVdID0gbW9kZSArIGF0dHJOYW1lO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChtb2RlKSB7XHJcblxyXG4gICAgICAgICAgICAgIGNhc2UgJ0AnOiB7XHJcbiAgICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgc2NvcGVbc2NvcGVOYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhdHRycy4kJG9ic2VydmVyc1thdHRyTmFtZV0uJCRzY29wZSA9IHBhcmVudFNjb3BlO1xyXG4gICAgICAgICAgICAgICAgaWYoIGF0dHJzW2F0dHJOYW1lXSApIHtcclxuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGF0dHJpYnV0ZSBoYXMgYmVlbiBwcm92aWRlZCB0aGVuIHdlIHRyaWdnZXIgYW4gaW50ZXJwb2xhdGlvbiB0byBlbnN1cmUgdGhlIHZhbHVlIGlzIHRoZXJlIGZvciB1c2UgaW4gdGhlIGxpbmsgZm5cclxuICAgICAgICAgICAgICAgICAgc2NvcGVbc2NvcGVOYW1lXSA9ICRpbnRlcnBvbGF0ZShhdHRyc1thdHRyTmFtZV0pKHBhcmVudFNjb3BlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgY2FzZSAnPSc6IHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XHJcbiAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHNjb3BlW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpO1xyXG4gICAgICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJywgXCJFeHByZXNzaW9uICd7MH0nIHVzZWQgd2l0aCBkaXJlY3RpdmUgJ3sxfScgaXMgbm9uLWFzc2lnbmFibGUhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0sIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdID0gcGFyZW50R2V0KHBhcmVudFNjb3BlKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoKCkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgcGFyZW50VmFsdWUgPSBwYXJlbnRHZXQocGFyZW50U2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFZhbHVlICE9PSBzY29wZVtzY29wZU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50VmFsdWUgIT09IGxhc3RWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdID0gcGFyZW50VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXJlbnQgY2FuIGJlIGFzc2lnbmVkIHRoZW4gZG8gc29cclxuICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNldChwYXJlbnRTY29wZSwgcGFyZW50VmFsdWUgPSBsYXN0VmFsdWUgPSBzY29wZVtzY29wZU5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGNhc2UgJyYnOiB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlW3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChwYXJlbnRTY29wZSwgbG9jYWxzKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJywgXCJJbnZhbGlkIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBmb3IgZGlyZWN0aXZlICd7MH0nLiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5uYW1lLCBzY29wZU5hbWUsIGRlZmluaXRpb24pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcclxuICAgICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxzID0ge1xyXG4gICAgICAgICAgICAgICRzY29wZTogc2NvcGUsXHJcbiAgICAgICAgICAgICAgJGVsZW1lbnQ6ICRlbGVtZW50LFxyXG4gICAgICAgICAgICAgICRhdHRyczogYXR0cnMsXHJcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IGJvdW5kVHJhbnNjbHVkZUZuXHJcbiAgICAgICAgICAgIH0sIGNvbnRyb2xsZXJJbnN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBkaXJlY3RpdmUuY29udHJvbGxlcjtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgPT0gJ0AnKSB7XHJcbiAgICAgICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzKTtcclxuICAgICAgICAgICAgJGVsZW1lbnQuZGF0YShcclxuICAgICAgICAgICAgICAgICckJyArIGRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlKTtcclxuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpIHtcclxuICAgICAgICAgICAgICBsb2NhbHMuJHNjb3BlW2RpcmVjdGl2ZS5jb250cm9sbGVyQXNdID0gY29udHJvbGxlckluc3RhbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFBSRUxJTktJTkdcclxuICAgICAgICBmb3IoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsaW5rRm4gPSBwcmVMaW5rRm5zW2ldO1xyXG4gICAgICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycyxcclxuICAgICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCkpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUkVDVVJTSU9OXHJcbiAgICAgICAgY2hpbGRMaW5rRm4gJiYgY2hpbGRMaW5rRm4oc2NvcGUsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xyXG5cclxuICAgICAgICAvLyBQT1NUTElOS0lOR1xyXG4gICAgICAgIGZvcihpID0gMCwgaWkgPSBwb3N0TGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcclxuICAgICAgICAgICAgbGlua0ZuKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsXHJcbiAgICAgICAgICAgICAgICBsaW5rRm4ucmVxdWlyZSAmJiBnZXRDb250cm9sbGVycyhsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQpKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCBkZWNvcmF0ZXMgaXQgd2l0aCBleGNlcHRpb24gaGFuZGxpbmcgYW5kIHByb3BlciBwYXJhbWV0ZXJzLiBXZVxyXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBkaXJlY3RpdmUgdG8gbG9vayB1cC5cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxyXG4gICAgICogICBTdHJpbmcgY29udGFpbmluZyBhbnkgb2YgdGhlc2VzIGNoYXJhY3RlcnM6XHJcbiAgICAgKlxyXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXHJcbiAgICAgKiAgICogYEEnOiBhdHRyaWJ1dGVcclxuICAgICAqICAgKiBgQ2A6IGNsYXNzXHJcbiAgICAgKiAgICogYE1gOiBjb21tZW50XHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGRpcmVjdGl2ZSB3YXMgYWRkZWQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGFkZERpcmVjdGl2ZSh0RGlyZWN0aXZlcywgbmFtZSwgbG9jYXRpb24sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHN0YXJ0QXR0ck5hbWUsIGVuZEF0dHJOYW1lKSB7XHJcbiAgICAgIGlmIChuYW1lID09PSBpZ25vcmVEaXJlY3RpdmUpIHJldHVybiBudWxsO1xyXG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xyXG4gICAgICBpZiAoaGFzRGlyZWN0aXZlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIGZvcih2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcclxuICAgICAgICAgICAgaSA9IDAsIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7IGk8aWk7IGkrKykge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZGlyZWN0aXZlID0gZGlyZWN0aXZlc1tpXTtcclxuICAgICAgICAgICAgaWYgKCAobWF4UHJpb3JpdHkgPT09IHVuZGVmaW5lZCB8fCBtYXhQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkgJiZcclxuICAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT0gLTEpIHtcclxuICAgICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlID0gaW5oZXJpdChkaXJlY3RpdmUsIHskJHN0YXJ0OiBzdGFydEF0dHJOYW1lLCAkJGVuZDogZW5kQXR0ck5hbWV9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xyXG4gICAgICAgICAgICAgIG1hdGNoID0gZGlyZWN0aXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXHJcbiAgICAgKiBvbiB0aGUgdGVtcGxhdGUgbmVlZCB0byBiZSBtZXJnZWQgd2l0aCB0aGUgZXhpc3RpbmcgYXR0cmlidXRlcyBpbiB0aGUgRE9NLlxyXG4gICAgICogVGhlIGRlc2lyZWQgZWZmZWN0IGlzIHRvIGhhdmUgYm90aCBvZiB0aGUgYXR0cmlidXRlcyBwcmVzZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkc3QgZGVzdGluYXRpb24gYXR0cmlidXRlcyAob3JpZ2luYWwgRE9NKVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNyYyBzb3VyY2UgYXR0cmlidXRlcyAoZnJvbSB0aGUgZGlyZWN0aXZlIHRlbXBsYXRlKVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyhkc3QsIHNyYykge1xyXG4gICAgICB2YXIgc3JjQXR0ciA9IHNyYy4kYXR0cixcclxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHIsXHJcbiAgICAgICAgICAkZWxlbWVudCA9IGRzdC4kJGVsZW1lbnQ7XHJcblxyXG4gICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnRcclxuICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPSAnJCcpIHtcclxuICAgICAgICAgIGlmIChzcmNba2V5XSkge1xyXG4gICAgICAgICAgICB2YWx1ZSArPSAoa2V5ID09PSAnc3R5bGUnID8gJzsnIDogJyAnKSArIHNyY1trZXldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHN0LiRzZXQoa2V5LCB2YWx1ZSwgdHJ1ZSwgc3JjQXR0cltrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gY29weSB0aGUgbmV3IGF0dHJpYnV0ZXMgb24gdGhlIG9sZCBhdHRycyBvYmplY3RcclxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBpZiAoa2V5ID09ICdjbGFzcycpIHtcclxuICAgICAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgdmFsdWUpO1xyXG4gICAgICAgICAgZHN0WydjbGFzcyddID0gKGRzdFsnY2xhc3MnXSA/IGRzdFsnY2xhc3MnXSArICcgJyA6ICcnKSArIHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09ICdzdHlsZScpIHtcclxuICAgICAgICAgICRlbGVtZW50LmF0dHIoJ3N0eWxlJywgJGVsZW1lbnQuYXR0cignc3R5bGUnKSArICc7JyArIHZhbHVlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGtleS5jaGFyQXQoMCkgIT0gJyQnICYmICFkc3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgIGRzdEF0dHJba2V5XSA9IHNyY0F0dHJba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgYmVmb3JlVGVtcGxhdGVOb2RlTGlua0ZuLCAkY29tcGlsZU5vZGUsIHRBdHRycyxcclxuICAgICAgICAkcm9vdEVsZW1lbnQsIGNoaWxkVHJhbnNjbHVkZUZuKSB7XHJcbiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSxcclxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLFxyXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLFxyXG4gICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSxcclxuICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZSA9IGRpcmVjdGl2ZXMuc2hpZnQoKSxcclxuICAgICAgICAgIC8vIFRoZSBmYWN0IHRoYXQgd2UgaGF2ZSB0byBjb3B5IGFuZCBwYXRjaCB0aGUgZGlyZWN0aXZlIHNlZW1zIHdyb25nIVxyXG4gICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBleHRlbmQoe30sIG9yaWdBc3luY0RpcmVjdGl2ZSwge1xyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBudWxsLCB0ZW1wbGF0ZVVybDogbnVsbCwgdHJhbnNjbHVkZTogbnVsbCwgc2NvcGU6IG51bGwsIHJlcGxhY2U6IG51bGxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgdGVtcGxhdGVVcmwgPSAoaXNGdW5jdGlvbihvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwpKVxyXG4gICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKVxyXG4gICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsO1xyXG5cclxuICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoJycpO1xyXG5cclxuICAgICAgJGh0dHAuZ2V0KCRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHRlbXBsYXRlVXJsKSwge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxyXG4gICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oY29udGVudCkge1xyXG4gICAgICAgICAgdmFyIGNvbXBpbGVOb2RlLCB0ZW1wVGVtcGxhdGVBdHRycywgJHRlbXBsYXRlO1xyXG5cclxuICAgICAgICAgIGNvbnRlbnQgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGlmIChvcmlnQXN5bmNEaXJlY3RpdmUucmVwbGFjZSkge1xyXG4gICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoJzxkaXY+JyArIHRyaW0oY29udGVudCkgKyAnPC9kaXY+JykuY29udGVudHMoKTtcclxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JywgXCJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfVwiLFxyXG4gICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUubmFtZSwgdGVtcGxhdGVVcmwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZW1wVGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xyXG4gICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xyXG4gICAgICAgICAgICBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgZGlyZWN0aXZlcywgdGVtcFRlbXBsYXRlQXR0cnMpO1xyXG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZTtcclxuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcclxuXHJcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbiA9IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBjb21waWxlTm9kZSwgdEF0dHJzLCBjaGlsZFRyYW5zY2x1ZGVGbiwgJGNvbXBpbGVOb2RlLCBvcmlnQXN5bmNEaXJlY3RpdmUpO1xyXG4gICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUgPT0gY29tcGlsZU5vZGUpIHtcclxuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XHJcblxyXG5cclxuICAgICAgICAgIHdoaWxlKGxpbmtRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXHJcbiAgICAgICAgICAgICAgICBiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlID0gbGlua1F1ZXVlLnNoaWZ0KCksXHJcbiAgICAgICAgICAgICAgICBsaW5rUm9vdEVsZW1lbnQgPSBsaW5rUXVldWUuc2hpZnQoKSxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBsaW5rUXVldWUuc2hpZnQoKSxcclxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJlZm9yZVRlbXBsYXRlTGlua05vZGUgIT09IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUpIHtcclxuICAgICAgICAgICAgICAvLyBpdCB3YXMgY2xvbmVkIHRoZXJlZm9yZSB3ZSBoYXZlIHRvIGNsb25lIGFzIHdlbGwuXHJcbiAgICAgICAgICAgICAgbGlua05vZGUgPSBKUUxpdGVDbG9uZShjb21waWxlTm9kZSk7XHJcbiAgICAgICAgICAgICAgcmVwbGFjZVdpdGgobGlua1Jvb3RFbGVtZW50LCBqcUxpdGUoYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSksIGxpbmtOb2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oXHJcbiAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpLFxyXG4gICAgICAgICAgICAgIHNjb3BlLCBsaW5rTm9kZSwgJHJvb3RFbGVtZW50LCBjb250cm9sbGVyXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsaW5rUXVldWUgPSBudWxsO1xyXG4gICAgICAgIH0pLlxyXG4gICAgICAgIGVycm9yKGZ1bmN0aW9uKHJlc3BvbnNlLCBjb2RlLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCd0cGxvYWQnLCAnRmFpbGVkIHRvIGxvYWQgdGVtcGxhdGU6IHswfScsIGNvbmZpZy51cmwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XHJcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSk7XHJcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChub2RlKTtcclxuICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKHJvb3RFbGVtZW50KTtcclxuICAgICAgICAgIGxpbmtRdWV1ZS5wdXNoKGNvbnRyb2xsZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjb250cm9sbGVyKTtcclxuICAgICAgICAgIH0sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY29udHJvbGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvcnRpbmcgZnVuY3Rpb24gZm9yIGJvdW5kIGRpcmVjdGl2ZXMuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xyXG4gICAgICByZXR1cm4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcclxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XHJcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpZGlyJywgJ011bHRpcGxlIGRpcmVjdGl2ZXMgW3swfSwgezF9XSBhc2tpbmcgZm9yIHsyfSBvbjogezN9JyxcclxuICAgICAgICAgICAgcHJldmlvdXNEaXJlY3RpdmUubmFtZSwgZGlyZWN0aXZlLm5hbWUsIHdoYXQsIHN0YXJ0aW5nVGFnKGVsZW1lbnQpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xyXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh0ZXh0LCB0cnVlKTtcclxuICAgICAgaWYgKGludGVycG9sYXRlRm4pIHtcclxuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xyXG4gICAgICAgICAgcHJpb3JpdHk6IDAsXHJcbiAgICAgICAgICBjb21waWxlOiB2YWx1ZUZuKGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUxpbmtGbihzY29wZSwgbm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQoKSxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gcGFyZW50LmRhdGEoJyRiaW5kaW5nJykgfHwgW107XHJcbiAgICAgICAgICAgIGJpbmRpbmdzLnB1c2goaW50ZXJwb2xhdGVGbik7XHJcbiAgICAgICAgICAgIHNhZmVBZGRDbGFzcyhwYXJlbnQuZGF0YSgnJGJpbmRpbmcnLCBiaW5kaW5ncyksICduZy1iaW5kaW5nJyk7XHJcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XHJcbiAgICAgIC8vIG1hY3Rpb25beGxpbms6aHJlZl0gY2FuIHNvdXJjZSBTVkcuICBJdCdzIG5vdCBsaW1pdGVkIHRvIDxtYWN0aW9uPi5cclxuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcInhsaW5rSHJlZlwiIHx8XHJcbiAgICAgICAgICAobm9kZU5hbWVfKG5vZGUpICE9IFwiSU1HXCIgJiYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcInNyY1wiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJuZ1NyY1wiKSkpIHtcclxuICAgICAgICByZXR1cm4gJHNjZS5SRVNPVVJDRV9VUkw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKHZhbHVlLCB0cnVlKTtcclxuXHJcbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXHJcbiAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuO1xyXG5cclxuXHJcbiAgICAgIGlmIChuYW1lID09PSBcIm11bHRpcGxlXCIgJiYgbm9kZU5hbWVfKG5vZGUpID09PSBcIlNFTEVDVFwiKSB7XHJcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoXCJzZWxtdWx0aVwiLCBcIkJpbmRpbmcgdG8gdGhlICdtdWx0aXBsZScgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfVwiLFxyXG4gICAgICAgICAgICBzdGFydGluZ1RhZyhub2RlKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRpcmVjdGl2ZXMucHVzaCh7XHJcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcclxuICAgICAgICBjb21waWxlOiB2YWx1ZUZuKGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpO1xyXG5cclxuICAgICAgICAgIGlmIChFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQLnRlc3QobmFtZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcclxuICAgICAgICAgICAgICAgIFwiSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSBuZy0gXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJ2ZXJzaW9ucyAoc3VjaCBhcyBuZy1jbGljayBpbnN0ZWFkIG9mIG9uY2xpY2spIGluc3RlYWQuXCIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW50ZXJwb2xhdGUgYWdhaW4sIGluIGNhc2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBoYXMgYmVlbiB1cGRhdGVkXHJcbiAgICAgICAgICAvLyAoZS5nLiBieSBhbm90aGVyIGRpcmVjdGl2ZSdzIGNvbXBpbGUgZnVuY3Rpb24pXHJcbiAgICAgICAgICBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGF0dHJbbmFtZV0sIHRydWUsIGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpKTtcclxuXHJcbiAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cclxuICAgICAgICAgIC8vIHJlZ2lzdGVyIGFueSBvYnNlcnZlcnNcclxuICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGF0dHJbbmFtZV0gPSBpbnRlcnBvbGF0ZUZuKHNjb3BlKTtcclxuICAgICAgICAgICgkJG9ic2VydmVyc1tuYW1lXSB8fCAoJCRvYnNlcnZlcnNbbmFtZV0gPSBbXSkpLiQkaW50ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cclxuICAgICAgICAgICAgJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlRm5XYXRjaEFjdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcclxuICAgICAqIGhhdmUgbm8gcGFyZW50cywgcHJvdmlkZWQgdGhhdCB0aGUgY29udGFpbmluZyBqcUxpdGUgY29sbGVjdGlvbiBpcyBwcm92aWRlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcclxuICAgICAqICAgIGluIHRoZSByb290IG9mIHRoZSB0cmVlLlxyXG4gICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwIHRoZSBzaGVsbCxcclxuICAgICAqICAgIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXHJcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5ld05vZGUgVGhlIG5ldyBET00gbm9kZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XHJcbiAgICAgIHZhciBmaXJzdEVsZW1lbnRUb1JlbW92ZSA9IGVsZW1lbnRzVG9SZW1vdmVbMF0sXHJcbiAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLFxyXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcclxuICAgICAgICAgIGksIGlpO1xyXG5cclxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xyXG4gICAgICAgIGZvcihpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBpLCBqMiA9IGogKyByZW1vdmVDb3VudCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xyXG4gICAgICAgICAgICAgIGlmIChqMiA8IGpqKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgJHJvb3RFbGVtZW50W2pdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkcm9vdEVsZW1lbnQubGVuZ3RoIC09IHJlbW92ZUNvdW50IC0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XHJcbiAgICAgIG5ld05vZGVbanFMaXRlLmV4cGFuZG9dID0gZmlyc3RFbGVtZW50VG9SZW1vdmVbanFMaXRlLmV4cGFuZG9dO1xyXG4gICAgICBmb3IgKHZhciBrID0gMSwga2sgPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzVG9SZW1vdmVba107XHJcbiAgICAgICAganFMaXRlKGVsZW1lbnQpLnJlbW92ZSgpOyAvLyBtdXN0IGRvIHRoaXMgd2F5IHRvIGNsZWFuIHVwIGV4cGFuZG9cclxuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICBkZWxldGUgZWxlbWVudHNUb1JlbW92ZVtrXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XHJcbiAgICAgIGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoID0gMVxyXG4gICAgfVxyXG4gIH1dO1xyXG59XHJcblxyXG52YXIgUFJFRklYX1JFR0VYUCA9IC9eKHhbXFw6XFwtX118ZGF0YVtcXDpcXC1fXSkvaTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIGFsbCBhY2NlcHRlZCBkaXJlY3RpdmVzIGZvcm1hdCBpbnRvIHByb3BlciBkaXJlY3RpdmUgbmFtZS5cclxuICogQWxsIG9mIHRoZXNlIHdpbGwgYmVjb21lICdteURpcmVjdGl2ZSc6XHJcbiAqICAgbXk6RGlyZWN0aXZlXHJcbiAqICAgbXktZGlyZWN0aXZlXHJcbiAqICAgeC1teS1kaXJlY3RpdmVcclxuICogICBkYXRhLW15OmRpcmVjdGl2ZVxyXG4gKlxyXG4gKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLlxyXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxyXG4gKi9cclxuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcclxuICByZXR1cm4gY2FtZWxDYXNlKG5hbWUucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJykpO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlc1xyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogQSBzaGFyZWQgb2JqZWN0IGJldHdlZW4gZGlyZWN0aXZlIGNvbXBpbGUgLyBsaW5raW5nIGZ1bmN0aW9ucyB3aGljaCBjb250YWlucyBub3JtYWxpemVkIERPTSBlbGVtZW50XHJcbiAqIGF0dHJpYnV0ZXMuIFRoZSB0aGUgdmFsdWVzIHJlZmxlY3QgY3VycmVudCBiaW5kaW5nIHN0YXRlIGB7eyB9fWAuIFRoZSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZFxyXG4gKiBzaW5jZSBhbGwgb2YgdGhlc2UgYXJlIHRyZWF0ZWQgYXMgZXF1aXZhbGVudCBpbiBBbmd1bGFyOlxyXG4gKlxyXG4gKiAgICAgICAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIHByb3BlcnR5XHJcbiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRhdHRyXHJcbiAqIEBwcm9wZXJ0eU9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzXHJcbiAqIEByZXR1cm5zIHtvYmplY3R9IEEgbWFwIG9mIERPTSBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lcyB0byB0aGUgbm9ybWFsaXplZCBuYW1lLiBUaGlzIGlzXHJcbiAqICAgICAgICAgIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRzZXRcclxuICogQG1ldGhvZE9mIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cclxuICpcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXHJcbiAqICAgICAgICAgIHJldmVycyB0cmFuc2xhdGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGF0dHIgJGF0dHJ9XHJcbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgdG8uIFRoZSB2YWx1ZSBjYW4gYmUgYW4gaW50ZXJwb2xhdGVkIHN0cmluZy5cclxuICovXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDbG9zdXJlIGNvbXBpbGVyIHR5cGUgaW5mb3JtYXRpb25cclxuICovXHJcblxyXG5mdW5jdGlvbiBub2Rlc2V0TGlua2luZ0ZuKFxyXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXHJcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXHJcbiAgLyogRWxlbWVudCAqLyByb290RWxlbWVudCxcclxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cclxuKXt9XHJcblxyXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXHJcbiAgLyogbm9kZXNldExpbmtpbmdGbiAqLyBub2Rlc2V0TGlua2luZ0ZuLFxyXG4gIC8qIGFuZ3VsYXIuU2NvcGUgKi8gc2NvcGUsXHJcbiAgLyogTm9kZSAqLyBub2RlLFxyXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXHJcbiAgLyogZnVuY3Rpb24oRnVuY3Rpb24pICovIGJvdW5kVHJhbnNjbHVkZUZuXHJcbil7fVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGNvbnRyb2xsZXJQcm92aWRlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIHtAbGluayBuZy4kY29udHJvbGxlciAkY29udHJvbGxlciBzZXJ2aWNlfSBpcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gY3JlYXRlIG5ld1xyXG4gKiBjb250cm9sbGVycy5cclxuICpcclxuICogVGhpcyBwcm92aWRlciBhbGxvd3MgY29udHJvbGxlciByZWdpc3RyYXRpb24gdmlhIHRoZVxyXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxyXG4gKi9cclxuZnVuY3Rpb24gJENvbnRyb2xsZXJQcm92aWRlcigpIHtcclxuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcclxuICAgICAgQ05UUkxfUkVHID0gL14oXFxTKykoXFxzK2FzXFxzKyhcXHcrKSk/JC87XHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyXHJcbiAgICogQG1ldGhvZE9mIG5nLiRjb250cm9sbGVyUHJvdmlkZXJcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDb250cm9sbGVyIG5hbWVcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBjb25zdHJ1Y3RvciBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZuIChvcHRpb25hbGx5IGRlY29yYXRlZCB3aXRoIERJXHJcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cclxuICAgKi9cclxuICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZSwgY29uc3RydWN0b3IpIHtcclxuICAgIGlmIChpc09iamVjdChuYW1lKSkge1xyXG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsICckd2luZG93JywgZnVuY3Rpb24oJGluamVjdG9yLCAkd2luZG93KSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIG5nLiRjb250cm9sbGVyXHJcbiAgICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGNvbnN0cnVjdG9yIElmIGNhbGxlZCB3aXRoIGEgZnVuY3Rpb24gdGhlbiBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgdGhlXHJcbiAgICAgKiAgICBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBPdGhlcndpc2UgaXQncyBjb25zaWRlcmVkIHRvIGJlIGEgc3RyaW5nIHdoaWNoIGlzIHVzZWRcclxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XHJcbiAgICAgKlxyXG4gICAgICogICAgKiBjaGVjayBpZiBhIGNvbnRyb2xsZXIgd2l0aCBnaXZlbiBuYW1lIGlzIHJlZ2lzdGVyZWQgdmlhIGAkY29udHJvbGxlclByb3ZpZGVyYFxyXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXHJcbiAgICAgKiAgICAqIGNoZWNrIGB3aW5kb3dbY29uc3RydWN0b3JdYCBvbiB0aGUgZ2xvYmFsIGB3aW5kb3dgIG9iamVjdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gSW5zdGFuY2Ugb2YgZ2l2ZW4gY29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIGAkY29udHJvbGxlcmAgc2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgaW5zdGFudGlhdGluZyBjb250cm9sbGVycy5cclxuICAgICAqXHJcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgQVVUTy4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXHJcbiAgICAgKiBhIHNlcnZpY2UsIHNvIHRoYXQgb25lIGNhbiBvdmVycmlkZSB0aGlzIHNlcnZpY2Ugd2l0aCB7QGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTY0OTc4OFxyXG4gICAgICogQkMgdmVyc2lvbn0uXHJcbiAgICAgKi9cclxuICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMpIHtcclxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XHJcblxyXG4gICAgICBpZihpc1N0cmluZyhleHByZXNzaW9uKSkge1xyXG4gICAgICAgIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaChDTlRSTF9SRUcpLFxyXG4gICAgICAgIGNvbnN0cnVjdG9yID0gbWF0Y2hbMV0sXHJcbiAgICAgICAgaWRlbnRpZmllciA9IG1hdGNoWzNdO1xyXG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcclxuICAgICAgICAgICAgPyBjb250cm9sbGVyc1tjb25zdHJ1Y3Rvcl1cclxuICAgICAgICAgICAgOiBnZXR0ZXIobG9jYWxzLiRzY29wZSwgY29uc3RydWN0b3IsIHRydWUpIHx8IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaW5zdGFuY2UgPSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoZXhwcmVzc2lvbiwgbG9jYWxzKTtcclxuXHJcbiAgICAgIGlmIChpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgaWYgKCEobG9jYWxzICYmIHR5cGVvZiBsb2NhbHMuJHNjb3BlID09ICdvYmplY3QnKSkge1xyXG4gICAgICAgICAgdGhyb3cgbWluRXJyKCckY29udHJvbGxlcicpKCdub3NjcCcsIFwiQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyICd7MH0nIGFzICd7MX0nISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC5cIiwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lLCBpZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxvY2Fscy4kc2NvcGVbaWRlbnRpZmllcl0gPSBpbnN0YW5jZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfTtcclxuICB9XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGRvY3VtZW50XHJcbiAqIEByZXF1aXJlcyAkd2luZG93XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIHtAbGluayBhbmd1bGFyLmVsZW1lbnQgalF1ZXJ5IChsaXRlKX0td3JhcHBlZCByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93LmRvY3VtZW50YFxyXG4gKiBlbGVtZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gJERvY3VtZW50UHJvdmlkZXIoKXtcclxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbih3aW5kb3cpe1xyXG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xyXG4gIH1dO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIG5nLiRleGNlcHRpb25IYW5kbGVyXHJcbiAqIEByZXF1aXJlcyAkbG9nXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cclxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGRlbGVnYXRlcyB0byBgJGxvZy5lcnJvcmAgd2hpY2ggbG9ncyBpdCBpbnRvXHJcbiAqIHRoZSBicm93c2VyIGNvbnNvbGUuXHJcbiAqXHJcbiAqIEluIHVuaXQgdGVzdHMsIGlmIGBhbmd1bGFyLW1vY2tzLmpzYCBpcyBsb2FkZWQsIHRoaXMgc2VydmljZSBpcyBvdmVycmlkZGVuIGJ5XHJcbiAqIHtAbGluayBuZ01vY2suJGV4Y2VwdGlvbkhhbmRsZXIgbW9jayAkZXhjZXB0aW9uSGFuZGxlcn0gd2hpY2ggYWlkcyBpbiB0ZXN0aW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Vycm9yfSBleGNlcHRpb24gRXhjZXB0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2F1c2Ugb3B0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbnRleHQgaW4gd2hpY2hcclxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xyXG4gIHRoaXMuJGdldCA9IFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihleGNlcHRpb24sIGNhdXNlKSB7XHJcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgfV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGVhZGVycyBSYXcgaGVhZGVycyBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xyXG4gIHZhciBwYXJzZWQgPSB7fSwga2V5LCB2YWwsIGk7XHJcblxyXG4gIGlmICghaGVhZGVycykgcmV0dXJuIHBhcnNlZDtcclxuXHJcbiAgZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24obGluZSkge1xyXG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xyXG4gICAga2V5ID0gbG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKTtcclxuICAgIHZhbCA9IHRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcclxuXHJcbiAgICBpZiAoa2V5KSB7XHJcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xyXG4gICAgICAgIHBhcnNlZFtrZXldICs9ICcsICcgKyB2YWw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGFyc2VkW2tleV0gPSB2YWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHBhcnNlZDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gcGFyc2VkIGhlYWRlcnMuXHJcbiAqXHJcbiAqIEhlYWRlcnMgYXJlIGxhenkgcGFyc2VkIHdoZW4gZmlyc3QgcmVxdWVzdGVkLlxyXG4gKiBAc2VlIHBhcnNlSGVhZGVyc1xyXG4gKlxyXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KX0gaGVhZGVycyBIZWFkZXJzIHRvIHByb3ZpZGUgYWNjZXNzIHRvLlxyXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nPSl9IFJldHVybnMgYSBnZXR0ZXIgZnVuY3Rpb24gd2hpY2ggaWYgY2FsbGVkIHdpdGg6XHJcbiAqXHJcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBzaW5nbGUgYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxyXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGhlYWRlcnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcclxuICB2YXIgaGVhZGVyc09iaiA9IGlzT2JqZWN0KGhlYWRlcnMpID8gaGVhZGVycyA6IHVuZGVmaW5lZDtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIGlmICghaGVhZGVyc09iaikgaGVhZGVyc09iaiA9ICBwYXJzZUhlYWRlcnMoaGVhZGVycyk7XHJcblxyXG4gICAgaWYgKG5hbWUpIHtcclxuICAgICAgcmV0dXJuIGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoZWFkZXJzT2JqO1xyXG4gIH07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ2hhaW4gYWxsIGdpdmVuIGZ1bmN0aW9uc1xyXG4gKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS5cclxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIdHRwIGhlYWRlcnMgZ2V0dGVyIGZuLlxyXG4gKiBAcGFyYW0geyhmdW5jdGlvbnxBcnJheS48ZnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy5cclxuICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xyXG4gIGlmIChpc0Z1bmN0aW9uKGZucykpXHJcbiAgICByZXR1cm4gZm5zKGRhdGEsIGhlYWRlcnMpO1xyXG5cclxuICBmb3JFYWNoKGZucywgZnVuY3Rpb24oZm4pIHtcclxuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7XHJcbiAgcmV0dXJuIDIwMCA8PSBzdGF0dXMgJiYgc3RhdHVzIDwgMzAwO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHtcclxuICB2YXIgSlNPTl9TVEFSVCA9IC9eXFxzKihcXFt8XFx7W15cXHtdKS8sXHJcbiAgICAgIEpTT05fRU5EID0gL1tcXH1cXF1dXFxzKiQvLFxyXG4gICAgICBQUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXFxdXFx9Jyw/XFxuLyxcclxuICAgICAgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnfTtcclxuXHJcbiAgdmFyIGRlZmF1bHRzID0gdGhpcy5kZWZhdWx0cyA9IHtcclxuICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhXHJcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgaWYgKGlzU3RyaW5nKGRhdGEpKSB7XHJcbiAgICAgICAgLy8gc3RyaXAganNvbiB2dWxuZXJhYmlsaXR5IHByb3RlY3Rpb24gcHJlZml4XHJcbiAgICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZShQUk9URUNUSU9OX1BSRUZJWCwgJycpO1xyXG4gICAgICAgIGlmIChKU09OX1NUQVJULnRlc3QoZGF0YSkgJiYgSlNPTl9FTkQudGVzdChkYXRhKSlcclxuICAgICAgICAgIGRhdGEgPSBmcm9tSnNvbihkYXRhKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1dLFxyXG5cclxuICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGFcclxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7XHJcbiAgICAgIHJldHVybiBpc09iamVjdChkKSAmJiAhaXNGaWxlKGQpID8gdG9Kc29uKGQpIDogZDtcclxuICAgIH1dLFxyXG5cclxuICAgIC8vIGRlZmF1bHQgaGVhZGVyc1xyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICBjb21tb246IHtcclxuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcclxuICAgICAgfSxcclxuICAgICAgcG9zdDogICBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTixcclxuICAgICAgcHV0OiAgICBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTixcclxuICAgICAgcGF0Y2g6ICBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTlxyXG4gICAgfSxcclxuXHJcbiAgICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxyXG4gICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nXHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQXJlIG9yZGVyIGJ5IHJlcXVlc3QuIEkuRS4gdGhleSBhcmUgYXBwbGllZCBpbiB0aGUgc2FtZSBvcmRlciBhc1xyXG4gICAqIGFycmF5IG9uIHJlcXVlc3QsIGJ1dCByZXZlcnMgb3JkZXIgb24gcmVzcG9uc2UuXHJcbiAgICovXHJcbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcclxuICAvKipcclxuICAgKiBGb3IgaGlzdG9yaWNhbCByZWFzb25zLCByZXNwb25zZSBpbnRlcmNlcHRvcnMgb3JkZXJlZCBieSB0aGUgb3JkZXIgaW4gd2hpY2hcclxuICAgKiB0aGV5IGFyZSBhcHBsaWVkIHRvIHJlc3BvbnNlLiAoVGhpcyBpcyBpbiByZXZlcnMgdG8gaW50ZXJjZXB0b3JGYWN0b3JpZXMpXHJcbiAgICovXHJcbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JGYWN0b3JpZXMgPSB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJGh0dHBCYWNrZW5kJywgJyRicm93c2VyJywgJyRjYWNoZUZhY3RvcnknLCAnJHJvb3RTY29wZScsICckcScsICckaW5qZWN0b3InLCAnJCR1cmxVdGlscycsXHJcbiAgICAgIGZ1bmN0aW9uKCRodHRwQmFja2VuZCwgJGJyb3dzZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IsICQkdXJsVXRpbHMpIHtcclxuXHJcbiAgICB2YXIgZGVmYXVsdENhY2hlID0gJGNhY2hlRmFjdG9yeSgnJGh0dHAnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEludGVyY2VwdG9ycyBzdG9yZWQgaW4gcmV2ZXJzZSBvcmRlci4gSW5uZXIgaW50ZXJjZXB0b3JzIGJlZm9yZSBvdXRlciBpbnRlcmNlcHRvcnMuXHJcbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxyXG4gICAgICogc2VydmVyIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xyXG5cclxuICAgIGZvckVhY2goaW50ZXJjZXB0b3JGYWN0b3JpZXMsIGZ1bmN0aW9uKGludGVyY2VwdG9yRmFjdG9yeSkge1xyXG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcclxuICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpIDogJGluamVjdG9yLmludm9rZShpbnRlcmNlcHRvckZhY3RvcnkpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZvckVhY2gocmVzcG9uc2VJbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5LCBpbmRleCkge1xyXG4gICAgICB2YXIgcmVzcG9uc2VGbiA9IGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcclxuICAgICAgICAgID8gJGluamVjdG9yLmdldChpbnRlcmNlcHRvckZhY3RvcnkpXHJcbiAgICAgICAgICA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KTtcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXNwb25zZSBpbnRlcmNlcHRvcnMgZ28gYmVmb3JlIFwiYXJvdW5kXCIgaW50ZXJjZXB0b3JzIChubyByZWFsIHJlYXNvbiwganVzdFxyXG4gICAgICAgKiBoYWQgdG8gcGljayBvbmUuKSBCdXQgdGhleSBhcmUgYWxyZWFkeSByZXZlcnNlZCwgc28gd2UgY2FuJ3QgdXNlIHVuc2hpZnQsIGhlbmNlXHJcbiAgICAgICAqIHRoZSBzcGxpY2UuXHJcbiAgICAgICAqL1xyXG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy5zcGxpY2UoaW5kZXgsIDAsIHtcclxuICAgICAgICByZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZUZuKCRxLndoZW4ocmVzcG9uc2UpKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2VGbigkcS5yZWplY3QocmVzcG9uc2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgKiBAbmFtZSBuZy4kaHR0cFxyXG4gICAgICogQHJlcXVpcmVzICRodHRwQmFja2VuZFxyXG4gICAgICogQHJlcXVpcmVzICRicm93c2VyXHJcbiAgICAgKiBAcmVxdWlyZXMgJGNhY2hlRmFjdG9yeVxyXG4gICAgICogQHJlcXVpcmVzICRyb290U2NvcGVcclxuICAgICAqIEByZXF1aXJlcyAkcVxyXG4gICAgICogQHJlcXVpcmVzICRpbmplY3RvclxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogVGhlIGAkaHR0cGAgc2VydmljZSBpcyBhIGNvcmUgQW5ndWxhciBzZXJ2aWNlIHRoYXQgZmFjaWxpdGF0ZXMgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSByZW1vdGVcclxuICAgICAqIEhUVFAgc2VydmVycyB2aWEgdGhlIGJyb3dzZXIncyB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3RcclxuICAgICAqIFhNTEh0dHBSZXF1ZXN0fSBvYmplY3Qgb3IgdmlhIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QIEpTT05QfS5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgdW5pdCB0ZXN0aW5nIGFwcGxpY2F0aW9ucyB0aGF0IHVzZSBgJGh0dHBgIHNlcnZpY2UsIHNlZVxyXG4gICAgICoge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgJGh0dHBCYWNrZW5kIG1vY2t9LlxyXG4gICAgICpcclxuICAgICAqIEZvciBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbiwgcGxlYXNlIGNoZWNrIG91dCB0aGUge0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlXHJcbiAgICAgKiAkcmVzb3VyY2V9IHNlcnZpY2UuXHJcbiAgICAgKlxyXG4gICAgICogVGhlICRodHRwIEFQSSBpcyBiYXNlZCBvbiB0aGUge0BsaW5rIG5nLiRxIGRlZmVycmVkL3Byb21pc2UgQVBJc30gZXhwb3NlZCBieVxyXG4gICAgICogdGhlICRxIHNlcnZpY2UuIFdoaWxlIGZvciBzaW1wbGUgdXNhZ2UgcGF0dGVybnMgdGhpcyBkb2Vzbid0IG1hdHRlciBtdWNoLCBmb3IgYWR2YW5jZWQgdXNhZ2VcclxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogIyBHZW5lcmFsIHVzYWdlXHJcbiAgICAgKiBUaGUgYCRodHRwYCBzZXJ2aWNlIGlzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgYSBzaW5nbGUgYXJndW1lbnQgw6LigqzigJ0gYSBjb25maWd1cmF0aW9uIG9iamVjdCDDouKCrOKAnVxyXG4gICAgICogdGhhdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGFuIEhUVFAgcmVxdWVzdCBhbmQgcmV0dXJucyAgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cclxuICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cclxuICAgICAqXHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogICAkaHR0cCh7bWV0aG9kOiAnR0VUJywgdXJsOiAnL3NvbWVVcmwnfSkuXHJcbiAgICAgKiAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xyXG4gICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseVxyXG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXHJcbiAgICAgKiAgICAgfSkuXHJcbiAgICAgKiAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcclxuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcclxuICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggYW4gZXJyb3Igc3RhdHVzLlxyXG4gICAgICogICAgIH0pO1xyXG4gICAgICogPC9wcmU+XHJcbiAgICAgKlxyXG4gICAgICogU2luY2UgdGhlIHJldHVybmVkIHZhbHVlIG9mIGNhbGxpbmcgdGhlICRodHRwIGZ1bmN0aW9uIGlzIGEgYHByb21pc2VgLCB5b3UgY2FuIGFsc28gdXNlXHJcbiAgICAgKiB0aGUgYHRoZW5gIG1ldGhvZCB0byByZWdpc3RlciBjYWxsYmFja3MsIGFuZCB0aGVzZSBjYWxsYmFja3Mgd2lsbCByZWNlaXZlIGEgc2luZ2xlIGFyZ3VtZW50IMOi4oKs4oCcXHJcbiAgICAgKiBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZXNwb25zZS4gU2VlIHRoZSBBUEkgc2lnbmF0dXJlIGFuZCB0eXBlIGluZm8gYmVsb3cgZm9yIG1vcmVcclxuICAgICAqIGRldGFpbHMuXHJcbiAgICAgKlxyXG4gICAgICogQSByZXNwb25zZSBzdGF0dXMgY29kZSBiZXR3ZWVuIDIwMCBhbmQgMjk5IGlzIGNvbnNpZGVyZWQgYSBzdWNjZXNzIHN0YXR1cyBhbmRcclxuICAgICAqIHdpbGwgcmVzdWx0IGluIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gTm90ZSB0aGF0IGlmIHRoZSByZXNwb25zZSBpcyBhIHJlZGlyZWN0LFxyXG4gICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZVxyXG4gICAgICogY2FsbGVkIGZvciBzdWNoIHJlc3BvbnNlcy5cclxuICAgICAqXHJcbiAgICAgKiAjIFNob3J0Y3V0IG1ldGhvZHNcclxuICAgICAqXHJcbiAgICAgKiBTaW5jZSBhbGwgaW52b2NhdGlvbnMgb2YgdGhlICRodHRwIHNlcnZpY2UgcmVxdWlyZSBwYXNzaW5nIGluIGFuIEhUVFAgbWV0aG9kIGFuZCBVUkwsIGFuZFxyXG4gICAgICogUE9TVC9QVVQgcmVxdWVzdHMgcmVxdWlyZSByZXF1ZXN0IGRhdGEgdG8gYmUgcHJvdmlkZWQgYXMgd2VsbCwgc2hvcnRjdXQgbWV0aG9kc1xyXG4gICAgICogd2VyZSBjcmVhdGVkOlxyXG4gICAgICpcclxuICAgICAqIDxwcmU+XHJcbiAgICAgKiAgICRodHRwLmdldCgnL3NvbWVVcmwnKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7XHJcbiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywgZGF0YSkuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spO1xyXG4gICAgICogPC9wcmU+XHJcbiAgICAgKlxyXG4gICAgICogQ29tcGxldGUgbGlzdCBvZiBzaG9ydGN1dCBtZXRob2RzOlxyXG4gICAgICpcclxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XHJcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNoZWFkICRodHRwLmhlYWR9XHJcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9XHJcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxyXG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjZGVsZXRlICRodHRwLmRlbGV0ZX1cclxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfVxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiAjIFNldHRpbmcgSFRUUCBIZWFkZXJzXHJcbiAgICAgKlxyXG4gICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzXHJcbiAgICAgKiBjYW4gYmUgZnVsbHkgY29uZmlndXJlZCBieSBhY2Nlc3NpbmcgdGhlIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnNgIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxyXG4gICAgICpcclxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25gIChoZWFkZXJzIHRoYXQgYXJlIGNvbW1vbiBmb3IgYWxsIHJlcXVlc3RzKTpcclxuICAgICAqICAgLSBgQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqIC8gKmBcclxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcclxuICAgICAqICAgLSBgQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uYFxyXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLnB1dGAgKGhlYWRlciBkZWZhdWx0cyBmb3IgUFVUIHJlcXVlc3RzKVxyXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXHJcbiAgICAgKlxyXG4gICAgICogVG8gYWRkIG9yIG92ZXJ3cml0ZSB0aGVzZSBkZWZhdWx0cywgc2ltcGx5IGFkZCBvciByZW1vdmUgYSBwcm9wZXJ0eSBmcm9tIHRoZXNlIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxyXG4gICAgICogd2l0aCB0aGUgbG93ZXJjYXNlZCBIVFRQIG1ldGhvZCBuYW1lIGFzIHRoZSBrZXksIGUuZy5cclxuICAgICAqIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuZ2V0WydNeS1IZWFkZXInXT0ndmFsdWUnYC5cclxuICAgICAqXHJcbiAgICAgKiBBZGRpdGlvbmFsbHksIHRoZSBkZWZhdWx0cyBjYW4gYmUgc2V0IGF0IHJ1bnRpbWUgdmlhIHRoZSBgJGh0dHAuZGVmYXVsdHNgIG9iamVjdCBpbiB0aGUgc2FtZVxyXG4gICAgICogZmFzaGlvbi5cclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xyXG4gICAgICpcclxuICAgICAqIEJvdGggcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyBjYW4gYmUgdHJhbnNmb3JtZWQgdXNpbmcgdHJhbnNmb3JtIGZ1bmN0aW9ucy4gQnkgZGVmYXVsdCwgQW5ndWxhclxyXG4gICAgICogYXBwbGllcyB0aGVzZSB0cmFuc2Zvcm1hdGlvbnM6XHJcbiAgICAgKlxyXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnM6XHJcbiAgICAgKlxyXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0IGludG9cclxuICAgICAqICAgSlNPTiBmb3JtYXQuXHJcbiAgICAgKlxyXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zOlxyXG4gICAgICpcclxuICAgICAqICAtIElmIFhTUkYgcHJlZml4IGlzIGRldGVjdGVkLCBzdHJpcCBpdCAoc2VlIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zIHNlY3Rpb24gYmVsb3cpLlxyXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cclxuICAgICAqXHJcbiAgICAgKiBUbyBnbG9iYWxseSBhdWdtZW50IG9yIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybXMsIG1vZGlmeSB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kXHJcbiAgICAgKiBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gVGhlc2UgcHJvcGVydGllcyBhcmUgYnkgZGVmYXVsdCBhblxyXG4gICAgICogYXJyYXkgb2YgdHJhbnNmb3JtIGZ1bmN0aW9ucywgd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlXHJcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbiBjaGFpbi4gWW91IGNhbiBhbHNvIGRlY2lkZSB0byBjb21wbGV0ZWx5IG92ZXJyaWRlIGFueSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBhc3NpZ25pbmcgeW91clxyXG4gICAgICogdHJhbnNmb3JtYXRpb24gZnVuY3Rpb25zIHRvIHRoZXNlIHByb3BlcnRpZXMgZGlyZWN0bHkgd2l0aG91dCB0aGUgYXJyYXkgd3JhcHBlci5cclxuICAgICAqXHJcbiAgICAgKiBTaW1pbGFybHksIHRvIGxvY2FsbHkgb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtcywgYXVnbWVudCB0aGUgYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vclxyXG4gICAgICogYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBwYXNzZWQgaW50byBgJGh0dHBgLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiAjIENhY2hpbmdcclxuICAgICAqXHJcbiAgICAgKiBUbyBlbmFibGUgY2FjaGluZywgc2V0IHRoZSBjb25maWd1cmF0aW9uIHByb3BlcnR5IGBjYWNoZWAgdG8gYHRydWVgLiBXaGVuIHRoZSBjYWNoZSBpc1xyXG4gICAgICogZW5hYmxlZCwgYCRodHRwYCBzdG9yZXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBpbiBsb2NhbCBjYWNoZS4gTmV4dCB0aW1lIHRoZVxyXG4gICAgICogcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gdGhlIGNhY2hlIHdpdGhvdXQgc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBOb3RlIHRoYXQgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaXMgc2VydmVkIGZyb20gY2FjaGUsIGRlbGl2ZXJ5IG9mIHRoZSBkYXRhIGlzIGFzeW5jaHJvbm91cyBpblxyXG4gICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIEdFVCByZXF1ZXN0cyBmb3IgdGhlIHNhbWUgVVJMIHRoYXQgc2hvdWxkIGJlIGNhY2hlZCB1c2luZyB0aGUgc2FtZVxyXG4gICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kXHJcbiAgICAgKiB0aGUgcmVtYWluaW5nIHJlcXVlc3RzIHdpbGwgYmUgZnVsZmlsbGVkIHVzaW5nIHRoZSByZXNwb25zZSBmcm9tIHRoZSBmaXJzdCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEEgY3VzdG9tIGRlZmF1bHQgY2FjaGUgYnVpbHQgd2l0aCAkY2FjaGVGYWN0b3J5IGNhbiBiZSBwcm92aWRlZCBpbiAkaHR0cC5kZWZhdWx0cy5jYWNoZS5cclxuICAgICAqIFRvIHNraXAgaXQsIHNldCBjb25maWd1cmF0aW9uIHByb3BlcnR5IGBjYWNoZWAgdG8gYGZhbHNlYC5cclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogIyBJbnRlcmNlcHRvcnNcclxuICAgICAqXHJcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxyXG4gICAgICoge0BsaW5rIG5nLiRxICRxIGFuZCBkZWZlcnJlZC9wcm9taXNlIEFQSXN9LlxyXG4gICAgICpcclxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxyXG4gICAgICogYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLCBpdCBpcyBkZXNpcmFibGUgdG8gYmVcclxuICAgICAqIGFibGUgdG8gaW50ZXJjZXB0IHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgdG8gdGhlIHNlcnZlciBhbmRcclxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxyXG4gICAgICogaW5pdGlhdGVkIHRoZXNlIHJlcXVlc3RzLiBUaGUgaW50ZXJjZXB0b3JzIGxldmVyYWdlIHRoZSB7QGxpbmsgbmcuJHFcclxuICAgICAqIHByb21pc2UgQVBJc30gdG8gZnVsZmlsbCB0aGlzIG5lZWQgZm9yIGJvdGggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgaW50ZXJjZXB0b3JzIGFyZSBzZXJ2aWNlIGZhY3RvcmllcyB0aGF0IGFyZSByZWdpc3RlcmVkIHdpdGggdGhlIGAkaHR0cFByb3ZpZGVyYCBieVxyXG4gICAgICogYWRkaW5nIHRoZW0gdG8gdGhlIGAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmRcclxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cclxuICAgICAqXHJcbiAgICAgKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIGludGVyY2VwdG9ycyAoYW5kIHR3byBraW5kcyBvZiByZWplY3Rpb24gaW50ZXJjZXB0b3JzKTpcclxuICAgICAqXHJcbiAgICAgKiAgICogYHJlcXVlc3RgOiBpbnRlcmNlcHRvcnMgZ2V0IGNhbGxlZCB3aXRoIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0byBtb2RpZnlcclxuICAgICAqICAgICB0aGUgYGNvbmZpZ2Agb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYGNvbmZpZ2AgZGlyZWN0bHkgb3IgYXMgYVxyXG4gICAgICogICAgIHByb21pc2UuXHJcbiAgICAgKiAgICogYHJlcXVlc3RFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvciByZXNvbHZlZFxyXG4gICAgICogICAgICB3aXRoIGEgcmVqZWN0aW9uLlxyXG4gICAgICogICAqIGByZXNwb25zZWA6IGludGVyY2VwdG9ycyBnZXQgY2FsbGVkIHdpdGggaHR0cCBgcmVzcG9uc2VgIG9iamVjdC4gVGhlIGZ1bmN0aW9uIGlzIGZyZWUgdG8gbW9kaWZ5XHJcbiAgICAgKiAgICAgdGhlIGByZXNwb25zZWAgb3IgY3JlYXRlIGEgbmV3IG9uZS4gVGhlIGZ1bmN0aW9uIG5lZWRzIHRvIHJldHVybiB0aGUgYHJlc3BvbnNlYCBkaXJlY3RseSBvciBhcyBhXHJcbiAgICAgKiAgICAgcHJvbWlzZS5cclxuICAgICAqICAgKiBgcmVzcG9uc2VFcnJvcmA6IGludGVyY2VwdG9yIGdldHMgY2FsbGVkIHdoZW4gYSBwcmV2aW91cyBpbnRlcmNlcHRvciB0aHJldyBhbiBlcnJvciBvciByZXNvbHZlZFxyXG4gICAgICogICAgICB3aXRoIGEgcmVqZWN0aW9uLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgYXMgYSBzZXJ2aWNlXHJcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xyXG4gICAgICogICAgIHJldHVybiB7XHJcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcclxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXHJcbiAgICAgKiAgICAgICAgIHJldHVybiBjb25maWcgfHwgJHEud2hlbihjb25maWcpO1xyXG4gICAgICogICAgICAgfSxcclxuICAgICAqXHJcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcclxuICAgICAqICAgICAgJ3JlcXVlc3RFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xyXG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcclxuICAgICAqICAgICAgICAgaWYgKGNhblJlY292ZXIocmVqZWN0aW9uKSkge1xyXG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxyXG4gICAgICogICAgICAgICB9XHJcbiAgICAgKiAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcclxuICAgICAqICAgICAgIH0sXHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcclxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXHJcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcclxuICAgICAqICAgICAgIH0sXHJcbiAgICAgKlxyXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXHJcbiAgICAgKiAgICAgICdyZXNwb25zZUVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XHJcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxyXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XHJcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXHJcbiAgICAgKiAgICAgICAgIH1cclxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xyXG4gICAgICogICAgICAgfTtcclxuICAgICAqICAgICB9XHJcbiAgICAgKiAgIH0pO1xyXG4gICAgICpcclxuICAgICAqICAgJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnbXlIdHRwSW50ZXJjZXB0b3InKTtcclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgdmlhIGFuIGFub255bW91cyBmYWN0b3J5XHJcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xyXG4gICAgICogICAgIHJldHVybiB7XHJcbiAgICAgKiAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXHJcbiAgICAgKiAgICAgICB9LFxyXG4gICAgICogICAgICAgJ3Jlc3BvbnNlJzogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAqICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmVcclxuICAgICAqICAgICAgIH1cclxuICAgICAqICAgfSk7XHJcbiAgICAgKiA8L3ByZT5cclxuICAgICAqXHJcbiAgICAgKiAjIFJlc3BvbnNlIGludGVyY2VwdG9ycyAoREVQUkVDQVRFRClcclxuICAgICAqXHJcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxyXG4gICAgICoge0BsaW5rIG5nLiRxICRxIGFuZCBkZWZlcnJlZC9wcm9taXNlIEFQSXN9LlxyXG4gICAgICpcclxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uIG9yIGFueSBraW5kIG9mIHN5bmNocm9ub3VzIG9yXHJcbiAgICAgKiBhc3luY2hyb25vdXMgcHJlcHJvY2Vzc2luZyBvZiByZWNlaXZlZCByZXNwb25zZXMsIGl0IGlzIGRlc2lyYWJsZSB0byBiZSBhYmxlIHRvIGludGVyY2VwdFxyXG4gICAgICogcmVzcG9uc2VzIGZvciBodHRwIHJlcXVlc3RzIGJlZm9yZSB0aGV5IGFyZSBoYW5kZWQgb3ZlciB0byB0aGUgYXBwbGljYXRpb24gY29kZSB0aGF0XHJcbiAgICAgKiBpbml0aWF0ZWQgdGhlc2UgcmVxdWVzdHMuIFRoZSByZXNwb25zZSBpbnRlcmNlcHRvcnMgbGV2ZXJhZ2UgdGhlIHtAbGluayBuZy4kcVxyXG4gICAgICogcHJvbWlzZSBhcGlzfSB0byBmdWxmaWwgdGhpcyBuZWVkIGZvciBib3RoIHN5bmNocm9ub3VzIGFuZCBhc3luY2hyb25vdXMgcHJlcHJvY2Vzc2luZy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgaW50ZXJjZXB0b3JzIGFyZSBzZXJ2aWNlIGZhY3RvcmllcyB0aGF0IGFyZSByZWdpc3RlcmVkIHdpdGggdGhlICRodHRwUHJvdmlkZXIgYnlcclxuICAgICAqIGFkZGluZyB0aGVtIHRvIHRoZSBgJGh0dHBQcm92aWRlci5yZXNwb25zZUludGVyY2VwdG9yc2AgYXJyYXkuIFRoZSBmYWN0b3J5IGlzIGNhbGxlZCBhbmRcclxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvciAgw6LigqzigJ0gYSBmdW5jdGlvbiB0aGF0XHJcbiAgICAgKiB0YWtlcyBhIHtAbGluayBuZy4kcSBwcm9taXNlfSBhbmQgcmV0dXJucyB0aGUgb3JpZ2luYWwgb3IgYSBuZXcgcHJvbWlzZS5cclxuICAgICAqXHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogICAvLyByZWdpc3RlciB0aGUgaW50ZXJjZXB0b3IgYXMgYSBzZXJ2aWNlXHJcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xyXG4gICAgICogICAgIHJldHVybiBmdW5jdGlvbihwcm9taXNlKSB7XHJcbiAgICAgKiAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBzdWNjZXNzXHJcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAqICAgICAgIH0sIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgKiAgICAgICAgIC8vIGRvIHNvbWV0aGluZyBvbiBlcnJvclxyXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZXNwb25zZSkpIHtcclxuICAgICAqICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VPck5ld1Byb21pc2VcclxuICAgICAqICAgICAgICAgfVxyXG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlc3BvbnNlKTtcclxuICAgICAqICAgICAgIH0pO1xyXG4gICAgICogICAgIH1cclxuICAgICAqICAgfSk7XHJcbiAgICAgKlxyXG4gICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7XHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqICAgLy8gcmVnaXN0ZXIgdGhlIGludGVyY2VwdG9yIHZpYSBhbiBhbm9ueW1vdXMgZmFjdG9yeVxyXG4gICAgICogICAkaHR0cFByb3ZpZGVyLnJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xyXG4gICAgICogICAgIHJldHVybiBmdW5jdGlvbihwcm9taXNlKSB7XHJcbiAgICAgKiAgICAgICAvLyBzYW1lIGFzIGFib3ZlXHJcbiAgICAgKiAgICAgfVxyXG4gICAgICogICB9KTtcclxuICAgICAqIDwvcHJlPlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiAjIFNlY3VyaXR5IENvbnNpZGVyYXRpb25zXHJcbiAgICAgKlxyXG4gICAgICogV2hlbiBkZXNpZ25pbmcgd2ViIGFwcGxpY2F0aW9ucywgY29uc2lkZXIgc2VjdXJpdHkgdGhyZWF0cyBmcm9tOlxyXG4gICAgICpcclxuICAgICAqIC0ge0BsaW5rIGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweFxyXG4gICAgICogICBKU09OIHZ1bG5lcmFiaWxpdHl9XHJcbiAgICAgKiAtIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nyb3NzLXNpdGVfcmVxdWVzdF9mb3JnZXJ5IFhTUkZ9XHJcbiAgICAgKlxyXG4gICAgICogQm90aCBzZXJ2ZXIgYW5kIHRoZSBjbGllbnQgbXVzdCBjb29wZXJhdGUgaW4gb3JkZXIgdG8gZWxpbWluYXRlIHRoZXNlIHRocmVhdHMuIEFuZ3VsYXIgY29tZXNcclxuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxyXG4gICAgICogY29vcGVyYXRpb24gaXMgcmVxdWlyZWQuXHJcbiAgICAgKlxyXG4gICAgICogIyMgSlNPTiBWdWxuZXJhYmlsaXR5IFByb3RlY3Rpb25cclxuICAgICAqXHJcbiAgICAgKiBBIHtAbGluayBodHRwOi8vaGFhY2tlZC5jb20vYXJjaGl2ZS8yMDA4LzExLzIwL2FuYXRvbXktb2YtYS1zdWJ0bGUtanNvbi12dWxuZXJhYmlsaXR5LmFzcHhcclxuICAgICAqIEpTT04gdnVsbmVyYWJpbGl0eX0gYWxsb3dzIHRoaXJkIHBhcnR5IHdlYnNpdGUgdG8gdHVybiB5b3VyIEpTT04gcmVzb3VyY2UgVVJMIGludG9cclxuICAgICAqIHtAbGluayBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0pTT05QIEpTT05QfSByZXF1ZXN0IHVuZGVyIHNvbWUgY29uZGl0aW9ucy4gVG9cclxuICAgICAqIGNvdW50ZXIgdGhpcyB5b3VyIHNlcnZlciBjYW4gcHJlZml4IGFsbCBKU09OIHJlcXVlc3RzIHdpdGggZm9sbG93aW5nIHN0cmluZyBgXCIpXX0nLFxcblwiYC5cclxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSBpZiB5b3VyIHNlcnZlciBuZWVkcyB0byByZXR1cm46XHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogWydvbmUnLCd0d28nXVxyXG4gICAgICogPC9wcmU+XHJcbiAgICAgKlxyXG4gICAgICogd2hpY2ggaXMgdnVsbmVyYWJsZSB0byBhdHRhY2ssIHlvdXIgc2VydmVyIGNhbiByZXR1cm46XHJcbiAgICAgKiA8cHJlPlxyXG4gICAgICogKV19JyxcclxuICAgICAqIFsnb25lJywndHdvJ11cclxuICAgICAqIDwvcHJlPlxyXG4gICAgICpcclxuICAgICAqIEFuZ3VsYXIgd2lsbCBzdHJpcCB0aGUgcHJlZml4LCBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgSlNPTi5cclxuICAgICAqXHJcbiAgICAgKlxyXG4gICAgICogIyMgQ3Jvc3MgU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgKFhTUkYpIFByb3RlY3Rpb25cclxuICAgICAqXHJcbiAgICAgKiB7QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeSBYU1JGfSBpcyBhIHRlY2huaXF1ZSBieSB3aGljaFxyXG4gICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtXHJcbiAgICAgKiB0byBjb3VudGVyIFhTUkYuIFdoZW4gcGVyZm9ybWluZyBYSFIgcmVxdWVzdHMsIHRoZSAkaHR0cCBzZXJ2aWNlIHJlYWRzIGEgdG9rZW4gZnJvbSBhIGNvb2tpZVxyXG4gICAgICogKGJ5IGRlZmF1bHQsIGBYU1JGLVRPS0VOYCkgYW5kIHNldHMgaXQgYXMgYW4gSFRUUCBoZWFkZXIgKGBYLVhTUkYtVE9LRU5gKS4gU2luY2Ugb25seVxyXG4gICAgICogSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0XHJcbiAgICAgKiB0aGUgWEhSIGNhbWUgZnJvbSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4uIFRoZSBoZWFkZXIgd2lsbCBub3QgYmUgc2V0IGZvclxyXG4gICAgICogY3Jvc3MtZG9tYWluIHJlcXVlc3RzLlxyXG4gICAgICpcclxuICAgICAqIFRvIHRha2UgYWR2YW50YWdlIG9mIHRoaXMsIHlvdXIgc2VydmVyIG5lZWRzIHRvIHNldCBhIHRva2VuIGluIGEgSmF2YVNjcmlwdCByZWFkYWJsZSBzZXNzaW9uXHJcbiAgICAgKiBjb29raWUgY2FsbGVkIGBYU1JGLVRPS0VOYCBvbiB0aGUgZmlyc3QgSFRUUCBHRVQgcmVxdWVzdC4gT24gc3Vic2VxdWVudCBYSFIgcmVxdWVzdHMgdGhlXHJcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXHJcbiAgICAgKiB0aGF0IG9ubHkgSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluIGNvdWxkIGhhdmUgc2VudCB0aGUgcmVxdWVzdC4gVGhlIHRva2VuIG11c3QgYmVcclxuICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBmcm9tIG1ha2luZ1xyXG4gICAgICogdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3MgYXV0aGVudGljYXRpb25cclxuICAgICAqIGNvb2tpZSB3aXRoIGEge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NhbHRfKGNyeXB0b2dyYXBoeSkgc2FsdH0gZm9yIGFkZGVkIHNlY3VyaXR5LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXJzIGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgdGhlIHhzcmZIZWFkZXJOYW1lIGFuZCB4c3JmQ29va2llTmFtZVxyXG4gICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cywgb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgT2JqZWN0IGRlc2NyaWJpbmcgdGhlIHJlcXVlc3QgdG8gYmUgbWFkZSBhbmQgaG93IGl0IHNob3VsZCBiZVxyXG4gICAgICogICAgcHJvY2Vzc2VkLiBUaGUgb2JqZWN0IGhhcyBmb2xsb3dpbmcgcHJvcGVydGllczpcclxuICAgICAqXHJcbiAgICAgKiAgICAtICoqbWV0aG9kKiogw6LigqzigJwgYHtzdHJpbmd9YCDDouKCrOKAnCBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpXHJcbiAgICAgKiAgICAtICoqdXJsKiogw6LigqzigJwgYHtzdHJpbmd9YCDDouKCrOKAnCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgb2YgdGhlIHJlc291cmNlIHRoYXQgaXMgYmVpbmcgcmVxdWVzdGVkLlxyXG4gICAgICogICAgLSAqKnBhcmFtcyoqIMOi4oKs4oCcIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIMOi4oKs4oCcIE1hcCBvZiBzdHJpbmdzIG9yIG9iamVjdHMgd2hpY2ggd2lsbCBiZSB0dXJuZWQgdG9cclxuICAgICAqICAgICAgYD9rZXkxPXZhbHVlMSZrZXkyPXZhbHVlMmAgYWZ0ZXIgdGhlIHVybC4gSWYgdGhlIHZhbHVlIGlzIG5vdCBhIHN0cmluZywgaXQgd2lsbCBiZSBKU09OaWZpZWQuXHJcbiAgICAgKiAgICAtICoqZGF0YSoqIMOi4oKs4oCcIGB7c3RyaW5nfE9iamVjdH1gIMOi4oKs4oCcIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXHJcbiAgICAgKiAgICAtICoqaGVhZGVycyoqIMOi4oKs4oCcIGB7T2JqZWN0fWAgw6LigqzigJwgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xyXG4gICAgICogICAgICBIVFRQIGhlYWRlcnMgdG8gc2VuZCB0byB0aGUgc2VydmVyLiBJZiB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gaXMgbnVsbCwgdGhlIGhlYWRlciB3aWxsXHJcbiAgICAgKiAgICAgIG5vdCBiZSBzZW50LlxyXG4gICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiogw6LigqzigJwgYHtzdHJpbmd9YCDDouKCrOKAnCBOYW1lIG9mIEhUVFAgaGVhZGVyIHRvIHBvcHVsYXRlIHdpdGggdGhlIFhTUkYgdG9rZW4uXHJcbiAgICAgKiAgICAtICoqeHNyZkNvb2tpZU5hbWUqKiDDouKCrOKAnCBge3N0cmluZ31gIMOi4oKs4oCcIE5hbWUgb2YgY29va2llIGNvbnRhaW5pbmcgdGhlIFhTUkYgdG9rZW4uXHJcbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIMOi4oKs4oCcIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIMOi4oKs4oCcXHJcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxyXG4gICAgICogICAgICByZXF1ZXN0IGJvZHkgYW5kIGhlYWRlcnMgYW5kIHJldHVybnMgaXRzIHRyYW5zZm9ybWVkICh0eXBpY2FsbHkgc2VyaWFsaXplZCkgdmVyc2lvbi5cclxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXNwb25zZSoqIMOi4oKs4oCcIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpPn1gIMOi4oKs4oCcXHJcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxyXG4gICAgICogICAgICByZXNwb25zZSBib2R5IGFuZCBoZWFkZXJzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IGRlc2VyaWFsaXplZCkgdmVyc2lvbi5cclxuICAgICAqICAgIC0gKipjYWNoZSoqIMOi4oKs4oCcIGB7Ym9vbGVhbnxDYWNoZX1gIMOi4oKs4oCcIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlXHJcbiAgICAgKiAgICAgIEdFVCByZXF1ZXN0LCBvdGhlcndpc2UgaWYgYSBjYWNoZSBpbnN0YW5jZSBidWlsdCB3aXRoXHJcbiAgICAgKiAgICAgIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5ICRjYWNoZUZhY3Rvcnl9LCB0aGlzIGNhY2hlIHdpbGwgYmUgdXNlZCBmb3JcclxuICAgICAqICAgICAgY2FjaGluZy5cclxuICAgICAqICAgIC0gKip0aW1lb3V0Kiogw6LigqzigJwgYHtudW1iZXJ8UHJvbWlzZX1gIMOi4oKs4oCcIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cclxuICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC5cclxuICAgICAqICAgIC0gKip3aXRoQ3JlZGVudGlhbHMqKiAtIGB7Ym9vbGVhbn1gIC0gd2hldGhlciB0byB0byBzZXQgdGhlIGB3aXRoQ3JlZGVudGlhbHNgIGZsYWcgb24gdGhlXHJcbiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vaHR0cF9hY2Nlc3NfY29udHJvbCNzZWN0aW9uXzVcclxuICAgICAqICAgICAgcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc30gZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcbiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlIHtAbGlua1xyXG4gICAgICogICAgICBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9YTUxIdHRwUmVxdWVzdCNyZXNwb25zZVR5cGUgcmVxdWVzdFR5cGV9LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gUmV0dXJucyBhIHtAbGluayBuZy4kcSBwcm9taXNlfSBvYmplY3Qgd2l0aCB0aGVcclxuICAgICAqICAgc3RhbmRhcmQgYHRoZW5gIG1ldGhvZCBhbmQgdHdvIGh0dHAgc3BlY2lmaWMgbWV0aG9kczogYHN1Y2Nlc3NgIGFuZCBgZXJyb3JgLiBUaGUgYHRoZW5gXHJcbiAgICAgKiAgIG1ldGhvZCB0YWtlcyB0d28gYXJndW1lbnRzIGEgc3VjY2VzcyBhbmQgYW4gZXJyb3IgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBhXHJcbiAgICAgKiAgIHJlc3BvbnNlIG9iamVjdC4gVGhlIGBzdWNjZXNzYCBhbmQgYGVycm9yYCBtZXRob2RzIHRha2UgYSBzaW5nbGUgYXJndW1lbnQgLSBhIGZ1bmN0aW9uIHRoYXRcclxuICAgICAqICAgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBzdWNjZWVkcyBvciBmYWlscyByZXNwZWN0aXZlbHkuIFRoZSBhcmd1bWVudHMgcGFzc2VkIGludG9cclxuICAgICAqICAgdGhlc2UgZnVuY3Rpb25zIGFyZSBkZXN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIG9iamVjdCBwYXNzZWQgaW50byB0aGVcclxuICAgICAqICAgYHRoZW5gIG1ldGhvZC4gVGhlIHJlc3BvbnNlIG9iamVjdCBoYXMgdGhlc2UgcHJvcGVydGllczpcclxuICAgICAqXHJcbiAgICAgKiAgIC0gKipkYXRhKiogw6LigqzigJwgYHtzdHJpbmd8T2JqZWN0fWAgw6LigqzigJwgVGhlIHJlc3BvbnNlIGJvZHkgdHJhbnNmb3JtZWQgd2l0aCB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9ucy5cclxuICAgICAqICAgLSAqKnN0YXR1cyoqIMOi4oKs4oCcIGB7bnVtYmVyfWAgw6LigqzigJwgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXHJcbiAgICAgKiAgIC0gKipoZWFkZXJzKiogw6LigqzigJwgYHtmdW5jdGlvbihbaGVhZGVyTmFtZV0pfWAgw6LigqzigJwgSGVhZGVyIGdldHRlciBmdW5jdGlvbi5cclxuICAgICAqICAgLSAqKmNvbmZpZyoqIMOi4oKs4oCcIGB7T2JqZWN0fWAgw6LigqzigJwgVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xyXG4gICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICA8ZXhhbXBsZT5cclxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRmV0Y2hDdHJsXCI+XHJcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJtZXRob2RcIj5cclxuICAgICAgICAgICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgIDxvcHRpb24+SlNPTlA8L29wdGlvbj5cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIvPlxyXG4gICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxyXG4gICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKVwiPlNhbXBsZSBHRVQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdKU09OUCcsICdodHRwOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+U2FtcGxlIEpTT05QPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLCAnaHR0cDovL2FuZ3VsYXJqcy5vcmcvZG9lc250ZXhpc3QmY2FsbGJhY2s9SlNPTl9DQUxMQkFDSycpXCI+SW52YWxpZCBKU09OUDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8cHJlPmh0dHAgc3RhdHVzIGNvZGU6IHt7c3RhdHVzfX08L3ByZT5cclxuICAgICAgICAgICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2ZpbGU+XHJcbiAgICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxyXG4gICAgICAgICAgZnVuY3Rpb24gRmV0Y2hDdHJsKCRzY29wZSwgJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5tZXRob2QgPSAnR0VUJztcclxuICAgICAgICAgICAgJHNjb3BlLnVybCA9ICdodHRwLWhlbGxvLmh0bWwnO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICRodHRwKHttZXRob2Q6ICRzY29wZS5tZXRob2QsIHVybDogJHNjb3BlLnVybCwgY2FjaGU6ICR0ZW1wbGF0ZUNhY2hlfSkuXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgICAgIGVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGEgfHwgXCJSZXF1ZXN0IGZhaWxlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kO1xyXG4gICAgICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC9maWxlPlxyXG4gICAgICAgIDxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cclxuICAgICAgICAgIEhlbGxvLCAkaHR0cCFcclxuICAgICAgICA8L2ZpbGU+XHJcbiAgICAgICAgPGZpbGUgbmFtZT1cInNjZW5hcmlvLmpzXCI+XHJcbiAgICAgICAgICBpdCgnc2hvdWxkIG1ha2UgYW4geGhyIEdFVCByZXF1ZXN0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQoJzpidXR0b246Y29udGFpbnMoXCJTYW1wbGUgR0VUXCIpJykuY2xpY2soKTtcclxuICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucyhcImZldGNoXCIpJykuY2xpY2soKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3N0YXR1cycpKS50b0JlKCcyMDAnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2RhdGEnKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucyhcIlNhbXBsZSBKU09OUFwiKScpLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIGVsZW1lbnQoJzpidXR0b246Y29udGFpbnMoXCJmZXRjaFwiKScpLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdzdGF0dXMnKSkudG9CZSgnMjAwJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdkYXRhJykpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpdCgnc2hvdWxkIG1ha2UgSlNPTlAgcmVxdWVzdCB0byBpbnZhbGlkIFVSTCBhbmQgaW52b2tlIHRoZSBlcnJvciBoYW5kbGVyJyxcclxuICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZWxlbWVudCgnOmJ1dHRvbjpjb250YWlucyhcIkludmFsaWQgSlNPTlBcIiknKS5jbGljaygpO1xyXG4gICAgICAgICAgICBlbGVtZW50KCc6YnV0dG9uOmNvbnRhaW5zKFwiZmV0Y2hcIiknKS5jbGljaygpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnc3RhdHVzJykpLnRvQmUoJzAnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2RhdGEnKSkudG9CZSgnUmVxdWVzdCBmYWlsZWQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIDwvZmlsZT5cclxuICAgICAgPC9leGFtcGxlPlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiAkaHR0cChyZXF1ZXN0Q29uZmlnKSB7XHJcbiAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCxcclxuICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VcclxuICAgICAgfTtcclxuICAgICAgdmFyIGhlYWRlcnMgPSBtZXJnZUhlYWRlcnMocmVxdWVzdENvbmZpZyk7XHJcblxyXG4gICAgICBleHRlbmQoY29uZmlnLCByZXF1ZXN0Q29uZmlnKTtcclxuICAgICAgY29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgICBjb25maWcubWV0aG9kID0gdXBwZXJjYXNlKGNvbmZpZy5tZXRob2QpO1xyXG5cclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9ICQkdXJsVXRpbHMuaXNTYW1lT3JpZ2luKGNvbmZpZy51cmwpXHJcbiAgICAgICAgICA/ICRicm93c2VyLmNvb2tpZXMoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdXHJcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xyXG4gICAgICAgIGhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlO1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgICAgdmFyIHNlcnZlclJlcXVlc3QgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XHJcbiAgICAgICAgdmFyIHJlcURhdGEgPSB0cmFuc2Zvcm1EYXRhKGNvbmZpZy5kYXRhLCBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLCBjb25maWcudHJhbnNmb3JtUmVxdWVzdCk7XHJcblxyXG4gICAgICAgIC8vIHN0cmlwIGNvbnRlbnQtdHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxyXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcuZGF0YSkpIHtcclxuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikge1xyXG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKGhlYWRlcikgPT09ICdjb250ZW50LXR5cGUnKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSAmJiAhaXNVbmRlZmluZWQoZGVmYXVsdHMud2l0aENyZWRlbnRpYWxzKSkge1xyXG4gICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFscztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNlbmQgcmVxdWVzdFxyXG4gICAgICAgIHJldHVybiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSwgaGVhZGVycykudGhlbih0cmFuc2Zvcm1SZXNwb25zZSwgdHJhbnNmb3JtUmVzcG9uc2UpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGNoYWluID0gW3NlcnZlclJlcXVlc3QsIHVuZGVmaW5lZF07XHJcbiAgICAgIHZhciBwcm9taXNlID0gJHEud2hlbihjb25maWcpO1xyXG5cclxuICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzXHJcbiAgICAgIGZvckVhY2gocmV2ZXJzZWRJbnRlcmNlcHRvcnMsIGZ1bmN0aW9uKGludGVyY2VwdG9yKSB7XHJcbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7XHJcbiAgICAgICAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLnJlcXVlc3QsIGludGVyY2VwdG9yLnJlcXVlc3RFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSB8fCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKSB7XHJcbiAgICAgICAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLnJlc3BvbnNlLCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgd2hpbGUoY2hhaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHRoZW5GbiA9IGNoYWluLnNoaWZ0KCk7XHJcbiAgICAgICAgdmFyIHJlamVjdEZuID0gY2hhaW4uc2hpZnQoKTtcclxuXHJcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbih0aGVuRm4sIHJlamVjdEZuKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJvbWlzZS5zdWNjZXNzID0gZnVuY3Rpb24oZm4pIHtcclxuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHByb21pc2UuZXJyb3IgPSBmdW5jdGlvbihmbikge1xyXG4gICAgICAgIHByb21pc2UudGhlbihudWxsLCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgZm4ocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHByb21pc2U7XHJcblxyXG4gICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZVxyXG4gICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSwge1xyXG4gICAgICAgICAgZGF0YTogdHJhbnNmb3JtRGF0YShyZXNwb25zZS5kYXRhLCByZXNwb25zZS5oZWFkZXJzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIChpc1N1Y2Nlc3MocmVzcG9uc2Uuc3RhdHVzKSlcclxuICAgICAgICAgID8gcmVzcFxyXG4gICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcclxuICAgICAgICB2YXIgZGVmSGVhZGVycyA9IGRlZmF1bHRzLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIHJlcUhlYWRlcnMgPSBleHRlbmQoe30sIGNvbmZpZy5oZWFkZXJzKSxcclxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcclxuXHJcbiAgICAgICAgZGVmSGVhZGVycyA9IGV4dGVuZCh7fSwgZGVmSGVhZGVycy5jb21tb24sIGRlZkhlYWRlcnNbbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpXSk7XHJcblxyXG4gICAgICAgIC8vIGV4ZWN1dGUgaWYgaGVhZGVyIHZhbHVlIGlzIGZ1bmN0aW9uXHJcbiAgICAgICAgZXhlY0hlYWRlcnMoZGVmSGVhZGVycyk7XHJcbiAgICAgICAgZXhlY0hlYWRlcnMocmVxSGVhZGVycyk7XHJcblxyXG4gICAgICAgIC8vIHVzaW5nIGZvci1pbiBpbnN0ZWFkIG9mIGZvckVhY2ggdG8gYXZvaWQgdW5lY2Vzc2FyeSBpdGVyYXRpb24gYWZ0ZXIgaGVhZGVyIGhhcyBiZWVuIGZvdW5kXHJcbiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246XHJcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcclxuICAgICAgICAgIGxvd2VyY2FzZURlZkhlYWRlck5hbWUgPSBsb3dlcmNhc2UoZGVmSGVhZGVyTmFtZSk7XHJcblxyXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShyZXFIZWFkZXJOYW1lKSA9PT0gbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSkge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVxSGVhZGVycztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXhlY0hlYWRlcnMoaGVhZGVycykge1xyXG4gICAgICAgICAgdmFyIGhlYWRlckNvbnRlbnQ7XHJcblxyXG4gICAgICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJGbiwgaGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xyXG4gICAgICAgICAgICAgIGhlYWRlckNvbnRlbnQgPSBoZWFkZXJGbigpO1xyXG4gICAgICAgICAgICAgIGlmIChoZWFkZXJDb250ZW50ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBoZWFkZXJzW2hlYWRlcl07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMgPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRodHRwI2dldFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRodHRwXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxyXG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRodHRwI2RlbGV0ZVxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRodHRwXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxyXG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRodHRwI2hlYWRcclxuICAgICAqIEBtZXRob2RPZiBuZy4kaHR0cFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEhFQURgIHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJGh0dHAjanNvbnBcclxuICAgICAqIEBtZXRob2RPZiBuZy4kaHR0cFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0LlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICBTaG91bGQgY29udGFpbiBgSlNPTl9DQUxMQkFDS2Agc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJGh0dHAjcG9zdFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRodHRwXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUE9TVGAgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kaHR0cCNwdXRcclxuICAgICAqIEBtZXRob2RPZiBuZy4kaHR0cFxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBVVGAgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxyXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcclxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVTaG9ydE1ldGhvZHNXaXRoRGF0YSgncG9zdCcsICdwdXQnKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICAgICAgICogQG5hbWUgbmcuJGh0dHAjZGVmYXVsdHNcclxuICAgICAgICAgKiBAcHJvcGVydHlPZiBuZy4kaHR0cFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICogUnVudGltZSBlcXVpdmFsZW50IG9mIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0c2AgcHJvcGVydHkuIEFsbG93cyBjb25maWd1cmF0aW9uIG9mXHJcbiAgICAgICAgICogZGVmYXVsdCBoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMgYXMgd2VsbCBhcyByZXF1ZXN0IGFuZCByZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBTZWUgXCJTZXR0aW5nIEhUVFAgSGVhZGVyc1wiIGFuZCBcIlRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXCIgc2VjdGlvbnMgYWJvdmUuXHJcbiAgICAgICAgICovXHJcbiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xyXG5cclxuXHJcbiAgICByZXR1cm4gJGh0dHA7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykge1xyXG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcclxuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcclxuICAgICAgICAgICAgdXJsOiB1cmxcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkge1xyXG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICRodHRwW25hbWVdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcclxuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogbmFtZSxcclxuICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiAhISEgQUNDRVNTRVMgQ0xPU1VSRSBWQVJTOlxyXG4gICAgICogJGh0dHBCYWNrZW5kLCBkZWZhdWx0cywgJGxvZywgJHJvb3RTY29wZSwgZGVmYXVsdENhY2hlLCAkaHR0cC5wZW5kaW5nUmVxdWVzdHNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2VuZFJlcShjb25maWcsIHJlcURhdGEsIHJlcUhlYWRlcnMpIHtcclxuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSxcclxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxyXG4gICAgICAgICAgY2FjaGUsXHJcbiAgICAgICAgICBjYWNoZWRSZXNwLFxyXG4gICAgICAgICAgdXJsID0gYnVpbGRVcmwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcyk7XHJcblxyXG4gICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpO1xyXG4gICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7XHJcblxyXG5cclxuICAgICAgaWYgKChjb25maWcuY2FjaGUgfHwgZGVmYXVsdHMuY2FjaGUpICYmIGNvbmZpZy5jYWNoZSAhPT0gZmFsc2UgJiYgY29uZmlnLm1ldGhvZCA9PSAnR0VUJykge1xyXG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxyXG4gICAgICAgICAgICAgIDogaXNPYmplY3QoZGVmYXVsdHMuY2FjaGUpID8gZGVmYXVsdHMuY2FjaGVcclxuICAgICAgICAgICAgICA6IGRlZmF1bHRDYWNoZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNhY2hlKSB7XHJcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xyXG4gICAgICAgIGlmIChpc0RlZmluZWQoY2FjaGVkUmVzcCkpIHtcclxuICAgICAgICAgIGlmIChjYWNoZWRSZXNwLnRoZW4pIHtcclxuICAgICAgICAgICAgLy8gY2FjaGVkIHJlcXVlc3QgaGFzIGFscmVhZHkgYmVlbiBzZW50LCBidXQgdGhlcmUgaXMgbm8gcmVzcG9uc2UgeWV0XHJcbiAgICAgICAgICAgIGNhY2hlZFJlc3AudGhlbihyZW1vdmVQZW5kaW5nUmVxLCByZW1vdmVQZW5kaW5nUmVxKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFJlc3A7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzZXJ2aW5nIGZyb20gY2FjaGVcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoY2FjaGVkUmVzcCkpIHtcclxuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBjb3B5KGNhY2hlZFJlc3BbMl0pKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBwdXQgdGhlIHByb21pc2UgZm9yIHRoZSBub24tdHJhbnNmb3JtZWQgcmVzcG9uc2UgaW50byBjYWNoZSBhcyBhIHBsYWNlaG9sZGVyXHJcbiAgICAgICAgICBjYWNoZS5wdXQodXJsLCBwcm9taXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIHdlIHdvbid0IGhhdmUgdGhlIHJlc3BvbnNlIGluIGNhY2hlLCBzZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBiYWNrZW5kXHJcbiAgICAgIGlmIChpc1VuZGVmaW5lZChjYWNoZWRSZXNwKSkge1xyXG4gICAgICAgICRodHRwQmFja2VuZChjb25maWcubWV0aG9kLCB1cmwsIHJlcURhdGEsIGRvbmUsIHJlcUhlYWRlcnMsIGNvbmZpZy50aW1lb3V0LFxyXG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzLCBjb25maWcucmVzcG9uc2VUeXBlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHByb21pc2U7XHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XHJcbiAgICAgICAqICAtIGNhY2hlcyB0aGUgcmVzcG9uc2UgaWYgZGVzaXJlZFxyXG4gICAgICAgKiAgLSByZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2VcclxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiBkb25lKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpIHtcclxuICAgICAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgICAgIGlmIChpc1N1Y2Nlc3Moc3RhdHVzKSkge1xyXG4gICAgICAgICAgICBjYWNoZS5wdXQodXJsLCBbc3RhdHVzLCByZXNwb25zZSwgcGFyc2VIZWFkZXJzKGhlYWRlcnNTdHJpbmcpXSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvbWlzZSBmcm9tIHRoZSBjYWNoZVxyXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnNTdHJpbmcpO1xyXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZS5cclxuICAgICAgICovXHJcbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcclxuICAgICAgICAvLyBub3JtYWxpemUgaW50ZXJuYWwgc3RhdHVzZXMgdG8gMFxyXG4gICAgICAgIHN0YXR1cyA9IE1hdGgubWF4KHN0YXR1cywgMCk7XHJcblxyXG4gICAgICAgIChpc1N1Y2Nlc3Moc3RhdHVzKSA/IGRlZmVycmVkLnJlc29sdmUgOiBkZWZlcnJlZC5yZWplY3QpKHtcclxuICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxyXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXHJcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpLFxyXG4gICAgICAgICAgY29uZmlnOiBjb25maWdcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJlbW92ZVBlbmRpbmdSZXEoKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IGluZGV4T2YoJGh0dHAucGVuZGluZ1JlcXVlc3RzLCBjb25maWcpO1xyXG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gYnVpbGRVcmwodXJsLCBwYXJhbXMpIHtcclxuICAgICAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gdXJsO1xyXG4gICAgICAgICAgdmFyIHBhcnRzID0gW107XHJcbiAgICAgICAgICBmb3JFYWNoU29ydGVkKHBhcmFtcywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkgdmFsdWUgPSBbdmFsdWVdO1xyXG5cclxuICAgICAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICAgIGlmIChpc09iamVjdCh2KSkge1xyXG4gICAgICAgICAgICAgICAgdiA9IHRvSnNvbih2KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICsgJz0nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVyaVF1ZXJ5KHYpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiB1cmwgKyAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHBhcnRzLmpvaW4oJyYnKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICB9XTtcclxufVxyXG5cclxudmFyIFhIUiA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCB8fCBmdW5jdGlvbigpIHtcclxuICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoXCJNc3htbDIuWE1MSFRUUC42LjBcIik7IH0gY2F0Y2ggKGUxKSB7fVxyXG4gIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChcIk1zeG1sMi5YTUxIVFRQLjMuMFwiKTsgfSBjYXRjaCAoZTIpIHt9XHJcbiAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KFwiTXN4bWwyLlhNTEhUVFBcIik7IH0gY2F0Y2ggKGUzKSB7fVxyXG4gIHRocm93IG1pbkVycignJGh0dHBCYWNrZW5kJykoJ25veGhyJywgXCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdC5cIik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGh0dHBCYWNrZW5kXHJcbiAqIEByZXF1aXJlcyAkYnJvd3NlclxyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xyXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXHJcbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxyXG4gKlxyXG4gKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XHJcbiAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXHJcbiAqXHJcbiAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcclxuICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cclxuICovXHJcbmZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xyXG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkYnJvd3NlciwgJHdpbmRvdywgJGRvY3VtZW50KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIFhIUiwgJGJyb3dzZXIuZGVmZXIsICR3aW5kb3cuYW5ndWxhci5jYWxsYmFja3MsXHJcbiAgICAgICAgJGRvY3VtZW50WzBdLCAkd2luZG93LmxvY2F0aW9uLnByb3RvY29sLnJlcGxhY2UoJzonLCAnJykpO1xyXG4gIH1dO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVIdHRwQmFja2VuZCgkYnJvd3NlciwgWEhSLCAkYnJvd3NlckRlZmVyLCBjYWxsYmFja3MsIHJhd0RvY3VtZW50LCBsb2NhdGlvblByb3RvY29sKSB7XHJcbiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUpIHtcclxuICAgIHZhciBzdGF0dXM7XHJcbiAgICAkYnJvd3Nlci4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7XHJcbiAgICB1cmwgPSB1cmwgfHwgJGJyb3dzZXIudXJsKCk7XHJcblxyXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09ICdqc29ucCcpIHtcclxuICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLmNvdW50ZXIrKykudG9TdHJpbmcoMzYpO1xyXG4gICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0gPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEgPSBkYXRhO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGpzb25wRG9uZSA9IGpzb25wUmVxKHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgJ2FuZ3VsYXIuY2FsbGJhY2tzLicgKyBjYWxsYmFja0lkKSxcclxuICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSkge1xyXG4gICAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCAyMDAsIGNhbGxiYWNrc1tjYWxsYmFja0lkXS5kYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMgfHwgLTIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NhbGxiYWNrSWRdO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciB4aHIgPSBuZXcgWEhSKCk7XHJcbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcclxuICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBJbiBJRTYgYW5kIDcsIHRoaXMgbWlnaHQgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHkgd2hlbiB4aHIuc2VuZCBiZWxvdyBpcyBjYWxsZWQgYW5kIHRoZVxyXG4gICAgICAvLyByZXNwb25zZSBpcyBpbiB0aGUgY2FjaGUuIHRoZSBwcm9taXNlIGFwaSB3aWxsIGVuc3VyZSB0aGF0IHRvIHRoZSBhcHAgY29kZSB0aGUgYXBpIGlzXHJcbiAgICAgIC8vIGFsd2F5cyBhc3luY1xyXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcclxuICAgICAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7XHJcblxyXG4gICAgICAgICAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSBvbmNlIEZpcmVmb3ggMjEgZ2V0cyByZWxlYXNlZC5cclxuICAgICAgICAgIC8vIGJlZ2luOiB3b3JrYXJvdW5kIHRvIG92ZXJjb21lIEZpcmVmb3ggQ09SUyBodHRwIHJlc3BvbnNlIGhlYWRlcnMgYnVnXHJcbiAgICAgICAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MDg3MzVcclxuICAgICAgICAgIC8vIEZpcmVmb3ggYWxyZWFkeSBwYXRjaGVkIGluIG5pZ2h0bHkuIFNob3VsZCBsYW5kIGluIEZpcmVmb3ggMjEuXHJcblxyXG4gICAgICAgICAgLy8gQ09SUyBcInNpbXBsZSByZXNwb25zZSBoZWFkZXJzXCIgaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy9cclxuICAgICAgICAgIHZhciB2YWx1ZSxcclxuICAgICAgICAgICAgICBzaW1wbGVIZWFkZXJzID0gW1wiQ2FjaGUtQ29udHJvbFwiLCBcIkNvbnRlbnQtTGFuZ3VhZ2VcIiwgXCJDb250ZW50LVR5cGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRXhwaXJlc1wiLCBcIkxhc3QtTW9kaWZpZWRcIiwgXCJQcmFnbWFcIl07XHJcbiAgICAgICAgICBpZiAoIXJlc3BvbnNlSGVhZGVycykge1xyXG4gICAgICAgICAgICByZXNwb25zZUhlYWRlcnMgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3JFYWNoKHNpbXBsZUhlYWRlcnMsIGZ1bmN0aW9uIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTtcclxuICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2VIZWFkZXJzICs9IGhlYWRlciArIFwiOiBcIiArIHZhbHVlICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gZW5kIG9mIHRoZSB3b3JrYXJvdW5kLlxyXG5cclxuICAgICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOCAmIDkpXHJcbiAgICAgICAgICAvLyByZXNwb25zZSBhbmQgcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXHJcbiAgICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssXHJcbiAgICAgICAgICAgICAgc3RhdHVzIHx8IHhoci5zdGF0dXMsXHJcbiAgICAgICAgICAgICAgKHhoci5yZXNwb25zZVR5cGUgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0KSxcclxuICAgICAgICAgICAgICByZXNwb25zZUhlYWRlcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcclxuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlc3BvbnNlVHlwZSkge1xyXG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHhoci5zZW5kKHBvc3QgfHwgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aW1lb3V0ID4gMCkge1xyXG4gICAgICB2YXIgdGltZW91dElkID0gJGJyb3dzZXJEZWZlcih0aW1lb3V0UmVxdWVzdCwgdGltZW91dCk7XHJcbiAgICB9IGVsc2UgaWYgKHRpbWVvdXQgJiYgdGltZW91dC50aGVuKSB7XHJcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHRpbWVvdXRSZXF1ZXN0KCkge1xyXG4gICAgICBzdGF0dXMgPSAtMTtcclxuICAgICAganNvbnBEb25lICYmIGpzb25wRG9uZSgpO1xyXG4gICAgICB4aHIgJiYgeGhyLmFib3J0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLCBzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nKSB7XHJcbiAgICAgIC8vIFVSTF9NQVRDSCBpcyBkZWZpbmVkIGluIHNyYy9zZXJ2aWNlL2xvY2F0aW9uLmpzXHJcbiAgICAgIHZhciBwcm90b2NvbCA9ICh1cmwubWF0Y2goU0VSVkVSX01BVENIKSB8fCBbJycsIGxvY2F0aW9uUHJvdG9jb2xdKVsxXTtcclxuXHJcbiAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzdWJzZXF1ZW50IHRpbWVvdXQgcHJvbWlzZSByZXNvbHV0aW9uXHJcbiAgICAgIHRpbWVvdXRJZCAmJiAkYnJvd3NlckRlZmVyLmNhbmNlbCh0aW1lb3V0SWQpO1xyXG4gICAgICBqc29ucERvbmUgPSB4aHIgPSBudWxsO1xyXG5cclxuICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIGZvciBmaWxlIHByb3RvY29sIChpdCdzIGFsd2F5cyAwKVxyXG4gICAgICBzdGF0dXMgPSAocHJvdG9jb2wgPT0gJ2ZpbGUnKSA/IChyZXNwb25zZSA/IDIwMCA6IDQwNCkgOiBzdGF0dXM7XHJcblxyXG4gICAgICAvLyBub3JtYWxpemUgSUUgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxyXG4gICAgICBzdGF0dXMgPSBzdGF0dXMgPT0gMTIyMyA/IDIwNCA6IHN0YXR1cztcclxuXHJcbiAgICAgIGNhbGxiYWNrKHN0YXR1cywgcmVzcG9uc2UsIGhlYWRlcnNTdHJpbmcpO1xyXG4gICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGpzb25wUmVxKHVybCwgZG9uZSkge1xyXG4gICAgLy8gd2UgY2FuJ3QgdXNlIGpRdWVyeS9qcUxpdGUgaGVyZSBiZWNhdXNlIGpRdWVyeSBkb2VzIGNyYXp5IHNoaXQgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46XHJcbiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtXHJcbiAgICAvLyAtIGFkZHMgYW5kIGltbWVkaWF0ZWx5IHJlbW92ZXMgc2NyaXB0IGVsZW1lbnRzIGZyb20gdGhlIGRvY3VtZW50XHJcbiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksXHJcbiAgICAgICAgZG9uZVdyYXBwZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJhd0RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcclxuICAgICAgICAgIGlmIChkb25lKSBkb25lKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgc2NyaXB0LnNyYyA9IHVybDtcclxuXHJcbiAgICBpZiAobXNpZSkge1xyXG4gICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKC9sb2FkZWR8Y29tcGxldGUvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSBkb25lV3JhcHBlcigpO1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbmVycm9yID0gZG9uZVdyYXBwZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgcmV0dXJuIGRvbmVXcmFwcGVyO1xyXG4gIH1cclxufVxyXG5cclxudmFyICRpbnRlcnBvbGF0ZU1pbkVyciA9IG1pbkVycignJGludGVycG9sYXRlJyk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGVQcm92aWRlclxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBpbnRlcnBvbGF0aW9uIG1hcmt1cC4gRGVmYXVsdHMgdG8gYHt7YCBhbmQgYH19YC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlIG1vZHVsZT1cImN1c3RvbUludGVycG9sYXRpb25BcHBcIj5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgPHNjcmlwdD5cclxuICAgICAgICB2YXIgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjdXN0b21JbnRlcnBvbGF0aW9uQXBwJywgW10pO1xyXG5cclxuICAgICAgICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbmZpZyhmdW5jdGlvbigkaW50ZXJwb2xhdGVQcm92aWRlcikge1xyXG4gICAgICAgICAgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2woJy8vJyk7XHJcbiAgICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJy8vJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbnRyb2xsZXIoJ0RlbW9Db250cm9sbGVyJywgZnVuY3Rpb24gRGVtb0NvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBcIlRoaXMgYmluZGluZ3MgaXMgYnJvdWdodCB5b3UgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy5cIjtcclxuICAgICAgICB9KTtcclxuICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgIDxkaXYgbmctYXBwPVwiQXBwXCIgbmctY29udHJvbGxlcj1cIkRlbW9Db250cm9sbGVyIGFzIGRlbW9cIj5cclxuICAgICAgICAgIC8vZGVtby5sYWJlbC8vXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2RlbW8ubGFiZWwnKSkudG9CZSgnVGhpcyBiaW5kaW5ncyBpcyBicm91Z2h0IHlvdSB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLicpO1xyXG4gICAgICAgfSk7XHJcbiA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuICovXHJcbmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkge1xyXG4gIHZhciBzdGFydFN5bWJvbCA9ICd7eyc7XHJcbiAgdmFyIGVuZFN5bWJvbCA9ICd9fSc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxyXG4gICAqIEBtZXRob2RPZiBuZy4kaW50ZXJwb2xhdGVQcm92aWRlclxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFN5bWJvbCB0byBkZW5vdGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLlxyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8c2VsZn0gUmV0dXJucyB0aGUgc3ltYm9sIHdoZW4gdXNlZCBhcyBnZXR0ZXIgYW5kIHNlbGYgaWYgdXNlZCBhcyBzZXR0ZXIuXHJcbiAgICovXHJcbiAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKXtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBzdGFydFN5bWJvbCA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sXHJcbiAgICogQG1ldGhvZE9mIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIGVuZGluZyBzeW1ib2wgdG8uXHJcbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cclxuICAgKi9cclxuICB0aGlzLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKXtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBlbmRTeW1ib2wgPSB2YWx1ZTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZW5kU3ltYm9sO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckc2NlJywgZnVuY3Rpb24oJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkge1xyXG4gICAgdmFyIHN0YXJ0U3ltYm9sTGVuZ3RoID0gc3RhcnRTeW1ib2wubGVuZ3RoLFxyXG4gICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGg7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQHJlcXVpcmVzICRwYXJzZVxyXG4gICAgICogQHJlcXVpcmVzICRzY2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqXHJcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxyXG4gICAgICogSFRNTCB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9IHNlcnZpY2UgZm9yIGRhdGEgYmluZGluZy4gU2VlXHJcbiAgICAgKiB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIgJGludGVycG9sYXRlUHJvdmlkZXJ9IGZvciBjb25maWd1cmluZyB0aGVcclxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgICA8cHJlPlxyXG4gICAgICAgICB2YXIgJGludGVycG9sYXRlID0gLi4uOyAvLyBpbmplY3RlZFxyXG4gICAgICAgICB2YXIgZXhwID0gJGludGVycG9sYXRlKCdIZWxsbyB7e25hbWV9fSEnKTtcclxuICAgICAgICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KS50b0VxdWFsKCdIZWxsbyBBbmd1bGFyIScpO1xyXG4gICAgICAgPC9wcmU+XHJcbiAgICAgKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHdpdGggbWFya3VwIHRvIGludGVycG9sYXRlLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZVxyXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vXHJcbiAgICAgKiAgICBlbWJlZGRlZCBleHByZXNzaW9uIHdpbGwgcmV0dXJuIG51bGwgZm9yIHRoZSBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cnVzdGVkQ29udGV4dCB3aGVuIHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcGFzc2VzIHRoZSBpbnRlcnBvbGF0ZWRcclxuICAgICAqICAgIHJlc3VsdCB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCxcclxuICAgICAqICAgIHRydXN0ZWRDb250ZXh0KX0gYmVmb3JlIHJldHVybmluZyBpdC4gIFJlZmVyIHRvIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlIHRoYXRcclxuICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGUgaW50ZXJwb2xhdGVkXHJcbiAgICAgKiAgICBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczpcclxuICAgICAqXHJcbiAgICAgKiAgICAqIGBjb250ZXh0YDogYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzIGFyZSBldmFsdWF0ZWRcclxuICAgICAqICAgICAgYWdhaW5zdC5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uICRpbnRlcnBvbGF0ZSh0ZXh0LCBtdXN0SGF2ZUV4cHJlc3Npb24sIHRydXN0ZWRDb250ZXh0KSB7XHJcbiAgICAgIHZhciBzdGFydEluZGV4LFxyXG4gICAgICAgICAgZW5kSW5kZXgsXHJcbiAgICAgICAgICBpbmRleCA9IDAsXHJcbiAgICAgICAgICBwYXJ0cyA9IFtdLFxyXG4gICAgICAgICAgbGVuZ3RoID0gdGV4dC5sZW5ndGgsXHJcbiAgICAgICAgICBoYXNJbnRlcnBvbGF0aW9uID0gZmFsc2UsXHJcbiAgICAgICAgICBmbixcclxuICAgICAgICAgIGV4cCxcclxuICAgICAgICAgIGNvbmNhdCA9IFtdO1xyXG5cclxuICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpIHtcclxuICAgICAgICBpZiAoICgoc3RhcnRJbmRleCA9IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCwgaW5kZXgpKSAhPSAtMSkgJiZcclxuICAgICAgICAgICAgICgoZW5kSW5kZXggPSB0ZXh0LmluZGV4T2YoZW5kU3ltYm9sLCBzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgpKSAhPSAtMSkgKSB7XHJcbiAgICAgICAgICAoaW5kZXggIT0gc3RhcnRJbmRleCkgJiYgcGFydHMucHVzaCh0ZXh0LnN1YnN0cmluZyhpbmRleCwgc3RhcnRJbmRleCkpO1xyXG4gICAgICAgICAgcGFydHMucHVzaChmbiA9ICRwYXJzZShleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KSkpO1xyXG4gICAgICAgICAgZm4uZXhwID0gZXhwO1xyXG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcclxuICAgICAgICAgIGhhc0ludGVycG9sYXRpb24gPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyB3ZSBkaWQgbm90IGZpbmQgYW55dGhpbmcsIHNvIHdlIGhhdmUgdG8gYWRkIHRoZSByZW1haW5kZXIgdG8gdGhlIHBhcnRzIGFycmF5XHJcbiAgICAgICAgICAoaW5kZXggIT0gbGVuZ3RoKSAmJiBwYXJ0cy5wdXNoKHRleHQuc3Vic3RyaW5nKGluZGV4KSk7XHJcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghKGxlbmd0aCA9IHBhcnRzLmxlbmd0aCkpIHtcclxuICAgICAgICAvLyB3ZSBhZGRlZCwgbm90aGluZywgbXVzdCBoYXZlIGJlZW4gYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICAgIHBhcnRzLnB1c2goJycpO1xyXG4gICAgICAgIGxlbmd0aCA9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mIGNvbmNhdGVuYXRlZFxyXG4gICAgICAvLyB2YWx1ZXMgYXJlIHVuc2FmZSB0byB1c2UgYW5kIGNvdWxkIGVhc2lseSBsZWFkIHRvIFhTUy4gIEJ5IHJlcXVpcmluZyB0aGF0IGEgc2luZ2xlXHJcbiAgICAgIC8vIGV4cHJlc3Npb24gYmUgdXNlZCBmb3IgaWZyYW1lW3NyY10sIG9iamVjdFtzcmNdLCBldGMuLCB3ZSBlbnN1cmUgdGhhdCB0aGUgdmFsdWUgdGhhdCdzIHVzZWRcclxuICAgICAgLy8gaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3IgbWFrZSBpdFxyXG4gICAgICAvLyBvYnZpb3VzIHRoYXQgeW91IGJvdW5kIHRoZSB2YWx1ZSB0byBzb21lIHVzZXIgY29udHJvbGxlZCB2YWx1ZS4gIFRoaXMgaGVscHMgcmVkdWNlIHRoZSBsb2FkXHJcbiAgICAgIC8vIHdoZW4gYXVkaXRpbmcgZm9yIFhTUyBpc3N1ZXMuXHJcbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBwYXJ0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICB0aHJvdyAkaW50ZXJwb2xhdGVNaW5FcnIoJ25vY29uY2F0JyxcclxuICAgICAgICAgICAgICBcIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyBcIiArXHJcbiAgICAgICAgICAgICAgXCJpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzIFwiICtcclxuICAgICAgICAgICAgICBcInJlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2VcIiwgdGV4dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghbXVzdEhhdmVFeHByZXNzaW9uICB8fCBoYXNJbnRlcnBvbGF0aW9uKSB7XHJcbiAgICAgICAgY29uY2F0Lmxlbmd0aCA9IGxlbmd0aDtcclxuICAgICAgICBmbiA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGlpID0gbGVuZ3RoLCBwYXJ0OyBpPGlpOyBpKyspIHtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIChwYXJ0ID0gcGFydHNbaV0pID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0KGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRydXN0ZWRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgIHBhcnQgPSAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHBhcnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgcGFydCA9ICRzY2UudmFsdWVPZihwYXJ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09IG51bGwgfHwgcGFydCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgcGFydCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFydCAhPSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICBwYXJ0ID0gdG9Kc29uKHBhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25jYXRbaV0gPSBwYXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0VyciA9ICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgXCJDYW4ndCBpbnRlcnBvbGF0ZTogezB9XFxuezF9XCIsIHRleHQsIGVyci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIobmV3RXJyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZuLmV4cCA9IHRleHQ7XHJcbiAgICAgICAgZm4ucGFydHMgPSBwYXJ0cztcclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2xcclxuICAgICAqIEBtZXRob2RPZiBuZy4kaW50ZXJwb2xhdGVcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cclxuICAgICAqXHJcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sICRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sfSB0byBjaGFuZ2VcclxuICAgICAqIHRoZSBzeW1ib2wuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxyXG4gICAgICovXHJcbiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRpbnRlcnBvbGF0ZSNlbmRTeW1ib2xcclxuICAgICAqIEBtZXRob2RPZiBuZy4kaW50ZXJwb2xhdGVcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXHJcbiAgICAgKlxyXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sfSB0byBjaGFuZ2VcclxuICAgICAqIHRoZSBzeW1ib2wuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxyXG4gICAgICovXHJcbiAgICAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZTtcclxuICB9XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGxvY2FsZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGVcclxuICogb25seSBwdWJsaWMgYXBpIGlzOlxyXG4gKlxyXG4gKiAqIGBpZGAgw6LigqzigJwgYHtzdHJpbmd9YCDDouKCrOKAnCBsb2NhbGUgaWQgZm9ybWF0dGVkIGFzIGBsYW5ndWFnZUlkLWNvdW50cnlJZGAgKGUuZy4gYGVuLXVzYClcclxuICovXHJcbmZ1bmN0aW9uICRMb2NhbGVQcm92aWRlcigpe1xyXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaWQ6ICdlbi11cycsXHJcblxyXG4gICAgICBOVU1CRVJfRk9STUFUUzoge1xyXG4gICAgICAgIERFQ0lNQUxfU0VQOiAnLicsXHJcbiAgICAgICAgR1JPVVBfU0VQOiAnLCcsXHJcbiAgICAgICAgUEFUVEVSTlM6IFtcclxuICAgICAgICAgIHsgLy8gRGVjaW1hbCBQYXR0ZXJuXHJcbiAgICAgICAgICAgIG1pbkludDogMSxcclxuICAgICAgICAgICAgbWluRnJhYzogMCxcclxuICAgICAgICAgICAgbWF4RnJhYzogMyxcclxuICAgICAgICAgICAgcG9zUHJlOiAnJyxcclxuICAgICAgICAgICAgcG9zU3VmOiAnJyxcclxuICAgICAgICAgICAgbmVnUHJlOiAnLScsXHJcbiAgICAgICAgICAgIG5lZ1N1ZjogJycsXHJcbiAgICAgICAgICAgIGdTaXplOiAzLFxyXG4gICAgICAgICAgICBsZ1NpemU6IDNcclxuICAgICAgICAgIH0seyAvL0N1cnJlbmN5IFBhdHRlcm5cclxuICAgICAgICAgICAgbWluSW50OiAxLFxyXG4gICAgICAgICAgICBtaW5GcmFjOiAyLFxyXG4gICAgICAgICAgICBtYXhGcmFjOiAyLFxyXG4gICAgICAgICAgICBwb3NQcmU6ICdcXHUwMEE0JyxcclxuICAgICAgICAgICAgcG9zU3VmOiAnJyxcclxuICAgICAgICAgICAgbmVnUHJlOiAnKFxcdTAwQTQnLFxyXG4gICAgICAgICAgICBuZWdTdWY6ICcpJyxcclxuICAgICAgICAgICAgZ1NpemU6IDMsXHJcbiAgICAgICAgICAgIGxnU2l6ZTogM1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCdcclxuICAgICAgfSxcclxuXHJcbiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHtcclxuICAgICAgICBNT05USDogJ0phbnVhcnksRmVicnVhcnksTWFyY2gsQXByaWwsTWF5LEp1bmUsSnVseSxBdWd1c3QsU2VwdGVtYmVyLE9jdG9iZXIsTm92ZW1iZXIsRGVjZW1iZXInXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoJywnKSxcclxuICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxyXG4gICAgICAgIERBWTogJ1N1bmRheSxNb25kYXksVHVlc2RheSxXZWRuZXNkYXksVGh1cnNkYXksRnJpZGF5LFNhdHVyZGF5Jy5zcGxpdCgnLCcpLFxyXG4gICAgICAgIFNIT1JUREFZOiAnU3VuLE1vbixUdWUsV2VkLFRodSxGcmksU2F0Jy5zcGxpdCgnLCcpLFxyXG4gICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSxcclxuICAgICAgICBtZWRpdW06ICdNTU0gZCwgeSBoOm1tOnNzIGEnLFxyXG4gICAgICAgIHNob3J0OiAnTS9kL3l5IGg6bW0gYScsXHJcbiAgICAgICAgZnVsbERhdGU6ICdFRUVFLCBNTU1NIGQsIHknLFxyXG4gICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JyxcclxuICAgICAgICBtZWRpdW1EYXRlOiAnTU1NIGQsIHknLFxyXG4gICAgICAgIHNob3J0RGF0ZTogJ00vZC95eScsXHJcbiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsXHJcbiAgICAgICAgc2hvcnRUaW1lOiAnaDptbSBhJ1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcGx1cmFsQ2F0OiBmdW5jdGlvbihudW0pIHtcclxuICAgICAgICBpZiAobnVtID09PSAxKSB7XHJcbiAgICAgICAgICByZXR1cm4gJ29uZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnb3RoZXInO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH07XHJcbn1cclxuXHJcbnZhciBTRVJWRVJfTUFUQ0ggPSAvXihbXjpdKyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcez9bXFx3XFwuLV0qXFx9PykoOihbMC05XSspKT8oXFwvW15cXD8jXSopPyhcXD8oW14jXSopKT8oIyguKikpPyQvLFxyXG4gICAgUEFUSF9NQVRDSCA9IC9eKFteXFw/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvLFxyXG4gICAgREVGQVVMVF9QT1JUUyA9IHsnaHR0cCc6IDgwLCAnaHR0cHMnOiA0NDMsICdmdHAnOiAyMX07XHJcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBFbmNvZGUgcGF0aCB1c2luZyBlbmNvZGVVcmlTZWdtZW50LCBpZ25vcmluZyBmb3J3YXJkIHNsYXNoZXNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xyXG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy8nKSxcclxuICAgICAgaSA9IHNlZ21lbnRzLmxlbmd0aDtcclxuXHJcbiAgd2hpbGUgKGktLSkge1xyXG4gICAgc2VnbWVudHNbaV0gPSBlbmNvZGVVcmlTZWdtZW50KHNlZ21lbnRzW2ldKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBzZWdtZW50cy5qb2luKCcvJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hdGNoVXJsKHVybCwgb2JqKSB7XHJcbiAgdmFyIG1hdGNoID0gU0VSVkVSX01BVENILmV4ZWModXJsKTtcclxuXHJcbiAgb2JqLiQkcHJvdG9jb2wgPSBtYXRjaFsxXTtcclxuICBvYmouJCRob3N0ID0gbWF0Y2hbM107XHJcbiAgb2JqLiQkcG9ydCA9IGludChtYXRjaFs1XSkgfHwgREVGQVVMVF9QT1JUU1ttYXRjaFsxXV0gfHwgbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gbWF0Y2hBcHBVcmwodXJsLCBvYmopIHtcclxuICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWModXJsKTtcclxuXHJcbiAgb2JqLiQkcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSk7XHJcbiAgb2JqLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShtYXRjaFszXSk7XHJcbiAgb2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFs1XSB8fCAnJyk7XHJcblxyXG4gIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcclxuICBpZiAob2JqLiQkcGF0aCAmJiBvYmouJCRwYXRoLmNoYXJBdCgwKSAhPSAnLycpIG9iai4kJHBhdGggPSAnLycgKyBvYmouJCRwYXRoO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY29tcG9zZVByb3RvY29sSG9zdFBvcnQocHJvdG9jb2wsIGhvc3QsIHBvcnQpIHtcclxuICByZXR1cm4gcHJvdG9jb2wgKyAnOi8vJyArIGhvc3QgKyAocG9ydCA9PSBERUZBVUxUX1BPUlRTW3Byb3RvY29sXSA/ICcnIDogJzonICsgcG9ydCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYmVnaW5cclxuICogQHBhcmFtIHtzdHJpbmd9IHdob2xlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvdGhlcndpc2VcclxuICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0ZXh0IGZyb20gd2hvbGUgYWZ0ZXIgYmVnaW4gb3Igb3RoZXJ3aXNlIGlmIGl0IGRvZXMgbm90IGJlZ2luIHdpdGggZXhwZWN0ZWQgc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gYmVnaW5zV2l0aChiZWdpbiwgd2hvbGUsIG90aGVyd2lzZSkge1xyXG4gIHJldHVybiB3aG9sZS5pbmRleE9mKGJlZ2luKSA9PSAwID8gd2hvbGUuc3Vic3RyKGJlZ2luLmxlbmd0aCkgOiBvdGhlcndpc2U7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XHJcbiAgdmFyIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcclxuICByZXR1cm4gaW5kZXggPT0gLTEgPyB1cmwgOiB1cmwuc3Vic3RyKDAsIGluZGV4KTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHN0cmlwRmlsZSh1cmwpIHtcclxuICByZXR1cm4gdXJsLnN1YnN0cigwLCBzdHJpcEhhc2godXJsKS5sYXN0SW5kZXhPZignLycpICsgMSk7XHJcbn1cclxuXHJcbi8qIHJldHVybiB0aGUgc2VydmVyIG9ubHkgKHNjaGVtZTovL2hvc3Q6cG9ydCkgKi9cclxuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcclxuICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignLycsIHVybC5pbmRleE9mKCcvLycpICsgMikpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhbiB1cmxcclxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVByZWZpeCB1cmwgcGF0aCBwcmVmaXhcclxuICovXHJcbmZ1bmN0aW9uIExvY2F0aW9uSHRtbDVVcmwoYXBwQmFzZSwgYmFzZVByZWZpeCkge1xyXG4gIHRoaXMuJCRodG1sNSA9IHRydWU7XHJcbiAgYmFzZVByZWZpeCA9IGJhc2VQcmVmaXggfHwgJyc7XHJcbiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XHJcbiAgLyoqXHJcbiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0Fic29sdXRlVXJsIEhUTUw1IHVybFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XHJcbiAgICB2YXIgcGFyc2VkID0ge31cclxuICAgIG1hdGNoVXJsKHVybCwgcGFyc2VkKTtcclxuICAgIHZhciBwYXRoVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpO1xyXG4gICAgaWYgKCFpc1N0cmluZyhwYXRoVXJsKSkge1xyXG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsIGFwcEJhc2VOb0ZpbGUpO1xyXG4gICAgfVxyXG4gICAgbWF0Y2hBcHBVcmwocGF0aFVybCwgcGFyc2VkKTtcclxuICAgIGV4dGVuZCh0aGlzLCBwYXJzZWQpO1xyXG4gICAgaWYgKCF0aGlzLiQkcGF0aCkge1xyXG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiQkY29tcG9zZSgpO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXBvc2UgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcclxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xyXG5cclxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xyXG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXHJcbiAgfTtcclxuXHJcbiAgdGhpcy4kJHJld3JpdGUgPSBmdW5jdGlvbih1cmwpIHtcclxuICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XHJcblxyXG4gICAgaWYgKCAoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpKSAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xyXG4gICAgICBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGJhc2VQcmVmaXgsIGFwcFVybCkpICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgcmV0dXJuIGFwcEJhc2VOb0ZpbGUgKyAoYmVnaW5zV2l0aCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXBwQmFzZSArIHByZXZBcHBVcmw7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgIHJldHVybiBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xyXG4gICAgfSBlbHNlIGlmIChhcHBCYXNlTm9GaWxlID09IHVybCArICcvJykge1xyXG4gICAgICByZXR1cm4gYXBwQmFzZU5vRmlsZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogTG9jYXRpb25IYXNoYmFuZ1VybCByZXByZXNlbnRzIHVybFxyXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS5cclxuICogSXQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2UgY2xhc3MgZm9yIGh0bWw1IG1vZGUgZmFsbGJhY2sgb24gbGVnYWN5IGJyb3dzZXJzLlxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcclxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XHJcbiAqL1xyXG5mdW5jdGlvbiBMb2NhdGlvbkhhc2hiYW5nVXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHtcclxuICB2YXIgYXBwQmFzZU5vRmlsZSA9IHN0cmlwRmlsZShhcHBCYXNlKTtcclxuXHJcbiAgbWF0Y2hVcmwoYXBwQmFzZSwgdGhpcyk7XHJcblxyXG5cclxuICAvKipcclxuICAgKiBQYXJzZSBnaXZlbiBoYXNoYmFuZyB1cmwgaW50byBwcm9wZXJ0aWVzXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBIYXNoYmFuZyB1cmxcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIHRoaXMuJCRwYXJzZSA9IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpIHx8IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcclxuICAgIHZhciB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsLmNoYXJBdCgwKSA9PSAnIydcclxuICAgICAgICA/IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpXHJcbiAgICAgICAgOiAodGhpcy4kJGh0bWw1KVxyXG4gICAgICAgICAgPyB3aXRob3V0QmFzZVVybFxyXG4gICAgICAgICAgOiAnJztcclxuXHJcbiAgICBpZiAoIWlzU3RyaW5nKHdpdGhvdXRIYXNoVXJsKSkge1xyXG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2loc2hwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgaGFzaCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsIGhhc2hQcmVmaXgpO1xyXG4gICAgfVxyXG4gICAgbWF0Y2hBcHBVcmwod2l0aG91dEhhc2hVcmwsIHRoaXMpO1xyXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBDb21wb3NlIGhhc2hiYW5nIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXHJcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcclxuXHJcbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcclxuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgKHRoaXMuJCR1cmwgPyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTtcclxuICB9O1xyXG5cclxuICB0aGlzLiQkcmV3cml0ZSA9IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgaWYoc3RyaXBIYXNoKGFwcEJhc2UpID09IHN0cmlwSGFzaCh1cmwpKSB7XHJcbiAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmxcclxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIGh0bWw1IGhpc3RvcnkgYXBpIGlzIGVuYWJsZWQgYnV0IHRoZSBicm93c2VyXHJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXHJcbiAqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcclxuICovXHJcbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsKGFwcEJhc2UsIGhhc2hQcmVmaXgpIHtcclxuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xyXG4gIExvY2F0aW9uSGFzaGJhbmdVcmwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHJcbiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XHJcblxyXG4gIHRoaXMuJCRyZXdyaXRlID0gZnVuY3Rpb24odXJsKSB7XHJcbiAgICB2YXIgYXBwVXJsO1xyXG5cclxuICAgIGlmICggYXBwQmFzZSA9PSBzdHJpcEhhc2godXJsKSApIHtcclxuICAgICAgcmV0dXJuIHVybDtcclxuICAgIH0gZWxzZSBpZiAoIChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpICkge1xyXG4gICAgICByZXR1cm4gYXBwQmFzZSArIGhhc2hQcmVmaXggKyBhcHBVcmw7XHJcbiAgICB9IGVsc2UgaWYgKCBhcHBCYXNlTm9GaWxlID09PSB1cmwgKyAnLycpIHtcclxuICAgICAgcmV0dXJuIGFwcEJhc2VOb0ZpbGU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwucHJvdG90eXBlID1cclxuICBMb2NhdGlvbkhhc2hiYW5nVXJsLnByb3RvdHlwZSA9XHJcbiAgTG9jYXRpb25IdG1sNVVybC5wcm90b3R5cGUgPSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgJCRodG1sNTogZmFsc2UsXHJcblxyXG4gIC8qKlxyXG4gICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nID9cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gICQkcmVwbGFjZTogZmFsc2UsXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jYWJzVXJsXHJcbiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvblxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXHJcbiAgICpcclxuICAgKiBSZXR1cm4gZnVsbCB1cmwgcmVwcmVzZW50YXRpb24gd2l0aCBhbGwgc2VnbWVudHMgZW5jb2RlZCBhY2NvcmRpbmcgdG8gcnVsZXMgc3BlY2lmaWVkIGluXHJcbiAgICoge0BsaW5rIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IFJGQyAzOTg2fS5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCB1cmxcclxuICAgKi9cclxuICBhYnNVcmw6IGxvY2F0aW9uR2V0dGVyKCckJGFic1VybCcpLFxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICogQG5hbWUgbmcuJGxvY2F0aW9uI3VybFxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cclxuICAgKlxyXG4gICAqIFJldHVybiB1cmwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyB1cmwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVwbGFjZSBUaGUgcGF0aCB0aGF0IHdpbGwgYmUgY2hhbmdlZFxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdXJsXHJcbiAgICovXHJcbiAgdXJsOiBmdW5jdGlvbih1cmwsIHJlcGxhY2UpIHtcclxuICAgIGlmIChpc1VuZGVmaW5lZCh1cmwpKVxyXG4gICAgICByZXR1cm4gdGhpcy4kJHVybDtcclxuXHJcbiAgICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWModXJsKTtcclxuICAgIGlmIChtYXRjaFsxXSkgdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSkpO1xyXG4gICAgaWYgKG1hdGNoWzJdIHx8IG1hdGNoWzFdKSB0aGlzLnNlYXJjaChtYXRjaFszXSB8fCAnJyk7XHJcbiAgICB0aGlzLmhhc2gobWF0Y2hbNV0gfHwgJycsIHJlcGxhY2UpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcHJvdG9jb2xcclxuICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cclxuICAgKlxyXG4gICAqIFJldHVybiBwcm90b2NvbCBvZiBjdXJyZW50IHVybC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCB1cmxcclxuICAgKi9cclxuICBwcm90b2NvbDogbG9jYXRpb25HZXR0ZXIoJyQkcHJvdG9jb2wnKSxcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNob3N0XHJcbiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvblxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXHJcbiAgICpcclxuICAgKiBSZXR1cm4gaG9zdCBvZiBjdXJyZW50IHVybC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IHVybC5cclxuICAgKi9cclxuICBob3N0OiBsb2NhdGlvbkdldHRlcignJCRob3N0JyksXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcG9ydFxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxyXG4gICAqXHJcbiAgICogUmV0dXJuIHBvcnQgb2YgY3VycmVudCB1cmwuXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHBvcnRcclxuICAgKi9cclxuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcGF0aFxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cclxuICAgKlxyXG4gICAqIFJldHVybiBwYXRoIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cclxuICAgKlxyXG4gICAqIENoYW5nZSBwYXRoIHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXHJcbiAgICpcclxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcclxuICAgKiBpZiBpdCBpcyBtaXNzaW5nLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXRoIE5ldyBwYXRoXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBwYXRoXHJcbiAgICovXHJcbiAgcGF0aDogbG9jYXRpb25HZXR0ZXJTZXR0ZXIoJyQkcGF0aCcsIGZ1bmN0aW9uKHBhdGgpIHtcclxuICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcclxuICB9KSxcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNzZWFyY2hcclxuICAgKiBAbWV0aG9kT2YgbmcuJGxvY2F0aW9uXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXHJcbiAgICpcclxuICAgKiBSZXR1cm4gc2VhcmNoIHBhcnQgKGFzIG9iamVjdCkgb2YgY3VycmVudCB1cmwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogQ2hhbmdlIHNlYXJjaCBwYXJ0IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3QuPHN0cmluZz58T2JqZWN0LjxBcnJheS48c3RyaW5nPj59IHNlYXJjaCBOZXcgc2VhcmNoIHBhcmFtcyAtIHN0cmluZyBvciBoYXNoIG9iamVjdC4gSGFzaCBvYmplY3RcclxuICAgKiAgICBtYXkgY29udGFpbiBhbiBhcnJheSBvZiB2YWx1ZXMsIHdoaWNoIHdpbGwgYmUgZGVjb2RlZCBhcyBkdXBsaWNhdGVzIGluIHRoZSB1cmwuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nLCB0aGVuIGBwYXJhbVZhbHVlYCB3aWxsIG92ZXJyaWRlIG9ubHkgYVxyXG4gICAqICAgIHNpbmdsZSBzZWFyY2ggcGFyYW1ldGVyLiBJZiB0aGUgdmFsdWUgaXMgYG51bGxgLCB0aGUgcGFyYW1ldGVyIHdpbGwgYmUgZGVsZXRlZC5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gc2VhcmNoXHJcbiAgICovXHJcbiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHtcclxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJCRzZWFyY2g7XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAgICBpZiAoaXNTdHJpbmcoc2VhcmNoKSkge1xyXG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUoc2VhcmNoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNlYXJjaCkpIHtcclxuICAgICAgICAgIHRoaXMuJCRzZWFyY2ggPSBzZWFyY2g7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignaXNyY2hhcmcnLCAnVGhlIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgJGxvY2F0aW9uI3NlYXJjaCgpYCBjYWxsIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBpZiAocGFyYW1WYWx1ZSA9PSB1bmRlZmluZWQgfHwgcGFyYW1WYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy4kJHNlYXJjaFtzZWFyY2hdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiQkY29tcG9zZSgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAqIEBuYW1lIG5nLiRsb2NhdGlvbiNoYXNoXHJcbiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvblxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxyXG4gICAqXHJcbiAgICogUmV0dXJuIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxyXG4gICAqXHJcbiAgICogQ2hhbmdlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudFxyXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaGFzaFxyXG4gICAqL1xyXG4gIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBpZGVudGl0eSksXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBtZXRob2RcclxuICAgKiBAbmFtZSBuZy4kbG9jYXRpb24jcmVwbGFjZVxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyBjdXJyZW50IGAkZGlnZXN0YCB3aWxsIGJlIHJlcGxhY2luZyBjdXJyZW50IGhpc3RvcnlcclxuICAgKiByZWNvcmQsIGluc3RlYWQgb2YgYWRkaW5nIG5ldyBvbmUuXHJcbiAgICovXHJcbiAgcmVwbGFjZTogZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn07XHJcblxyXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcclxuICB9O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gbG9jYXRpb25HZXR0ZXJTZXR0ZXIocHJvcGVydHksIHByZXByb2Nlc3MpIHtcclxuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXHJcbiAgICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcclxuXHJcbiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xyXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGxvY2F0aW9uXHJcbiAqXHJcbiAqIEByZXF1aXJlcyAkYnJvd3NlclxyXG4gKiBAcmVxdWlyZXMgJHNuaWZmZXJcclxuICogQHJlcXVpcmVzICRyb290RWxlbWVudFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlICRsb2NhdGlvbiBzZXJ2aWNlIHBhcnNlcyB0aGUgVVJMIGluIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyIChiYXNlZCBvbiB0aGVcclxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL3dpbmRvdy5sb2NhdGlvbiB3aW5kb3cubG9jYXRpb259KSBhbmQgbWFrZXMgdGhlIFVSTFxyXG4gKiBhdmFpbGFibGUgdG8geW91ciBhcHBsaWNhdGlvbi4gQ2hhbmdlcyB0byB0aGUgVVJMIGluIHRoZSBhZGRyZXNzIGJhciBhcmUgcmVmbGVjdGVkIGludG9cclxuICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci5cclxuICpcclxuICogKipUaGUgJGxvY2F0aW9uIHNlcnZpY2U6KipcclxuICpcclxuICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhblxyXG4gKiAgIC0gV2F0Y2ggYW5kIG9ic2VydmUgdGhlIFVSTC5cclxuICogICAtIENoYW5nZSB0aGUgVVJMLlxyXG4gKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlclxyXG4gKiAgIC0gQ2hhbmdlcyB0aGUgYWRkcmVzcyBiYXIuXHJcbiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuXHJcbiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLlxyXG4gKiAtIFJlcHJlc2VudHMgdGhlIFVSTCBvYmplY3QgYXMgYSBzZXQgb2YgbWV0aG9kcyAocHJvdG9jb2wsIGhvc3QsIHBvcnQsIHBhdGgsIHNlYXJjaCwgaGFzaCkuXHJcbiAqXHJcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvZGV2X2d1aWRlLnNlcnZpY2VzLiRsb2NhdGlvbiBEZXZlbG9wZXIgR3VpZGU6IEFuZ3VsYXJcclxuICogU2VydmljZXM6IFVzaW5nICRsb2NhdGlvbn1cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kbG9jYXRpb25Qcm92aWRlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLlxyXG4gKi9cclxuZnVuY3Rpb24gJExvY2F0aW9uUHJvdmlkZXIoKXtcclxuICB2YXIgaGFzaFByZWZpeCA9ICcnLFxyXG4gICAgICBodG1sNU1vZGUgPSBmYWxzZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmcuJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeFxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9jYXRpb25Qcm92aWRlclxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcHJlZml4IFByZWZpeCBmb3IgaGFzaCBwYXJ0IChjb250YWluaW5nIHBhdGggYW5kIHNlYXJjaClcclxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxyXG4gICAqL1xyXG4gIHRoaXMuaGFzaFByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkge1xyXG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XHJcbiAgICAgIGhhc2hQcmVmaXggPSBwcmVmaXg7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGhhc2hQcmVmaXg7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmcuJGxvY2F0aW9uUHJvdmlkZXIjaHRtbDVNb2RlXHJcbiAgICogQG1ldGhvZE9mIG5nLiRsb2NhdGlvblByb3ZpZGVyXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtb2RlIFVzZSBIVE1MNSBzdHJhdGVneSBpZiBhdmFpbGFibGUuXHJcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcclxuICAgKi9cclxuICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcclxuICAgIGlmIChpc0RlZmluZWQobW9kZSkpIHtcclxuICAgICAgaHRtbDVNb2RlID0gbW9kZTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckc25pZmZlcicsICckcm9vdEVsZW1lbnQnLFxyXG4gICAgICBmdW5jdGlvbiggJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkc25pZmZlciwgICAkcm9vdEVsZW1lbnQpIHtcclxuICAgIHZhciAkbG9jYXRpb24sXHJcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxyXG4gICAgICAgIGJhc2VIcmVmID0gJGJyb3dzZXIuYmFzZUhyZWYoKSwgLy8gaWYgYmFzZVtocmVmXSBpcyB1bmRlZmluZWQsIGl0IGRlZmF1bHRzIHRvICcnXHJcbiAgICAgICAgaW5pdGlhbFVybCA9ICRicm93c2VyLnVybCgpLFxyXG4gICAgICAgIGFwcEJhc2U7XHJcblxyXG4gICAgaWYgKGh0bWw1TW9kZSkge1xyXG4gICAgICBhcHBCYXNlID0gc2VydmVyQmFzZShpbml0aWFsVXJsKSArIChiYXNlSHJlZiB8fCAnLycpO1xyXG4gICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXBwQmFzZSA9IHN0cmlwSGFzaChpbml0aWFsVXJsKTtcclxuICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcclxuICAgIH1cclxuICAgICRsb2NhdGlvbiA9IG5ldyBMb2NhdGlvbk1vZGUoYXBwQmFzZSwgJyMnICsgaGFzaFByZWZpeCk7XHJcbiAgICAkbG9jYXRpb24uJCRwYXJzZSgkbG9jYXRpb24uJCRyZXdyaXRlKGluaXRpYWxVcmwpKTtcclxuXHJcbiAgICAkcm9vdEVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgLy8gVE9ETyh2b2p0YSk6IHJld3JpdGUgbGluayB3aGVuIG9wZW5pbmcgaW4gbmV3IHRhYi93aW5kb3cgKGluIGxlZ2FjeSBicm93c2VyKVxyXG4gICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuXHJcblxyXG4gICAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LndoaWNoID09IDIpIHJldHVybjtcclxuXHJcbiAgICAgIHZhciBlbG0gPSBqcUxpdGUoZXZlbnQudGFyZ2V0KTtcclxuXHJcbiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZ1xyXG4gICAgICB3aGlsZSAobG93ZXJjYXNlKGVsbVswXS5ub2RlTmFtZSkgIT09ICdhJykge1xyXG4gICAgICAgIC8vIGlnbm9yZSByZXdyaXRpbmcgaWYgbm8gQSB0YWcgKHJlYWNoZWQgcm9vdCBlbGVtZW50LCBvciBubyBwYXJlbnQgLSByZW1vdmVkIGZyb20gZG9jdW1lbnQpXHJcbiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7XHJcbiAgICAgIHZhciByZXdyaXR0ZW5VcmwgPSAkbG9jYXRpb24uJCRyZXdyaXRlKGFic0hyZWYpO1xyXG5cclxuICAgICAgaWYgKGFic0hyZWYgJiYgIWVsbS5hdHRyKCd0YXJnZXQnKSAmJiByZXdyaXR0ZW5VcmwgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAocmV3cml0dGVuVXJsICE9ICRicm93c2VyLnVybCgpKSB7XHJcbiAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHlcclxuICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKHJld3JpdHRlblVybCk7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3NcclxuICAgICAgICAgIHdpbmRvdy5hbmd1bGFyWydmZi02ODQyMDgtcHJldmVudERlZmF1bHQnXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXHJcbiAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9IGluaXRpYWxVcmwpIHtcclxuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzXHJcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwpIHtcclxuICAgICAgaWYgKCRsb2NhdGlvbi5hYnNVcmwoKSAhPSBuZXdVcmwpIHtcclxuICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgJGxvY2F0aW9uLmFic1VybCgpKS5kZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdmFyIG9sZFVybCA9ICRsb2NhdGlvbi5hYnNVcmwoKTtcclxuXHJcbiAgICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xyXG4gICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcclxuICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMDtcclxuICAgICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uICRsb2NhdGlvbldhdGNoKCkge1xyXG4gICAgICB2YXIgb2xkVXJsID0gJGJyb3dzZXIudXJsKCk7XHJcbiAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7XHJcblxyXG4gICAgICBpZiAoIWNoYW5nZUNvdW50ZXIgfHwgb2xkVXJsICE9ICRsb2NhdGlvbi5hYnNVcmwoKSkge1xyXG4gICAgICAgIGNoYW5nZUNvdW50ZXIrKztcclxuICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsKS5cclxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkYnJvd3Nlci51cmwoJGxvY2F0aW9uLmFic1VybCgpLCBjdXJyZW50UmVwbGFjZSk7XHJcbiAgICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7XHJcblxyXG4gICAgICByZXR1cm4gY2hhbmdlQ291bnRlcjtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiAkbG9jYXRpb247XHJcblxyXG4gICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwpIHtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgJGxvY2F0aW9uLmFic1VybCgpLCBvbGRVcmwpO1xyXG4gICAgfVxyXG59XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJGxvZ1xyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gd3JpdGVzIHRoZSBtZXNzYWdlXHJcbiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS5cclxuICpcclxuICogVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gc2ltcGxpZnkgZGVidWdnaW5nIGFuZCB0cm91Ymxlc2hvb3RpbmcuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxleGFtcGxlPlxyXG4gICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cclxuICAgICAgIGZ1bmN0aW9uIExvZ0N0cmwoJHNjb3BlLCAkbG9nKSB7XHJcbiAgICAgICAgICRzY29wZS4kbG9nID0gJGxvZztcclxuICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSAnSGVsbG8gV29ybGQhJztcclxuICAgICAgIH1cclxuICAgICA8L2ZpbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkxvZ0N0cmxcIj5cclxuICAgICAgICAgPHA+UmVsb2FkIHRoaXMgcGFnZSB3aXRoIG9wZW4gY29uc29sZSwgZW50ZXIgdGV4dCBhbmQgaGl0IHRoZSBsb2cgYnV0dG9uLi4uPC9wPlxyXG4gICAgICAgICBNZXNzYWdlOlxyXG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1lc3NhZ2VcIi8+XHJcbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmxvZyhtZXNzYWdlKVwiPmxvZzwvYnV0dG9uPlxyXG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxyXG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5pbmZvKG1lc3NhZ2UpXCI+aW5mbzwvYnV0dG9uPlxyXG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5lcnJvcihtZXNzYWdlKVwiPmVycm9yPC9idXR0b24+XHJcbiAgICAgICA8L2Rpdj5cclxuICAgICA8L2ZpbGU+XHJcbiAgIDwvZXhhbXBsZT5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kbG9nUHJvdmlkZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFVzZSB0aGUgYCRsb2dQcm92aWRlcmAgdG8gY29uZmlndXJlIGhvdyB0aGUgYXBwbGljYXRpb24gbG9ncyBtZXNzYWdlc1xyXG4gKi9cclxuZnVuY3Rpb24gJExvZ1Byb3ZpZGVyKCl7XHJcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcclxuICAgICAgc2VsZiA9IHRoaXM7XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIHByb3BlcnR5XHJcbiAgICogQG5hbWUgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZFxyXG4gICAqIEBtZXRob2RPZiBuZy4kbG9nUHJvdmlkZXJcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcclxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxyXG4gICAqL1xyXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xyXG5cdCAgaWYgKGlzRGVmaW5lZChmbGFnKSkge1xyXG5cdFx0ICBkZWJ1ZyA9IGZsYWc7XHJcblx0XHQgIHJldHVybiB0aGlzO1xyXG5cdCAgfSBlbHNlIHtcclxuXHRcdCAgcmV0dXJuIGRlYnVnO1xyXG5cdCAgfVxyXG4gIH07XHJcbiAgXHJcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24oJHdpbmRvdyl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgKiBAbmFtZSBuZy4kbG9nI2xvZ1xyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGxvZ1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogV3JpdGUgYSBsb2cgbWVzc2FnZVxyXG4gICAgICAgKi9cclxuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgICAqIEBuYW1lIG5nLiRsb2cjaW5mb1xyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGxvZ1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogV3JpdGUgYW4gaW5mb3JtYXRpb24gbWVzc2FnZVxyXG4gICAgICAgKi9cclxuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICogQG5hbWUgbmcuJGxvZyN3YXJuXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBXcml0ZSBhIHdhcm5pbmcgbWVzc2FnZVxyXG4gICAgICAgKi9cclxuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAgICogQG5hbWUgbmcuJGxvZyNlcnJvclxyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJGxvZ1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogV3JpdGUgYW4gZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgKi9cclxuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXHJcbiAgICAgIFxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICAgKiBAbmFtZSBuZy4kbG9nI2RlYnVnXHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kbG9nXHJcbiAgICAgICAqIFxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXHJcbiAgICAgICAqL1xyXG4gICAgICBkZWJ1ZzogKGZ1bmN0aW9uICgpIHtcclxuICAgIFx0dmFyIGZuID0gY29uc29sZUxvZygnZGVidWcnKTtcclxuICAgIFx0XHJcbiAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIFx0XHRpZiAoZGVidWcpIHtcclxuICAgIFx0XHRcdGZuLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XHJcbiAgICBcdFx0fVxyXG4gICAgXHR9XHJcbiAgICAgIH0oKSlcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0RXJyb3IoYXJnKSB7XHJcbiAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIGlmIChhcmcuc3RhY2spIHtcclxuICAgICAgICAgIGFyZyA9IChhcmcubWVzc2FnZSAmJiBhcmcuc3RhY2suaW5kZXhPZihhcmcubWVzc2FnZSkgPT09IC0xKVxyXG4gICAgICAgICAgICAgID8gJ0Vycm9yOiAnICsgYXJnLm1lc3NhZ2UgKyAnXFxuJyArIGFyZy5zdGFja1xyXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYXJnLnNvdXJjZVVSTCkge1xyXG4gICAgICAgICAgYXJnID0gYXJnLm1lc3NhZ2UgKyAnXFxuJyArIGFyZy5zb3VyY2VVUkwgKyAnOicgKyBhcmcubGluZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFyZztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb25zb2xlTG9nKHR5cGUpIHtcclxuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXHJcbiAgICAgICAgICBsb2dGbiA9IGNvbnNvbGVbdHlwZV0gfHwgY29uc29sZS5sb2cgfHwgbm9vcDtcclxuXHJcbiAgICAgIGlmIChsb2dGbi5hcHBseSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24oYXJnKSB7XHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGxvZ0ZuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcclxuICAgICAgLy8gb3Igd2UgYXJlIElFIHdoZXJlIGNvbnNvbGUubG9nIGRvZXNuJ3QgaGF2ZSBhcHBseSBzbyB3ZSBsb2cgYXQgbGVhc3QgZmlyc3QgMiBhcmdzXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XHJcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XTtcclxufVxyXG5cclxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XHJcblxyXG4vLyBTYW5kYm94aW5nIEFuZ3VsYXIgRXhwcmVzc2lvbnNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEFuZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIGdlbmVyYWxseSBjb25zaWRlcmVkIHNhZmUgYmVjYXVzZSB0aGVzZSBleHByZXNzaW9ucyBvbmx5IGhhdmUgZGlyZWN0IGFjY2VzcyB0byAkc2NvcGUgYW5kXHJcbi8vIGxvY2Fscy4gSG93ZXZlciwgb25lIGNhbiBvYnRhaW4gdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgSlMgY29kZSBieSBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gbmF0aXZlIEpTXHJcbi8vIGZ1bmN0aW9ucyBzdWNoIGFzIHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3Rvci5cclxuLy9cclxuLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XHJcbi8vXHJcbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoYWxlcnQoXCJldmlsIEpTIGNvZGVcIikpXHJcbi8vXHJcbi8vIFdlIHdhbnQgdG8gcHJldmVudCB0aGlzIHR5cGUgb2YgYWNjZXNzLiBGb3IgdGhlIHNha2Ugb2YgcGVyZm9ybWFuY2UsIGR1cmluZyB0aGUgbGV4aW5nIHBoYXNlIHdlIGRpc2FsbG93IGFueSBcImRvdHRlZFwiXHJcbi8vIGFjY2VzcyB0byBhbnkgbWVtYmVyIG5hbWVkIFwiY29uc3RydWN0b3JcIi5cclxuLy9cclxuLy8gRm9yIHJlZmxlY3RpdmUgY2FsbHMgKGFbYl0pIHdlIGNoZWNrIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSBsb29rdXAgaXMgbm90IHRoZSBGdW5jdGlvbiBjb25zdHJ1Y3RvciB3aGlsZSBldmFsdWF0aW5nXHJcbi8vIHRoZSBleHByZXNzaW9uLCB3aGljaCBpcyBhIHN0cm9uZ2VyIGJ1dCBtb3JlIGV4cGVuc2l2ZSB0ZXN0LiBTaW5jZSByZWZsZWN0aXZlIGNhbGxzIGFyZSBleHBlbnNpdmUgYW55d2F5LCB0aGlzIGlzIG5vdFxyXG4vLyBzdWNoIGEgYmlnIGRlYWwgY29tcGFyZWQgdG8gc3RhdGljIGRlcmVmZXJlbmNpbmcuXHJcbi8vXHJcbi8vIFRoaXMgc2FuZGJveGluZyB0ZWNobmlxdWUgaXMgbm90IHBlcmZlY3QgYW5kIGRvZXNuJ3QgYWltIHRvIGJlLiBUaGUgZ29hbCBpcyB0byBwcmV2ZW50IGV4cGxvaXRzIGFnYWluc3QgdGhlXHJcbi8vIGV4cHJlc3Npb24gbGFuZ3VhZ2UsIGJ1dCBub3QgdG8gcHJldmVudCBleHBsb2l0cyB0aGF0IHdlcmUgZW5hYmxlZCBieSBleHBvc2luZyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIGFwaXNcclxuLy8gb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZCBwcmFjdGljZSBhbmQgdGhlcmVmb3JlIHdlIGFyZSBub3QgZXZlbiB0cnlpbmcgdG8gcHJvdGVjdFxyXG4vLyBhZ2FpbnN0IGludGVyYWN0aW9uIHdpdGggYW4gb2JqZWN0IGV4cGxpY2l0bHkgZXhwb3NlZCBpbiB0aGlzIHdheS5cclxuLy9cclxuLy8gQSBkZXZlbG9wZXIgY291bGQgZm9pbCB0aGUgbmFtZSBjaGVjayBieSBhbGlhc2luZyB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IgdW5kZXIgYSBkaWZmZXJlbnQgbmFtZSBvbiB0aGUgc2NvcGUuXHJcbi8vXHJcbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhIHdpbmRvdyBvciBzb21lIERPTVxyXG4vLyBvYmplY3QgdGhhdCBoYXMgYSByZWZlcmVuY2UgdG8gd2luZG93IGlzIHB1Ymxpc2hlZCBvbnRvIGEgU2NvcGUuXHJcblxyXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xyXG4gIGlmIChuYW1lID09PSBcImNvbnN0cnVjdG9yXCIpIHtcclxuICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZsZCcsXHJcbiAgICAgICAgJ1JlZmVyZW5jaW5nIFwiY29uc3RydWN0b3JcIiBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcclxuICB9XHJcbiAgcmV0dXJuIG5hbWU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBlbnN1cmVTYWZlT2JqZWN0KG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcclxuICAvLyBuaWZ0eSBjaGVjayBpZiBvYmogaXMgRnVuY3Rpb24gdGhhdCBpcyBmYXN0IGFuZCB3b3JrcyBhY3Jvc3MgaWZyYW1lcyBhbmQgb3RoZXIgY29udGV4dHNcclxuICBpZiAob2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XHJcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXHJcbiAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JywgZnVsbEV4cHJlc3Npb24pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbnZhciBPUEVSQVRPUlMgPSB7XHJcbiAgICAnbnVsbCc6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbDt9LFxyXG4gICAgJ3RydWUnOmZ1bmN0aW9uKCl7cmV0dXJuIHRydWU7fSxcclxuICAgICdmYWxzZSc6ZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2U7fSxcclxuICAgIHVuZGVmaW5lZDpub29wLFxyXG4gICAgJysnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtcclxuICAgICAgYT1hKHNlbGYsIGxvY2Fscyk7IGI9YihzZWxmLCBsb2NhbHMpO1xyXG4gICAgICBpZiAoaXNEZWZpbmVkKGEpKSB7XHJcbiAgICAgICAgaWYgKGlzRGVmaW5lZChiKSkge1xyXG4gICAgICAgICAgcmV0dXJuIGEgKyBiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gaXNEZWZpbmVkKGIpP2I6dW5kZWZpbmVkO30sXHJcbiAgICAnLSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe2E9YShzZWxmLCBsb2NhbHMpOyBiPWIoc2VsZiwgbG9jYWxzKTsgcmV0dXJuIChpc0RlZmluZWQoYSk/YTowKS0oaXNEZWZpbmVkKGIpP2I6MCk7fSxcclxuICAgICcqJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSpiKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICcvJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKS9iKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICclJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSViKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICdeJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKV5iKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICc9Jzpub29wLFxyXG4gICAgJz09PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPT09YihzZWxmLCBsb2NhbHMpO30sXHJcbiAgICAnIT09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpe3JldHVybiBhKHNlbGYsIGxvY2FscykhPT1iKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICc9PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk9PWIoc2VsZiwgbG9jYWxzKTt9LFxyXG4gICAgJyE9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSE9YihzZWxmLCBsb2NhbHMpO30sXHJcbiAgICAnPCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk8YihzZWxmLCBsb2NhbHMpO30sXHJcbiAgICAnPic6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+YihzZWxmLCBsb2NhbHMpO30sXHJcbiAgICAnPD0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpPD1iKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICc+PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBhKHNlbGYsIGxvY2Fscyk+PWIoc2VsZiwgbG9jYWxzKTt9LFxyXG4gICAgJyYmJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSYmYihzZWxmLCBsb2NhbHMpO30sXHJcbiAgICAnfHwnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYShzZWxmLCBsb2NhbHMpfHxiKHNlbGYsIGxvY2Fscyk7fSxcclxuICAgICcmJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsYil7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSZiKHNlbGYsIGxvY2Fscyk7fSxcclxuLy8gICAgJ3wnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSxiKXtyZXR1cm4gYXxiO30sXHJcbiAgICAnfCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLGIpe3JldHVybiBiKHNlbGYsIGxvY2Fscykoc2VsZiwgbG9jYWxzLCBhKHNlbGYsIGxvY2FscykpO30sXHJcbiAgICAnISc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhKXtyZXR1cm4gIWEoc2VsZiwgbG9jYWxzKTt9XHJcbn07XHJcbnZhciBFU0NBUEUgPSB7XCJuXCI6XCJcXG5cIiwgXCJmXCI6XCJcXGZcIiwgXCJyXCI6XCJcXHJcIiwgXCJ0XCI6XCJcXHRcIiwgXCJ2XCI6XCJcXHZcIiwgXCInXCI6XCInXCIsICdcIic6J1wiJ307XHJcblxyXG5mdW5jdGlvbiBsZXgodGV4dCwgY3NwKXtcclxuICB2YXIgdG9rZW5zID0gW10sXHJcbiAgICAgIHRva2VuLFxyXG4gICAgICBpbmRleCA9IDAsXHJcbiAgICAgIGpzb24gPSBbXSxcclxuICAgICAgY2gsXHJcbiAgICAgIGxhc3RDaCA9ICc6JzsgLy8gY2FuIHN0YXJ0IHJlZ2V4cFxyXG5cclxuICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xyXG4gICAgY2ggPSB0ZXh0LmNoYXJBdChpbmRleCk7XHJcbiAgICBpZiAoaXMoJ1wiXFwnJykpIHtcclxuICAgICAgcmVhZFN0cmluZyhjaCk7XHJcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGNoKSB8fCBpcygnLicpICYmIGlzTnVtYmVyKHBlZWsoKSkpIHtcclxuICAgICAgcmVhZE51bWJlcigpO1xyXG4gICAgfSBlbHNlIGlmIChpc0lkZW50KGNoKSkge1xyXG4gICAgICByZWFkSWRlbnQoKTtcclxuICAgICAgLy8gaWRlbnRpZmllcnMgY2FuIG9ubHkgYmUgaWYgdGhlIHByZWNlZGluZyBjaGFyIHdhcyBhIHsgb3IgLFxyXG4gICAgICBpZiAod2FzKCd7LCcpICYmIGpzb25bMF09PSd7JyAmJlxyXG4gICAgICAgICAodG9rZW49dG9rZW5zW3Rva2Vucy5sZW5ndGgtMV0pKSB7XHJcbiAgICAgICAgdG9rZW4uanNvbiA9IHRva2VuLnRleHQuaW5kZXhPZignLicpID09IC0xO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGlzKCcoKXt9W10uLDs6PycpKSB7XHJcbiAgICAgIHRva2Vucy5wdXNoKHtcclxuICAgICAgICBpbmRleDppbmRleCxcclxuICAgICAgICB0ZXh0OmNoLFxyXG4gICAgICAgIGpzb246KHdhcygnOlssJykgJiYgaXMoJ3tbJykpIHx8IGlzKCd9XTosJylcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChpcygne1snKSkganNvbi51bnNoaWZ0KGNoKTtcclxuICAgICAgaWYgKGlzKCd9XScpKSBqc29uLnNoaWZ0KCk7XHJcbiAgICAgIGluZGV4Kys7XHJcbiAgICB9IGVsc2UgaWYgKGlzV2hpdGVzcGFjZShjaCkpIHtcclxuICAgICAgaW5kZXgrKztcclxuICAgICAgY29udGludWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgY2gyID0gY2ggKyBwZWVrKCksXHJcbiAgICAgICAgICBjaDMgPSBjaDIgKyBwZWVrKDIpLFxyXG4gICAgICAgICAgZm4gPSBPUEVSQVRPUlNbY2hdLFxyXG4gICAgICAgICAgZm4yID0gT1BFUkFUT1JTW2NoMl0sXHJcbiAgICAgICAgICBmbjMgPSBPUEVSQVRPUlNbY2gzXTtcclxuICAgICAgaWYgKGZuMykge1xyXG4gICAgICAgIHRva2Vucy5wdXNoKHtpbmRleDppbmRleCwgdGV4dDpjaDMsIGZuOmZuM30pO1xyXG4gICAgICAgIGluZGV4ICs9IDM7XHJcbiAgICAgIH0gZWxzZSBpZiAoZm4yKSB7XHJcbiAgICAgICAgdG9rZW5zLnB1c2goe2luZGV4OmluZGV4LCB0ZXh0OmNoMiwgZm46Zm4yfSk7XHJcbiAgICAgICAgaW5kZXggKz0gMjtcclxuICAgICAgfSBlbHNlIGlmIChmbikge1xyXG4gICAgICAgIHRva2Vucy5wdXNoKHtpbmRleDppbmRleCwgdGV4dDpjaCwgZm46Zm4sIGpzb246IHdhcygnWyw6JykgJiYgaXMoJystJyl9KTtcclxuICAgICAgICBpbmRleCArPSAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93RXJyb3IoXCJVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyIFwiLCBpbmRleCwgaW5kZXgrMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxhc3RDaCA9IGNoO1xyXG4gIH1cclxuICByZXR1cm4gdG9rZW5zO1xyXG5cclxuICBmdW5jdGlvbiBpcyhjaGFycykge1xyXG4gICAgcmV0dXJuIGNoYXJzLmluZGV4T2YoY2gpICE9IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gd2FzKGNoYXJzKSB7XHJcbiAgICByZXR1cm4gY2hhcnMuaW5kZXhPZihsYXN0Q2gpICE9IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGVlayhpKSB7XHJcbiAgICB2YXIgbnVtID0gaSB8fCAxO1xyXG4gICAgcmV0dXJuIGluZGV4ICsgbnVtIDwgdGV4dC5sZW5ndGggPyB0ZXh0LmNoYXJBdChpbmRleCArIG51bSkgOiBmYWxzZTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaXNOdW1iZXIoY2gpIHtcclxuICAgIHJldHVybiAnMCcgPD0gY2ggJiYgY2ggPD0gJzknO1xyXG4gIH1cclxuICBmdW5jdGlvbiBpc1doaXRlc3BhY2UoY2gpIHtcclxuICAgIHJldHVybiBjaCA9PSAnICcgfHwgY2ggPT0gJ1xccicgfHwgY2ggPT0gJ1xcdCcgfHxcclxuICAgICAgICAgICBjaCA9PSAnXFxuJyB8fCBjaCA9PSAnXFx2JyB8fCBjaCA9PSAnXFx1MDBBMCc7IC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxyXG4gIH1cclxuICBmdW5jdGlvbiBpc0lkZW50KGNoKSB7XHJcbiAgICByZXR1cm4gJ2EnIDw9IGNoICYmIGNoIDw9ICd6JyB8fFxyXG4gICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHxcclxuICAgICAgICAgICAnXycgPT0gY2ggfHwgY2ggPT0gJyQnO1xyXG4gIH1cclxuICBmdW5jdGlvbiBpc0V4cE9wZXJhdG9yKGNoKSB7XHJcbiAgICByZXR1cm4gY2ggPT0gJy0nIHx8IGNoID09ICcrJyB8fCBpc051bWJlcihjaCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yLCBzdGFydCwgZW5kKSB7XHJcbiAgICBlbmQgPSBlbmQgfHwgaW5kZXg7XHJcbiAgICB2YXIgY29sU3RyID0gKGlzRGVmaW5lZChzdGFydCkgP1xyXG4gICAgICAgIFwicyBcIiArIHN0YXJ0ICsgIFwiLVwiICsgaW5kZXggKyBcIiBbXCIgKyB0ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKSArIFwiXVwiXHJcbiAgICAgICAgOiBcIiBcIiArIGVuZCk7XHJcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2xleGVycicsIFwiTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS5cIixcclxuICAgICAgICBlcnJvciwgY29sU3RyLCB0ZXh0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlYWROdW1iZXIoKSB7XHJcbiAgICB2YXIgbnVtYmVyID0gXCJcIjtcclxuICAgIHZhciBzdGFydCA9IGluZGV4O1xyXG4gICAgd2hpbGUgKGluZGV4IDwgdGV4dC5sZW5ndGgpIHtcclxuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRleHQuY2hhckF0KGluZGV4KSk7XHJcbiAgICAgIGlmIChjaCA9PSAnLicgfHwgaXNOdW1iZXIoY2gpKSB7XHJcbiAgICAgICAgbnVtYmVyICs9IGNoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBwZWVrQ2ggPSBwZWVrKCk7XHJcbiAgICAgICAgaWYgKGNoID09ICdlJyAmJiBpc0V4cE9wZXJhdG9yKHBlZWtDaCkpIHtcclxuICAgICAgICAgIG51bWJlciArPSBjaDtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzRXhwT3BlcmF0b3IoY2gpICYmXHJcbiAgICAgICAgICAgIHBlZWtDaCAmJiBpc051bWJlcihwZWVrQ2gpICYmXHJcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xyXG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNFeHBPcGVyYXRvcihjaCkgJiZcclxuICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIWlzTnVtYmVyKHBlZWtDaCkpICYmXHJcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xyXG4gICAgICAgICAgdGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaW5kZXgrKztcclxuICAgIH1cclxuICAgIG51bWJlciA9IDEgKiBudW1iZXI7XHJcbiAgICB0b2tlbnMucHVzaCh7aW5kZXg6c3RhcnQsIHRleHQ6bnVtYmVyLCBqc29uOnRydWUsXHJcbiAgICAgIGZuOmZ1bmN0aW9uKCkge3JldHVybiBudW1iZXI7fX0pO1xyXG4gIH1cclxuICBmdW5jdGlvbiByZWFkSWRlbnQoKSB7XHJcbiAgICB2YXIgaWRlbnQgPSBcIlwiLFxyXG4gICAgICAgIHN0YXJ0ID0gaW5kZXgsXHJcbiAgICAgICAgbGFzdERvdCwgcGVla0luZGV4LCBtZXRob2ROYW1lLCBjaDtcclxuXHJcbiAgICB3aGlsZSAoaW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xyXG4gICAgICBjaCA9IHRleHQuY2hhckF0KGluZGV4KTtcclxuICAgICAgaWYgKGNoID09ICcuJyB8fCBpc0lkZW50KGNoKSB8fCBpc051bWJlcihjaCkpIHtcclxuICAgICAgICBpZiAoY2ggPT0gJy4nKSBsYXN0RG90ID0gaW5kZXg7XHJcbiAgICAgICAgaWRlbnQgKz0gY2g7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaW5kZXgrKztcclxuICAgIH1cclxuXHJcbiAgICAvL2NoZWNrIGlmIHRoaXMgaXMgbm90IGEgbWV0aG9kIGludm9jYXRpb24gYW5kIGlmIGl0IGlzIGJhY2sgb3V0IHRvIGxhc3QgZG90XHJcbiAgICBpZiAobGFzdERvdCkge1xyXG4gICAgICBwZWVrSW5kZXggPSBpbmRleDtcclxuICAgICAgd2hpbGUocGVla0luZGV4IDwgdGV4dC5sZW5ndGgpIHtcclxuICAgICAgICBjaCA9IHRleHQuY2hhckF0KHBlZWtJbmRleCk7XHJcbiAgICAgICAgaWYgKGNoID09ICcoJykge1xyXG4gICAgICAgICAgbWV0aG9kTmFtZSA9IGlkZW50LnN1YnN0cihsYXN0RG90IC0gc3RhcnQgKyAxKTtcclxuICAgICAgICAgIGlkZW50ID0gaWRlbnQuc3Vic3RyKDAsIGxhc3REb3QgLSBzdGFydCk7XHJcbiAgICAgICAgICBpbmRleCA9IHBlZWtJbmRleDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihpc1doaXRlc3BhY2UoY2gpKSB7XHJcbiAgICAgICAgICBwZWVrSW5kZXgrKztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHZhciB0b2tlbiA9IHtcclxuICAgICAgaW5kZXg6c3RhcnQsXHJcbiAgICAgIHRleHQ6aWRlbnRcclxuICAgIH07XHJcblxyXG4gICAgaWYgKE9QRVJBVE9SUy5oYXNPd25Qcm9wZXJ0eShpZGVudCkpIHtcclxuICAgICAgdG9rZW4uZm4gPSB0b2tlbi5qc29uID0gT1BFUkFUT1JTW2lkZW50XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihpZGVudCwgY3NwLCB0ZXh0KTtcclxuICAgICAgdG9rZW4uZm4gPSBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIChnZXR0ZXIoc2VsZiwgbG9jYWxzKSk7XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBhc3NpZ246IGZ1bmN0aW9uKHNlbGYsIHZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHNlbGYsIGlkZW50LCB2YWx1ZSwgdGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0b2tlbnMucHVzaCh0b2tlbik7XHJcblxyXG4gICAgaWYgKG1ldGhvZE5hbWUpIHtcclxuICAgICAgdG9rZW5zLnB1c2goe1xyXG4gICAgICAgIGluZGV4Omxhc3REb3QsXHJcbiAgICAgICAgdGV4dDogJy4nLFxyXG4gICAgICAgIGpzb246IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0b2tlbnMucHVzaCh7XHJcbiAgICAgICAgaW5kZXg6IGxhc3REb3QgKyAxLFxyXG4gICAgICAgIHRleHQ6IG1ldGhvZE5hbWUsXHJcbiAgICAgICAganNvbjogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZWFkU3RyaW5nKHF1b3RlKSB7XHJcbiAgICB2YXIgc3RhcnQgPSBpbmRleDtcclxuICAgIGluZGV4Kys7XHJcbiAgICB2YXIgc3RyaW5nID0gXCJcIjtcclxuICAgIHZhciByYXdTdHJpbmcgPSBxdW90ZTtcclxuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcclxuICAgIHdoaWxlIChpbmRleCA8IHRleHQubGVuZ3RoKSB7XHJcbiAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGluZGV4KTtcclxuICAgICAgcmF3U3RyaW5nICs9IGNoO1xyXG4gICAgICBpZiAoZXNjYXBlKSB7XHJcbiAgICAgICAgaWYgKGNoID09ICd1Jykge1xyXG4gICAgICAgICAgdmFyIGhleCA9IHRleHQuc3Vic3RyaW5nKGluZGV4ICsgMSwgaW5kZXggKyA1KTtcclxuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSlcclxuICAgICAgICAgICAgdGhyb3dFcnJvciggXCJJbnZhbGlkIHVuaWNvZGUgZXNjYXBlIFtcXFxcdVwiICsgaGV4ICsgXCJdXCIpO1xyXG4gICAgICAgICAgaW5kZXggKz0gNDtcclxuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIHJlcCA9IEVTQ0FQRVtjaF07XHJcbiAgICAgICAgICBpZiAocmVwKSB7XHJcbiAgICAgICAgICAgIHN0cmluZyArPSByZXA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdHJpbmcgKz0gY2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xyXG4gICAgICB9IGVsc2UgaWYgKGNoID09ICdcXFxcJykge1xyXG4gICAgICAgIGVzY2FwZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT0gcXVvdGUpIHtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIHRva2Vucy5wdXNoKHtcclxuICAgICAgICAgIGluZGV4OnN0YXJ0LFxyXG4gICAgICAgICAgdGV4dDpyYXdTdHJpbmcsXHJcbiAgICAgICAgICBzdHJpbmc6c3RyaW5nLFxyXG4gICAgICAgICAganNvbjp0cnVlLFxyXG4gICAgICAgICAgZm46ZnVuY3Rpb24oKSB7IHJldHVybiBzdHJpbmc7IH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyaW5nICs9IGNoO1xyXG4gICAgICB9XHJcbiAgICAgIGluZGV4Kys7XHJcbiAgICB9XHJcbiAgICB0aHJvd0Vycm9yKFwiVW50ZXJtaW5hdGVkIHF1b3RlXCIsIHN0YXJ0KTtcclxuICB9XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5mdW5jdGlvbiBwYXJzZXIodGV4dCwganNvbiwgJGZpbHRlciwgY3NwKXtcclxuICB2YXIgWkVSTyA9IHZhbHVlRm4oMCksXHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICB0b2tlbnMgPSBsZXgodGV4dCwgY3NwKSxcclxuICAgICAgYXNzaWdubWVudCA9IF9hc3NpZ25tZW50LFxyXG4gICAgICBmdW5jdGlvbkNhbGwgPSBfZnVuY3Rpb25DYWxsLFxyXG4gICAgICBmaWVsZEFjY2VzcyA9IF9maWVsZEFjY2VzcyxcclxuICAgICAgb2JqZWN0SW5kZXggPSBfb2JqZWN0SW5kZXgsXHJcbiAgICAgIGZpbHRlckNoYWluID0gX2ZpbHRlckNoYWluO1xyXG5cclxuICBpZihqc29uKXtcclxuICAgIC8vIFRoZSBleHRyYSBsZXZlbCBvZiBhbGlhc2luZyBpcyBoZXJlLCBqdXN0IGluIGNhc2UgdGhlIGxleGVyIG1pc3NlcyBzb21ldGhpbmcsIHNvIHRoYXRcclxuICAgIC8vIHdlIHByZXZlbnQgYW55IGFjY2lkZW50YWwgZXhlY3V0aW9uIGluIEpTT04uXHJcbiAgICBhc3NpZ25tZW50ID0gbG9naWNhbE9SO1xyXG4gICAgZnVuY3Rpb25DYWxsID1cclxuICAgICAgZmllbGRBY2Nlc3MgPVxyXG4gICAgICBvYmplY3RJbmRleCA9XHJcbiAgICAgIGZpbHRlckNoYWluID1cclxuICAgICAgICBmdW5jdGlvbigpIHsgdGhyb3dFcnJvcihcImlzIG5vdCB2YWxpZCBqc29uXCIsIHt0ZXh0OnRleHQsIGluZGV4OjB9KTsgfTtcclxuICAgIHZhbHVlID0gcHJpbWFyeSgpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YWx1ZSA9IHN0YXRlbWVudHMoKTtcclxuICB9XHJcbiAgaWYgKHRva2Vucy5sZW5ndGggIT09IDApIHtcclxuICAgIHRocm93RXJyb3IoXCJpcyBhbiB1bmV4cGVjdGVkIHRva2VuXCIsIHRva2Vuc1swXSk7XHJcbiAgfVxyXG4gIHZhbHVlLmxpdGVyYWwgPSAhIXZhbHVlLmxpdGVyYWw7XHJcbiAgdmFsdWUuY29uc3RhbnQgPSAhIXZhbHVlLmNvbnN0YW50O1xyXG4gIHJldHVybiB2YWx1ZTtcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICBmdW5jdGlvbiB0aHJvd0Vycm9yKG1zZywgdG9rZW4pIHtcclxuICAgIHRocm93ICRwYXJzZU1pbkVycignc3ludGF4JyxcclxuICAgICAgICBcIlN5bnRheCBFcnJvcjogVG9rZW4gJ3swfScgezF9IGF0IGNvbHVtbiB7Mn0gb2YgdGhlIGV4cHJlc3Npb24gW3szfV0gc3RhcnRpbmcgYXQgW3s0fV0uXCIsXHJcbiAgICAgICAgdG9rZW4udGV4dCwgbXNnLCAodG9rZW4uaW5kZXggKyAxKSwgdGV4dCwgdGV4dC5zdWJzdHJpbmcodG9rZW4uaW5kZXgpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBlZWtUb2tlbigpIHtcclxuICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKVxyXG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3Vlb2UnLCBcIlVuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfVwiLCB0ZXh0KTtcclxuICAgIHJldHVybiB0b2tlbnNbMF07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwZWVrKGUxLCBlMiwgZTMsIGU0KSB7XHJcbiAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDApIHtcclxuICAgICAgdmFyIHRva2VuID0gdG9rZW5zWzBdO1xyXG4gICAgICB2YXIgdCA9IHRva2VuLnRleHQ7XHJcbiAgICAgIGlmICh0PT1lMSB8fCB0PT1lMiB8fCB0PT1lMyB8fCB0PT1lNCB8fFxyXG4gICAgICAgICAgKCFlMSAmJiAhZTIgJiYgIWUzICYmICFlNCkpIHtcclxuICAgICAgICByZXR1cm4gdG9rZW47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGV4cGVjdChlMSwgZTIsIGUzLCBlNCl7XHJcbiAgICB2YXIgdG9rZW4gPSBwZWVrKGUxLCBlMiwgZTMsIGU0KTtcclxuICAgIGlmICh0b2tlbikge1xyXG4gICAgICBpZiAoanNvbiAmJiAhdG9rZW4uanNvbikge1xyXG4gICAgICAgIHRocm93RXJyb3IoXCJpcyBub3QgdmFsaWQganNvblwiLCB0b2tlbik7XHJcbiAgICAgIH1cclxuICAgICAgdG9rZW5zLnNoaWZ0KCk7XHJcbiAgICAgIHJldHVybiB0b2tlbjtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbnN1bWUoZTEpe1xyXG4gICAgaWYgKCFleHBlY3QoZTEpKSB7XHJcbiAgICAgIHRocm93RXJyb3IoXCJpcyB1bmV4cGVjdGVkLCBleHBlY3RpbmcgW1wiICsgZTEgKyBcIl1cIiwgcGVlaygpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVuYXJ5Rm4oZm4sIHJpZ2h0KSB7XHJcbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2Fscykge1xyXG4gICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCByaWdodCk7XHJcbiAgICB9LCB7XHJcbiAgICAgIGNvbnN0YW50OnJpZ2h0LmNvbnN0YW50XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRlcm5hcnlGbihsZWZ0LCBtaWRkbGUsIHJpZ2h0KXtcclxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oc2VsZiwgbG9jYWxzKXtcclxuICAgICAgcmV0dXJuIGxlZnQoc2VsZiwgbG9jYWxzKSA/IG1pZGRsZShzZWxmLCBsb2NhbHMpIDogcmlnaHQoc2VsZiwgbG9jYWxzKTtcclxuICAgIH0sIHtcclxuICAgICAgY29uc3RhbnQ6IGxlZnQuY29uc3RhbnQgJiYgbWlkZGxlLmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJpbmFyeUZuKGxlZnQsIGZuLCByaWdodCkge1xyXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbihzZWxmLCBsb2NhbHMpIHtcclxuICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgbGVmdCwgcmlnaHQpO1xyXG4gICAgfSwge1xyXG4gICAgICBjb25zdGFudDpsZWZ0LmNvbnN0YW50ICYmIHJpZ2h0LmNvbnN0YW50XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXRlbWVudHMoKSB7XHJcbiAgICB2YXIgc3RhdGVtZW50cyA9IFtdO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBpZiAodG9rZW5zLmxlbmd0aCA+IDAgJiYgIXBlZWsoJ30nLCAnKScsICc7JywgJ10nKSlcclxuICAgICAgICBzdGF0ZW1lbnRzLnB1c2goZmlsdGVyQ2hhaW4oKSk7XHJcbiAgICAgIGlmICghZXhwZWN0KCc7JykpIHtcclxuICAgICAgICAvLyBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIHRoZXJlIGlzIG9ubHkgb25lIHN0YXRlbWVudC5cclxuICAgICAgICAvLyBUT0RPKHNpemUpOiBtYXliZSB3ZSBzaG91bGQgbm90IHN1cHBvcnQgbXVsdGlwbGUgc3RhdGVtZW50cz9cclxuICAgICAgICByZXR1cm4gc3RhdGVtZW50cy5sZW5ndGggPT0gMVxyXG4gICAgICAgICAgPyBzdGF0ZW1lbnRzWzBdXHJcbiAgICAgICAgICA6IGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc3RhdGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIHZhciBzdGF0ZW1lbnQgPSBzdGF0ZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICAgIGlmIChzdGF0ZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0YXRlbWVudChzZWxmLCBsb2NhbHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9maWx0ZXJDaGFpbigpIHtcclxuICAgIHZhciBsZWZ0ID0gZXhwcmVzc2lvbigpO1xyXG4gICAgdmFyIHRva2VuO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBpZiAoKHRva2VuID0gZXhwZWN0KCd8JykpKSB7XHJcbiAgICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBmaWx0ZXIoKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZpbHRlcigpIHtcclxuICAgIHZhciB0b2tlbiA9IGV4cGVjdCgpO1xyXG4gICAgdmFyIGZuID0gJGZpbHRlcih0b2tlbi50ZXh0KTtcclxuICAgIHZhciBhcmdzRm4gPSBbXTtcclxuICAgIHdoaWxlKHRydWUpIHtcclxuICAgICAgaWYgKCh0b2tlbiA9IGV4cGVjdCgnOicpKSkge1xyXG4gICAgICAgIGFyZ3NGbi5wdXNoKGV4cHJlc3Npb24oKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIGZuSW52b2tlID0gZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBpbnB1dCl7XHJcbiAgICAgICAgICB2YXIgYXJncyA9IFtpbnB1dF07XHJcbiAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmdzRm4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3NGbltpXShzZWxmLCBsb2NhbHMpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBmbkludm9rZTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBleHByZXNzaW9uKCkge1xyXG4gICAgcmV0dXJuIGFzc2lnbm1lbnQoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9hc3NpZ25tZW50KCkge1xyXG4gICAgdmFyIGxlZnQgPSB0ZXJuYXJ5KCk7XHJcbiAgICB2YXIgcmlnaHQ7XHJcbiAgICB2YXIgdG9rZW47XHJcbiAgICBpZiAoKHRva2VuID0gZXhwZWN0KCc9JykpKSB7XHJcbiAgICAgIGlmICghbGVmdC5hc3NpZ24pIHtcclxuICAgICAgICB0aHJvd0Vycm9yKFwiaW1wbGllcyBhc3NpZ25tZW50IGJ1dCBbXCIgK1xyXG4gICAgICAgICAgdGV4dC5zdWJzdHJpbmcoMCwgdG9rZW4uaW5kZXgpICsgXCJdIGNhbiBub3QgYmUgYXNzaWduZWQgdG9cIiwgdG9rZW4pO1xyXG4gICAgICB9XHJcbiAgICAgIHJpZ2h0ID0gdGVybmFyeSgpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2Fscyl7XHJcbiAgICAgICAgcmV0dXJuIGxlZnQuYXNzaWduKHNjb3BlLCByaWdodChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTtcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBsZWZ0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGVybmFyeSgpIHtcclxuICAgIHZhciBsZWZ0ID0gbG9naWNhbE9SKCk7XHJcbiAgICB2YXIgbWlkZGxlO1xyXG4gICAgdmFyIHRva2VuO1xyXG4gICAgaWYoKHRva2VuID0gZXhwZWN0KCc/JykpKXtcclxuICAgICAgbWlkZGxlID0gdGVybmFyeSgpO1xyXG4gICAgICBpZigodG9rZW4gPSBleHBlY3QoJzonKSkpe1xyXG4gICAgICAgIHJldHVybiB0ZXJuYXJ5Rm4obGVmdCwgbWlkZGxlLCB0ZXJuYXJ5KCkpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93RXJyb3IoJ2V4cGVjdGVkIDonLCB0b2tlbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gbGVmdDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxvZ2ljYWxPUigpIHtcclxuICAgIHZhciBsZWZ0ID0gbG9naWNhbEFORCgpO1xyXG4gICAgdmFyIHRva2VuO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBpZiAoKHRva2VuID0gZXhwZWN0KCd8fCcpKSkge1xyXG4gICAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgbG9naWNhbEFORCgpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbGVmdDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9naWNhbEFORCgpIHtcclxuICAgIHZhciBsZWZ0ID0gZXF1YWxpdHkoKTtcclxuICAgIHZhciB0b2tlbjtcclxuICAgIGlmICgodG9rZW4gPSBleHBlY3QoJyYmJykpKSB7XHJcbiAgICAgIGxlZnQgPSBiaW5hcnlGbihsZWZ0LCB0b2tlbi5mbiwgbG9naWNhbEFORCgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXF1YWxpdHkoKSB7XHJcbiAgICB2YXIgbGVmdCA9IHJlbGF0aW9uYWwoKTtcclxuICAgIHZhciB0b2tlbjtcclxuICAgIGlmICgodG9rZW4gPSBleHBlY3QoJz09JywnIT0nLCc9PT0nLCchPT0nKSkpIHtcclxuICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBlcXVhbGl0eSgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVsYXRpb25hbCgpIHtcclxuICAgIHZhciBsZWZ0ID0gYWRkaXRpdmUoKTtcclxuICAgIHZhciB0b2tlbjtcclxuICAgIGlmICgodG9rZW4gPSBleHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xyXG4gICAgICBsZWZ0ID0gYmluYXJ5Rm4obGVmdCwgdG9rZW4uZm4sIHJlbGF0aW9uYWwoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVmdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFkZGl0aXZlKCkge1xyXG4gICAgdmFyIGxlZnQgPSBtdWx0aXBsaWNhdGl2ZSgpO1xyXG4gICAgdmFyIHRva2VuO1xyXG4gICAgd2hpbGUgKCh0b2tlbiA9IGV4cGVjdCgnKycsJy0nKSkpIHtcclxuICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCBtdWx0aXBsaWNhdGl2ZSgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbXVsdGlwbGljYXRpdmUoKSB7XHJcbiAgICB2YXIgbGVmdCA9IHVuYXJ5KCk7XHJcbiAgICB2YXIgdG9rZW47XHJcbiAgICB3aGlsZSAoKHRva2VuID0gZXhwZWN0KCcqJywnLycsJyUnKSkpIHtcclxuICAgICAgbGVmdCA9IGJpbmFyeUZuKGxlZnQsIHRva2VuLmZuLCB1bmFyeSgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsZWZ0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdW5hcnkoKSB7XHJcbiAgICB2YXIgdG9rZW47XHJcbiAgICBpZiAoZXhwZWN0KCcrJykpIHtcclxuICAgICAgcmV0dXJuIHByaW1hcnkoKTtcclxuICAgIH0gZWxzZSBpZiAoKHRva2VuID0gZXhwZWN0KCctJykpKSB7XHJcbiAgICAgIHJldHVybiBiaW5hcnlGbihaRVJPLCB0b2tlbi5mbiwgdW5hcnkoKSk7XHJcbiAgICB9IGVsc2UgaWYgKCh0b2tlbiA9IGV4cGVjdCgnIScpKSkge1xyXG4gICAgICByZXR1cm4gdW5hcnlGbih0b2tlbi5mbiwgdW5hcnkoKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcHJpbWFyeSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIHByaW1hcnkoKSB7XHJcbiAgICB2YXIgcHJpbWFyeTtcclxuICAgIGlmIChleHBlY3QoJygnKSkge1xyXG4gICAgICBwcmltYXJ5ID0gZmlsdGVyQ2hhaW4oKTtcclxuICAgICAgY29uc3VtZSgnKScpO1xyXG4gICAgfSBlbHNlIGlmIChleHBlY3QoJ1snKSkge1xyXG4gICAgICBwcmltYXJ5ID0gYXJyYXlEZWNsYXJhdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmIChleHBlY3QoJ3snKSkge1xyXG4gICAgICBwcmltYXJ5ID0gb2JqZWN0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgdG9rZW4gPSBleHBlY3QoKTtcclxuICAgICAgcHJpbWFyeSA9IHRva2VuLmZuO1xyXG4gICAgICBpZiAoIXByaW1hcnkpIHtcclxuICAgICAgICB0aHJvd0Vycm9yKFwibm90IGEgcHJpbWFyeSBleHByZXNzaW9uXCIsIHRva2VuKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodG9rZW4uanNvbikge1xyXG4gICAgICAgIHByaW1hcnkuY29uc3RhbnQgPSBwcmltYXJ5LmxpdGVyYWwgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5leHQsIGNvbnRleHQ7XHJcbiAgICB3aGlsZSAoKG5leHQgPSBleHBlY3QoJygnLCAnWycsICcuJykpKSB7XHJcbiAgICAgIGlmIChuZXh0LnRleHQgPT09ICcoJykge1xyXG4gICAgICAgIHByaW1hcnkgPSBmdW5jdGlvbkNhbGwocHJpbWFyeSwgY29udGV4dCk7XHJcbiAgICAgICAgY29udGV4dCA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnWycpIHtcclxuICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTtcclxuICAgICAgICBwcmltYXJ5ID0gb2JqZWN0SW5kZXgocHJpbWFyeSk7XHJcbiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnLicpIHtcclxuICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTtcclxuICAgICAgICBwcmltYXJ5ID0gZmllbGRBY2Nlc3MocHJpbWFyeSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3dFcnJvcihcIklNUE9TU0lCTEVcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwcmltYXJ5O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2ZpZWxkQWNjZXNzKG9iamVjdCkge1xyXG4gICAgdmFyIGZpZWxkID0gZXhwZWN0KCkudGV4dDtcclxuICAgIHZhciBnZXR0ZXIgPSBnZXR0ZXJGbihmaWVsZCwgY3NwLCB0ZXh0KTtcclxuICAgIHJldHVybiBleHRlbmQoXHJcbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2Fscywgc2VsZikge1xyXG4gICAgICAgICAgcmV0dXJuIGdldHRlcihzZWxmIHx8IG9iamVjdChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGFzc2lnbjpmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2Fscykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0dGVyKG9iamVjdChzY29wZSwgbG9jYWxzKSwgZmllbGQsIHZhbHVlLCB0ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX29iamVjdEluZGV4KG9iaikge1xyXG4gICAgdmFyIGluZGV4Rm4gPSBleHByZXNzaW9uKCk7XHJcbiAgICBjb25zdW1lKCddJyk7XHJcbiAgICByZXR1cm4gZXh0ZW5kKFxyXG4gICAgICBmdW5jdGlvbihzZWxmLCBsb2NhbHMpe1xyXG4gICAgICAgIHZhciBvID0gb2JqKHNlbGYsIGxvY2FscyksXHJcbiAgICAgICAgICAgIGkgPSBpbmRleEZuKHNlbGYsIGxvY2FscyksXHJcbiAgICAgICAgICAgIHYsIHA7XHJcblxyXG4gICAgICAgIGlmICghbykgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB2ID0gZW5zdXJlU2FmZU9iamVjdChvW2ldLCB0ZXh0KTtcclxuICAgICAgICBpZiAodiAmJiB2LnRoZW4pIHtcclxuICAgICAgICAgIHAgPSB2O1xyXG4gICAgICAgICAgaWYgKCEoJyQkdicgaW4gdikpIHtcclxuICAgICAgICAgICAgcC4kJHYgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHAudGhlbihmdW5jdGlvbih2YWwpIHsgcC4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdiA9IHYuJCR2O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdjtcclxuICAgICAgfSwge1xyXG4gICAgICAgIGFzc2lnbjpmdW5jdGlvbihzZWxmLCB2YWx1ZSwgbG9jYWxzKXtcclxuICAgICAgICAgIHZhciBrZXkgPSBpbmRleEZuKHNlbGYsIGxvY2Fscyk7XHJcbiAgICAgICAgICAvLyBwcmV2ZW50IG92ZXJ3cml0aW5nIG9mIEZ1bmN0aW9uLmNvbnN0cnVjdG9yIHdoaWNoIHdvdWxkIGJyZWFrIGVuc3VyZVNhZmVPYmplY3QgY2hlY2tcclxuICAgICAgICAgIHJldHVybiBlbnN1cmVTYWZlT2JqZWN0KG9iaihzZWxmLCBsb2NhbHMpLCB0ZXh0KVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9mdW5jdGlvbkNhbGwoZm4sIGNvbnRleHRHZXR0ZXIpIHtcclxuICAgIHZhciBhcmdzRm4gPSBbXTtcclxuICAgIGlmIChwZWVrVG9rZW4oKS50ZXh0ICE9ICcpJykge1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgYXJnc0ZuLnB1c2goZXhwcmVzc2lvbigpKTtcclxuICAgICAgfSB3aGlsZSAoZXhwZWN0KCcsJykpO1xyXG4gICAgfVxyXG4gICAgY29uc3VtZSgnKScpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpe1xyXG4gICAgICB2YXIgYXJncyA9IFtdLFxyXG4gICAgICAgICAgY29udGV4dCA9IGNvbnRleHRHZXR0ZXIgPyBjb250ZXh0R2V0dGVyKHNjb3BlLCBsb2NhbHMpIDogc2NvcGU7XHJcblxyXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmdzRm4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcmdzLnB1c2goYXJnc0ZuW2ldKHNjb3BlLCBsb2NhbHMpKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgZm5QdHIgPSBmbihzY29wZSwgbG9jYWxzLCBjb250ZXh0KSB8fCBub29wO1xyXG4gICAgICAvLyBJRSBzdHVwaWRpdHkhXHJcbiAgICAgIHZhciB2ID0gZm5QdHIuYXBwbHlcclxuICAgICAgICAgID8gZm5QdHIuYXBwbHkoY29udGV4dCwgYXJncylcclxuICAgICAgICAgIDogZm5QdHIoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XHJcblxyXG4gICAgICAvLyBDaGVjayBmb3IgcHJvbWlzZVxyXG4gICAgICBpZiAodiAmJiB2LnRoZW4pIHtcclxuICAgICAgICB2YXIgcCA9IHY7XHJcbiAgICAgICAgaWYgKCEoJyQkdicgaW4gdikpIHtcclxuICAgICAgICAgIHAuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgcC50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwLiQkdiA9IHZhbDsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHYgPSB2LiQkdjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHY7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gVGhpcyBpcyB1c2VkIHdpdGgganNvbiBhcnJheSBkZWNsYXJhdGlvblxyXG4gIGZ1bmN0aW9uIGFycmF5RGVjbGFyYXRpb24gKCkge1xyXG4gICAgdmFyIGVsZW1lbnRGbnMgPSBbXTtcclxuICAgIHZhciBhbGxDb25zdGFudCA9IHRydWU7XHJcbiAgICBpZiAocGVla1Rva2VuKCkudGV4dCAhPSAnXScpIHtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIHZhciBlbGVtZW50Rm4gPSBleHByZXNzaW9uKCk7XHJcbiAgICAgICAgZWxlbWVudEZucy5wdXNoKGVsZW1lbnRGbik7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50Rm4uY29uc3RhbnQpIHtcclxuICAgICAgICAgIGFsbENvbnN0YW50ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IHdoaWxlIChleHBlY3QoJywnKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdW1lKCddJyk7XHJcbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7XHJcbiAgICAgIHZhciBhcnJheSA9IFtdO1xyXG4gICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtZW50Rm5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChlbGVtZW50Rm5zW2ldKHNlbGYsIGxvY2FscykpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH0sIHtcclxuICAgICAgbGl0ZXJhbDp0cnVlLFxyXG4gICAgICBjb25zdGFudDphbGxDb25zdGFudFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvYmplY3QgKCkge1xyXG4gICAgdmFyIGtleVZhbHVlcyA9IFtdO1xyXG4gICAgdmFyIGFsbENvbnN0YW50ID0gdHJ1ZTtcclxuICAgIGlmIChwZWVrVG9rZW4oKS50ZXh0ICE9ICd9Jykge1xyXG4gICAgICBkbyB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gZXhwZWN0KCksXHJcbiAgICAgICAga2V5ID0gdG9rZW4uc3RyaW5nIHx8IHRva2VuLnRleHQ7XHJcbiAgICAgICAgY29uc3VtZShcIjpcIik7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZXhwcmVzc2lvbigpO1xyXG4gICAgICAgIGtleVZhbHVlcy5wdXNoKHtrZXk6a2V5LCB2YWx1ZTp2YWx1ZX0pO1xyXG4gICAgICAgIGlmICghdmFsdWUuY29uc3RhbnQpIHtcclxuICAgICAgICAgIGFsbENvbnN0YW50ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IHdoaWxlIChleHBlY3QoJywnKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdW1lKCd9Jyk7XHJcbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKHNlbGYsIGxvY2Fscyl7XHJcbiAgICAgIHZhciBvYmplY3QgPSB7fTtcclxuICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwga2V5VmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleVZhbHVlID0ga2V5VmFsdWVzW2ldO1xyXG4gICAgICAgIG9iamVjdFtrZXlWYWx1ZS5rZXldID0ga2V5VmFsdWUudmFsdWUoc2VsZiwgbG9jYWxzKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfSwge1xyXG4gICAgICBsaXRlcmFsOnRydWUsXHJcbiAgICAgIGNvbnN0YW50OmFsbENvbnN0YW50XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIFBhcnNlciBoZWxwZXIgZnVuY3Rpb25zXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5mdW5jdGlvbiBzZXR0ZXIob2JqLCBwYXRoLCBzZXRWYWx1ZSwgZnVsbEV4cCkge1xyXG4gIHZhciBlbGVtZW50ID0gcGF0aC5zcGxpdCgnLicpLCBrZXk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGVsZW1lbnQubGVuZ3RoID4gMTsgaSsrKSB7XHJcbiAgICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApO1xyXG4gICAgdmFyIHByb3BlcnR5T2JqID0gb2JqW2tleV07XHJcbiAgICBpZiAoIXByb3BlcnR5T2JqKSB7XHJcbiAgICAgIHByb3BlcnR5T2JqID0ge307XHJcbiAgICAgIG9ialtrZXldID0gcHJvcGVydHlPYmo7XHJcbiAgICB9XHJcbiAgICBvYmogPSBwcm9wZXJ0eU9iajtcclxuICAgIGlmIChvYmoudGhlbikge1xyXG4gICAgICBpZiAoIShcIiQkdlwiIGluIG9iaikpIHtcclxuICAgICAgICAoZnVuY3Rpb24ocHJvbWlzZSkge1xyXG4gICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbCkgeyBwcm9taXNlLiQkdiA9IHZhbDsgfSk7IH1cclxuICAgICAgICApKG9iaik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9iai4kJHYgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG9iai4kJHYgPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBvYmogPSBvYmouJCR2O1xyXG4gICAgfVxyXG4gIH1cclxuICBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShlbGVtZW50LnNoaWZ0KCksIGZ1bGxFeHApO1xyXG4gIG9ialtrZXldID0gc2V0VmFsdWU7XHJcbiAgcmV0dXJuIHNldFZhbHVlO1xyXG59XHJcblxyXG52YXIgZ2V0dGVyRm5DYWNoZSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBcIkJsYWNrIEhvbGVcIiB2YXJpYW50IGZyb206XHJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLXBhcnNlLWdldHRlci80XHJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vcGF0aC1ldmFsdWF0aW9uLXNpbXBsaWZpZWQvN1xyXG4gKi9cclxuZnVuY3Rpb24gY3NwU2FmZUdldHRlckZuKGtleTAsIGtleTEsIGtleTIsIGtleTMsIGtleTQsIGZ1bGxFeHApIHtcclxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkwLCBmdWxsRXhwKTtcclxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkxLCBmdWxsRXhwKTtcclxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkyLCBmdWxsRXhwKTtcclxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkzLCBmdWxsRXhwKTtcclxuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXk0LCBmdWxsRXhwKTtcclxuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2Fscykge1xyXG4gICAgdmFyIHBhdGhWYWwgPSAobG9jYWxzICYmIGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShrZXkwKSkgPyBsb2NhbHMgOiBzY29wZSxcclxuICAgICAgICBwcm9taXNlO1xyXG5cclxuICAgIGlmIChwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7XHJcblxyXG4gICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MF07XHJcbiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHtcclxuICAgICAgaWYgKCEoXCIkJHZcIiBpbiBwYXRoVmFsKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBwYXRoVmFsO1xyXG4gICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjtcclxuICAgIH1cclxuICAgIGlmICgha2V5MSB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7XHJcblxyXG4gICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5MV07XHJcbiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHtcclxuICAgICAgaWYgKCEoXCIkJHZcIiBpbiBwYXRoVmFsKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBwYXRoVmFsO1xyXG4gICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjtcclxuICAgIH1cclxuICAgIGlmICgha2V5MiB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7XHJcblxyXG4gICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5Ml07XHJcbiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHtcclxuICAgICAgaWYgKCEoXCIkJHZcIiBpbiBwYXRoVmFsKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBwYXRoVmFsO1xyXG4gICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjtcclxuICAgIH1cclxuICAgIGlmICgha2V5MyB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7XHJcblxyXG4gICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5M107XHJcbiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHtcclxuICAgICAgaWYgKCEoXCIkJHZcIiBpbiBwYXRoVmFsKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBwYXRoVmFsO1xyXG4gICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjtcclxuICAgIH1cclxuICAgIGlmICgha2V5NCB8fCBwYXRoVmFsID09PSBudWxsIHx8IHBhdGhWYWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHBhdGhWYWw7XHJcblxyXG4gICAgcGF0aFZhbCA9IHBhdGhWYWxba2V5NF07XHJcbiAgICBpZiAocGF0aFZhbCAmJiBwYXRoVmFsLnRoZW4pIHtcclxuICAgICAgaWYgKCEoXCIkJHZcIiBpbiBwYXRoVmFsKSkge1xyXG4gICAgICAgIHByb21pc2UgPSBwYXRoVmFsO1xyXG4gICAgICAgIHByb21pc2UuJCR2ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWwpIHsgcHJvbWlzZS4kJHYgPSB2YWw7IH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhWYWwgPSBwYXRoVmFsLiQkdjtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXRoVmFsO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldHRlckZuKHBhdGgsIGNzcCwgZnVsbEV4cCkge1xyXG4gIGlmIChnZXR0ZXJGbkNhY2hlLmhhc093blByb3BlcnR5KHBhdGgpKSB7XHJcbiAgICByZXR1cm4gZ2V0dGVyRm5DYWNoZVtwYXRoXTtcclxuICB9XHJcblxyXG4gIHZhciBwYXRoS2V5cyA9IHBhdGguc3BsaXQoJy4nKSxcclxuICAgICAgcGF0aEtleXNMZW5ndGggPSBwYXRoS2V5cy5sZW5ndGgsXHJcbiAgICAgIGZuO1xyXG5cclxuICBpZiAoY3NwKSB7XHJcbiAgICBmbiA9IChwYXRoS2V5c0xlbmd0aCA8IDYpXHJcbiAgICAgICAgPyBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbMF0sIHBhdGhLZXlzWzFdLCBwYXRoS2V5c1syXSwgcGF0aEtleXNbM10sIHBhdGhLZXlzWzRdLCBmdWxsRXhwKVxyXG4gICAgICAgIDogZnVuY3Rpb24oc2NvcGUsIGxvY2Fscykge1xyXG4gICAgICAgICAgdmFyIGkgPSAwLCB2YWw7XHJcbiAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHZhbCA9IGNzcFNhZmVHZXR0ZXJGbihcclxuICAgICAgICAgICAgICAgICAgICBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBmdWxsRXhwXHJcbiAgICAgICAgICAgICAgICAgICkoc2NvcGUsIGxvY2Fscyk7XHJcblxyXG4gICAgICAgICAgICBsb2NhbHMgPSB1bmRlZmluZWQ7IC8vIGNsZWFyIGFmdGVyIGZpcnN0IGl0ZXJhdGlvblxyXG4gICAgICAgICAgICBzY29wZSA9IHZhbDtcclxuICAgICAgICAgIH0gd2hpbGUgKGkgPCBwYXRoS2V5c0xlbmd0aCk7XHJcbiAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIGNvZGUgPSAndmFyIGwsIGZuLCBwO1xcbic7XHJcbiAgICBmb3JFYWNoKHBhdGhLZXlzLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XHJcbiAgICAgIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleSwgZnVsbEV4cCk7XHJcbiAgICAgIGNvZGUgKz0gJ2lmKHMgPT09IG51bGwgfHwgcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gcztcXG4nICtcclxuICAgICAgICAgICAgICAnbD1zO1xcbicgK1xyXG4gICAgICAgICAgICAgICdzPScrIChpbmRleFxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2ltcGx5IGRlcmVmZXJlbmNlICdzJyBvbiBhbnkgLmRvdCBub3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgPyAncydcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpZiB3ZSBhcmUgZmlyc3QgdGhlbiB3ZSBjaGVjayBsb2NhbHMgZmlyc3QsIGFuZCBpZiBzbyByZWFkIGl0IGZpcnN0XHJcbiAgICAgICAgICAgICAgICAgICAgICA6ICcoKGsmJmsuaGFzT3duUHJvcGVydHkoXCInICsga2V5ICsgJ1wiKSk/azpzKScpICsgJ1tcIicgKyBrZXkgKyAnXCJdJyArICc7XFxuJyArXHJcbiAgICAgICAgICAgICAgJ2lmIChzICYmIHMudGhlbikge1xcbicgK1xyXG4gICAgICAgICAgICAgICAgJyBpZiAoIShcIiQkdlwiIGluIHMpKSB7XFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICcgcD1zO1xcbicgK1xyXG4gICAgICAgICAgICAgICAgICAnIHAuJCR2ID0gdW5kZWZpbmVkO1xcbicgK1xyXG4gICAgICAgICAgICAgICAgICAnIHAudGhlbihmdW5jdGlvbih2KSB7cC4kJHY9djt9KTtcXG4nICtcclxuICAgICAgICAgICAgICAgICAgJ31cXG4nICtcclxuICAgICAgICAgICAgICAgICcgcz1zLiQkdlxcbicgK1xyXG4gICAgICAgICAgICAgICd9XFxuJztcclxuICAgIH0pO1xyXG4gICAgY29kZSArPSAncmV0dXJuIHM7JztcclxuICAgIGZuID0gRnVuY3Rpb24oJ3MnLCAnaycsIGNvZGUpOyAvLyBzPXNjb3BlLCBrPWxvY2Fsc1xyXG4gICAgZm4udG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGNvZGU7IH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ2V0dGVyRm5DYWNoZVtwYXRoXSA9IGZuO1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gKiBAbmFtZSBuZy4kcGFyc2VcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi5cclxuICpcclxuICogPHByZT5cclxuICogICB2YXIgZ2V0dGVyID0gJHBhcnNlKCd1c2VyLm5hbWUnKTtcclxuICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcclxuICogICB2YXIgY29udGV4dCA9IHt1c2VyOntuYW1lOidhbmd1bGFyJ319O1xyXG4gKiAgIHZhciBsb2NhbHMgPSB7dXNlcjp7bmFtZTonbG9jYWwnfX07XHJcbiAqXHJcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0KSkudG9FcXVhbCgnYW5ndWxhcicpO1xyXG4gKiAgIHNldHRlcihjb250ZXh0LCAnbmV3VmFsdWUnKTtcclxuICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7XHJcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0LCBsb2NhbHMpKS50b0VxdWFsKCdsb2NhbCcpO1xyXG4gKiA8L3ByZT5cclxuICpcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cclxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcclxuICpcclxuICogICAgKiBgY29udGV4dGAgw6LigqzigJwgYHtvYmplY3R9YCDDouKCrOKAnCBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcclxuICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXHJcbiAqICAgICogYGxvY2Fsc2Agw6LigqzigJwgYHtvYmplY3Q9fWAgw6LigqzigJwgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXHJcbiAqICAgICAgYGNvbnRleHRgLlxyXG4gKlxyXG4gKiAgICBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gYWxzbyBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICogYGxpdGVyYWxgIMOi4oKs4oCcIGB7Ym9vbGVhbn1gIMOi4oKs4oCcIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24ncyB0b3AtbGV2ZWwgbm9kZSBpcyBhIEphdmFTY3JpcHRcclxuICogICAgICAgIGxpdGVyYWwuXHJcbiAqICAgICAgKiBgY29uc3RhbnRgIMOi4oKs4oCcIGB7Ym9vbGVhbn1gIMOi4oKs4oCcIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XHJcbiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy5cclxuICogICAgICAqIGBhc3NpZ25gIMOi4oKs4oCcIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIMOi4oKs4oCcIGlmIHRoZSBleHByZXNzaW9uIGlzIGFzc2lnbmFibGUsIHRoaXMgd2lsbCBiZVxyXG4gKiAgICAgICAgc2V0IHRvIGEgZnVuY3Rpb24gdG8gY2hhbmdlIGl0cyB2YWx1ZSBvbiB0aGUgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICovXHJcbmZ1bmN0aW9uICRQYXJzZVByb3ZpZGVyKCkge1xyXG4gIHZhciBjYWNoZSA9IHt9O1xyXG4gIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRmaWx0ZXIsICRzbmlmZmVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhwKSB7XHJcbiAgICAgIHN3aXRjaCh0eXBlb2YgZXhwKSB7XHJcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgIHJldHVybiBjYWNoZS5oYXNPd25Qcm9wZXJ0eShleHApXHJcbiAgICAgICAgICAgID8gY2FjaGVbZXhwXVxyXG4gICAgICAgICAgICA6IGNhY2hlW2V4cF0gPSAgcGFyc2VyKGV4cCwgZmFsc2UsICRmaWx0ZXIsICRzbmlmZmVyLmNzcCk7XHJcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgICAgcmV0dXJuIGV4cDtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIG5vb3A7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgc2VydmljZVxyXG4gKiBAbmFtZSBuZy4kcVxyXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBwcm9taXNlL2RlZmVycmVkIGltcGxlbWVudGF0aW9uIGluc3BpcmVkIGJ5IFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS5cclxuICpcclxuICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhblxyXG4gKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzXHJcbiAqIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgYW5kIG1heSBvciBtYXkgbm90IGJlIGZpbmlzaGVkIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aW1lLlxyXG4gKlxyXG4gKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvXHJcbiAqIGFzeW5jaHJvbm91cyBwcm9ncmFtbWluZyB3aGF0IGB0cnlgLCBgY2F0Y2hgIGFuZCBgdGhyb3dgIGtleXdvcmRzIGFyZSB0byBzeW5jaHJvbm91cyBwcm9ncmFtbWluZy5cclxuICpcclxuICogPHByZT5cclxuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgc2NvcGVgIGFyZVxyXG4gKiAgIC8vIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxyXG4gKlxyXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xyXG4gKiAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcclxuICpcclxuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAqICAgICAgIC8vIHNpbmNlIHRoaXMgZm4gZXhlY3V0ZXMgYXN5bmMgaW4gYSBmdXR1cmUgdHVybiBvZiB0aGUgZXZlbnQgbG9vcCwgd2UgbmVlZCB0byB3cmFwXHJcbiAqICAgICAgIC8vIG91ciBjb2RlIGludG8gYW4gJGFwcGx5IGNhbGwgc28gdGhhdCB0aGUgbW9kZWwgY2hhbmdlcyBhcmUgcHJvcGVybHkgb2JzZXJ2ZWQuXHJcbiAqICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcclxuICogICAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTtcclxuICpcclxuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XHJcbiAqICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xyXG4gKiAgICAgICAgIH0gZWxzZSB7XHJcbiAqICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcclxuICogICAgICAgICB9XHJcbiAqICAgICAgIH0pO1xyXG4gKiAgICAgfSwgMTAwMCk7XHJcbiAqXHJcbiAqICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICogICB9XHJcbiAqXHJcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XHJcbiAqICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGdyZWV0aW5nKSB7XHJcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcclxuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcclxuICogICAgIGFsZXJ0KCdGYWlsZWQ6ICcgKyByZWFzb24pO1xyXG4gKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4gKiAgICAgYWxlcnQoJ0dvdCBub3RpZmljYXRpb246ICcgKyB1cGRhdGUpO1xyXG4gKiAgIH0pO1xyXG4gKiA8L3ByZT5cclxuICpcclxuICogQXQgZmlyc3QgaXQgbWlnaHQgbm90IGJlIG9idmlvdXMgd2h5IHRoaXMgZXh0cmEgY29tcGxleGl0eSBpcyB3b3J0aCB0aGUgdHJvdWJsZS4gVGhlIHBheW9mZlxyXG4gKiBjb21lcyBpbiB0aGUgd2F5IG9mXHJcbiAqIFtndWFyYW50ZWVzIHRoYXQgcHJvbWlzZSBhbmQgZGVmZXJyZWQgQVBJcyBtYWtlXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZCkuXHJcbiAqXHJcbiAqIEFkZGl0aW9uYWxseSB0aGUgcHJvbWlzZSBhcGkgYWxsb3dzIGZvciBjb21wb3NpdGlvbiB0aGF0IGlzIHZlcnkgaGFyZCB0byBkbyB3aXRoIHRoZVxyXG4gKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLlxyXG4gKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGVcclxuICogc2VjdGlvbiBvbiBzZXJpYWwgb3IgcGFyYWxsZWwgam9pbmluZyBvZiBwcm9taXNlcy5cclxuICpcclxuICpcclxuICogIyBUaGUgRGVmZXJyZWQgQVBJXHJcbiAqXHJcbiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLlxyXG4gKlxyXG4gKiBUaGUgcHVycG9zZSBvZiB0aGUgZGVmZXJyZWQgb2JqZWN0IGlzIHRvIGV4cG9zZSB0aGUgYXNzb2NpYXRlZCBQcm9taXNlIGluc3RhbmNlIGFzIHdlbGwgYXMgQVBJc1xyXG4gKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1c1xyXG4gKiBvZiB0aGUgdGFzay5cclxuICpcclxuICogKipNZXRob2RzKipcclxuICpcclxuICogLSBgcmVzb2x2ZSh2YWx1ZSlgIMOi4oKs4oCcIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXHJcbiAqICAgY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGluc3RlYWQuXHJcbiAqIC0gYHJlamVjdChyZWFzb24pYCDDouKCrOKAnCByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xyXG4gKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC5cclxuICogLSBgbm90aWZ5KHZhbHVlKWAgLSBwcm92aWRlcyB1cGRhdGVzIG9uIHRoZSBzdGF0dXMgb2YgdGhlIHByb21pc2VzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkXHJcbiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC5cclxuICpcclxuICogKipQcm9wZXJ0aWVzKipcclxuICpcclxuICogLSBwcm9taXNlIMOi4oKs4oCcIGB7UHJvbWlzZX1gIMOi4oKs4oCcIHByb21pc2Ugb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRlZmVycmVkLlxyXG4gKlxyXG4gKlxyXG4gKiAjIFRoZSBQcm9taXNlIEFQSVxyXG4gKlxyXG4gKiBBIG5ldyBwcm9taXNlIGluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhIGRlZmVycmVkIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnlcclxuICogY2FsbGluZyBgZGVmZXJyZWQucHJvbWlzZWAuXHJcbiAqXHJcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBwcm9taXNlIG9iamVjdCBpcyB0byBhbGxvdyBmb3IgaW50ZXJlc3RlZCBwYXJ0aWVzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHJlc3VsdFxyXG4gKiBvZiB0aGUgZGVmZXJyZWQgdGFzayB3aGVuIGl0IGNvbXBsZXRlcy5cclxuICpcclxuICogKipNZXRob2RzKipcclxuICpcclxuICogLSBgdGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAgw6LigqzigJwgcmVnYXJkbGVzcyBvZiB3aGVuIHRoZSBwcm9taXNlIHdhcyBvclxyXG4gKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XHJcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcclxuICogICBvciByZWplY3Rpb24gcmVhc29uLiBBZGRpdGlvbmFsbHksIHRoZSBub3RpZnkgY2FsbGJhY2sgbWF5IGJlIGNhbGxlZCB6ZXJvIG9yIG1vcmUgdGltZXMgdG9cclxuICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxyXG4gKlxyXG4gKiAgIFRoaXMgbWV0aG9kICpyZXR1cm5zIGEgbmV3IHByb21pc2UqIHdoaWNoIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkIHZpYSB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZVxyXG4gKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AuIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2BcclxuICogICBtZXRob2QuIFRoZSBwcm9taXNlIGNhbiBub3QgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLlxyXG4gKlxyXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAgw6LigqzigJwgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYFxyXG4gKlxyXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrKWAgw6LigqzigJwgYWxsb3dzIHlvdSB0byBvYnNlcnZlIGVpdGhlciB0aGUgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIG9mIGEgcHJvbWlzZSxcclxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXHJcbiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXHJcbiAqICAgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xL3dpa2kvQVBJLVJlZmVyZW5jZSNwcm9taXNlZmluYWxseWNhbGxiYWNrKSBmb3JcclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxyXG4gKlxyXG4gKiAgIEJlY2F1c2UgYGZpbmFsbHlgIGlzIGEgcmVzZXJ2ZWQgd29yZCBpbiBKYXZhU2NyaXB0IGFuZCByZXNlcnZlZCBrZXl3b3JkcyBhcmUgbm90IHN1cHBvcnRlZCBhc1xyXG4gKiAgIHByb3BlcnR5IG5hbWVzIGJ5IEVTMywgeW91J2xsIG5lZWQgdG8gaW52b2tlIHRoZSBtZXRob2QgbGlrZSBgcHJvbWlzZVsnZmluYWxseSddKGNhbGxiYWNrKWAgdG9cclxuICogICBtYWtlIHlvdXIgY29kZSBJRTggY29tcGF0aWJsZS5cclxuICpcclxuICogIyBDaGFpbmluZyBwcm9taXNlc1xyXG4gKlxyXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHkgcG9zc2libGVcclxuICogdG8gY3JlYXRlIGEgY2hhaW4gb2YgcHJvbWlzZXM6XHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gKiAgICAgcmV0dXJuIHJlc3VsdCArIDE7XHJcbiAqICAgfSk7XHJcbiAqXHJcbiAqICAgLy8gcHJvbWlzZUIgd2lsbCBiZSByZXNvbHZlZCBpbW1lZGlhdGVseSBhZnRlciBwcm9taXNlQSBpcyByZXNvbHZlZCBhbmQgaXRzIHZhbHVlXHJcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcclxuICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZlxyXG4gKiB0aGUgcHJvbWlzZXMgYXQgYW55IHBvaW50IGluIHRoZSBjaGFpbi4gVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSB0byBpbXBsZW1lbnQgcG93ZXJmdWwgQVBJcyBsaWtlXHJcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxyXG4gKlxyXG4gKlxyXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXHJcbiAqXHJcbiAqICBUaGVyZSBhcmUgdGhyZWUgbWFpbiBkaWZmZXJlbmNlczpcclxuICpcclxuICogLSAkcSBpcyBpbnRlZ3JhdGVkIHdpdGggdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlfSBTY29wZSBtb2RlbCBvYnNlcnZhdGlvblxyXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXHJcbiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cclxuICogLSAkcSBwcm9taXNlcyBhcmUgcmVjb2duaXplZCBieSB0aGUgdGVtcGxhdGluZyBlbmdpbmUgaW4gYW5ndWxhciwgd2hpY2ggbWVhbnMgdGhhdCBpbiB0ZW1wbGF0ZXNcclxuICogICB5b3UgY2FuIHRyZWF0IHByb21pc2VzIGF0dGFjaGVkIHRvIGEgc2NvcGUgYXMgaWYgdGhleSB3ZXJlIHRoZSByZXN1bHRpbmcgdmFsdWVzLlxyXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xyXG4gKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuXHJcbiAqXHJcbiAqICAjIFRlc3RpbmdcclxuICpcclxuICogIDxwcmU+XHJcbiAqICAgIGl0KCdzaG91bGQgc2ltdWxhdGUgcHJvbWlzZScsIGluamVjdChmdW5jdGlvbigkcSwgJHJvb3RTY29wZSkge1xyXG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcbiAqICAgICAgdmFyIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xyXG4gKiAgICAgIHZhciByZXNvbHZlZFZhbHVlO1xyXG4gKlxyXG4gKiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkgeyByZXNvbHZlZFZhbHVlID0gdmFsdWU7IH0pO1xyXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAqXHJcbiAqICAgICAgLy8gU2ltdWxhdGUgcmVzb2x2aW5nIG9mIHByb21pc2VcclxuICogICAgICBkZWZlcnJlZC5yZXNvbHZlKDEyMyk7XHJcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxyXG4gKiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSB3YW50IHRoZSBwcm9taXNlIEFQSSB0byBhbHdheXMgYmUgYXN5bmMsIHdoZXRoZXIgb3Igbm90XHJcbiAqICAgICAgLy8gaXQgZ290IGNhbGxlZCBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxyXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAqXHJcbiAqICAgICAgLy8gUHJvcGFnYXRlIHByb21pc2UgcmVzb2x1dGlvbiB0byAndGhlbicgZnVuY3Rpb25zIHVzaW5nICRhcHBseSgpLlxyXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XHJcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvRXF1YWwoMTIzKTtcclxuICogICAgfSk7XHJcbiAqICA8L3ByZT5cclxuICovXHJcbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7XHJcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcclxuICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTtcclxuICB9XTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBtYW5hZ2VyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cclxuICogQHBhcmFtIHtmdW5jdGlvbiguLi4qKX0gZXhjZXB0aW9uSGFuZGxlciBGdW5jdGlvbiBpbnRvIHdoaWNoIHVuZXhwZWN0ZWQgZXhjZXB0aW9ucyBhcmUgcGFzc2VkIGZvclxyXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBxRmFjdG9yeShuZXh0VGljaywgZXhjZXB0aW9uSGFuZGxlcikge1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2NcclxuICAgKiBAbmFtZSBuZy4kcSNkZWZlclxyXG4gICAqIEBtZXRob2RPZiBuZy4kcVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXR1cm5zIGEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkLlxyXG4gICAqL1xyXG4gIHZhciBkZWZlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHBlbmRpbmcgPSBbXSxcclxuICAgICAgICB2YWx1ZSwgZGVmZXJyZWQ7XHJcblxyXG4gICAgZGVmZXJyZWQgPSB7XHJcblxyXG4gICAgICByZXNvbHZlOiBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHBlbmRpbmc7XHJcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgdmFsdWUgPSByZWYodmFsKTtcclxuXHJcbiAgICAgICAgICBpZiAoY2FsbGJhY2tzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICB2YXIgY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUudGhlbihjYWxsYmFja1swXSwgY2FsbGJhY2tbMV0sIGNhbGxiYWNrWzJdKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICByZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVqZWN0KHJlYXNvbikpO1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIG5vdGlmeTogZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcclxuICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHBlbmRpbmc7XHJcblxyXG4gICAgICAgICAgaWYgKHBlbmRpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjaztcclxuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja1syXShwcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgcHJvbWlzZToge1xyXG4gICAgICAgIHRoZW46IGZ1bmN0aW9uKGNhbGxiYWNrLCBlcnJiYWNrLCBwcm9ncmVzc2JhY2spIHtcclxuICAgICAgICAgIHZhciByZXN1bHQgPSBkZWZlcigpO1xyXG5cclxuICAgICAgICAgIHZhciB3cmFwcGVkQ2FsbGJhY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIHJlc3VsdC5yZXNvbHZlKChpc0Z1bmN0aW9uKGNhbGxiYWNrKSA/IGNhbGxiYWNrIDogZGVmYXVsdENhbGxiYWNrKSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICByZXN1bHQucmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgdmFyIHdyYXBwZWRFcnJiYWNrID0gZnVuY3Rpb24ocmVhc29uKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUoKGlzRnVuY3Rpb24oZXJyYmFjaykgPyBlcnJiYWNrIDogZGVmYXVsdEVycmJhY2spKHJlYXNvbikpO1xyXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICByZXN1bHQucmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgdmFyIHdyYXBwZWRQcm9ncmVzc2JhY2sgPSBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIHJlc3VsdC5ub3RpZnkoKGlzRnVuY3Rpb24ocHJvZ3Jlc3NiYWNrKSA/IHByb2dyZXNzYmFjayA6IGRlZmF1bHRDYWxsYmFjaykocHJvZ3Jlc3MpKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICBwZW5kaW5nLnB1c2goW3dyYXBwZWRDYWxsYmFjaywgd3JhcHBlZEVycmJhY2ssIHdyYXBwZWRQcm9ncmVzc2JhY2tdKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlLnRoZW4od3JhcHBlZENhbGxiYWNrLCB3cmFwcGVkRXJyYmFjaywgd3JhcHBlZFByb2dyZXNzYmFjayk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIFwiZmluYWxseVwiOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIG1ha2VQcm9taXNlKHZhbHVlLCByZXNvbHZlZCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmZXIoKTtcclxuICAgICAgICAgICAgaWYgKHJlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc3VsdC5yZWplY3QodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgaXNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGNhbGxiYWNrT3V0cHV0ID0gKGNhbGxiYWNrIHx8ZGVmYXVsdENhbGxiYWNrKSgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFja091dHB1dCAmJiBpc0Z1bmN0aW9uKGNhbGxiYWNrT3V0cHV0LnRoZW4pKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xyXG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UoZXJyb3IsIGZhbHNlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHRydWUpO1xyXG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGRlZmVycmVkO1xyXG4gIH07XHJcblxyXG5cclxuICB2YXIgcmVmID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pKSByZXR1cm4gdmFsdWU7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aGVuOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZWZlcigpO1xyXG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmVzdWx0LnJlc29sdmUoY2FsbGJhY2sodmFsdWUpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvY1xyXG4gICAqIEBuYW1lIG5nLiRxI3JlamVjdFxyXG4gICAqIEBtZXRob2RPZiBuZy4kcVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcclxuICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW5cclxuICAgKiBhIHByb21pc2UgY2hhaW4sIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGl0LlxyXG4gICAqXHJcbiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mXHJcbiAgICogYHJlamVjdGAgYXMgdGhlIGB0aHJvd2Aga2V5d29yZCBpbiBKYXZhU2NyaXB0LiBUaGlzIGFsc28gbWVhbnMgdGhhdCBpZiB5b3UgXCJjYXRjaFwiIGFuIGVycm9yIHZpYVxyXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxyXG4gICAqIGN1cnJlbnQgcHJvbWlzZSwgeW91IGhhdmUgdG8gXCJyZXRocm93XCIgdGhlIGVycm9yIGJ5IHJldHVybmluZyBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWFcclxuICAgKiBgcmVqZWN0YC5cclxuICAgKlxyXG4gICAqIDxwcmU+XHJcbiAgICogICBwcm9taXNlQiA9IHByb21pc2VBLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxyXG4gICAqICAgICAvLyAgICAgICAgICB3aXRoIHRoZSBvbGQgb3IgYSBuZXcgcmVzdWx0XHJcbiAgICogICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgKiAgICAgLy8gZXJyb3I6IGhhbmRsZSB0aGUgZXJyb3IgaWYgcG9zc2libGUgYW5kXHJcbiAgICogICAgIC8vICAgICAgICByZXNvbHZlIHByb21pc2VCIHdpdGggbmV3UHJvbWlzZU9yVmFsdWUsXHJcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXHJcbiAgICogICAgIGlmIChjYW5IYW5kbGUocmVhc29uKSkge1xyXG4gICAqICAgICAgLy8gaGFuZGxlIHRoZSBlcnJvciBhbmQgcmVjb3ZlclxyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xyXG4gICAqICAgICB9XHJcbiAgICogICAgIHJldHVybiAkcS5yZWplY3QocmVhc29uKTtcclxuICAgKiAgIH0pO1xyXG4gICAqIDwvcHJlPlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdhcyBhbHJlYWR5IHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIGByZWFzb25gLlxyXG4gICAqL1xyXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRoZW46IGZ1bmN0aW9uKGNhbGxiYWNrLCBlcnJiYWNrKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRlZmVyKCk7XHJcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXN1bHQucmVzb2x2ZSgoaXNGdW5jdGlvbihlcnJiYWNrKSA/IGVycmJhY2sgOiBkZWZhdWx0RXJyYmFjaykocmVhc29uKSk7XHJcbiAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnJlamVjdChlKTtcclxuICAgICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvY1xyXG4gICAqIEBuYW1lIG5nLiRxI3doZW5cclxuICAgKiBAbWV0aG9kT2YgbmcuJHFcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBXcmFwcyBhbiBvYmplY3QgdGhhdCBtaWdodCBiZSBhIHZhbHVlIG9yIGEgKDNyZCBwYXJ0eSkgdGhlbi1hYmxlIHByb21pc2UgaW50byBhICRxIHByb21pc2UuXHJcbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxyXG4gICAqIHRoZSBwcm9taXNlIGNvbWVzIGZyb20gYSBzb3VyY2UgdGhhdCBjYW4ndCBiZSB0cnVzdGVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXHJcbiAgICovXHJcbiAgdmFyIHdoZW4gPSBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzYmFjaykge1xyXG4gICAgdmFyIHJlc3VsdCA9IGRlZmVyKCksXHJcbiAgICAgICAgZG9uZTtcclxuXHJcbiAgICB2YXIgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2sgOiBkZWZhdWx0Q2FsbGJhY2spKHZhbHVlKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgd3JhcHBlZEVycmJhY2sgPSBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24oZXJyYmFjaykgPyBlcnJiYWNrIDogZGVmYXVsdEVycmJhY2spKHJlYXNvbik7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgIHJldHVybiByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIHdyYXBwZWRQcm9ncmVzc2JhY2sgPSBmdW5jdGlvbihwcm9ncmVzcykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoaXNGdW5jdGlvbihwcm9ncmVzc2JhY2spID8gcHJvZ3Jlc3NiYWNrIDogZGVmYXVsdENhbGxiYWNrKShwcm9ncmVzcyk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkge1xyXG4gICAgICByZWYodmFsdWUpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xyXG4gICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgIHJlc3VsdC5yZXNvbHZlKHJlZih2YWx1ZSkudGhlbih3cmFwcGVkQ2FsbGJhY2ssIHdyYXBwZWRFcnJiYWNrLCB3cmFwcGVkUHJvZ3Jlc3NiYWNrKSk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XHJcbiAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgcmVzdWx0LnJlc29sdmUod3JhcHBlZEVycmJhY2socmVhc29uKSk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKHByb2dyZXNzKSB7XHJcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcclxuICAgICAgICByZXN1bHQubm90aWZ5KHdyYXBwZWRQcm9ncmVzc2JhY2socHJvZ3Jlc3MpKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0LnByb21pc2U7XHJcbiAgfTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRDYWxsYmFjayh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRFcnJiYWNrKHJlYXNvbikge1xyXG4gICAgcmV0dXJuIHJlamVjdChyZWFzb24pO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvY1xyXG4gICAqIEBuYW1lIG5nLiRxI2FsbFxyXG4gICAqIEBtZXRob2RPZiBuZy4kcVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIENvbWJpbmVzIG11bHRpcGxlIHByb21pc2VzIGludG8gYSBzaW5nbGUgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gYWxsIG9mIHRoZSBpbnB1dFxyXG4gICAqIHByb21pc2VzIGFyZSByZXNvbHZlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuXHJcbiAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBzaW5nbGUgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheS9oYXNoIG9mIHZhbHVlcyxcclxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC4gSWYgYW55IG9mXHJcbiAgICogICB0aGUgcHJvbWlzZXMgaXMgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbiwgdGhpcyByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGggdGhlXHJcbiAgICogICBzYW1lIHJlamVjdGlvbi5cclxuICAgKi9cclxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcclxuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCksXHJcbiAgICAgICAgY291bnRlciA9IDAsXHJcbiAgICAgICAgcmVzdWx0cyA9IGlzQXJyYXkocHJvbWlzZXMpID8gW10gOiB7fTtcclxuXHJcbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcclxuICAgICAgY291bnRlcisrO1xyXG4gICAgICByZWYocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjtcclxuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xyXG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XHJcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGNvdW50ZXIgPT09IDApIHtcclxuICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBkZWZlcjogZGVmZXIsXHJcbiAgICByZWplY3Q6IHJlamVjdCxcclxuICAgIHdoZW46IHdoZW4sXHJcbiAgICBhbGw6IGFsbFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBERVNJR04gTk9URVNcclxuICpcclxuICogVGhlIGRlc2lnbiBkZWNpc2lvbnMgYmVoaW5kIHRoZSBzY29wZSBhcmUgaGVhdmlseSBmYXZvcmVkIGZvciBzcGVlZCBhbmQgbWVtb3J5IGNvbnN1bXB0aW9uLlxyXG4gKlxyXG4gKiBUaGUgdHlwaWNhbCB1c2Ugb2Ygc2NvcGUgaXMgdG8gd2F0Y2ggdGhlIGV4cHJlc3Npb25zLCB3aGljaCBtb3N0IG9mIHRoZSB0aW1lIHJldHVybiB0aGUgc2FtZVxyXG4gKiB2YWx1ZSBhcyBsYXN0IHRpbWUgc28gd2Ugb3B0aW1pemUgdGhlIG9wZXJhdGlvbi5cclxuICpcclxuICogQ2xvc3VyZXMgY29uc3RydWN0aW9uIGlzIGV4cGVuc2l2ZSBpbiB0ZXJtcyBvZiBzcGVlZCBhcyB3ZWxsIGFzIG1lbW9yeTpcclxuICogICAtIE5vIGNsb3N1cmVzLCBpbnN0ZWFkIHVzZSBwcm90b3R5cGljYWwgaW5oZXJpdGFuY2UgZm9yIEFQSVxyXG4gKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcclxuICogICAgIGV4cG9zZWQgYXMgJCRfX19fIHByb3BlcnRpZXNcclxuICpcclxuICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxyXG4gKiAgIC0gdGhpcyBtZWFucyB0aGF0IGluIG9yZGVyIHRvIGtlZXAgdGhlIHNhbWUgb3JkZXIgb2YgZXhlY3V0aW9uIGFzIGFkZGl0aW9uIHdlIGhhdmUgdG8gYWRkXHJcbiAqICAgICBpdGVtcyB0byB0aGUgYXJyYXkgYXQgdGhlIGJlZ2lubmluZyAoc2hpZnQpIGluc3RlYWQgb2YgYXQgdGhlIGVuZCAocHVzaClcclxuICpcclxuICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuXHJcbiAqICAgLSBVc2luZyBhbiBhcnJheSB3b3VsZCBiZSBzbG93IHNpbmNlIGluc2VydHMgaW4gbWlkZGxlIGFyZSBleHBlbnNpdmUgc28gd2UgdXNlIGxpbmtlZCBsaXN0XHJcbiAqXHJcbiAqIFRoZXJlIGFyZSBmZXcgd2F0Y2hlcyB0aGVuIGEgbG90IG9mIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlXHJcbiAqIGltcGxlbWVudGVkIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIHdoaWNoXHJcbiAqIGFyZSBleHBlbnNpdmUgdG8gY29uc3RydWN0LlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kcm9vdFNjb3BlUHJvdmlkZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZnVuY3Rpb25cclxuICogQG5hbWUgbmcuJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxyXG4gKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZVByb3ZpZGVyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBTZXRzIHRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMgdGhlIHNjb3BlIHNob3VsZCBhdHRlbXB0IHRvIGV4ZWN1dGUgYmVmb3JlIGdpdmluZyB1cCBhbmRcclxuICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXHJcbiAqXHJcbiAqIFRoZSBjdXJyZW50IGRlZmF1bHQgaXMgMTAgaXRlcmF0aW9ucy5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2Mgb2JqZWN0XHJcbiAqIEBuYW1lIG5nLiRyb290U2NvcGVcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEV2ZXJ5IGFwcGxpY2F0aW9uIGhhcyBhIHNpbmdsZSByb290IHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cclxuICogQWxsIG90aGVyIHNjb3BlcyBhcmUgY2hpbGQgc2NvcGVzIG9mIHRoZSByb290IHNjb3BlLiBTY29wZXMgcHJvdmlkZSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBhbmQgcHJvdmlkZVxyXG4gKiBldmVudCBwcm9jZXNzaW5nIGxpZmUtY3ljbGUuIFNlZSB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uXHJcbiAqL1xyXG5mdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKXtcclxuICB2YXIgVFRMID0gMTA7XHJcbiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcclxuXHJcbiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgVFRMID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVFRMO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRwYXJzZScsICckYnJvd3NlcicsXHJcbiAgICAgIGZ1bmN0aW9uKCAkaW5qZWN0b3IsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJHBhcnNlLCAgICRicm93c2VyKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIEEgcm9vdCBzY29wZSBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZSAkcm9vdFNjb3BlfSBrZXkgZnJvbSB0aGVcclxuICAgICAqIHtAbGluayBBVVRPLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXHJcbiAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3ICRuZXcoKX0gbWV0aG9kLiAoTW9zdCBzY29wZXMgYXJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSB3aGVuXHJcbiAgICAgKiBjb21waWxlZCBIVE1MIHRlbXBsYXRlIGlzIGV4ZWN1dGVkLilcclxuICAgICAqXHJcbiAgICAgKiBIZXJlIGlzIGEgc2ltcGxlIHNjb3BlIHNuaXBwZXQgdG8gc2hvdyBob3cgeW91IGNhbiBpbnRlcmFjdCB3aXRoIHRoZSBzY29wZS5cclxuICAgICAqIDxwcmU+XHJcbiAgICAgKiA8ZmlsZSBzcmM9XCIuL3Rlc3Qvbmcvcm9vdFNjb3BlU3BlYy5qc1wiIHRhZz1cImRvY3MxXCIgLz5cclxuICAgICAqIDwvcHJlPlxyXG4gICAgICpcclxuICAgICAqICMgSW5oZXJpdGFuY2VcclxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxyXG4gICAgICogPHByZT5cclxuICAgICAgICAgdmFyIHBhcmVudCA9ICRyb290U2NvcGU7XHJcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XHJcblxyXG4gICAgICAgICBwYXJlbnQuc2FsdXRhdGlvbiA9IFwiSGVsbG9cIjtcclxuICAgICAgICAgY2hpbGQubmFtZSA9IFwiV29ybGRcIjtcclxuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XHJcblxyXG4gICAgICAgICBjaGlsZC5zYWx1dGF0aW9uID0gXCJXZWxjb21lXCI7XHJcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XHJcbiAgICAgICAgIGV4cGVjdChwYXJlbnQuc2FsdXRhdGlvbikudG9FcXVhbCgnSGVsbG8nKTtcclxuICAgICAqIDwvcHJlPlxyXG4gICAgICpcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbigpPj19IHByb3ZpZGVycyBNYXAgb2Ygc2VydmljZSBmYWN0b3J5IHdoaWNoIG5lZWQgdG8gYmUgcHJvdmlkZWRcclxuICAgICAqICAgICBmb3IgdGhlIGN1cnJlbnQgc2NvcGUuIERlZmF1bHRzIHRvIHtAbGluayBuZ30uXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGRcclxuICAgICAqICAgICBhcHBlbmQvb3ZlcnJpZGUgc2VydmljZXMgcHJvdmlkZWQgYnkgYHByb3ZpZGVyc2AuIFRoaXMgaXMgaGFuZHkgd2hlbiB1bml0LXRlc3RpbmcgYW5kIGhhdmluZ1xyXG4gICAgICogICAgIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdCBzZXJ2aWNlLlxyXG4gICAgICogQHJldHVybnMge09iamVjdH0gTmV3bHkgY3JlYXRlZCBzY29wZS5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFNjb3BlKCkge1xyXG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcclxuICAgICAgdGhpcy4kJHBoYXNlID0gdGhpcy4kcGFyZW50ID0gdGhpcy4kJHdhdGNoZXJzID1cclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID1cclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xyXG4gICAgICB0aGlzWyd0aGlzJ10gPSB0aGlzLiRyb290ID0gIHRoaXM7XHJcbiAgICAgIHRoaXMuJCRkZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgICAgdGhpcy4kJGFzeW5jUXVldWUgPSBbXTtcclxuICAgICAgdGhpcy4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdO1xyXG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XHJcbiAgICAgIHRoaXMuJCRpc29sYXRlQmluZGluZ3MgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxyXG4gICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkaWRcclxuICAgICAqIEBwcm9wZXJ0eU9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGFscGhhbnVtZXJpYyBzZXF1ZW5jZSkgdXNlZnVsIGZvclxyXG4gICAgICogICBkZWJ1Z2dpbmcuXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgU2NvcGUucHJvdG90eXBlID0ge1xyXG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkbmV3XHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogQ3JlYXRlcyBhIG5ldyBjaGlsZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBhbmRcclxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGV2ZW50cy4gVGhlIHNjb3BlIGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHNjb3BlXHJcbiAgICAgICAqIGhpZXJhcmNoeSB1c2luZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveSAkZGVzdHJveSgpfS5cclxuICAgICAgICpcclxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzIGRlc2lyZWQgZm9yXHJcbiAgICAgICAqIHRoZSBzY29wZSBhbmQgaXRzIGNoaWxkIHNjb3BlcyB0byBiZSBwZXJtYW5lbnRseSBkZXRhY2hlZCBmcm9tIHRoZSBwYXJlbnQgYW5kIHRodXMgc3RvcFxyXG4gICAgICAgKiBwYXJ0aWNpcGF0aW5nIGluIG1vZGVsIGNoYW5nZSBkZXRlY3Rpb24gYW5kIGxpc3RlbmVyIG5vdGlmaWNhdGlvbiBieSBpbnZva2luZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBpc29sYXRlIGlmIHRydWUgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZVxyXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cclxuICAgICAgICogICAgICAgICBXaGVuIGNyZWF0aW5nIHdpZGdldHMgaXQgaXMgdXNlZnVsIGZvciB0aGUgd2lkZ2V0IHRvIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBwYXJlbnRcclxuICAgICAgICogICAgICAgICBzdGF0ZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMge09iamVjdH0gVGhlIG5ld2x5IGNyZWF0ZWQgY2hpbGQgc2NvcGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xyXG4gICAgICAkbmV3OiBmdW5jdGlvbihpc29sYXRlKSB7XHJcbiAgICAgICAgdmFyIENoaWxkLFxyXG4gICAgICAgICAgICBjaGlsZDtcclxuXHJcbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcclxuICAgICAgICAgIGNoaWxkID0gbmV3IFNjb3BlKCk7XHJcbiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7XHJcbiAgICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGVyZSBpcyBqdXN0IG9uZSBhc3luYyBxdWV1ZSBwZXIgJHJvb3RTY29wZSBhbmQgaXQncyBjaGlsZHJlblxyXG4gICAgICAgICAgY2hpbGQuJCRhc3luY1F1ZXVlID0gdGhpcy4kJGFzeW5jUXVldWU7XHJcbiAgICAgICAgICBjaGlsZC4kJHBvc3REaWdlc3RRdWV1ZSA9IHRoaXMuJCRwb3N0RGlnZXN0UXVldWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIENoaWxkID0gZnVuY3Rpb24oKSB7fTsgLy8gc2hvdWxkIGJlIGFub255bW91czsgVGhpcyBpcyBzbyB0aGF0IHdoZW4gdGhlIG1pbmlmaWVyIG11bmdlc1xyXG4gICAgICAgICAgICAvLyB0aGUgbmFtZSBpdCBkb2VzIG5vdCBiZWNvbWUgcmFuZG9tIHNldCBvZiBjaGFycy4gVGhlc2Ugd2lsbCB0aGVuIHNob3cgdXAgYXMgY2xhc3NcclxuICAgICAgICAgICAgLy8gbmFtZSBpbiB0aGUgZGVidWdnZXIuXHJcbiAgICAgICAgICBDaGlsZC5wcm90b3R5cGUgPSB0aGlzO1xyXG4gICAgICAgICAgY2hpbGQgPSBuZXcgQ2hpbGQoKTtcclxuICAgICAgICAgIGNoaWxkLiRpZCA9IG5leHRVaWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGRbJ3RoaXMnXSA9IGNoaWxkO1xyXG4gICAgICAgIGNoaWxkLiQkbGlzdGVuZXJzID0ge307XHJcbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgY2hpbGQuJCR3YXRjaGVycyA9IGNoaWxkLiQkbmV4dFNpYmxpbmcgPSBjaGlsZC4kJGNoaWxkSGVhZCA9IGNoaWxkLiQkY2hpbGRUYWlsID0gbnVsbDtcclxuICAgICAgICBjaGlsZC4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkVGFpbDtcclxuICAgICAgICBpZiAodGhpcy4kJGNoaWxkSGVhZCkge1xyXG4gICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XHJcbiAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gY2hpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hcclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAtIFRoZSBgd2F0Y2hFeHByZXNzaW9uYCBpcyBjYWxsZWQgb24gZXZlcnkgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kXHJcbiAgICAgICAqICAgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgd2hpY2ggd2lsbCBiZSB3YXRjaGVkLiAoU2luY2Uge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9XHJcbiAgICAgICAqICAgcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXJcclxuICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gYW5kIHNob3VsZCBiZSBpZGVtcG90ZW50LilcclxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgb25seSB3aGVuIHRoZSB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGB3YXRjaEV4cHJlc3Npb25gIGFuZCB0aGVcclxuICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sXHJcbiAgICAgICAqICAgc2VlIGJlbG93KS4gVGhlIGluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG9cclxuICAgICAgICogICB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvciBsYXRlciBjb21wYXJpc29uLCB0aGVcclxuICAgICAgICogICB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBJdCBhbHNvIG1lYW5zIHRoYXQgd2F0Y2hpbmcgY29tcGxleCBvcHRpb25zIHdpbGxcclxuICAgICAgICogICBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuXHJcbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuIFRoaXNcclxuICAgICAgICogICBpcyBhY2hpZXZlZCBieSByZXJ1bm5pbmcgdGhlIHdhdGNoZXJzIHVudGlsIG5vIGNoYW5nZXMgYXJlIGRldGVjdGVkLiBUaGUgcmVydW4gaXRlcmF0aW9uXHJcbiAgICAgICAqICAgbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLlxyXG4gICAgICAgKlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCxcclxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKFNpbmNlIGB3YXRjaEV4cHJlc3Npb25gXHJcbiAgICAgICAqIGNhbiBleGVjdXRlIG11bHRpcGxlIHRpbWVzIHBlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlIHdoZW4gYSBjaGFuZ2UgaXNcclxuICAgICAgICogZGV0ZWN0ZWQsIGJlIHByZXBhcmVkIGZvciBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGxpc3RlbmVyLilcclxuICAgICAgICpcclxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxyXG4gICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlXHJcbiAgICAgICAqIHdhdGNoZXIuIEluIHJhcmUgY2FzZXMsIHRoaXMgaXMgdW5kZXNpcmFibGUgYmVjYXVzZSB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkIHdoZW4gdGhlIHJlc3VsdFxyXG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxyXG4gICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZVxyXG4gICAgICAgKiBsaXN0ZW5lciB3YXMgY2FsbGVkIGR1ZSB0byBpbml0aWFsaXphdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICpcclxuICAgICAgICogIyBFeGFtcGxlXHJcbiAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICAgLy8gbGV0J3MgYXNzdW1lIHRoYXQgc2NvcGUgd2FzIGRlcGVuZGVuY3kgaW5qZWN0ZWQgYXMgdGhlICRyb290U2NvcGVcclxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xyXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xyXG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcclxuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHsgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxOyB9KTtcclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcclxuXHJcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgICAgIC8vIG5vIHZhcmlhYmxlIGNoYW5nZVxyXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xyXG5cclxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xyXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcclxuICAgICAgICogPC9wcmU+XHJcbiAgICAgICAqXHJcbiAgICAgICAqXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaFxyXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBIGNoYW5nZSBpbiB0aGUgcmV0dXJuIHZhbHVlIHRyaWdnZXJzIGFcclxuICAgICAgICogICAgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cclxuICAgICAgICpcclxuICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XHJcbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cclxuICAgICAgICogQHBhcmFtIHsoZnVuY3Rpb24oKXxzdHJpbmcpPX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2ZcclxuICAgICAgICogICB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cclxuICAgICAgICpcclxuICAgICAgICogICAgLSBgc3RyaW5nYDogRXZhbHVhdGVkIGFzIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XHJcbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBhbmQgcHJldmlvdXMgdmFsdWVzIGFzIHBhcmFtZXRlcnMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9iamVjdEVxdWFsaXR5IENvbXBhcmUgb2JqZWN0IGZvciBlcXVhbGl0eSByYXRoZXIgdGhhbiBmb3IgcmVmZXJlbmNlLlxyXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxyXG4gICAgICAgKi9cclxuICAgICAgJHdhdGNoOiBmdW5jdGlvbih3YXRjaEV4cCwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KSB7XHJcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcyxcclxuICAgICAgICAgICAgZ2V0ID0gY29tcGlsZVRvRm4od2F0Y2hFeHAsICd3YXRjaCcpLFxyXG4gICAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMsXHJcbiAgICAgICAgICAgIHdhdGNoZXIgPSB7XHJcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxyXG4gICAgICAgICAgICAgIGxhc3Q6IGluaXRXYXRjaFZhbCxcclxuICAgICAgICAgICAgICBnZXQ6IGdldCxcclxuICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLFxyXG4gICAgICAgICAgICAgIGVxOiAhIW9iamVjdEVxdWFsaXR5XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGluIHRoZSBjYXNlIHVzZXIgcGFzcyBzdHJpbmcsIHdlIG5lZWQgdG8gY29tcGlsZSBpdCwgZG8gd2UgcmVhbGx5IG5lZWQgdGhpcyA/XHJcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xyXG4gICAgICAgICAgdmFyIGxpc3RlbkZuID0gY29tcGlsZVRvRm4obGlzdGVuZXIgfHwgbm9vcCwgJ2xpc3RlbmVyJyk7XHJcbiAgICAgICAgICB3YXRjaGVyLmZuID0gZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKSB7bGlzdGVuRm4oc2NvcGUpO307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHdhdGNoRXhwID09ICdzdHJpbmcnICYmIGdldC5jb25zdGFudCkge1xyXG4gICAgICAgICAgdmFyIG9yaWdpbmFsRm4gPSB3YXRjaGVyLmZuO1xyXG4gICAgICAgICAgd2F0Y2hlci5mbiA9IGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsLCBzY29wZSkge1xyXG4gICAgICAgICAgICBvcmlnaW5hbEZuLmNhbGwodGhpcywgbmV3VmFsLCBvbGRWYWwsIHNjb3BlKTtcclxuICAgICAgICAgICAgYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghYXJyYXkpIHtcclxuICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLlxyXG4gICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXHJcbiAgICAgICAgYXJyYXkudW5zaGlmdCh3YXRjaGVyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgYXJyYXlSZW1vdmUoYXJyYXksIHdhdGNoZXIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlXHJcbiAgICAgICAqIChmb3IgYXJyYXlzIHRoaXMgaW1wbGllcyB3YXRjaGluZyB0aGUgYXJyYXkgaXRlbXMsIGZvciBvYmplY3QgbWFwcyB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIHByb3BlcnRpZXMpLlxyXG4gICAgICAgKiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCB0aGUgYGxpc3RlbmVyYCBjYWxsYmFjayBpcyBmaXJlZC5cclxuICAgICAgICpcclxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnkgY2FsbCB0byAkZGlnZXN0KCkgdG9cclxuICAgICAgICogICBzZWUgaWYgYW55IGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCwgcmVtb3ZlZCwgb3IgbW92ZWQuXHJcbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGUgYWRkaW5nIG5ldyBpdGVtc1xyXG4gICAgICAgKiAgIGludG8gdGhlIG9iamVjdCBvciBhcnJheSwgcmVtb3ZpbmcgYW5kIG1vdmluZyBpdGVtcyBhcm91bmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqXHJcbiAgICAgICAqICMgRXhhbXBsZVxyXG4gICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddO1xyXG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XHJcblxyXG4gICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcclxuICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XHJcblxyXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXHJcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcclxuXHJcbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XHJcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xyXG5cclxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxyXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoMyk7XHJcbiAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgKlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xGdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZSBleHByZXNzaW9uIHZhbHVlXHJcbiAgICAgICAqICAgIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxyXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGN5Y2xlLiBBbnkgc2hhbGxvdyBjaGFuZ2Ugd2l0aGluIHRoZSBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlclxyXG4gICAgICAgKiAgICBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3Q29sbGVjdGlvbiwgb2xkQ29sbGVjdGlvbiwgc2NvcGUpfSBsaXN0ZW5lciBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZmlyZWQgd2l0aCBib3RoXHJcbiAgICAgICAqICAgIHRoZSBgbmV3Q29sbGVjdGlvbmAgYW5kIGBvbGRDb2xsZWN0aW9uYCBhcyBwYXJhbWV0ZXJzLlxyXG4gICAgICAgKiAgICBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uIGFuZCB0aGVcclxuICAgICAgICogICAgYG9sZENvbGxlY3Rpb25gIG9iamVjdCBpcyBhIGNvcHkgb2YgdGhlIGZvcm1lciBjb2xsZWN0aW9uIGRhdGEuXHJcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZS1yZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuIFdoZW4gdGhlIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBpcyBleGVjdXRlZFxyXG4gICAgICAgKiB0aGVuIHRoZSBpbnRlcm5hbCB3YXRjaCBvcGVyYXRpb24gaXMgdGVybWluYXRlZC5cclxuICAgICAgICovXHJcbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG9sZFZhbHVlO1xyXG4gICAgICAgIHZhciBuZXdWYWx1ZTtcclxuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xyXG4gICAgICAgIHZhciBvYmpHZXR0ZXIgPSAkcGFyc2Uob2JqKTtcclxuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xyXG4gICAgICAgIHZhciBpbnRlcm5hbE9iamVjdCA9IHt9O1xyXG4gICAgICAgIHZhciBvbGRMZW5ndGggPSAwO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uV2F0Y2goKSB7XHJcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9iakdldHRlcihzZWxmKTtcclxuICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleTtcclxuXHJcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IGludGVybmFsQXJyYXkpIHtcclxuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIGFycmF5IGludG8gYXJyYXkuXHJcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xyXG4gICAgICAgICAgICAgIG9sZExlbmd0aCA9IG9sZFZhbHVlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gbmV3VmFsdWUubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCAhPT0gbmV3TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgLy8gaWYgbGVuZ3RocyBkbyBub3QgbWF0Y2ggd2UgbmVlZCB0byB0cmlnZ2VyIGNoYW5nZSBub3RpZmljYXRpb25cclxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xyXG4gICAgICAgICAgICAgIG9sZFZhbHVlLmxlbmd0aCA9IG9sZExlbmd0aCA9IG5ld0xlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGlmIChvbGRWYWx1ZVtpXSAhPT0gbmV3VmFsdWVbaV0pIHtcclxuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZVtpXSA9IG5ld1ZhbHVlW2ldO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbE9iamVjdCkge1xyXG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gb2JqZWN0IGludG8gb2JqZWN0LlxyXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgICBvbGRMZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXHJcbiAgICAgICAgICAgIG5ld0xlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIG5ld0xlbmd0aCsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlW2tleV0gIT09IG5ld1ZhbHVlW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgrKztcclxuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld1ZhbHVlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAvLyB3ZSB1c2VkIHRvIGhhdmUgbW9yZSBrZXlzLCBuZWVkIHRvIGZpbmQgdGhlbSBhbmQgZGVzdHJveSB0aGVtLlxyXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XHJcbiAgICAgICAgICAgICAgZm9yKGtleSBpbiBvbGRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlLmhhc093blByb3BlcnR5KGtleSkgJiYgIW5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XHJcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRWYWx1ZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHtcclxuICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlLCBvbGRWYWx1ZSwgc2VsZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2goJHdhdGNoQ29sbGVjdGlvbldhdGNoLCAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XHJcbiAgICAgICAqIEBtZXRob2RPZiBuZy4kcm9vdFNjb3BlLlNjb3BlXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfSBvZiB0aGUgY3VycmVudCBzY29wZSBhbmQgaXRzIGNoaWxkcmVuLlxyXG4gICAgICAgKiBCZWNhdXNlIGEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJ9J3MgbGlzdGVuZXIgY2FuIGNoYW5nZSB0aGUgbW9kZWwsIHRoZVxyXG4gICAgICAgKiBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9IHVudGlsIG5vIG1vcmUgbGlzdGVuZXJzIGFyZVxyXG4gICAgICAgKiBmaXJpbmcuIFRoaXMgbWVhbnMgdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBnZXQgaW50byBhbiBpbmZpbml0ZSBsb29wLiBUaGlzIGZ1bmN0aW9uIHdpbGwgdGhyb3dcclxuICAgICAgICogYCdNYXhpbXVtIGl0ZXJhdGlvbiBsaW1pdCBleGNlZWRlZC4nYCBpZiB0aGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC5cclxuICAgICAgICpcclxuICAgICAgICogVXN1YWxseSB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxyXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW5cclxuICAgICAgICoge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZXN9LlxyXG4gICAgICAgKiBJbnN0ZWFkIGEgY2FsbCB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5KCl9ICh0eXBpY2FsbHkgZnJvbSB3aXRoaW4gYVxyXG4gICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30pIHdpbGwgZm9yY2UgYSBgJGRpZ2VzdCgpYC5cclxuICAgICAgICpcclxuICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIgYCRkaWdlc3QoKWAgaXMgY2FsbGVkLFxyXG4gICAgICAgKiB5b3UgY2FuIHJlZ2lzdGVyIGEgYHdhdGNoRXhwcmVzc2lvbmAgZnVuY3Rpb24gIHdpdGgge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxyXG4gICAgICAgKiB3aXRoIG5vIGBsaXN0ZW5lcmAuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIFlvdSBtYXkgaGF2ZSBhIG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCBmcm9tIHdpdGhpbiB1bml0LXRlc3RzLCB0byBzaW11bGF0ZSB0aGUgc2NvcGVcclxuICAgICAgICogbGlmZS1jeWNsZS5cclxuICAgICAgICpcclxuICAgICAgICogIyBFeGFtcGxlXHJcbiAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICAgdmFyIHNjb3BlID0gLi4uO1xyXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xyXG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcclxuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcclxuICAgICAgICAgICB9KTtcclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcclxuXHJcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xyXG4gICAgICAgICAgIC8vIG5vIHZhcmlhYmxlIGNoYW5nZVxyXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xyXG5cclxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xyXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcclxuICAgICAgICogPC9wcmU+XHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xyXG4gICAgICAkZGlnZXN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LFxyXG4gICAgICAgICAgICB3YXRjaGVycyxcclxuICAgICAgICAgICAgYXN5bmNRdWV1ZSA9IHRoaXMuJCRhc3luY1F1ZXVlLFxyXG4gICAgICAgICAgICBwb3N0RGlnZXN0UXVldWUgPSB0aGlzLiQkcG9zdERpZ2VzdFF1ZXVlLFxyXG4gICAgICAgICAgICBsZW5ndGgsXHJcbiAgICAgICAgICAgIGRpcnR5LCB0dGwgPSBUVEwsXHJcbiAgICAgICAgICAgIG5leHQsIGN1cnJlbnQsIHRhcmdldCA9IHRoaXMsXHJcbiAgICAgICAgICAgIHdhdGNoTG9nID0gW10sXHJcbiAgICAgICAgICAgIGxvZ0lkeCwgbG9nTXNnO1xyXG5cclxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XHJcblxyXG4gICAgICAgIGRvIHsgLy8gXCJ3aGlsZSBkaXJ0eVwiIGxvb3BcclxuICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xyXG5cclxuICAgICAgICAgIHdoaWxlKGFzeW5jUXVldWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY3VycmVudC4kZXZhbChhc3luY1F1ZXVlLnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcclxuICAgICAgICAgICAgaWYgKCh3YXRjaGVycyA9IGN1cnJlbnQuJCR3YXRjaGVycykpIHtcclxuICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzXHJcbiAgICAgICAgICAgICAgbGVuZ3RoID0gd2F0Y2hlcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1tsZW5ndGhdO1xyXG4gICAgICAgICAgICAgICAgICAvLyBNb3N0IGNvbW1vbiB3YXRjaGVzIGFyZSBvbiBwcmltaXRpdmVzLCBpbiB3aGljaCBjYXNlIHdlIGNhbiBzaG9ydFxyXG4gICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzXHJcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiAodmFsdWUgPSB3YXRjaC5nZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoLmVxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlcXVhbHModmFsdWUsIGxhc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0ID09ICdudW1iZXInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgaXNOYU4odmFsdWUpICYmIGlzTmFOKGxhc3QpKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSkgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB3YXRjaC5mbih2YWx1ZSwgKChsYXN0ID09PSBpbml0V2F0Y2hWYWwpID8gdmFsdWUgOiBsYXN0KSwgY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR0bCA8IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGxvZ0lkeCA9IDQgLSB0dGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhdGNoTG9nW2xvZ0lkeF0pIHdhdGNoTG9nW2xvZ0lkeF0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgIGxvZ01zZyA9IChpc0Z1bmN0aW9uKHdhdGNoLmV4cCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnZm46ICcgKyAod2F0Y2guZXhwLm5hbWUgfHwgd2F0Y2guZXhwLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB3YXRjaC5leHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsb2dNc2cgKz0gJzsgbmV3VmFsOiAnICsgdG9Kc29uKHZhbHVlKSArICc7IG9sZFZhbDogJyArIHRvSnNvbihsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgIHdhdGNoTG9nW2xvZ0lkeF0ucHVzaChsb2dNc2cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxyXG4gICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxyXG4gICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3RcclxuICAgICAgICAgICAgaWYgKCEobmV4dCA9IChjdXJyZW50LiQkY2hpbGRIZWFkIHx8IChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XHJcbiAgICAgICAgICAgICAgd2hpbGUoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcclxuXHJcbiAgICAgICAgICBpZihkaXJ0eSAmJiAhKHR0bC0tKSkge1xyXG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XHJcbiAgICAgICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2luZmRpZycsXHJcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbldhdGNoZXJzIGZpcmVkIGluIHRoZSBsYXN0IDUgaXRlcmF0aW9uczogezF9JyxcclxuICAgICAgICAgICAgICAgIFRUTCwgdG9Kc29uKHdhdGNoTG9nKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoZGlydHkgfHwgYXN5bmNRdWV1ZS5sZW5ndGgpO1xyXG5cclxuICAgICAgICBjbGVhclBoYXNlKCk7XHJcblxyXG4gICAgICAgIHdoaWxlKHBvc3REaWdlc3RRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZS5zaGlmdCgpKCk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGV2ZW50XHJcbiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcclxuICAgICAgICogQGV2ZW50T2YgbmcuJHJvb3RTY29wZS5TY29wZVxyXG4gICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiBzY29wZSBiZWluZyBkZXN0cm95ZWRcclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIEJyb2FkY2FzdGVkIHdoZW4gYSBzY29wZSBhbmQgaXRzIGNoaWxkcmVuIGFyZSBiZWluZyBkZXN0cm95ZWQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXHJcbiAgICAgICAqIGNsZWFuIHVwIERPTSBiaW5kaW5ncyBiZWZvcmUgYW4gZWxlbWVudCBpcyByZW1vdmVkIGZyb20gdGhlIERPTS5cclxuICAgICAgICovXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBSZW1vdmVzIHRoZSBjdXJyZW50IHNjb3BlIChhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbikgZnJvbSB0aGUgcGFyZW50IHNjb3BlLiBSZW1vdmFsIGltcGxpZXNcclxuICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXJcclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcclxuICAgICAgICogc2NvcGUgaXMgZWxpZ2libGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXHJcbiAgICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9IGZvciBtYW5hZ2luZyB0aGVcclxuICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBKdXN0IGJlZm9yZSBhIHNjb3BlIGlzIGRlc3Ryb3llZCBhIGAkZGVzdHJveWAgZXZlbnQgaXMgYnJvYWRjYXN0ZWQgb24gdGhpcyBzY29wZS5cclxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgY2hhbmNlIHRvXHJcbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xyXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXHJcbiAgICAgICAqL1xyXG4gICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gd2UgY2FuJ3QgZGVzdHJveSB0aGUgcm9vdCBzY29wZSBvciBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWRcclxuICAgICAgICBpZiAoJHJvb3RTY29wZSA9PSB0aGlzIHx8IHRoaXMuJCRkZXN0cm95ZWQpIHJldHVybjtcclxuICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy4kcGFyZW50O1xyXG5cclxuICAgICAgICB0aGlzLiRicm9hZGNhc3QoJyRkZXN0cm95Jyk7XHJcbiAgICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xyXG4gICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZFRhaWwgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLiQkcHJldlNpYmxpbmcpIHRoaXMuJCRwcmV2U2libGluZy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJG5leHRTaWJsaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nO1xyXG5cclxuICAgICAgICAvLyBUaGlzIGlzIGJvZ3VzIGNvZGUgdGhhdCB3b3JrcyBhcm91bmQgQ2hyb21lJ3MgR0MgbGVha1xyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTMxMyNpc3N1ZWNvbW1lbnQtMTAzNzg0NTFcclxuICAgICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkY2hpbGRIZWFkID1cclxuICAgICAgICAgICAgdGhpcy4kJGNoaWxkVGFpbCA9IG51bGw7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGV2YWxcclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIHJldHVybmluZyB0aGUgcmVzdWx0LiBBbnkgZXhjZXB0aW9ucyBpbiB0aGVcclxuICAgICAgICogZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhciBleHByZXNzaW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogIyBFeGFtcGxlXHJcbiAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICAgdmFyIHNjb3BlID0gbmcuJHJvb3RTY29wZS5TY29wZSgpO1xyXG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xyXG4gICAgICAgICAgIHNjb3BlLmIgPSAyO1xyXG5cclxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xyXG4gICAgICAgICAgIGV4cGVjdChzY29wZS4kZXZhbChmdW5jdGlvbihzY29wZSl7IHJldHVybiBzY29wZS5hICsgc2NvcGUuYjsgfSkpLnRvRXF1YWwoMyk7XHJcbiAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cclxuICAgICAgICpcclxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXHJcbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXHJcbiAgICAgICAqL1xyXG4gICAgICAkZXZhbDogZnVuY3Rpb24oZXhwciwgbG9jYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICAgKiBAbmFtZSBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIFRoZSBgJGV2YWxBc3luY2AgbWFrZXMgbm8gZ3VhcmFudGVlcyBhcyB0byB3aGVuIHRoZSBgZXhwcmVzc2lvbmAgd2lsbCBiZSBleGVjdXRlZCwgb25seSB0aGF0OlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgIC0gaXQgd2lsbCBleGVjdXRlIGFmdGVyIHRoZSBmdW5jdGlvbiB0aGF0IHNjaGVkdWxlIHRoZSBldmFsdWF0aW9uIGlzIGRvbmUgcnVubmluZyAocHJlZmVyYWJseSBiZWZvcmUgRE9NIHJlbmRlcmluZykuXHJcbiAgICAgICAqICAgLSBhdCBsZWFzdCBvbmUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0IGN5Y2xlfSB3aWxsIGJlIHBlcmZvcm1lZCBhZnRlciBgZXhwcmVzc2lvbmAgZXhlY3V0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcclxuICAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBgJGRpZ2VzdGAgY3ljbGUsIGEgbmV3ICRkaWdlc3QgY3ljbGUgd2lsbCBiZSBzY2hlZHVsZWQuXHJcbiAgICAgICAqIEl0IGlzIGhvd2V2ZXIgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWwgZnJvbSB3aXRoaW5nIGFuIGAkYXBwbHlgIGNhbGwuXHJcbiAgICAgICAqIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4gIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxyXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cclxuICAgICAgJGV2YWxBc3luYzogZnVuY3Rpb24oZXhwcikge1xyXG4gICAgICAgIC8vIGlmIHdlIGFyZSBvdXRzaWRlIG9mIGFuICRkaWdlc3QgbG9vcCBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB3ZSBhcmUgc2NoZWR1bGluZyBhc3luYyB0YXNrIGFsc28gc2NoZWR1bGVcclxuICAgICAgICAvLyBhc3luYyBhdXRvLWZsdXNoXHJcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgISRyb290U2NvcGUuJCRhc3luY1F1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLiQkYXN5bmNRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiQkYXN5bmNRdWV1ZS5wdXNoKGV4cHIpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgJCRwb3N0RGlnZXN0IDogZnVuY3Rpb24oZXhwcikge1xyXG4gICAgICAgIHRoaXMuJCRwb3N0RGlnZXN0UXVldWUucHVzaChleHByKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHlcclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBgJGFwcGx5KClgIGlzIHVzZWQgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIGFuZ3VsYXIgZnJvbSBvdXRzaWRlIG9mIHRoZSBhbmd1bGFyIGZyYW1ld29yay5cclxuICAgICAgICogKEZvciBleGFtcGxlIGZyb20gYnJvd3NlciBET00gZXZlbnRzLCBzZXRUaW1lb3V0LCBYSFIgb3IgdGhpcmQgcGFydHkgbGlicmFyaWVzKS5cclxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmUtY3ljbGVcclxuICAgICAgICogb2Yge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyIGV4Y2VwdGlvbiBoYW5kbGluZ30sXHJcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgZXhlY3V0aW5nIHdhdGNoZXN9LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAjIyBMaWZlIGN5Y2xlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxyXG4gICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAgIGZ1bmN0aW9uICRhcHBseShleHByKSB7XHJcbiAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICByZXR1cm4gJGV2YWwoZXhwcik7XHJcbiAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgJHJvb3QuJGRpZ2VzdCgpO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgICogPC9wcmU+XHJcbiAgICAgICAqXHJcbiAgICAgICAqXHJcbiAgICAgICAqIFNjb3BlJ3MgYCRhcHBseSgpYCBtZXRob2QgdHJhbnNpdGlvbnMgdGhyb3VnaCB0aGUgZm9sbG93aW5nIHN0YWdlczpcclxuICAgICAgICpcclxuICAgICAgICogMS4gVGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIGV4ZWN1dGVkIHVzaW5nIHRoZVxyXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbCAkZXZhbCgpfSBtZXRob2QuXHJcbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxyXG4gICAgICAgKiAgICB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXHJcbiAgICAgICAqIDMuIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2h9IGxpc3RlbmVycyBhcmUgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGV4cHJlc3Npb25cclxuICAgICAgICogICAgd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxyXG4gICAgICAgKlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxyXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXHJcbiAgICAgICAqL1xyXG4gICAgICAkYXBwbHk6IGZ1bmN0aW9uKGV4cHIpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy4kZXZhbChleHByKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgY2xlYXJQaGFzZSgpO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkb25cclxuICAgICAgICogQG1ldGhvZE9mIG5nLiRyb290U2NvcGUuU2NvcGVcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAgKiBMaXN0ZW5zIG9uIGV2ZW50cyBvZiBhIGdpdmVuIHR5cGUuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdCAkZW1pdH0gZm9yIGRpc2N1c3Npb24gb2ZcclxuICAgICAgICogZXZlbnQgbGlmZSBjeWNsZS5cclxuICAgICAgICpcclxuICAgICAgICogVGhlIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9uIGZvcm1hdCBpczogYGZ1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKWAuIFRoZSBgZXZlbnRgIG9iamVjdFxyXG4gICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcclxuICAgICAgICpcclxuICAgICAgICogICAtIGB0YXJnZXRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBzY29wZSBvbiB3aGljaCB0aGUgZXZlbnQgd2FzIGAkZW1pdGAtZWQgb3IgYCRicm9hZGNhc3RgLWVkLlxyXG4gICAgICAgKiAgIC0gYGN1cnJlbnRTY29wZWAgLSBge1Njb3BlfWA6IHRoZSBjdXJyZW50IHNjb3BlIHdoaWNoIGlzIGhhbmRsaW5nIHRoZSBldmVudC5cclxuICAgICAgICogICAtIGBuYW1lYCAtIGB7c3RyaW5nfWA6IE5hbWUgb2YgdGhlIGV2ZW50LlxyXG4gICAgICAgKiAgIC0gYHN0b3BQcm9wYWdhdGlvbmAgLSBge2Z1bmN0aW9uPX1gOiBjYWxsaW5nIGBzdG9wUHJvcGFnYXRpb25gIGZ1bmN0aW9uIHdpbGwgY2FuY2VsIGZ1cnRoZXIgZXZlbnRcclxuICAgICAgICogICAgIHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS5cclxuICAgICAgICogICAtIGBwcmV2ZW50RGVmYXVsdGAgLSBge2Z1bmN0aW9ufWA6IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBzZXRzIGBkZWZhdWx0UHJldmVudGVkYCBmbGFnIHRvIHRydWUuXHJcbiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLlxyXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCBhcmdzLi4uKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLlxyXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLlxyXG4gICAgICAgKi9cclxuICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHZhciBuYW1lZExpc3RlbmVycyA9IHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV07XHJcbiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xyXG4gICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpbmRleE9mKG5hbWVkTGlzdGVuZXJzLCBsaXN0ZW5lcildID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgICAgICogQG5hbWUgbmcuJHJvb3RTY29wZS5TY29wZSMkZW1pdFxyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZVxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGVcclxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cclxuICAgICAgICpcclxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbFxyXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldCBub3RpZmllZC5cclxuICAgICAgICogQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHRyYXZlcnNlcyB1cHdhcmRzIHRvd2FyZCB0aGUgcm9vdCBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWRcclxuICAgICAgICogbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnMgY2FuY2VscyBpdC5cclxuICAgICAgICpcclxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXHJcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LlxyXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgc2V0IG9mIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXHJcbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxyXG4gICAgICAgKi9cclxuICAgICAgJGVtaXQ6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgZW1wdHkgPSBbXSxcclxuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsXHJcbiAgICAgICAgICAgIHNjb3BlID0gdGhpcyxcclxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXHJcbiAgICAgICAgICAgIGV2ZW50ID0ge1xyXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLFxyXG4gICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LFxyXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgIGksIGxlbmd0aDtcclxuXHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgbmFtZWRMaXN0ZW5lcnMgPSBzY29wZS4kJGxpc3RlbmVyc1tuYW1lXSB8fCBlbXB0eTtcclxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlO1xyXG4gICAgICAgICAgZm9yIChpPTAsIGxlbmd0aD1uYW1lZExpc3RlbmVycy5sZW5ndGg7IGk8bGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcclxuICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkge1xyXG4gICAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xyXG4gICAgICAgICAgICAgIGlmIChzdG9wUHJvcGFnYXRpb24pIHJldHVybiBldmVudDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHNcclxuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudDtcclxuICAgICAgICB9IHdoaWxlIChzY29wZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBldmVudDtcclxuICAgICAgfSxcclxuXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICAqIEBuYW1lIG5nLiRyb290U2NvcGUuU2NvcGUjJGJyb2FkY2FzdFxyXG4gICAgICAgKiBAbWV0aG9kT2YgbmcuJHJvb3RTY29wZS5TY29wZVxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICpcclxuICAgICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIGRvd253YXJkcyB0byBhbGwgY2hpbGQgc2NvcGVzIChhbmQgdGhlaXIgY2hpbGRyZW4pIG5vdGlmeWluZyB0aGVcclxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cclxuICAgICAgICpcclxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGJyb2FkY2FzdGAgd2FzIGNhbGxlZC4gQWxsXHJcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0IG5vdGlmaWVkLlxyXG4gICAgICAgKiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgcHJvcGFnYXRlcyB0byBhbGwgZGlyZWN0IGFuZCBpbmRpcmVjdCBzY29wZXMgb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kXHJcbiAgICAgICAqIGNhbGxzIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVycyBhbG9uZyB0aGUgd2F5LiBUaGUgZXZlbnQgY2Fubm90IGJlIGNhbmNlbGVkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcclxuICAgICAgICogb250byB0aGUge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGJyb2FkY2FzdC5cclxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIHNldCBvZiBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxyXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCwgc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn1cclxuICAgICAgICovXHJcbiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcyxcclxuICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcclxuICAgICAgICAgICAgbmV4dCA9IHRhcmdldCxcclxuICAgICAgICAgICAgZXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoO1xyXG5cclxuICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgY3VycmVudCA9IG5leHQ7XHJcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBjdXJyZW50O1xyXG4gICAgICAgICAgbGlzdGVuZXJzID0gY3VycmVudC4kJGxpc3RlbmVyc1tuYW1lXSB8fCBbXTtcclxuICAgICAgICAgIGZvciAoaT0wLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpPGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcclxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcclxuICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICBsZW5ndGgtLTtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcclxuICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXHJcbiAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRkaWdlc3RcclxuICAgICAgICAgIGlmICghKG5leHQgPSAoY3VycmVudC4kJGNoaWxkSGVhZCB8fCAoY3VycmVudCAhPT0gdGFyZ2V0ICYmIGN1cnJlbnQuJCRuZXh0U2libGluZykpKSkge1xyXG4gICAgICAgICAgICB3aGlsZShjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xyXG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XHJcblxyXG4gICAgcmV0dXJuICRyb290U2NvcGU7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGJlZ2luUGhhc2UocGhhc2UpIHtcclxuICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xyXG4gICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XHJcbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcGlsZVRvRm4oZXhwLCBuYW1lKSB7XHJcbiAgICAgIHZhciBmbiA9ICRwYXJzZShleHApO1xyXG4gICAgICBhc3NlcnRBcmdGbihmbiwgbmFtZSk7XHJcbiAgICAgIHJldHVybiBmbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXHJcbiAgICAgKiBiZWNhdXNlIGl0J3MgdW5pcXVlIHdlIGNhbiBlYXNpbHkgdGVsbCBpdCBhcGFydCBmcm9tIG90aGVyIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxyXG4gIH1dO1xyXG59XHJcblxyXG52YXIgJHNjZU1pbkVyciA9IG1pbkVycignJHNjZScpO1xyXG5cclxudmFyIFNDRV9DT05URVhUUyA9IHtcclxuICBIVE1MOiAnaHRtbCcsXHJcbiAgQ1NTOiAnY3NzJyxcclxuICBVUkw6ICd1cmwnLFxyXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgaW4gY29udGV4dHMgd2hlcmUgYSBwcml2aWxlZ2VkIHJlc291cmNlIGlzIHNvdXJjZWQgZnJvbSBhXHJcbiAgLy8gdXJsLiAgKGUuZy4gbmctaW5jbHVkZSwgc2NyaXB0IHNyYywgdGVtcGxhdGVVcmwpXHJcbiAgUkVTT1VSQ0VfVVJMOiAncmVzb3VyY2VVcmwnLFxyXG4gIEpTOiAnanMnXHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAqIEBuYW1lIG5nLiRzY2VEZWxlZ2F0ZVxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XHJcbiAqIENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9IHNlcnZpY2VzIHRvIEFuZ3VsYXJKUy5cclxuICpcclxuICogVHlwaWNhbGx5LCB5b3Ugd291bGQgY29uZmlndXJlIG9yIG92ZXJyaWRlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlICRzY2VEZWxlZ2F0ZX0gaW5zdGVhZCBvZlxyXG4gKiB0aGUgYCRzY2VgIHNlcnZpY2UgdG8gY3VzdG9taXplIHRoZSB3YXkgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgd29ya3MgaW4gQW5ndWxhckpTLiAgVGhpcyBpc1xyXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xyXG4gKiBvdmVycmlkZSAzIGNvcmUgZnVuY3Rpb25zIChgdHJ1c3RBc2AsIGBnZXRUcnVzdGVkYCBhbmQgYHZhbHVlT2ZgKSB0byByZXBsYWNlIHRoZSB3YXkgdGhpbmdzXHJcbiAqIHdvcmsgYmVjYXVzZSBgJHNjZWAgZGVsZWdhdGVzIHRvIGAkc2NlRGVsZWdhdGVgIGZvciB0aGVzZSBvcGVyYXRpb25zLlxyXG4gKlxyXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IHRvIGNvbmZpZ3VyZSB0aGlzIHNlcnZpY2UuXHJcbiAqXHJcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcclxuICogY2FuIG92ZXJyaWRlIGl0IGNvbXBsZXRlbHkgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZiBgJHNjZWAsIHRoZSBjb21tb24gY2FzZSB3b3VsZFxyXG4gKiBpbnZvbHZlIGNvbmZpZ3VyaW5nIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGluc3RlYWQgYnkgc2V0dGluZ1xyXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXHJcbiAqIHRlbXBsYXRlcy4gIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdFxyXG4gKiAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdH0gYW5kIHtAbGlua1xyXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kc2NlRGVsZWdhdGVQcm92aWRlclxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhlICRzY2VEZWxlZ2F0ZVByb3ZpZGVyIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVxyXG4gKiAkc2NlRGVsZWdhdGV9IHNlcnZpY2UuICBUaGlzIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxyXG4gKiB0aGF0IFVSTHMgdXNlZCBmb3Igc291cmNpbmcgQW5ndWxhciB0ZW1wbGF0ZXMgYXJlIHNhZmUuICBSZWZlciB7QGxpbmtcclxuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9IGFuZFxyXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxCbGFja2xpc3R9XHJcbiAqXHJcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gJFNjZURlbGVnYXRlUHJvdmlkZXIoKSB7XHJcbiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7XHJcblxyXG4gIC8vIFJlc291cmNlIFVSTHMgY2FuIGFsc28gYmUgdHJ1c3RlZCBieSBwb2xpY3kuXHJcbiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXHJcbiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAqIEBuYW1lIG5nLnNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcclxuICAgKiBAbWV0aG9kT2YgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXJcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlXHJcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5LlxyXG4gICAqXHJcbiAgICogICAgIEVhY2ggZWxlbWVudCBvZiB0aGlzIGFycmF5IG11c3QgZWl0aGVyIGJlIGEgcmVnZXggb3IgdGhlIHNwZWNpYWwgc3RyaW5nIGAnc2VsZidgLlxyXG4gICAqXHJcbiAgICogICAgIFdoZW4gYSByZWdleCBpcyB1c2VkLCBpdCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIG5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwgb2YgdGhlIHJlc291cmNlXHJcbiAgICogICAgIGJlaW5nIHRlc3RlZC5cclxuICAgKlxyXG4gICAqICAgICBUaGUgKipzcGVjaWFsIHN0cmluZyoqIGAnc2VsZidgIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgYWxsIFVSTHMgb2YgdGhlIHNhbWUgZG9tYWluIGFzIHRoZVxyXG4gICAqICAgICBhcHBsaWNhdGlvbiBkb2N1bWVudCB3aXRoIHRoZSBzYW1lIHByb3RvY29sIChhbGxvd3Mgc291cmNpbmcgaHR0cHMgcmVzb3VyY2VzIGZyb20gaHR0cCBkb2N1bWVudHMuKVxyXG4gICAqXHJcbiAgICogICAgIFBsZWFzZSBub3RlIHRoYXQgKiphbiBlbXB0eSB3aGl0ZWxpc3QgYXJyYXkgd2lsbCBibG9jayBhbGwgVVJMcyoqIVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IHdoaXRlbGlzdCBhcnJheS5cclxuICAgKlxyXG4gICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyBgWydzZWxmJ11gLlxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxyXG4gICAqL1xyXG4gIHRoaXMucmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdFxyXG4gICAqIEBtZXRob2RPZiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlclxyXG4gICAqIEBmdW5jdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcclxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkuXHJcbiAgICpcclxuICAgKiAgICAgRWFjaCBlbGVtZW50IG9mIHRoaXMgYXJyYXkgbXVzdCBlaXRoZXIgYmUgYSByZWdleCBvciB0aGUgc3BlY2lhbCBzdHJpbmcgYCdzZWxmJ2AgKHNlZVxyXG4gICAqICAgICBgcmVzb3VyY2VVcmxXaGl0ZWxpc3RgIGZvciBtZWFuaW5nIC0gaXQncyBvbmx5IHJlYWxseSB1c2VmdWwgdGhlcmUuKVxyXG4gICAqXHJcbiAgICogICAgIFdoZW4gYSByZWdleCBpcyB1c2VkLCBpdCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIG5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwgb2YgdGhlIHJlc291cmNlXHJcbiAgICogICAgIGJlaW5nIHRlc3RlZC5cclxuICAgKlxyXG4gICAqICAgICBUaGUgdHlwaWNhbCB1c2FnZSBmb3IgdGhlIGJsYWNrbGlzdCBpcyB0byAqKmJsb2NrIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKlxyXG4gICAqICAgICBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXMgdGhlc2Ugd291bGQgb3RoZXJ3aXNlIGJlIHRydXN0ZWQgYnV0IGFjdHVhbGx5IHJldHVybiBjb250ZW50IGZyb20gdGhlIHJlZGlyZWN0ZWRcclxuICAgKiAgICAgZG9tYWluLlxyXG4gICAqXHJcbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cclxuICAgKlxyXG4gICAqIEByZXR1cm4ge0FycmF5fSB0aGUgY3VycmVudGx5IHNldCBibGFja2xpc3QgYXJyYXkuXHJcbiAgICpcclxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgdGhlIGVtcHR5IGFycmF5IChpLmUuIHRoZXJlIGlzXHJcbiAgICogbm8gYmxhY2tsaXN0LilcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFNldHMvR2V0cyB0aGUgYmxhY2tsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cclxuICAgKi9cclxuXHJcbiAgdGhpcy5yZXNvdXJjZVVybEJsYWNrbGlzdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcclxuICB9O1xyXG5cclxuICAvLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYXRjaGluZyByZXNvdXJjZSB1cmxzIGJ5IHBvbGljeS5cclxuICBmdW5jdGlvbiBpc0NvbXBhdGlibGVQcm90b2NvbChkb2N1bWVudFByb3RvY29sLCByZXNvdXJjZVByb3RvY29sKSB7XHJcbiAgICByZXR1cm4gKChkb2N1bWVudFByb3RvY29sID09PSByZXNvdXJjZVByb3RvY29sKSB8fFxyXG4gICAgICAgICAgICAoZG9jdW1lbnRQcm90b2NvbCA9PT0gXCJodHRwOlwiICYmIHJlc291cmNlUHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpKTtcclxuICB9XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJGxvZycsICckZG9jdW1lbnQnLCAnJGluamVjdG9yJywgJyQkdXJsVXRpbHMnLCBmdW5jdGlvbihcclxuICAgICAgICAgICAgICAgICRsb2csICAgJGRvY3VtZW50LCAgICRpbmplY3RvciwgICAkJHVybFV0aWxzKSB7XHJcblxyXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcclxuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKCRpbmplY3Rvci5oYXMoJyRzYW5pdGl6ZScpKSB7XHJcbiAgICAgIGh0bWxTYW5pdGl6ZXIgPSAkaW5qZWN0b3IuZ2V0KCckc2FuaXRpemUnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XHJcbiAgICAgIGlmIChtYXRjaGVyID09PSAnc2VsZicpIHtcclxuICAgICAgICByZXR1cm4gJCR1cmxVdGlscy5pc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gISFwYXJzZWRVcmwuaHJlZi5tYXRjaChtYXRjaGVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kodXJsKSB7XHJcbiAgICAgIHZhciBwYXJzZWRVcmwgPSAkJHVybFV0aWxzLnJlc29sdmUodXJsLnRvU3RyaW5nKCksIHRydWUpO1xyXG4gICAgICB2YXIgaSwgbiwgYWxsb3dlZCA9IGZhbHNlO1xyXG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxyXG4gICAgICBmb3IgKGkgPSAwLCBuID0gcmVzb3VyY2VVcmxXaGl0ZWxpc3QubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsV2hpdGVsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XHJcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoYWxsb3dlZCkge1xyXG4gICAgICAgIC8vIEVuc3VyZSB0aGF0IG5vIGl0ZW0gZnJvbSB0aGUgYmxhY2tsaXN0IGJsb2NrZWQgdGhpcyB1cmwuXHJcbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgaWYgKG1hdGNoVXJsKHJlc291cmNlVXJsQmxhY2tsaXN0W2ldLCBwYXJzZWRVcmwpKSB7XHJcbiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbGxvd2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlSG9sZGVyVHlwZShiYXNlKSB7XHJcbiAgICAgIHZhciBob2xkZXJUeXBlID0gZnVuY3Rpb24gVHJ1c3RlZFZhbHVlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWUpIHtcclxuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChiYXNlKSB7XHJcbiAgICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUgPSBuZXcgYmFzZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGhvbGRlclR5cGUucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiBzY2VWYWx1ZU9mKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaG9sZGVyVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBzY2VUb1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcclxuICAgICAgICBieVR5cGUgPSB7fTtcclxuXHJcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xyXG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5DU1NdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xyXG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xyXG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XHJcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUoYnlUeXBlW1NDRV9DT05URVhUUy5VUkxdKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZURlbGVnYXRlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3RcclxuICAgICAqIGNvbnRleHR1YWwgZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctaHRtbC1iaW5kLXVuc2FmZSwgbmctaW5jbHVkZSwgYW55IHNyY1xyXG4gICAgICogYXR0cmlidXRlIGludGVycG9sYXRpb24sIGFueSBkb20gZXZlbnQgYmluZGluZyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvblxyXG4gICAgICogc3VjaCBhcyBmb3Igb25jbGljaywgIGV0Yy4pIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuXHJcbiAgICAgKiBTZWUge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGVuYWJsaW5nIHN0cmljdCBjb250ZXh0dWFsIGVzY2FwaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCxcclxuICAgICAqICAgcmVzb3VyY2VVcmwsIGh0bWwsIGpzIGFuZCBjc3MuXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxyXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXHJcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRydXN0QXModHlwZSwgdHJ1c3RlZFZhbHVlKSB7XHJcbiAgICAgIHZhciBjb25zdHJ1Y3RvciA9IChieVR5cGUuaGFzT3duUHJvcGVydHkodHlwZSkgPyBieVR5cGVbdHlwZV0gOiBudWxsKTtcclxuICAgICAgaWYgKCFjb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2ljb250ZXh0JywgJ0F0dGVtcHRlZCB0byB0cnVzdCBhIHZhbHVlIGluIGludmFsaWQgY29udGV4dC4gQ29udGV4dDogezB9OyBWYWx1ZTogezF9JyxcclxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHJ1c3RlZFZhbHVlID09PSBudWxsIHx8IHRydXN0ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRydXN0ZWRWYWx1ZSA9PT0gJycpIHtcclxuICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEFsbCB0aGUgY3VycmVudCBjb250ZXh0cyBpbiBTQ0VfQ09OVEVYVFMgaGFwcGVuIHRvIGJlIHN0cmluZ3MuICBJbiBvcmRlciB0byBhdm9pZCB0cnVzdGluZ1xyXG4gICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cclxuICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgJHNjZU1pbkVycignaXR5cGUnLFxyXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLFxyXG4gICAgICAgICAgICB0eXBlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmV3IGNvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlRGVsZWdhdGUjdmFsdWVPZlxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VEZWxlZ2F0ZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaGFkIGJlZW4gcmV0dXJuZWQgYnkgYSBwcmlvciBjYWxsIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xyXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgdGhlIHZhbHVlIHRoYXQgaGFkIGJlZW4gcGFzc2VkIHRvIHtAbGlua1xyXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaXMgbm90IGEgdmFsdWUgdGhhdCBoYWQgYmVlbiByZXR1cm5lZCBieSB7QGxpbmtcclxuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCByZXR1cm5zIGl0IGFzLWlzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfVxyXG4gICAgICogICAgICBjYWxsIG9yIGFueXRoaW5nIGVsc2UuXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoZSB3YXMgb3JpZ2luYWxseSBwcm92aWRlZCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcclxuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnMgYHZhbHVlYFxyXG4gICAgICogICAgIHVuY2hhbmdlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcclxuICAgICAgaWYgKG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpIHtcclxuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkLiQkdW53cmFwVHJ1c3RlZFZhbHVlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWRcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlRGVsZWdhdGVcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFRha2VzIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbCBhbmQgcmV0dXJucyB0aGVcclxuICAgICAqIG9yaWdpbmFsbHkgc3VwcGxpZWQgdmFsdWUgaWYgdGhlIHF1ZXJpZWQgY29udGV4dCB0eXBlIGlzIGEgc3VwZXJ0eXBlIG9mIHRoZSBjcmVhdGVkIHR5cGUuICBJZlxyXG4gICAgICogdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkLlxyXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xyXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0gY2FsbC5cclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xyXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGlmIHZhbGlkIGluIHRoaXMgY29udGV4dC4gIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZCh0eXBlLCBtYXliZVRydXN0ZWQpIHtcclxuICAgICAgaWYgKG1heWJlVHJ1c3RlZCA9PT0gbnVsbCB8fCBtYXliZVRydXN0ZWQgPT09IHVuZGVmaW5lZCB8fCBtYXliZVRydXN0ZWQgPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcclxuICAgICAgfVxyXG4gICAgICB2YXIgY29uc3RydWN0b3IgPSAoYnlUeXBlLmhhc093blByb3BlcnR5KHR5cGUpID8gYnlUeXBlW3R5cGVdIDogbnVsbCk7XHJcbiAgICAgIGlmIChjb25zdHJ1Y3RvciAmJiBtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBtYXkgb25seSB0YWtlIG9uZSBvZiB0d28gYWN0aW9ucy5cclxuICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yXHJcbiAgICAgIC8vIDIuIHRocm93IGFuIGV4Y2VwdGlvbi5cclxuICAgICAgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5SRVNPVVJDRV9VUkwpIHtcclxuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XHJcbiAgICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXHJcbiAgICAgICAgICAgICAgJ0Jsb2NrZWQgbG9hZGluZyByZXNvdXJjZSBmcm9tIHVybCBub3QgYWxsb3dlZCBieSAkc2NlRGVsZWdhdGUgcG9saWN5LiAgVVJMOiB7MH0nLCBtYXliZVRydXN0ZWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XHJcbiAgICAgICAgcmV0dXJuIGh0bWxTYW5pdGl6ZXIobWF5YmVUcnVzdGVkKTtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHRydXN0QXM6IHRydXN0QXMsXHJcbiAgICAgICAgICAgICBnZXRUcnVzdGVkOiBnZXRUcnVzdGVkLFxyXG4gICAgICAgICAgICAgdmFsdWVPZjogdmFsdWVPZiB9O1xyXG4gIH1dO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuJHNjZVByb3ZpZGVyXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBUaGUgJHNjZVByb3ZpZGVyIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZS5cclxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXHJcbiAqIC0gICBvdmVycmlkZSB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aXRoIGEgY3VzdG9tIGRlbGVnYXRlXHJcbiAqXHJcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBzZXJ2aWNlXHJcbiAqIEBuYW1lIG5nLiRzY2VcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKlxyXG4gKiBgJHNjZWAgaXMgYSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgc2VydmljZXMgdG8gQW5ndWxhckpTLlxyXG4gKlxyXG4gKiAjIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nXHJcbiAqXHJcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpblxyXG4gKiBjb250ZXh0cyB0byByZXN1bHQgaW4gYSB2YWx1ZSB0aGF0IGlzIG1hcmtlZCBhcyBzYWZlIHRvIHVzZSBmb3IgdGhhdCBjb250ZXh0IE9uZSBleGFtcGxlIG9mIHN1Y2hcclxuICogYSBjb250ZXh0IGlzIGJpbmRpbmcgYXJiaXRyYXJ5IGh0bWwgY29udHJvbGxlZCBieSB0aGUgdXNlciB2aWEgYG5nLWJpbmQtaHRtbGAuICBXZSByZWZlciB0byB0aGVzZVxyXG4gKiBjb250ZXh0cyBhcyBwcml2aWxlZ2VkIG9yIFNDRSBjb250ZXh0cy5cclxuICpcclxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXIgc2hpcHMgd2l0aCBTQ0UgZW5hYmxlZCBieSBkZWZhdWx0LlxyXG4gKlxyXG4gKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFOCBpbiBxdWlya3MgbW9kZSBpcyBub3Qgc3VwcG9ydGVkLiAgSW4gdGhpcyBtb2RlLCBJRTggYWxsb3dzXHJcbiAqIG9uZSB0byBleGVjdXRlIGFyYml0cmFyeSBqYXZhc2NyaXB0IGJ5IHRoZSB1c2Ugb2YgdGhlIGV4cHJlc3Npb24oKSBzeW50YXguICBSZWZlclxyXG4gKiA8aHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWUvYXJjaGl2ZS8yMDA4LzEwLzE2L2VuZGluZy1leHByZXNzaW9ucy5hc3B4PiB0byBsZWFybiBtb3JlIGFib3V0IHRoZW0uXHJcbiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmBcclxuICogdG8gdGhlIHRvcCBvZiB5b3VyIEhUTUwgZG9jdW1lbnQuXHJcbiAqXHJcbiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3JcclxuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxyXG4gKlxyXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XHJcbiAqXHJcbiAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxyXG4gKiAgICAgPGlucHV0IG5nLW1vZGVsPVwidXNlckh0bWxcIj5cclxuICogICAgIDxkaXYgbmctYmluZC1odG1sPVwie3t1c2VySHRtbH19XCI+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBge3t1c2VySHRtbH19YCBjb250cm9sbGVkIGJ5IHRoZSB1c2VyLiAgV2l0aCBTQ0VcclxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYuXHJcbiAqIEluIGEgbW9yZSByZWFsaXN0aWMgZXhhbXBsZSwgb25lIG1heSBiZSByZW5kZXJpbmcgdXNlciBjb21tZW50cywgYmxvZyBhcnRpY2xlcywgZXRjLiB2aWFcclxuICogYmluZGluZ3MuICAoSFRNTCBpcyBqdXN0IG9uZSBleGFtcGxlIG9mIGEgY29udGV4dCB3aGVyZSByZW5kZXJpbmcgdXNlciBjb250cm9sbGVkIGlucHV0IGNyZWF0ZXNcclxuICogc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLilcclxuICpcclxuICogRm9yIHRoZSBjYXNlIG9mIEhUTUwsIHlvdSBtaWdodCB1c2UgYSBsaWJyYXJ5LCBlaXRoZXIgb24gdGhlIGNsaWVudCBzaWRlLCBvciBvbiB0aGUgc2VydmVyIHNpZGUsXHJcbiAqIHRvIHNhbml0aXplIHVuc2FmZSBIVE1MIGJlZm9yZSBiaW5kaW5nIHRvIHRoZSB2YWx1ZSBhbmQgcmVuZGVyaW5nIGl0IGluIHRoZSBkb2N1bWVudC5cclxuICpcclxuICogSG93IHdvdWxkIHlvdSBlbnN1cmUgdGhhdCBldmVyeSBwbGFjZSB0aGF0IHVzZWQgdGhlc2UgdHlwZXMgb2YgYmluZGluZ3Mgd2FzIGJvdW5kIHRvIGEgdmFsdWUgdGhhdFxyXG4gKiB3YXMgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSAob3IgcmV0dXJuZWQgYXMgc2FmZSBmb3IgcmVuZGVyaW5nIGJ5IHlvdXIgc2VydmVyPykgIEhvdyBjYW4geW91XHJcbiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxyXG4gKiBwcm9wZXJ0aWVzL2ZpZWxkcyBhbmQgZm9yZ290IHRvIHVwZGF0ZSB0aGUgYmluZGluZyB0byB0aGUgc2FuaXRpemVkIHZhbHVlP1xyXG4gKlxyXG4gKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgeW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgYW55IHN1Y2ggYmluZGluZ3MgYXJlIGRpc2FsbG93ZWQgdW5sZXNzIHlvdSBjYW5cclxuICogZGV0ZXJtaW5lIHRoYXQgc29tZXRoaW5nIGV4cGxpY2l0bHkgc2F5cyBpdCdzIHNhZmUgdG8gdXNlIGEgdmFsdWUgZm9yIGJpbmRpbmcgaW4gdGhhdFxyXG4gKiBjb250ZXh0LiAgWW91IGNhbiB0aGVuIGF1ZGl0IHlvdXIgY29kZSAoYSBzaW1wbGUgZ3JlcCB3b3VsZCBkbykgdG8gZW5zdXJlIHRoYXQgdGhpcyBpcyBvbmx5IGRvbmVcclxuICogZm9yIHRob3NlIHZhbHVlcyB0aGF0IHlvdSBjYW4gZWFzaWx5IHRlbGwgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZSByZWNlaXZlZCBmcm9tIHlvdXIgc2VydmVyLFxyXG4gKiBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5LCBldGMuICBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG8gaGVscCB3aXRoIHRoaXMgLSBwZXJoYXBzXHJcbiAqIGFsbG93aW5nIG9ubHkgdGhlIGZpbGVzIGluIGEgc3BlY2lmaWMgZGlyZWN0b3J5IHRvIGRvIHRoaXMuICBFbnN1cmluZyB0aGF0IHRoZSBpbnRlcm5hbCBBUElcclxuICogZXhwb3NlZCBieSB0aGF0IGNvZGUgZG9lc24ndCBtYXJrdXAgYXJiaXRyYXJ5IHZhbHVlcyBhcyBzYWZlIHRoZW4gYmVjb21lcyBhIG1vcmUgbWFuYWdlYWJsZSB0YXNrLlxyXG4gKlxyXG4gKiBJbiB0aGUgY2FzZSBvZiBBbmd1bGFySlMnIFNDRSBzZXJ2aWNlLCBvbmUgdXNlcyB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30gKGFuZCBzaG9ydGhhbmRcclxuICogbWV0aG9kcyBzdWNoIGFzIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LCBldGMuKSB0byBvYnRhaW4gdmFsdWVzIHRoYXQgd2lsbCBiZVxyXG4gKiBhY2NlcHRlZCBieSBTQ0UgLyBwcml2aWxlZ2VkIGNvbnRleHRzLlxyXG4gKlxyXG4gKlxyXG4gKiAjIyBIb3cgZG9lcyBpdCB3b3JrP1xyXG4gKlxyXG4gKiBJbiBwcml2aWxlZ2VkIGNvbnRleHRzLCBkaXJlY3RpdmVzIGFuZCBjb2RlIHdpbGwgYmluZCB0byB0aGUgcmVzdWx0IG9mIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRcclxuICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgRGlyZWN0aXZlcyB1c2Uge0BsaW5rXHJcbiAqIG5nLiRzY2UjcGFyc2UgJHNjZS5wYXJzZUFzfSByYXRoZXIgdGhhbiBgJHBhcnNlYCB0byB3YXRjaCBhdHRyaWJ1dGUgYmluZGluZ3MsIHdoaWNoIHBlcmZvcm1zIHRoZVxyXG4gKiB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0gYmVoaW5kIHRoZSBzY2VuZXMgb24gbm9uLWNvbnN0YW50IGxpdGVyYWxzLlxyXG4gKlxyXG4gKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcclxuICogbmcuJHNjZSNwYXJzZUFzSHRtbCAkc2NlLnBhcnNlQXNIdG1sKGJpbmRpbmcgZXhwcmVzc2lvbil9LiAgSGVyZSdzIHRoZSBhY3R1YWwgY29kZSAoc2xpZ2h0bHlcclxuICogc2ltcGxpZmllZCk6XHJcbiAqXHJcbiAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxyXG4gKiAgIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xyXG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAqICAgICAgIHNjb3BlLiR3YXRjaCgkc2NlLnBhcnNlQXNIdG1sKGF0dHIubmdCaW5kSHRtbCksIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAqICAgICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTtcclxuICogICAgICAgfSk7XHJcbiAqICAgICB9O1xyXG4gKiAgIH1dO1xyXG4gKiA8L3ByZT5cclxuICpcclxuICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzXHJcbiAqXHJcbiAqIFRoaXMgYXBwbGllcyBib3RoIHRvIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmctaW5jbHVkZWB9IGRpcmVjdGl2ZSBhcyB3ZWxsIGFzXHJcbiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cclxuICpcclxuICogQnkgZGVmYXVsdCwgQW5ndWxhciBvbmx5IGxvYWRzIHRlbXBsYXRlcyBmcm9tIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlIGFwcGxpY2F0aW9uXHJcbiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXHJcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiB0aGUgdGVtcGxhdGUgVVJMLiAgVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIGFuZC9vclxyXG4gKiBwcm90b2NvbHMsIHlvdSBtYXkgZWl0aGVyIGVpdGhlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0XHJcbiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS5cclxuICpcclxuICogKlBsZWFzZSBub3RlKjpcclxuICogVGhlIGJyb3dzZXInc1xyXG4gKiB7QGxpbmsgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdFxyXG4gKiBTYW1lIE9yaWdpbiBQb2xpY3l9IGFuZCB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvY29ycy8gQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpfVxyXG4gKiBwb2xpY3kgYXBwbHkgaW4gYWRkaXRpb24gdG8gdGhpcyBhbmQgbWF5IGZ1cnRoZXIgcmVzdHJpY3Qgd2hldGhlciB0aGUgdGVtcGxhdGUgaXMgc3VjY2Vzc2Z1bGx5XHJcbiAqIGxvYWRlZC4gIFRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRoZSByaWdodCBDT1JTIHBvbGljeSwgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBhIGRpZmZlcmVudCBkb21haW5cclxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXHJcbiAqIGJyb3dzZXJzLlxyXG4gKlxyXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWQgZm9yIHRoZSBkZXZlbG9wZXI/XHJcbiAqXHJcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgU0NFIG9ubHkgYXBwbGllcyB0byBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb25zLlxyXG4gKlxyXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXHJcbiAqIGNhbGwgYCRzY2UudHJ1c3RBc2Agb24gdGhlbS4gIChlLmcuXHJcbiAqIGA8ZGl2IG5nLWh0bWwtYmluZC11bnNhZmU9XCInPGI+aW1wbGljaXRseSB0cnVzdGVkPC9iPidcIj48L2Rpdj5gKSBqdXN0IHdvcmtzLlxyXG4gKlxyXG4gKiBBZGRpdGlvbmFsbHksIGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cclxuICogdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZH0uICBTQ0UgZG9lc24ndCBwbGF5IGEgcm9sZSBoZXJlLlxyXG4gKlxyXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxyXG4gKiB0ZW1wbGF0ZXMgaW4gYG5nLWluY2x1ZGVgIGZyb20geW91ciBhcHBsaWNhdGlvbidzIGRvbWFpbiB3aXRob3V0IGhhdmluZyB0byBldmVuIGtub3cgYWJvdXQgU0NFLlxyXG4gKiBJdCBibG9ja3MgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIGxvYWRpbmcgdGVtcGxhdGVzIG92ZXIgaHR0cCBmcm9tIGFuIGh0dHBzXHJcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xyXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RzfSBhbmQge0BsaW5rXHJcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IGJsYWNrbGlzdHN9IGZvciBtYXRjaGluZyBzdWNoIFVSTHMuXHJcbiAqXHJcbiAqIFRoaXMgc2lnbmlmaWNhbnRseSByZWR1Y2VzIHRoZSBvdmVyaGVhZC4gIEl0IGlzIGZhciBlYXNpZXIgdG8gcGF5IHRoZSBzbWFsbCBvdmVyaGVhZCBhbmQgaGF2ZSBhblxyXG4gKiBhcHBsaWNhdGlvbiB0aGF0J3Mgc2VjdXJlIGFuZCBjYW4gYmUgYXVkaXRlZCB0byB2ZXJpZnkgdGhhdCB3aXRoIG11Y2ggbW9yZSBlYXNlIHRoYW4gYm9sdGluZ1xyXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxyXG4gKlxyXG4gKiAjIyBXaGF0IHRydXN0ZWQgY29udGV4dCB0eXBlcyBhcmUgc3VwcG9ydGVkPzxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cclxuICpcclxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxyXG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XHJcbiAqIHwgYCRzY2UuSFRNTGAgICAgICAgICB8IEZvciBIVE1MIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIFRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gZGlyZWN0aXZlIHVzZXMgdGhpcyBjb250ZXh0IGZvciBiaW5kaW5ncy4gfFxyXG4gKiB8IGAkc2NlLkNTU2AgICAgICAgICAgfCBGb3IgQ1NTIHRoYXQncyBzYWZlIHRvIHNvdXJjZSBpbnRvIHRoZSBhcHBsaWNhdGlvbi4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcclxuICogfCBgJHNjZS5VUkxgICAgICAgICAgIHwgRm9yIFVSTHMgdGhhdCBhcmUgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MuICBDdXJyZW50bHkgdW51c2VkIChgPGEgaHJlZj1gIGFuZCBgPGltZyBzcmM9YCBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zaXRpdHV0ZSBhbiBTQ0UgY29udGV4dC4gfFxyXG4gKiB8IGAkc2NlLlJFU09VUkNFX1VSTGAgfCBGb3IgVVJMcyB0aGF0IGFyZSBub3Qgb25seSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcywgYnV0IHdob3NlIGNvbnRlbnMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8XHJcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5IHVudXNlZC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxyXG4gKlxyXG4gKiAjIyBTaG93IG1lIGFuIGV4YW1wbGUuXHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiPlxyXG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJteUFwcENvbnRyb2xsZXIgYXMgbXlDdHJsXCI+XHJcbiAgICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxyXG4gICAgICA8Yj5Vc2VyIGNvbW1lbnRzPC9iPjxicj5cclxuICAgICAgQnkgZGVmYXVsdCwgSFRNTCB0aGF0IGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCAoZS5nLiBBbGljZSdzIGNvbW1lbnQpIGlzIHNhbml0aXplZCB3aGVuICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhbiBleHBsb2l0LlxyXG4gICAgICA8ZGl2IGNsYXNzPVwid2VsbFwiPlxyXG4gICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxyXG4gICAgICAgICAgPGI+e3t1c2VyQ29tbWVudC5uYW1lfX08L2I+OlxyXG4gICAgICAgICAgPHNwYW4gbmctYmluZC1odG1sPVwidXNlckNvbW1lbnQuaHRtbENvbW1lbnRcIiBjbGFzcz1cImh0bWxDb21tZW50XCI+PC9zcGFuPlxyXG4gICAgICAgICAgPGJyPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIDwvZmlsZT5cclxuXHJcbiAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxyXG4gICAgdmFyIG15U2NlQXBwID0gYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pO1xyXG5cclxuICAgIG15U2NlQXBwLmNvbnRyb2xsZXIoXCJteUFwcENvbnRyb2xsZXJcIiwgZnVuY3Rpb24gbXlBcHBDb250cm9sbGVyKCRodHRwLCAkdGVtcGxhdGVDYWNoZSwgJHNjZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICRodHRwLmdldChcInRlc3RfZGF0YS5qc29uXCIsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHVzZXJDb21tZW50cykge1xyXG4gICAgICAgIHNlbGYudXNlckNvbW1lbnRzID0gdXNlckNvbW1lbnRzO1xyXG4gICAgICB9KTtcclxuICAgICAgc2VsZi5leHBsaWNpdGx5VHJ1c3RlZEh0bWwgPSAkc2NlLnRydXN0QXNIdG1sKFxyXG4gICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcclxuICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xyXG4gICAgfSk7XHJcbiAgPC9maWxlPlxyXG5cclxuICA8ZmlsZSBuYW1lPVwidGVzdF9kYXRhLmpzb25cIj5cclxuICAgIFtcclxuICAgICAgeyBcIm5hbWVcIjogXCJBbGljZVwiLFxyXG4gICAgICAgIFwiaHRtbENvbW1lbnRcIjogXCI8c3BhbiBvbm1vdXNlb3Zlcj0ndGhpcy50ZXh0Q29udGVudD1cXFwiUFdOM0QhXFxcIic+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPlwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgXCJuYW1lXCI6IFwiQm9iXCIsXHJcbiAgICAgICAgXCJodG1sQ29tbWVudFwiOiBcIjxpPlllcyE8L2k+ICBBbSBJIHRoZSBvbmx5IG90aGVyIG9uZT9cIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgPC9maWxlPlxyXG5cclxuICA8ZmlsZSBuYW1lPVwic2NlbmFyaW8uanNcIj5cclxuICAgIGRlc2NyaWJlKCdTQ0UgZG9jIGRlbW8nLCBmdW5jdGlvbigpIHtcclxuICAgICAgaXQoJ3Nob3VsZCBzYW5pdGl6ZSB1bnRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5odG1sQ29tbWVudCcpLmh0bWwoKSkudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xyXG4gICAgICB9KTtcclxuICAgICAgaXQoJ3Nob3VsZCBOT1Qgc2FuaXRpemUgZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGV4cGVjdChlbGVtZW50KCcjZXhwbGljaXRseVRydXN0ZWRIdG1sJykuaHRtbCgpKS50b0JlKFxyXG4gICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xyXG4gICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICA8L2ZpbGU+XHJcbiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqXHJcbiAqXHJcbiAqICMjIENhbiBJIGRpc2FibGUgU0NFIGNvbXBsZXRlbHk/XHJcbiAqXHJcbiAqIFllcywgeW91IGNhbi4gIEhvd2V2ZXIsIHRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuICBTQ0UgZ2l2ZXMgeW91IGEgbG90IG9mIHNlY3VyaXR5IGJlbmVmaXRzXHJcbiAqIGZvciBsaXR0bGUgY29kaW5nIG92ZXJoZWFkLiAgSXQgd2lsbCBiZSBtdWNoIGhhcmRlciB0byB0YWtlIGFuIFNDRSBkaXNhYmxlZCBhcHBsaWNhdGlvbiBhbmRcclxuICogZWl0aGVyIHNlY3VyZSBpdCBvbiB5b3VyIG93biBvciBlbmFibGUgU0NFIGF0IGEgbGF0ZXIgc3RhZ2UuICBJdCBtaWdodCBtYWtlIHNlbnNlIHRvIGRpc2FibGUgU0NFXHJcbiAqIGZvciBjYXNlcyB3aGVyZSB5b3UgaGF2ZSBhIGxvdCBvZiBleGlzdGluZyBjb2RlIHRoYXQgd2FzIHdyaXR0ZW4gYmVmb3JlIFNDRSB3YXMgaW50cm9kdWNlZCBhbmRcclxuICogeW91J3JlIG1pZ3JhdGluZyB0aGVtIGEgbW9kdWxlIGF0IGEgdGltZS5cclxuICpcclxuICogVGhhdCBzYWlkLCBoZXJlJ3MgaG93IHlvdSBjYW4gY29tcGxldGVseSBkaXNhYmxlIFNDRTpcclxuICpcclxuICogPHByZSBjbGFzcz1cInByZXR0eXByaW50XCI+XHJcbiAqICAgYW5ndWxhci5tb2R1bGUoJ215QXBwV2l0aFNjZURpc2FibGVkbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VQcm92aWRlcikge1xyXG4gKiAgICAgLy8gQ29tcGxldGVseSBkaXNhYmxlIFNDRS4gIEZvciBkZW1vbnN0cmF0aW9uIHB1cnBvc2VzIG9ubHkhXHJcbiAqICAgICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cy5cclxuICogICAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcclxuICogICB9KTtcclxuICogPC9wcmU+XHJcbiAqXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gJFNjZVByb3ZpZGVyKCkge1xyXG4gIHZhciBlbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuc2NlUHJvdmlkZXIjZW5hYmxlZFxyXG4gICAqIEBtZXRob2RPZiBuZy4kc2NlUHJvdmlkZXJcclxuICAgKiBAZnVuY3Rpb25cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkLCB0aGVuIGVuYWJsZXMvZGlzYWJsZXMgU0NFLlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxyXG4gICAqL1xyXG4gIHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5hYmxlZDtcclxuICB9O1xyXG5cclxuXHJcbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXHJcbiAgICpcclxuICAgKiBUaGUgQVBJIGNvbnRyYWN0IGZvciB0aGUgU0NFIGRlbGVnYXRlXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIFRoZSBTQ0UgZGVsZWdhdGUgb2JqZWN0IG11c3QgcHJvdmlkZSB0aGUgZm9sbG93aW5nIDMgbWV0aG9kczpcclxuICAgKlxyXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXHJcbiAgICogICAgIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gdGVsbCB0aGUgU0NFIHNlcnZpY2UgdGhhdCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgT0sgdG8gdXNlIGluIHRoZVxyXG4gICAqICAgICBjb250ZXh0cyBzcGVjaWZpZWQgYnkgY29udGV4dEVudW0uICBJdCBtdXN0IHJldHVybiBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5XHJcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cclxuICAgKlxyXG4gICAqIC0gdmFsdWVPZih2YWx1ZSlcclxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxyXG4gICAqICAgICBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBpbnB1dCB2YWx1ZSB0byB0cnVzdEFzLiAgQmFzaWNhbGx5LCBpZlxyXG4gICAqICAgICB0cnVzdEFzIGlzIHdyYXBwaW5nIHRoZSBnaXZlbiB2YWx1ZXMgaW50byBzb21lIHR5cGUsIHRoaXMgb3BlcmF0aW9uIHVud3JhcHMgaXQgd2hlbiBnaXZlblxyXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXHJcbiAgICpcclxuICAgKiAtIGdldFRydXN0ZWQoY29udGV4dEVudW0sIHZhbHVlKVxyXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcclxuICAgKiAgICAgY29udGV4dEVudW0gb3IgdGhyb3cgYW5kIGV4Y2VwdGlvbiBvdGhlcndpc2UuXHJcbiAgICpcclxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZSBvcGFxdWVcclxuICAgKiBvciB3cmFwcGVkIGluIHNvbWUgaG9sZGVyIG9iamVjdC4gIFRoYXQgaGFwcGVucyB0byBiZSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuICBGb3IgaW5zdGFuY2UsXHJcbiAgICogYW4gaW1wbGVtZW50YXRpb24gY291bGQgbWFpbnRhaW4gYSByZWdpc3RyeSBvZiBhbGwgdHJ1c3RlZCBvYmplY3RzIGJ5IGNvbnRleHQuICBJbiBzdWNoIGEgY2FzZSxcclxuICAgKiB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lXHJcbiAgICogb2JqZWN0IHBhc3NlZCBpbiBpZiBpdCB3YXMgZm91bmQgaW4gdGhlIHJlZ2lzdHJ5IHVuZGVyIGEgY29tcGF0aWJsZSBjb250ZXh0IG9yIHRocm93IGFuXHJcbiAgICogZXhjZXB0aW9uIG90aGVyd2lzZS4gIEFuIGltcGxlbWVudGF0aW9uIG1pZ2h0IG9ubHkgd3JhcCB2YWx1ZXMgc29tZSBvZiB0aGUgdGltZSBiYXNlZCBvblxyXG4gICAqIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcclxuICAgKiBjb25zdGFudHMgb3Igb2JqZWN0cyBldmVuIGlmIG5vdCB3cmFwcGVkLiAgQWxsIHN1Y2ggaW1wbGVtZW50YXRpb25zIGZ1bGZpbGwgdGhpcyBjb250cmFjdC5cclxuICAgKlxyXG4gICAqXHJcbiAgICogQSBub3RlIG9uIHRoZSBpbmhlcml0YW5jZSBtb2RlbCBmb3IgU0NFIGNvbnRleHRzXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcclxuICAgKiBpcyBwdXJlbHkgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlscy5cclxuICAgKlxyXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcclxuICAgKlxyXG4gICAqICAgICBnZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSkgc3VjY2VlZGluZyBpbXBsaWVzIHRoYXQgZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpXHJcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxyXG4gICAqXHJcbiAgICogSW5oZXJpdGFuY2UgaGFwcGVucyB0byBjYXB0dXJlIHRoaXMgaW4gYSBuYXR1cmFsIHdheS4gIEluIHNvbWUgZnV0dXJlLCB3ZVxyXG4gICAqIG1heSBub3QgdXNlIGluaGVyaXRhbmNlIGFueW1vcmUuICBUaGF0IGlzIE9LIGJlY2F1c2Ugbm8gY29kZSBvdXRzaWRlIG9mXHJcbiAgICogc2NlLmpzIGFuZCBzY2VTcGVjcy5qcyB3b3VsZCBuZWVkIHRvIGJlIGF3YXJlIG9mIHRoaXMgZGV0YWlsLlxyXG4gICAqL1xyXG5cclxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZG9jdW1lbnQnLCAnJHNjZURlbGVnYXRlJywgZnVuY3Rpb24oXHJcbiAgICAgICAgICAgICAgICAkcGFyc2UsICAgJGRvY3VtZW50LCAgICRzY2VEZWxlZ2F0ZSkge1xyXG4gICAgLy8gUHJlcmVxOiBFbnN1cmUgdGhhdCB3ZSdyZSBub3QgcnVubmluZyBpbiBJRTggcXVpcmtzIG1vZGUuICBJbiB0aGF0IG1vZGUsIElFIGFsbG93c1xyXG4gICAgLy8gdGhlIFwiZXhwcmVzc2lvbihqYXZhc2NyaXB0IGV4cHJlc3Npb24pXCIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLlxyXG4gICAgaWYgKGVuYWJsZWQgJiYgbXNpZSkge1xyXG4gICAgICB2YXIgZG9jdW1lbnRNb2RlID0gJGRvY3VtZW50WzBdLmRvY3VtZW50TW9kZTtcclxuICAgICAgaWYgKGRvY3VtZW50TW9kZSAhPT0gdW5kZWZpbmVkICYmIGRvY3VtZW50TW9kZSA8IDgpIHtcclxuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsXHJcbiAgICAgICAgICAnU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZG9lcyBub3Qgc3VwcG9ydCBJbnRlcm5ldCBFeHBsb3JlciB2ZXJzaW9uIDwgOSBpbiBxdWlya3MgJyArXHJcbiAgICAgICAgICAnbW9kZS4gIFlvdSBjYW4gZml4IHRoaXMgYnkgYWRkaW5nIHRoZSB0ZXh0IDwhZG9jdHlwZSBodG1sPiB0byB0aGUgdG9wIG9mIHlvdXIgSFRNTCAnICtcclxuICAgICAgICAgICdkb2N1bWVudC4gIFNlZSBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kc2NlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNjZSA9IGNvcHkoU0NFX0NPTlRFWFRTKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAgICogQG5hbWUgbmcuc2NlI2lzRW5hYmxlZFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS4gIElmIHlvdSB3YW50IHRvIHNldCB0aGUgdmFsdWUsIHlvdVxyXG4gICAgICogaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgc2NlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGVuYWJsZWQ7XHJcbiAgICB9O1xyXG4gICAgc2NlLnRydXN0QXMgPSAkc2NlRGVsZWdhdGUudHJ1c3RBcztcclxuICAgIHNjZS5nZXRUcnVzdGVkID0gJHNjZURlbGVnYXRlLmdldFRydXN0ZWQ7XHJcbiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xyXG5cclxuICAgIGlmICghZW5hYmxlZCkge1xyXG4gICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9LFxyXG4gICAgICBzY2UudmFsdWVPZiA9IGlkZW50aXR5XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlI3BhcnNlXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uICBUaGlzIGlzIGxpa2Uge0BsaW5rXHJcbiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdFxyXG4gICAgICogd3JhcHMgdGhlIGV4cHJlc3Npb24gaW4gYSBjYWxsIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKCp0eXBlKixcclxuICAgICAqICpyZXN1bHQqKX1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBTQ0UgY29udGV4dCBpbiB3aGljaCB0aGlzIHJlc3VsdCB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcclxuICAgICAqXHJcbiAgICAgKiAgICAqIGBjb250ZXh0YCDDouKCrOKAnCBge29iamVjdH1gIMOi4oKs4oCcIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xyXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXHJcbiAgICAgKiAgICAqIGBsb2NhbHNgIMOi4oKs4oCcIGB7b2JqZWN0PX1gIMOi4oKs4oCcIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxyXG4gICAgICogICAgICBgY29udGV4dGAuXHJcbiAgICAgKi9cclxuICAgIHNjZS5wYXJzZUFzID0gZnVuY3Rpb24gc2NlUGFyc2VBcyh0eXBlLCBleHByKSB7XHJcbiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7XHJcbiAgICAgIGlmIChwYXJzZWQubGl0ZXJhbCAmJiBwYXJzZWQuY29uc3RhbnQpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2VkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzY2VQYXJzZUFzVHJ1c3RlZChzZWxmLCBsb2NhbHMpIHtcclxuICAgICAgICAgIHJldHVybiBzY2UuZ2V0VHJ1c3RlZCh0eXBlLCBwYXJzZWQoc2VsZiwgbG9jYWxzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSN0cnVzdEFzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS4gIEFzIHN1Y2gsIHJldHVybnMgYW4gb2JqZWN0XHJcbiAgICAgKiB0aGF0IGlzIHRydXN0ZWQgYnkgYW5ndWxhciBmb3IgdXNlIGluIHNwZWNpZmllZCBzdHJpY3QgY29udGV4dHVhbCBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhc1xyXG4gICAgICogbmctaHRtbC1iaW5kLXVuc2FmZSwgbmctaW5jbHVkZSwgYW55IHNyYyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nXHJcbiAgICAgKiBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBzdWNoIGFzIGZvciBvbmNsaWNrLCAgZXRjLikgdGhhdCB1c2VzIHRoZSBwcm92aWRlZCB2YWx1ZS4gIFNlZSAqXHJcbiAgICAgKiB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZW5hYmxpbmcgc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZS4gIGUuZy4gdXJsLFxyXG4gICAgICogICByZXNvdXJjZV91cmwsIGh0bWwsIGpzIGFuZCBjc3MuXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxyXG4gICAgICogQHJldHVybnMgeyp9IEEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB0byBzdGFuZCBpbiBmb3IgdGhlIHByb3ZpZGVkIGB2YWx1ZWAgaW4gcGxhY2VzXHJcbiAgICAgKiB3aGVyZSBBbmd1bGFyIGV4cGVjdHMgYSAkc2NlLnRydXN0QXMoKSByZXR1cm4gdmFsdWUuXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2UjdHJ1c3RBc0h0bWxcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0h0bWwodmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxyXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZEh0bWxcclxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcclxuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxyXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlI3RydXN0QXNVcmxcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc1VybCh2YWx1ZSlgIMOi4oCg4oCZIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5VUkwsIHZhbHVlKWB9XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cclxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRVcmxcclxuICAgICAqICAgICAkc2NlLmdldFRydXN0ZWRVcmwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xyXG4gICAgICogICAgIG9ubHkgYWNjZXB0IGV4cHJlc3Npb25zIHRoYXQgYXJlIGVpdGhlciBsaXRlcmFsIGNvbnN0YW50cyBvciBhcmUgdGhlXHJcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh2YWx1ZSlgIMOi4oCg4oCZIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cclxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxyXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcclxuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZSByZXR1cm5cclxuICAgICAqICAgICB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlI3RydXN0QXNKc1xyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSlMsIHZhbHVlKWB9XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cclxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRKc1xyXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcclxuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxyXG4gICAgICogICAgIHJldHVybiB2YWx1ZSBvZiB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzICRzY2UudHJ1c3RBc30uKVxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlI2dldFRydXN0ZWRcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCwgdGFrZXNcclxuICAgICAqIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSgpIGNhbGwgYW5kIHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWRcclxuICAgICAqIHZhbHVlIGlmIHRoZSBxdWVyaWVkIGNvbnRleHQgdHlwZSBpcyBhIHN1cGVydHlwZSBvZiB0aGUgY3JlYXRlZCB0eXBlLiAgSWYgdGhpcyBjb25kaXRpb25cclxuICAgICAqIGlzbid0IHNhdGlzZmllZCwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC5cclxuICAgICAqIEBwYXJhbSB7Kn0gbWF5YmVUcnVzdGVkIFRoZSByZXN1bHQgb2YgYSBwcmlvciB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSBjYWxsLlxyXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSB0aGUgd2FzIG9yaWdpbmFsbHkgcHJvdmlkZWQgdG8ge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH0gaWZcclxuICAgICAqICAgICB2YWxpZCBpbiB0aGlzIGNvbnRleHQuICBPdGhlcndpc2UsIHRocm93cyBhbiBleGNlcHRpb24uXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZEh0bWxcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxyXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWBcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNnZXRUcnVzdGVkQ3NzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2UjZ2V0VHJ1c3RlZFVybFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKWAgw6LigKDigJkge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYH1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxyXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpYFxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbmdkb2MgbWV0aG9kXHJcbiAgICAgKiBAbmFtZSBuZy4kc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYC5cclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWBcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNnZXRUcnVzdGVkSnNcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAgw6LigKDigJkge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkpTLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXHJcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzSHRtbFxyXG4gICAgICogQG1ldGhvZE9mIG5nLiRzY2VcclxuICAgICAqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSHRtbChleHByZXNzaW9uIHN0cmluZylgIMOi4oCg4oCZIHtAbGluayBuZy4kc2NlI3BhcnNlIGAkc2NlLnBhcnNlQXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXHJcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxyXG4gICAgICpcclxuICAgICAqICAgICogYGNvbnRleHRgIMOi4oKs4oCcIGB7b2JqZWN0fWAgw6LigqzigJwgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXHJcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cclxuICAgICAqICAgICogYGxvY2Fsc2Agw6LigqzigJwgYHtvYmplY3Q9fWAgw6LigqzigJwgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXHJcbiAgICAgKiAgICAgIGBjb250ZXh0YC5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzQ3NzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNDc3ModmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZSNwYXJzZSBgJHNjZS5wYXJzZUFzKCRzY2UuQ1NTLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXHJcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxyXG4gICAgICpcclxuICAgICAqICAgICogYGNvbnRleHRgIMOi4oKs4oCcIGB7b2JqZWN0fWAgw6LigqzigJwgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXHJcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cclxuICAgICAqICAgICogYGxvY2Fsc2Agw6LigqzigJwgYHtvYmplY3Q9fWAgw6LigqzigJwgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXHJcbiAgICAgKiAgICAgIGBjb250ZXh0YC5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzVXJsXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNVcmwodmFsdWUpYCDDouKAoOKAmSB7QGxpbmsgbmcuJHNjZSNwYXJzZSBgJHNjZS5wYXJzZUFzKCRzY2UuVVJMLCB2YWx1ZSlgfVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXHJcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxyXG4gICAgICpcclxuICAgICAqICAgICogYGNvbnRleHRgIMOi4oKs4oCcIGB7b2JqZWN0fWAgw6LigqzigJwgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXHJcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cclxuICAgICAqICAgICogYGxvY2Fsc2Agw6LigqzigJwgYHtvYmplY3Q9fWAgw6LigqzigJwgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXHJcbiAgICAgKiAgICAgIGBjb250ZXh0YC5cclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQG5nZG9jIG1ldGhvZFxyXG4gICAgICogQG5hbWUgbmcuJHNjZSNwYXJzZUFzUmVzb3VyY2VVcmxcclxuICAgICAqIEBtZXRob2RPZiBuZy4kc2NlXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHZhbHVlKWAgw6LigKDigJkge0BsaW5rIG5nLiRzY2UjcGFyc2UgYCRzY2UucGFyc2VBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcclxuICAgICAqXHJcbiAgICAgKiAgICAqIGBjb250ZXh0YCDDouKCrOKAnCBge29iamVjdH1gIMOi4oKs4oCcIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xyXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXHJcbiAgICAgKiAgICAqIGBsb2NhbHNgIMOi4oKs4oCcIGB7b2JqZWN0PX1gIMOi4oKs4oCcIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxyXG4gICAgICogICAgICBgY29udGV4dGAuXHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBuZ2RvYyBtZXRob2RcclxuICAgICAqIEBuYW1lIG5nLiRzY2UjcGFyc2VBc0pzXHJcbiAgICAgKiBAbWV0aG9kT2YgbmcuJHNjZVxyXG4gICAgICpcclxuICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNKcyh2YWx1ZSlgIMOi4oCg4oCZIHtAbGluayBuZy4kc2NlI3BhcnNlIGAkc2NlLnBhcnNlQXMoJHNjZS5KUywgdmFsdWUpYH1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcclxuICAgICAqXHJcbiAgICAgKiAgICAqIGBjb250ZXh0YCDDouKCrOKAnCBge29iamVjdH1gIMOi4oKs4oCcIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xyXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXHJcbiAgICAgKiAgICAqIGBsb2NhbHNgIMOi4oKs4oCcIGB7b2JqZWN0PX1gIMOi4oKs4oCcIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxyXG4gICAgICogICAgICBgY29udGV4dGAuXHJcbiAgICAgKi9cclxuXHJcbiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuXHJcbiAgICB2YXIgcGFyc2UgPSBzY2UucGFyc2VBcyxcclxuICAgICAgICBnZXRUcnVzdGVkID0gc2NlLmdldFRydXN0ZWQsXHJcbiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzO1xyXG5cclxuICAgIGFuZ3VsYXIuZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uIChlbnVtVmFsdWUsIG5hbWUpIHtcclxuICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xyXG4gICAgICBzY2VbY2FtZWxDYXNlKFwicGFyc2VfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24gKGV4cHIpIHtcclxuICAgICAgICByZXR1cm4gcGFyc2UoZW51bVZhbHVlLCBleHByKTtcclxuICAgICAgfVxyXG4gICAgICBzY2VbY2FtZWxDYXNlKFwiZ2V0X3RydXN0ZWRfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgc2NlW2NhbWVsQ2FzZShcInRydXN0X2FzX1wiICsgbE5hbWUpXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVzdEFzKGVudW1WYWx1ZSwgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gc2NlO1xyXG4gIH1dO1xyXG59XHJcblxyXG4vKipcclxuICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkIFwicHJpdmF0ZVwiIHNlcnZpY2UgISEhXHJcbiAqXHJcbiAqIEBuYW1lIG5nLiRzbmlmZmVyXHJcbiAqIEByZXF1aXJlcyAkd2luZG93XHJcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcclxuICpcclxuICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/XHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaGFzaGNoYW5nZSBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgaGFzaGNoYW5nZSBldmVudCA/XHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/XHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0aW9ucyBEb2VzIHRoZSBicm93c2VyIHN1cHBvcnQgQ1NTIGFuaW1hdGlvbiBldmVudHMgP1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBpcyB2ZXJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiB0ZXN0aW5nIGJyb3dzZXIncyBmZWF0dXJlcy5cclxuICovXHJcbmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7XHJcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCR3aW5kb3csICRkb2N1bWVudCkge1xyXG4gICAgdmFyIGV2ZW50U3VwcG9ydCA9IHt9LFxyXG4gICAgICAgIGFuZHJvaWQgPSBpbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxyXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXHJcbiAgICAgICAgZG9jdW1lbnQgPSAkZG9jdW1lbnRbMF0gfHwge30sXHJcbiAgICAgICAgdmVuZG9yUHJlZml4LFxyXG4gICAgICAgIHZlbmRvclJlZ2V4ID0gL14oTW96fHdlYmtpdHxPfG1zKSg/PVtBLVpdKS8sXHJcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxyXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXHJcbiAgICAgICAgYW5pbWF0aW9ucyA9IGZhbHNlLFxyXG4gICAgICAgIG1hdGNoO1xyXG5cclxuICAgIGlmIChib2R5U3R5bGUpIHtcclxuICAgICAgZm9yKHZhciBwcm9wIGluIGJvZHlTdHlsZSkge1xyXG4gICAgICAgIGlmKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkge1xyXG4gICAgICAgICAgdmVuZG9yUHJlZml4ID0gbWF0Y2hbMF07XHJcbiAgICAgICAgICB2ZW5kb3JQcmVmaXggPSB2ZW5kb3JQcmVmaXguc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB2ZW5kb3JQcmVmaXguc3Vic3RyKDEpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZighdmVuZG9yUHJlZml4KSB7XHJcbiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpO1xyXG4gICAgICBhbmltYXRpb25zICA9ICEhKCgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpIHx8ICh2ZW5kb3JQcmVmaXggKyAnQW5pbWF0aW9uJyBpbiBib2R5U3R5bGUpKTtcclxuXHJcbiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnN8fCFhbmltYXRpb25zKSkge1xyXG4gICAgICAgIHRyYW5zaXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uKTtcclxuICAgICAgICBhbmltYXRpb25zID0gaXNTdHJpbmcoZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRBbmltYXRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8vIEFuZHJvaWQgaGFzIGhpc3RvcnkucHVzaFN0YXRlLCBidXQgaXQgZG9lcyBub3QgdXBkYXRlIGxvY2F0aW9uIGNvcnJlY3RseVxyXG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuXHJcbiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcclxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTA0XHJcblxyXG4gICAgICAvLyBvbGRlciB3ZWJpdCBicm93c2VyICg1MzMuOSkgb24gQm94ZWUgYm94IGhhcyBleGFjdGx5IHRoZSBzYW1lIHByb2JsZW0gYXMgQW5kcm9pZCBoYXNcclxuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYWxzb1xyXG4gICAgICBoaXN0b3J5OiAhISgkd2luZG93Lmhpc3RvcnkgJiYgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLFxyXG4gICAgICBoYXNoY2hhbmdlOiAnb25oYXNoY2hhbmdlJyBpbiAkd2luZG93ICYmXHJcbiAgICAgICAgICAgICAgICAgIC8vIElFOCBjb21wYXRpYmxlIG1vZGUgbGllc1xyXG4gICAgICAgICAgICAgICAgICAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA3KSxcclxuICAgICAgaGFzRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSUU5IGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBpdCdzIHNvIGZ1YmFyZWQgdGhhdCB3ZSByYXRoZXIgcHJldGVuZCB0aGF0IGl0IGRvZXNuJ3QgaGF2ZVxyXG4gICAgICAgIC8vIGl0LiBJbiBwYXJ0aWN1bGFyIHRoZSBldmVudCBpcyBub3QgZmlyZWQgd2hlbiBiYWNrc3BhY2Ugb3IgZGVsZXRlIGtleSBhcmUgcHJlc3NlZCBvclxyXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXHJcbiAgICAgICAgaWYgKGV2ZW50ID09ICdpbnB1dCcgJiYgbXNpZSA9PSA5KSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChldmVudFN1cHBvcnRbZXZlbnRdKSkge1xyXG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTtcclxuICAgICAgfSxcclxuICAgICAgY3NwOiBkb2N1bWVudC5zZWN1cml0eVBvbGljeSA/IGRvY3VtZW50LnNlY3VyaXR5UG9saWN5LmlzQWN0aXZlIDogZmFsc2UsXHJcbiAgICAgIHZlbmRvclByZWZpeDogdmVuZG9yUHJlZml4LFxyXG4gICAgICB0cmFuc2l0aW9ucyA6IHRyYW5zaXRpb25zLFxyXG4gICAgICBhbmltYXRpb25zIDogYW5pbWF0aW9uc1xyXG4gICAgfTtcclxuICB9XTtcclxufVxyXG5cclxuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcclxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGJyb3dzZXInLCAnJHEnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLFxyXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkZXhjZXB0aW9uSGFuZGxlcikge1xyXG4gICAgdmFyIGRlZmVycmVkcyA9IHt9O1xyXG5cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICogQG5hbWUgbmcuJHRpbWVvdXRcclxuICAgICAgKiBAcmVxdWlyZXMgJGJyb3dzZXJcclxuICAgICAgKlxyXG4gICAgICAqIEBkZXNjcmlwdGlvblxyXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcclxuICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvXHJcbiAgICAgICoge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxyXG4gICAgICAqXHJcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiByZWdpc3RlcmluZyBhIHRpbWVvdXQgZnVuY3Rpb24gaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW5cclxuICAgICAgKiB0aGUgdGltZW91dCBpcyByZWFjaGVkIGFuZCB0aGUgdGltZW91dCBmdW5jdGlvbiBpcyBleGVjdXRlZC5cclxuICAgICAgKlxyXG4gICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC5cclxuICAgICAgKlxyXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xyXG4gICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy5cclxuICAgICAgKlxyXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxyXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIERlbGF5IGluIG1pbGxpc2Vjb25kcy5cclxuICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbaW52b2tlQXBwbHk9dHJ1ZV0gSWYgc2V0IHRvIGBmYWxzZWAgc2tpcHMgbW9kZWwgZGlydHkgY2hlY2tpbmcsIG90aGVyd2lzZVxyXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxyXG4gICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSB2YWx1ZSB0aGlzXHJcbiAgICAgICogICBwcm9taXNlIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBpcyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZm5gIGZ1bmN0aW9uLlxyXG4gICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGltZW91dChmbiwgZGVsYXksIGludm9rZUFwcGx5KSB7XHJcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCksXHJcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcclxuICAgICAgICAgIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksXHJcbiAgICAgICAgICB0aW1lb3V0SWQ7XHJcblxyXG4gICAgICB0aW1lb3V0SWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShmbigpKTtcclxuICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlKTtcclxuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSwgZGVsYXkpO1xyXG5cclxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcclxuICAgICAgZGVmZXJyZWRzW3RpbWVvdXRJZF0gPSBkZWZlcnJlZDtcclxuXHJcbiAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICAgICogQG5hbWUgbmcuJHRpbWVvdXQjY2FuY2VsXHJcbiAgICAgICogQG1ldGhvZE9mIG5nLiR0aW1lb3V0XHJcbiAgICAgICpcclxuICAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAgKiBDYW5jZWxzIGEgdGFzayBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9taXNlYC4gQXMgYSByZXN1bHQgb2YgdGhpcywgdGhlIHByb21pc2Ugd2lsbCBiZVxyXG4gICAgICAqIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24uXHJcbiAgICAgICpcclxuICAgICAgKiBAcGFyYW0ge1Byb21pc2U9fSBwcm9taXNlIFByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkdGltZW91dGAgZnVuY3Rpb24uXHJcbiAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB0YXNrIGhhc24ndCBleGVjdXRlZCB5ZXQgYW5kIHdhcyBzdWNjZXNzZnVsbHlcclxuICAgICAgKiAgIGNhbmNlbGVkLlxyXG4gICAgICAqL1xyXG4gICAgdGltZW91dC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XHJcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XHJcbiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcclxuICAgICAgICBkZWxldGUgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdO1xyXG4gICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGltZW91dDtcclxuICB9XTtcclxufVxyXG5cclxuZnVuY3Rpb24gJCRVcmxVdGlsc1Byb3ZpZGVyKCkge1xyXG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcclxuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLFxyXG4gICAgICAgIC8vIE5PVEU6ICBUaGUgdXNhZ2Ugb2Ygd2luZG93IGFuZCBkb2N1bWVudCBpbnN0ZWFkIG9mICR3aW5kb3cgYW5kICRkb2N1bWVudCBoZXJlIGlzXHJcbiAgICAgICAgLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGVcclxuICAgICAgICAvLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kXHJcbiAgICAgICAgLy8gY2F1c2UgdXMgdG8gYnJlYWsgdGVzdHMuICBJbiBhZGRpdGlvbiwgd2hlbiB0aGUgYnJvd3NlciByZXNvbHZlcyBhIFVSTCBmb3IgWEhSLCBpdFxyXG4gICAgICAgIC8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXNcclxuICAgICAgICAvLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91ciBmb3IgdGhpc1xyXG4gICAgICAgIC8vIHNlcnZpY2UuXHJcbiAgICAgICAgb3JpZ2luVXJsID0gcmVzb2x2ZSh3aW5kb3cubG9jYXRpb24uaHJlZiwgdHJ1ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIE5vcm1hbGl6ZXMgYW5kIG9wdGlvbmFsbHkgcGFyc2VzIGEgVVJMLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6ICBUaGlzIGlzIGEgcHJpdmF0ZSBzZXJ2aWNlLiAgVGhlIEFQSSBpcyBzdWJqZWN0IHRvIGNoYW5nZSB1bnByZWRpY3RhYmx5IGluIGFueSBjb21taXQuXHJcbiAgICAgKlxyXG4gICAgICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIG5vbi1JRSBicm93c2Vyc1xyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogQXNzaWduaW5nIGEgVVJMIHRvIHRoZSBocmVmIHByb3BlcnR5IG9mIGFuIGFuY2hvciBET00gbm9kZSwgZXZlbiBvbmUgYXR0YWNoZWQgdG8gdGhlIERPTSxcclxuICAgICAqIHJlc3VsdHMgYm90aCBpbiB0aGUgbm9ybWFsaXppbmcgYW5kIHBhcnNpbmcgb2YgdGhlIFVSTC4gIE5vcm1hbGl6aW5nIG1lYW5zIHRoYXQgYSByZWxhdGl2ZVxyXG4gICAgICogVVJMIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhbiBhYnNvbHV0ZSBVUkwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50LlxyXG4gICAgICogUGFyc2luZyBtZWFucyB0aGF0IHRoZSBhbmNob3Igbm9kZSdzIGhvc3QsIGhvc3RuYW1lLCBwcm90b2NvbCwgcG9ydCwgcGF0aG5hbWUgYW5kIHJlbGF0ZWRcclxuICAgICAqIHByb3BlcnRpZXMgYXJlIGFsbCBwb3B1bGF0ZWQgdG8gcmVmbGVjdCB0aGUgbm9ybWFsaXplZCBVUkwuICBUaGlzIGFwcHJvYWNoIGhhcyB3aWRlXHJcbiAgICAgKiBjb21wYXRpYmlsaXR5IC0gU2FmYXJpIDErLCBNb3ppbGxhIDErLCBPcGVyYSA3KyxlIGV0Yy4gIFNlZVxyXG4gICAgICogaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXHJcbiAgICAgKlxyXG4gICAgICogSW1wbGVtZW50YXRpb24gTm90ZXMgZm9yIElFXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIElFID49IDggYW5kIDw9IDEwIG5vcm1hbGl6ZXMgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIHRoZSBhbmNob3Igbm9kZSBzaW1pbGFyIHRvIHRoZSBvdGhlclxyXG4gICAgICogYnJvd3NlcnMuICBIb3dldmVyLCB0aGUgcGFyc2VkIGNvbXBvbmVudHMgd2lsbCBub3QgYmUgc2V0IGlmIHRoZSBVUkwgYXNzaWduZWQgZGlkIG5vdCBzcGVjaWZ5XHJcbiAgICAgKiB0aGVtLiAgKGUuZy4gaWYgeW91IGFzc2lnbiBhLmhyZWYgPSBcImZvb1wiLCB0aGVuIGEucHJvdG9jb2wsIGEuaG9zdCwgZXRjLiB3aWxsIGJlIGVtcHR5LikgIFdlXHJcbiAgICAgKiB3b3JrIGFyb3VuZCB0aGF0IGJ5IHBlcmZvcm1pbmcgdGhlIHBhcnNpbmcgaW4gYSAybmQgc3RlcCBieSB0YWtpbmcgYSBwcmV2aW91c2x5IG5vcm1hbGl6ZWRcclxuICAgICAqIFVSTCAoZS5nLiBieSBhc3NpbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxyXG4gICAgICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLlxyXG4gICAgICpcclxuICAgICAqIElFNyBkb2VzIG5vdCBub3JtYWxpemUgdGhlIFVSTCB3aGVuIGFzc2lnbmVkIHRvIGFuIGFuY2hvciBub2RlLiAgKEFwcGFyZW50bHksIGl0IGRvZXMsIGlmIG9uZVxyXG4gICAgICogdXNlcyB0aGUgaW5uZXIgSFRNTCBhcHByb2FjaCB0byBhc3NpZ24gdGhlIFVSTCBhcyBwYXJ0IG9mIGFuIEhUTUwgc25pcHBldCAtXHJcbiAgICAgKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NzI3MjkpICBIb3dldmVyLCBzZXR0aW5nIGltZ1tzcmNdIGRvZXMgbm9ybWFsaXplIHRoZSBVUkwuXHJcbiAgICAgKiBVbmZvcnR1bmF0ZWx5LCBzZXR0aW5nIGltZ1tzcmNdIHRvIHNvbWV0aGluZyBsaWtlIFwiamF2YXNjcmlwdDpmb29cIiBvbiBJRSB0aHJvd3MgYW4gZXhjZXB0aW9uLlxyXG4gICAgICogU2luY2UgdGhlIHByaW1hcnkgdXNhZ2UgZm9yIG5vcm1hbGl6aW5nIFVSTHMgaXMgdG8gc2FuaXRpemUgc3VjaCBVUkxzLCB3ZSBjYW4ndCB1c2UgdGhhdFxyXG4gICAgICogbWV0aG9kIGFuZCBJRSA8IDggaXMgdW5zdXBwb3J0ZWQuXHJcbiAgICAgKlxyXG4gICAgICogUmVmZXJlbmNlczpcclxuICAgICAqICAgaHR0cDovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTEFuY2hvckVsZW1lbnRcclxuICAgICAqICAgaHR0cDovL3d3dy5hcHRhbmEuY29tL3JlZmVyZW5jZS9odG1sL2FwaS9IVE1MQW5jaG9yRWxlbWVudC5odG1sXHJcbiAgICAgKiAgIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xyXG4gICAgICogICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMjkwMlxyXG4gICAgICogICBodHRwOi8vamFtZXMucGFkb2xzZXkuY29tL2phdmFzY3JpcHQvcGFyc2luZy11cmxzLXdpdGgtdGhlLWRvbS9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxyXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gcGFyc2UgV2hlbiB0cnVlLCByZXR1cm5zIGFuIG9iamVjdCBmb3IgdGhlIHBhcnNlZCBVUkwuICBPdGhlcndpc2UsIHJldHVybnNcclxuICAgICAqICAgYSBzaW5nbGUgc3RyaW5nIHRoYXQgaXMgdGhlIG5vcm1hbGl6ZWQgVVJMLlxyXG4gICAgICogQHJldHVybnMge29iamVjdHxzdHJpbmd9IFdoZW4gcGFyc2UgaXMgdHJ1ZSwgcmV0dXJucyB0aGUgbm9ybWFsaXplZCBVUkwgYXMgYSBzdHJpbmcuXHJcbiAgICAgKiBPdGhlcndpc2UsIHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBtZW1iZXJzLlxyXG4gICAgICpcclxuICAgICAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfFxyXG4gICAgICogICB8LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XHJcbiAgICAgKiAgIHwgaHJlZiAgICAgICAgICB8IEEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBwcm92aWRlZCBVUkwgaWYgaXQgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwgfFxyXG4gICAgICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAqICAgfCBob3N0ICAgICAgICAgIHwgVGhlIGhvc3QgYW5kIHBvcnQgKGlmIHRoZSBwb3J0IGlzIG5vbi1kZWZhdWx0KSBvZiB0aGUgbm9ybWFsaXplZFVybCAgICB8XHJcbiAgICAgKlxyXG4gICAgICogVGhlc2UgZmllbGRzIGZyb20gdGhlIFVybFV0aWxzIGludGVyZmFjZSBhcmUgY3VycmVudGx5IG5vdCBuZWVkZWQgYW5kIGhlbmNlIG5vdCByZXR1cm5lZC5cclxuICAgICAqXHJcbiAgICAgKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHxcclxuICAgICAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxyXG4gICAgICogICB8IGhvc3RuYW1lICAgICAgfCBUaGUgaG9zdCB3aXRob3V0IHRoZSBwb3J0IG9mIHRoZSBub3JtYWxpemVkVXJsICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGggZm9sbG93aW5nIHRoZSBob3N0IGluIHRoZSBub3JtYWxpemVkVXJsICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgKiAgIHwgaGFzaCAgICAgICAgICB8IFRoZSBVUkwgaGFzaCBpZiBwcmVzZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgcXVlcnkgc3RyaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlc29sdmUodXJsLCBwYXJzZSkge1xyXG4gICAgICB2YXIgaHJlZiA9IHVybDtcclxuICAgICAgaWYgKG1zaWUgPD0gMTEpIHtcclxuICAgICAgICAvLyBOb3JtYWxpemUgYmVmb3JlIHBhcnNlLiAgUmVmZXIgSW1wbGVtZW50YXRpb24gTm90ZXMgb24gd2h5IHRoaXMgaXNcclxuICAgICAgICAvLyBkb25lIGluIHR3byBzdGVwcyBvbiBJRS5cclxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGhyZWYpO1xyXG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xyXG4gICAgICB9XHJcbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xyXG5cclxuICAgICAgaWYgKCFwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB1cmxQYXJzaW5nTm9kZS5ocmVmO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxyXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCxcclxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0XHJcbiAgICAgICAgLy8gQ3VycmVudGx5IHVudXNlZCBhbmQgaGVuY2UgY29tbWVudGVkIG91dC5cclxuICAgICAgICAvLyBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXHJcbiAgICAgICAgLy8gcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcclxuICAgICAgICAvLyBwYXRobmFtZTogdXJsUGFyc2luZ05vZGUucGF0aG5hbWUsXHJcbiAgICAgICAgLy8gaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCxcclxuICAgICAgICAvLyBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc29sdmU6IHJlc29sdmUsXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVxdWVzdFVybCBUaGUgdXJsIG9mIHRoZSByZXF1ZXN0IGFzIGEgc3RyaW5nIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxyXG4gICAgICAgKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxyXG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cclxuICAgICAgICovXHJcbiAgICAgIGlzU2FtZU9yaWdpbjogZnVuY3Rpb24gaXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHtcclxuICAgICAgICB2YXIgcGFyc2VkID0gKHR5cGVvZiByZXF1ZXN0VXJsID09PSAnc3RyaW5nJykgPyByZXNvbHZlKHJlcXVlc3RVcmwsIHRydWUpIDogcmVxdWVzdFVybDtcclxuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVXJsLnByb3RvY29sICYmXHJcbiAgICAgICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1dO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kd2luZG93XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIHJlZmVyZW5jZSB0byB0aGUgYnJvd3NlcidzIGB3aW5kb3dgIG9iamVjdC4gV2hpbGUgYHdpbmRvd2BcclxuICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxyXG4gKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGVcclxuICogYCR3aW5kb3dgIHNlcnZpY2UsIHNvIGl0IG1heSBiZSBvdmVycmlkZGVuLCByZW1vdmVkIG9yIG1vY2tlZCBmb3IgdGVzdGluZy5cclxuICpcclxuICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZVxyXG4gKiBiZWxvdywgYXJlIGV2YWx1YXRlZCB3aXRoIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQgc2NvcGUuICBUaGVyZWZvcmUsIHRoZXJlIGlzXHJcbiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cclxuICogZXhwcmVzc2lvbi5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUsICR3aW5kb3cpIHtcclxuICAgICAgICAgICAkc2NvcGUuJHdpbmRvdyA9ICR3aW5kb3c7XHJcbiAgICAgICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ0hlbGxvLCBXb3JsZCEnO1xyXG4gICAgICAgICB9XHJcbiAgICAgICA8L3NjcmlwdD5cclxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJncmVldGluZ1wiIC8+XHJcbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkd2luZG93LmFsZXJ0KGdyZWV0aW5nKVwiPkFMRVJUPC9idXR0b24+XHJcbiAgICAgICA8L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBncmVldGluZyBpbiB0aGUgaW5wdXQgYm94JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICBpbnB1dCgnZ3JlZXRpbmcnKS5lbnRlcignSGVsbG8sIEUyRSBUZXN0cycpO1xyXG4gICAgICAgLy8gSWYgd2UgY2xpY2sgdGhlIGJ1dHRvbiBpdCB3aWxsIGJsb2NrIHRoZSB0ZXN0IHJ1bm5lclxyXG4gICAgICAgLy8gZWxlbWVudCgnOmJ1dHRvbicpLmNsaWNrKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCl7XHJcbiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy4kZmlsdGVyUHJvdmlkZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIEZpbHRlcnMgYXJlIGp1c3QgZnVuY3Rpb25zIHdoaWNoIHRyYW5zZm9ybSBpbnB1dCB0byBhbiBvdXRwdXQuIEhvd2V2ZXIgZmlsdGVycyBuZWVkIHRvIGJlIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvXHJcbiAqIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpcyBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzXHJcbiAqIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi5cclxuICpcclxuICogPHByZT5cclxuICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uXHJcbiAqICAgZnVuY3Rpb24gTXlNb2R1bGUoJHByb3ZpZGUsICRmaWx0ZXJQcm92aWRlcikge1xyXG4gKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKVxyXG4gKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7XHJcbiAqICAgICAgIHJldHVybiAnSGVsbG8gJyArIG5hbWUgKyAnISc7XHJcbiAqICAgICB9KTtcclxuICpcclxuICogICAgIC8vIHJlZ2lzdGVyIGEgZmlsdGVyIGZhY3Rvcnkgd2hpY2ggdXNlcyB0aGVcclxuICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuXHJcbiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpe1xyXG4gKiAgICAgICAvLyByZXR1cm4gdGhlIGZpbHRlciBmdW5jdGlvbiB3aGljaCB1c2VzIHRoZSBncmVldCBzZXJ2aWNlXHJcbiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb25cclxuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcclxuICogICAgICAgICAvLyBmaWx0ZXJzIG5lZWQgdG8gYmUgZm9yZ2l2aW5nIHNvIGNoZWNrIGlucHV0IHZhbGlkaXR5XHJcbiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDtcclxuICogICAgICAgfTtcclxuICogICAgIH0pO1xyXG4gKiAgIH1cclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4IHdpdGggYEZpbHRlcmAuXHJcbiAqIDxwcmU+XHJcbiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdChcclxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXJQcm92aWRlcikge1xyXG4gKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpe1xyXG4gKiAgICAgICAgIHJldHVybiAuLi47XHJcbiAqICAgICAgIH0pO1xyXG4gKiAgICAgfSxcclxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHtcclxuICogICAgICAgZXhwZWN0KCRmaWx0ZXIoJ3JldmVyc2UnKSkudG9CZShyZXZlcnNlRmlsdGVyKTtcclxuICogICAgIH0pO1xyXG4gKiA8L3ByZT5cclxuICpcclxuICpcclxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWVcclxuICoge0BsaW5rIGd1aWRlL2Rldl9ndWlkZS50ZW1wbGF0ZXMuZmlsdGVycyBVbmRlcnN0YW5kaW5nIEFuZ3VsYXIgRmlsdGVyc30gaW4gdGhlIGFuZ3VsYXIgRGV2ZWxvcGVyXHJcbiAqIEd1aWRlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBuZ2RvYyBtZXRob2RcclxuICogQG5hbWUgbmcuJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXHJcbiAqIEBtZXRob2RPZiBuZy4kZmlsdGVyUHJvdmlkZXJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFJlZ2lzdGVyIGZpbHRlciBmYWN0b3J5IGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIFRoZSBmaWx0ZXIgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpcyBpbmplY3RhYmxlLlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIG5nLiRmaWx0ZXJcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGaWx0ZXJzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIGRhdGEgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxyXG4gKlxyXG4gKiBUaGUgZ2VuZXJhbCBzeW50YXggaW4gdGVtcGxhdGVzIGlzIGFzIGZvbGxvd3M6XHJcbiAqXHJcbiAqICAgICAgICAge3sgZXhwcmVzc2lvbiBbfCBmaWx0ZXJfbmFtZVs6cGFyYW1ldGVyX3ZhbHVlXSAuLi4gXSB9fVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24gdG8gcmV0cmlldmVcclxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBmaWx0ZXIgZnVuY3Rpb25cclxuICovXHJcbiRGaWx0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xyXG5mdW5jdGlvbiAkRmlsdGVyUHJvdmlkZXIoJHByb3ZpZGUpIHtcclxuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XHJcblxyXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcclxuICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpO1xyXG4gIH1cclxuICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XHJcblxyXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICByZXR1cm4gJGluamVjdG9yLmdldChuYW1lICsgc3VmZml4KTtcclxuICAgIH1cclxuICB9XTtcclxuXHJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICByZWdpc3RlcignY3VycmVuY3knLCBjdXJyZW5jeUZpbHRlcik7XHJcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcclxuICByZWdpc3RlcignZmlsdGVyJywgZmlsdGVyRmlsdGVyKTtcclxuICByZWdpc3RlcignanNvbicsIGpzb25GaWx0ZXIpO1xyXG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XHJcbiAgcmVnaXN0ZXIoJ2xvd2VyY2FzZScsIGxvd2VyY2FzZUZpbHRlcik7XHJcbiAgcmVnaXN0ZXIoJ251bWJlcicsIG51bWJlckZpbHRlcik7XHJcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcclxuICByZWdpc3RlcigndXBwZXJjYXNlJywgdXBwZXJjYXNlRmlsdGVyKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmaWx0ZXJcclxuICogQG5hbWUgbmcuZmlsdGVyOmZpbHRlclxyXG4gKiBAZnVuY3Rpb25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNlbGVjdHMgYSBzdWJzZXQgb2YgaXRlbXMgZnJvbSBgYXJyYXlgIGFuZCByZXR1cm5zIGl0IGFzIGEgbmV3IGFycmF5LlxyXG4gKlxyXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXVnbWVudCB0aGUgYEFycmF5YCB0eXBlIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFNlZVxyXG4gKiB7QGxpbmsgbmcuJGZpbHRlcn0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQW5ndWxhciBhcnJheXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3VyY2UgYXJyYXkuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cclxuICogICBgYXJyYXlgLlxyXG4gKlxyXG4gKiAgIENhbiBiZSBvbmUgb2Y6XHJcbiAqXHJcbiAqICAgLSBgc3RyaW5nYDogUHJlZGljYXRlIHRoYXQgcmVzdWx0cyBpbiBhIHN1YnN0cmluZyBtYXRjaCB1c2luZyB0aGUgdmFsdWUgb2YgYGV4cHJlc3Npb25gXHJcbiAqICAgICBzdHJpbmcuIEFsbCBzdHJpbmdzIG9yIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgY29udGFpbiB0aGlzIHN0cmluZ1xyXG4gKiAgICAgd2lsbCBiZSByZXR1cm5lZC4gVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cclxuICpcclxuICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkXHJcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXHJcbiAqICAgICB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYCBjb250YWluaW5nIFwiTVwiIGFuZCBwcm9wZXJ0eSBgcGhvbmVgIGNvbnRhaW5pbmcgXCIxXCIuIEEgc3BlY2lhbFxyXG4gKiAgICAgcHJvcGVydHkgbmFtZSBgJGAgY2FuIGJlIHVzZWQgKGFzIGluIGB7JDpcInRleHRcIn1gKSB0byBhY2NlcHQgYSBtYXRjaCBhZ2FpbnN0IGFueVxyXG4gKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhhdCdzIGVxdWl2YWxlbnQgdG8gdGhlIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgXHJcbiAqICAgICBhcyBkZXNjcmliZWQgYWJvdmUuXHJcbiAqXHJcbiAqICAgLSBgZnVuY3Rpb25gOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy4gVGhlIGZ1bmN0aW9uIGlzXHJcbiAqICAgICBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgLiBUaGUgZmluYWwgcmVzdWx0IGlzIGFuIGFycmF5IG9mIHRob3NlIGVsZW1lbnRzIHRoYXRcclxuICogICAgIHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXHJcbiAqXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oZXhwZWN0ZWQsIGFjdHVhbCl8dHJ1ZXx1bmRlZmluZWR9IGNvbXBhcmF0b3IgQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluXHJcbiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tXHJcbiAqICAgICB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBtYXRjaC5cclxuICpcclxuICogICBDYW4gYmUgb25lIG9mOlxyXG4gKlxyXG4gKiAgICAgLSBgZnVuY3Rpb24oZXhwZWN0ZWQsIGFjdHVhbClgOlxyXG4gKiAgICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kXHJcbiAqICAgICAgIHNob3VsZCByZXR1cm4gdHJ1ZSBpZiB0aGUgaXRlbSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gZmlsdGVyZWQgcmVzdWx0LlxyXG4gKlxyXG4gKiAgICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oZXhwZWN0ZWQsIGFjdHVhbCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoZXhwZWN0ZWQsIGFjdHVhbCl9YC5cclxuICogICAgICAgdGhpcyBpcyBlc3NlbnRpYWxseSBzdHJpY3QgY29tcGFyaXNvbiBvZiBleHBlY3RlZCBhbmQgYWN0dWFsLlxyXG4gKlxyXG4gKiAgICAgLSBgZmFsc2V8dW5kZWZpbmVkYDogQSBzaG9ydCBoYW5kIGZvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbG9vayBmb3IgYSBzdWJzdHJpbmcgbWF0Y2ggaW4gY2FzZVxyXG4gKiAgICAgICBpbnNlbnNpdGl2ZSB3YXkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic4MDAtQklHLU1BUlknfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGllJywgcGhvbmU6JzU1NS04NzY1J30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dXCI+PC9kaXY+XHJcblxyXG4gICAgICAgU2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+XHJcbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hUZXh0UmVzdWx0c1wiPlxyXG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cclxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaFRleHRcIj5cclxuICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cclxuICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XHJcbiAgICAgICAgIDwvdHI+XHJcbiAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgPGhyPlxyXG4gICAgICAgQW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPiA8YnI+XHJcbiAgICAgICBOYW1lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLm5hbWVcIj48YnI+XHJcbiAgICAgICBQaG9uZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5waG9uZVwiPjxicj5cclxuICAgICAgIEVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjxicj5cclxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaE9ialJlc3VsdHNcIj5cclxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XHJcbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2g6c3RyaWN0XCI+XHJcbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XHJcbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxyXG4gICAgICAgICA8L3RyPlxyXG4gICAgICAgPC90YWJsZT5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgc2VhcmNoIGFjcm9zcyBhbGwgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignbScpO1xyXG4gICAgICAgICBleHBlY3QocmVwZWF0ZXIoJyNzZWFyY2hUZXh0UmVzdWx0cyB0cicsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKSkuXHJcbiAgICAgICAgICAgdG9FcXVhbChbJ01hcnknLCAnTWlrZScsICdBZGFtJ10pO1xyXG5cclxuICAgICAgICAgaW5wdXQoJ3NlYXJjaFRleHQnKS5lbnRlcignNzYnKTtcclxuICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCcjc2VhcmNoVGV4dFJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydKb2huJywgJ0p1bGllJ10pO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGlucHV0KCdzZWFyY2guJCcpLmVudGVyKCdpJyk7XHJcbiAgICAgICAgIGV4cGVjdChyZXBlYXRlcignI3NlYXJjaE9ialJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSk7XHJcbiAgICAgICB9KTtcclxuICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBpbnB1dCgnc2VhcmNoLm5hbWUnKS5lbnRlcignSnVsaWUnKTtcclxuICAgICAgICAgaW5wdXQoJ3N0cmljdCcpLmNoZWNrKCk7XHJcbiAgICAgICAgIGV4cGVjdChyZXBlYXRlcignI3NlYXJjaE9ialJlc3VsdHMgdHInLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydKdWxpZSddKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuZnVuY3Rpb24gZmlsdGVyRmlsdGVyKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbihhcnJheSwgZXhwcmVzc2lvbiwgY29tcGVyYXRvcikge1xyXG4gICAgaWYgKCFpc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5O1xyXG4gICAgdmFyIHByZWRpY2F0ZXMgPSBbXTtcclxuICAgIHByZWRpY2F0ZXMuY2hlY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHByZWRpY2F0ZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICBpZighcHJlZGljYXRlc1tqXSh2YWx1ZSkpIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoKHR5cGVvZiBjb21wZXJhdG9yKSB7XHJcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxyXG4gICAgICAgIGlmKGNvbXBlcmF0b3IgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgY29tcGVyYXRvciA9IGZ1bmN0aW9uKG9iaiwgdGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYW5ndWxhci5lcXVhbHMob2JqLCB0ZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBjb21wZXJhdG9yID0gZnVuY3Rpb24ob2JqLCB0ZXh0KSB7XHJcbiAgICAgICAgICB0ZXh0ID0gKCcnK3RleHQpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICByZXR1cm4gKCcnK29iaikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHRleHQpID4gLTFcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdmFyIHNlYXJjaCA9IGZ1bmN0aW9uKG9iaiwgdGV4dCl7XHJcbiAgICAgIGlmICh0eXBlb2YgdGV4dCA9PSAnc3RyaW5nJyAmJiB0ZXh0LmNoYXJBdCgwKSA9PT0gJyEnKSB7XHJcbiAgICAgICAgcmV0dXJuICFzZWFyY2gob2JqLCB0ZXh0LnN1YnN0cigxKSk7XHJcbiAgICAgIH1cclxuICAgICAgc3dpdGNoICh0eXBlb2Ygb2JqKSB7XHJcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcclxuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XHJcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgcmV0dXJuIGNvbXBlcmF0b3Iob2JqLCB0ZXh0KTtcclxuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XHJcbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB0ZXh0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcclxuICAgICAgICAgICAgICByZXR1cm4gY29tcGVyYXRvcihvYmosIHRleHQpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIGZvciAoIHZhciBvYmpLZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqS2V5LmNoYXJBdCgwKSAhPT0gJyQnICYmIHNlYXJjaChvYmpbb2JqS2V5XSwgdGV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGNhc2UgXCJhcnJheVwiOlxyXG4gICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWFyY2gob2JqW2ldLCB0ZXh0KSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHN3aXRjaCAodHlwZW9mIGV4cHJlc3Npb24pIHtcclxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcclxuICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgZXhwcmVzc2lvbiA9IHskOmV4cHJlc3Npb259O1xyXG4gICAgICBjYXNlIFwib2JqZWN0XCI6XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4cHJlc3Npb24pIHtcclxuICAgICAgICAgIGlmIChrZXkgPT0gJyQnKSB7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBpZiAoIWV4cHJlc3Npb25ba2V5XSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIHZhciBwYXRoID0ga2V5XHJcbiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKHZhbHVlLCBleHByZXNzaW9uW3BhdGhdKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mKGV4cHJlc3Npb25ba2V5XSkgPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgICAgdmFyIHBhdGggPSBrZXk7XHJcbiAgICAgICAgICAgICAgcHJlZGljYXRlcy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VhcmNoKGdldHRlcih2YWx1ZSxwYXRoKSwgZXhwcmVzc2lvbltwYXRoXSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmdW5jdGlvbic6XHJcbiAgICAgICAgcHJlZGljYXRlcy5wdXNoKGV4cHJlc3Npb24pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuICAgIHZhciBmaWx0ZXJlZCA9IFtdO1xyXG4gICAgZm9yICggdmFyIGogPSAwOyBqIDwgYXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbal07XHJcbiAgICAgIGlmIChwcmVkaWNhdGVzLmNoZWNrKHZhbHVlKSkge1xyXG4gICAgICAgIGZpbHRlcmVkLnB1c2godmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmlsdGVyZWQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZpbHRlclxyXG4gKiBAbmFtZSBuZy5maWx0ZXI6Y3VycmVuY3lcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgKGllICQxLDIzNC41NikuIFdoZW4gbm8gY3VycmVuY3kgc3ltYm9sIGlzIHByb3ZpZGVkLCBkZWZhdWx0XHJcbiAqIHN5bWJvbCBmb3IgY3VycmVudCBsb2NhbGUgaXMgdXNlZC5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBJbnB1dCB0byBmaWx0ZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gc3ltYm9sIEN1cnJlbmN5IHN5bWJvbCBvciBpZGVudGlmaWVyIHRvIGJlIGRpc3BsYXllZC5cclxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIG51bWJlci5cclxuICpcclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICAkc2NvcGUuYW1vdW50ID0gMTIzNC41NjtcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJhbW91bnRcIj4gPGJyPlxyXG4gICAgICAgICBkZWZhdWx0IGN1cnJlbmN5IHN5bWJvbCAoJCk6IHt7YW1vdW50IHwgY3VycmVuY3l9fTxicj5cclxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiB7e2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwifX1cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBpbml0IHdpdGggMTIzNC41NicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZygnYW1vdW50IHwgY3VycmVuY3knKSkudG9CZSgnJDEsMjM0LjU2Jyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdhbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIicpKS50b0JlKCdVU0QkMSwyMzQuNTYnKTtcclxuICAgICAgIH0pO1xyXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgaW5wdXQoJ2Ftb3VudCcpLmVudGVyKCctMTIzNCcpO1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZygnYW1vdW50IHwgY3VycmVuY3knKSkudG9CZSgnKCQxLDIzNC4wMCknKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2Ftb3VudCB8IGN1cnJlbmN5OlwiVVNEJFwiJykpLnRvQmUoJyhVU0QkMSwyMzQuMDApJyk7XHJcbiAgICAgICB9KTtcclxuICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuICovXHJcbmN1cnJlbmN5RmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcclxuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xyXG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcclxuICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBjdXJyZW5jeVN5bWJvbCl7XHJcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xyXG4gICAgcmV0dXJuIGZvcm1hdE51bWJlcihhbW91bnQsIGZvcm1hdHMuUEFUVEVSTlNbMV0sIGZvcm1hdHMuR1JPVVBfU0VQLCBmb3JtYXRzLkRFQ0lNQUxfU0VQLCAyKS5cclxuICAgICAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZmlsdGVyXHJcbiAqIEBuYW1lIG5nLmZpbHRlcjpudW1iZXJcclxuICogQGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuXHJcbiAqXHJcbiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxyXG4gKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKT19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIG51bWJlciB0by5cclxuICogSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgdGhlbiB0aGUgZnJhY3Rpb24gc2l6ZSBpcyBjb21wdXRlZCBmcm9tIHRoZSBjdXJyZW50IGxvY2FsZSdzIG51bWJlclxyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBOdW1iZXIgcm91bmRlZCB0byBkZWNpbWFsUGxhY2VzIGFuZCBwbGFjZXMgYSDDouKCrMWTLMOi4oKswp0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgIEVudGVyIG51bWJlcjogPGlucHV0IG5nLW1vZGVsPSd2YWwnPjxicj5cclxuICAgICAgICAgRGVmYXVsdCBmb3JtYXR0aW5nOiB7e3ZhbCB8IG51bWJlcn19PGJyPlxyXG4gICAgICAgICBObyBmcmFjdGlvbnM6IHt7dmFsIHwgbnVtYmVyOjB9fTxicj5cclxuICAgICAgICAgTmVnYXRpdmUgbnVtYmVyOiB7ey12YWwgfCBudW1iZXI6NH19XHJcbiAgICAgICA8L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbCB8IG51bWJlcicpKS50b0JlKCcxLDIzNC41NjgnKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLnRvQmUoJzEsMjM1Jyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcclxuICAgICAgIH0pO1xyXG5cclxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGlucHV0KCd2YWwnKS5lbnRlcignMzM3NC4zMzMnKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbCB8IG51bWJlcicpKS50b0JlKCczLDM3NC4zMzMnKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ZhbCB8IG51bWJlcjowJykpLnRvQmUoJzMsMzc0Jyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuXHJcblxyXG5udW1iZXJGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xyXG5mdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xyXG4gIHZhciBmb3JtYXRzID0gJGxvY2FsZS5OVU1CRVJfRk9STUFUUztcclxuICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBmcmFjdGlvblNpemUpIHtcclxuICAgIHJldHVybiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCxcclxuICAgICAgZnJhY3Rpb25TaXplKTtcclxuICB9O1xyXG59XHJcblxyXG52YXIgREVDSU1BTF9TRVAgPSAnLic7XHJcbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcclxuICBpZiAoaXNOYU4obnVtYmVyKSB8fCAhaXNGaW5pdGUobnVtYmVyKSkgcmV0dXJuICcnO1xyXG5cclxuICB2YXIgaXNOZWdhdGl2ZSA9IG51bWJlciA8IDA7XHJcbiAgbnVtYmVyID0gTWF0aC5hYnMobnVtYmVyKTtcclxuICB2YXIgbnVtU3RyID0gbnVtYmVyICsgJycsXHJcbiAgICAgIGZvcm1hdGVkVGV4dCA9ICcnLFxyXG4gICAgICBwYXJ0cyA9IFtdO1xyXG5cclxuICB2YXIgaGFzRXhwb25lbnQgPSBmYWxzZTtcclxuICBpZiAobnVtU3RyLmluZGV4T2YoJ2UnKSAhPT0gLTEpIHtcclxuICAgIHZhciBtYXRjaCA9IG51bVN0ci5tYXRjaCgvKFtcXGRcXC5dKyllKC0/KShcXGQrKS8pO1xyXG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdID09ICctJyAmJiBtYXRjaFszXSA+IGZyYWN0aW9uU2l6ZSArIDEpIHtcclxuICAgICAgbnVtU3RyID0gJzAnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9ybWF0ZWRUZXh0ID0gbnVtU3RyO1xyXG4gICAgICBoYXNFeHBvbmVudCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoIWhhc0V4cG9uZW50KSB7XHJcbiAgICB2YXIgZnJhY3Rpb25MZW4gPSAobnVtU3RyLnNwbGl0KERFQ0lNQUxfU0VQKVsxXSB8fCAnJykubGVuZ3RoO1xyXG5cclxuICAgIC8vIGRldGVybWluZSBmcmFjdGlvblNpemUgaWYgaXQgaXMgbm90IHNwZWNpZmllZFxyXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpIHtcclxuICAgICAgZnJhY3Rpb25TaXplID0gTWF0aC5taW4oTWF0aC5tYXgocGF0dGVybi5taW5GcmFjLCBmcmFjdGlvbkxlbiksIHBhdHRlcm4ubWF4RnJhYyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHBvdyA9IE1hdGgucG93KDEwLCBmcmFjdGlvblNpemUpO1xyXG4gICAgbnVtYmVyID0gTWF0aC5yb3VuZChudW1iZXIgKiBwb3cpIC8gcG93O1xyXG4gICAgdmFyIGZyYWN0aW9uID0gKCcnICsgbnVtYmVyKS5zcGxpdChERUNJTUFMX1NFUCk7XHJcbiAgICB2YXIgd2hvbGUgPSBmcmFjdGlvblswXTtcclxuICAgIGZyYWN0aW9uID0gZnJhY3Rpb25bMV0gfHwgJyc7XHJcblxyXG4gICAgdmFyIHBvcyA9IDAsXHJcbiAgICAgICAgbGdyb3VwID0gcGF0dGVybi5sZ1NpemUsXHJcbiAgICAgICAgZ3JvdXAgPSBwYXR0ZXJuLmdTaXplO1xyXG5cclxuICAgIGlmICh3aG9sZS5sZW5ndGggPj0gKGxncm91cCArIGdyb3VwKSkge1xyXG4gICAgICBwb3MgPSB3aG9sZS5sZW5ndGggLSBsZ3JvdXA7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zOyBpKyspIHtcclxuICAgICAgICBpZiAoKHBvcyAtIGkpJWdyb3VwID09PSAwICYmIGkgIT09IDApIHtcclxuICAgICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAoaSA9IHBvczsgaSA8IHdob2xlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICgod2hvbGUubGVuZ3RoIC0gaSklbGdyb3VwID09PSAwICYmIGkgIT09IDApIHtcclxuICAgICAgICBmb3JtYXRlZFRleHQgKz0gZ3JvdXBTZXA7XHJcbiAgICAgIH1cclxuICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmb3JtYXQgZnJhY3Rpb24gcGFydC5cclxuICAgIHdoaWxlKGZyYWN0aW9uLmxlbmd0aCA8IGZyYWN0aW9uU2l6ZSkge1xyXG4gICAgICBmcmFjdGlvbiArPSAnMCc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZyYWN0aW9uU2l6ZSAmJiBmcmFjdGlvblNpemUgIT09IFwiMFwiKSBmb3JtYXRlZFRleHQgKz0gZGVjaW1hbFNlcCArIGZyYWN0aW9uLnN1YnN0cigwLCBmcmFjdGlvblNpemUpO1xyXG4gIH0gZWxzZSB7XHJcblxyXG4gICAgaWYgKGZyYWN0aW9uU2l6ZSA+IDAgJiYgbnVtYmVyID4gLTEgJiYgbnVtYmVyIDwgMSkge1xyXG4gICAgICBmb3JtYXRlZFRleHQgPSBudW1iZXIudG9GaXhlZChmcmFjdGlvblNpemUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGFydHMucHVzaChpc05lZ2F0aXZlID8gcGF0dGVybi5uZWdQcmUgOiBwYXR0ZXJuLnBvc1ByZSk7XHJcbiAgcGFydHMucHVzaChmb3JtYXRlZFRleHQpO1xyXG4gIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnU3VmIDogcGF0dGVybi5wb3NTdWYpO1xyXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltKSB7XHJcbiAgdmFyIG5lZyA9ICcnO1xyXG4gIGlmIChudW0gPCAwKSB7XHJcbiAgICBuZWcgPSAgJy0nO1xyXG4gICAgbnVtID0gLW51bTtcclxuICB9XHJcbiAgbnVtID0gJycgKyBudW07XHJcbiAgd2hpbGUobnVtLmxlbmd0aCA8IGRpZ2l0cykgbnVtID0gJzAnICsgbnVtO1xyXG4gIGlmICh0cmltKVxyXG4gICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTtcclxuICByZXR1cm4gbmVnICsgbnVtO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0pIHtcclxuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcclxuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XHJcbiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpXHJcbiAgICAgIHZhbHVlICs9IG9mZnNldDtcclxuICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT0gLTEyICkgdmFsdWUgPSAxMjtcclxuICAgIHJldHVybiBwYWROdW1iZXIodmFsdWUsIHNpemUsIHRyaW0pO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcclxuICAgIHZhciB2YWx1ZSA9IGRhdGVbJ2dldCcgKyBuYW1lXSgpO1xyXG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7XHJcblxyXG4gICAgcmV0dXJuIGZvcm1hdHNbZ2V0XVt2YWx1ZV07XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSkge1xyXG4gIHZhciB6b25lID0gLTEgKiBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XHJcbiAgdmFyIHBhZGRlZFpvbmUgPSAoem9uZSA+PSAwKSA/IFwiK1wiIDogXCJcIjtcclxuXHJcbiAgcGFkZGVkWm9uZSArPSBwYWROdW1iZXIoTWF0aFt6b25lID4gMCA/ICdmbG9vcicgOiAnY2VpbCddKHpvbmUgLyA2MCksIDIpICtcclxuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcclxuXHJcbiAgcmV0dXJuIHBhZGRlZFpvbmU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFtcG1HZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xyXG4gIHJldHVybiBkYXRlLmdldEhvdXJzKCkgPCAxMiA/IGZvcm1hdHMuQU1QTVNbMF0gOiBmb3JtYXRzLkFNUE1TWzFdO1xyXG59XHJcblxyXG52YXIgREFURV9GT1JNQVRTID0ge1xyXG4gIHl5eXk6IGRhdGVHZXR0ZXIoJ0Z1bGxZZWFyJywgNCksXHJcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlKSxcclxuICAgICB5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDEpLFxyXG4gIE1NTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJyksXHJcbiAgIE1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnLCB0cnVlKSxcclxuICAgIE1NOiBkYXRlR2V0dGVyKCdNb250aCcsIDIsIDEpLFxyXG4gICAgIE06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMSwgMSksXHJcbiAgICBkZDogZGF0ZUdldHRlcignRGF0ZScsIDIpLFxyXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcclxuICAgIEhIOiBkYXRlR2V0dGVyKCdIb3VycycsIDIpLFxyXG4gICAgIEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSksXHJcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxyXG4gICAgIGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSwgLTEyKSxcclxuICAgIG1tOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMiksXHJcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxyXG4gICAgc3M6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAyKSxcclxuICAgICBzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMSksXHJcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxyXG4gICAgIC8vIHdlIGNhbiBiZSBqdXN0IHNhZmVseSByZWx5IG9uIHVzaW5nIGBzc3NgIHNpbmNlIHdlIGN1cnJlbnRseSBkb24ndCBzdXBwb3J0IHNpbmdsZSBvciB0d28gZGlnaXQgZnJhY3Rpb25zXHJcbiAgIHNzczogZGF0ZUdldHRlcignTWlsbGlzZWNvbmRzJywgMyksXHJcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXHJcbiAgIEVFRTogZGF0ZVN0ckdldHRlcignRGF5JywgdHJ1ZSksXHJcbiAgICAgYTogYW1wbUdldHRlcixcclxuICAgICBaOiB0aW1lWm9uZUdldHRlclxyXG59O1xyXG5cclxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TWRIaG1zYVpFJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8ZCt8SCt8aCt8bSt8cyt8YXxaKSkoLiopLyxcclxuICAgIE5VTUJFUl9TVFJJTkcgPSAvXlxcZCskLztcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZmlsdGVyXHJcbiAqIEBuYW1lIG5nLmZpbHRlcjpkYXRlXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogICBGb3JtYXRzIGBkYXRlYCB0byBhIHN0cmluZyBiYXNlZCBvbiB0aGUgcmVxdWVzdGVkIGBmb3JtYXRgLlxyXG4gKlxyXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcclxuICpcclxuICogICAqIGAneXl5eSdgOiA0IGRpZ2l0IHJlcHJlc2VudGF0aW9uIG9mIHllYXIgKGUuZy4gQUQgMSA9PiAwMDAxLCBBRCAyMDEwID0+IDIwMTApXHJcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXHJcbiAqICAgKiBgJ3knYDogMSBkaWdpdCByZXByZXNlbnRhdGlvbiBvZiB5ZWFyLCBlLmcuIChBRCAxID0+IDEsIEFEIDE5OSA9PiAxOTkpXHJcbiAqICAgKiBgJ01NTU0nYDogTW9udGggaW4geWVhciAoSmFudWFyeS1EZWNlbWJlcilcclxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXHJcbiAqICAgKiBgJ01NJ2A6IE1vbnRoIGluIHllYXIsIHBhZGRlZCAoMDEtMTIpXHJcbiAqICAgKiBgJ00nYDogTW9udGggaW4geWVhciAoMS0xMilcclxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxyXG4gKiAgICogYCdkJ2A6IERheSBpbiBtb250aCAoMS0zMSlcclxuICogICAqIGAnRUVFRSdgOiBEYXkgaW4gV2VlaywoU3VuZGF5LVNhdHVyZGF5KVxyXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxyXG4gKiAgICogYCdISCdgOiBIb3VyIGluIGRheSwgcGFkZGVkICgwMC0yMylcclxuICogICAqIGAnSCdgOiBIb3VyIGluIGRheSAoMC0yMylcclxuICogICAqIGAnaGgnYDogSG91ciBpbiBhbS9wbSwgcGFkZGVkICgwMS0xMilcclxuICogICAqIGAnaCdgOiBIb3VyIGluIGFtL3BtLCAoMS0xMilcclxuICogICAqIGAnbW0nYDogTWludXRlIGluIGhvdXIsIHBhZGRlZCAoMDAtNTkpXHJcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXHJcbiAqICAgKiBgJ3NzJ2A6IFNlY29uZCBpbiBtaW51dGUsIHBhZGRlZCAoMDAtNTkpXHJcbiAqICAgKiBgJ3MnYDogU2Vjb25kIGluIG1pbnV0ZSAoMC01OSlcclxuICogICAqIGAnLnNzcycgb3IgJyxzc3MnYDogTWlsbGlzZWNvbmQgaW4gc2Vjb25kLCBwYWRkZWQgKDAwMC05OTkpXHJcbiAqICAgKiBgJ2EnYDogYW0vcG0gbWFya2VyXHJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxyXG4gKlxyXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkXHJcbiAqICAge0BsaW5rIGd1aWRlL2kxOG4gbG9jYWxpemFibGUgZm9ybWF0c306XHJcbiAqXHJcbiAqICAgKiBgJ21lZGl1bSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHkgaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZVxyXG4gKiAgICAgKGUuZy4gU2VwIDMsIDIwMTAgMTI6MDU6MDggcG0pXHJcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IHBtKVxyXG4gKiAgICogYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnRUVFRSwgTU1NTSBkLHknYCBmb3IgZW5fVVMgIGxvY2FsZVxyXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcclxuICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKVxyXG4gKiAgICogYCdtZWRpdW1EYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcCAzLCAyMDEwKVxyXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxyXG4gKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IHBtKVxyXG4gKiAgICogYCdzaG9ydFRpbWUnYDogZXF1aXZhbGVudCB0byBgJ2g6bW0gYSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gMTI6MDUgcG0pXHJcbiAqXHJcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIHF1b3RlZCB3aXRoIHNpbmdsZSBxdW90ZXMgKGUuZy5cclxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgc2luZ2xlIHF1b3RlLCB1c2UgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZVxyXG4gKiAgIChlLmcuIGBcImggJ28nJ2Nsb2NrJ1wiYCkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7KERhdGV8bnVtYmVyfHN0cmluZyl9IGRhdGUgRGF0ZSB0byBmb3JtYXQgZWl0aGVyIGFzIERhdGUgb2JqZWN0LCBtaWxsaXNlY29uZHMgKHN0cmluZyBvclxyXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5TU1NaIGFuZCBpdHNcclxuICogICAgc2hvcnRlciB2ZXJzaW9ucyBsaWtlIHl5eXktTU0tZGRUSEg6bW1aLCB5eXl5LU1NLWRkIG9yIHl5eXlNTWRkVEhIbW1zc1opLiBJZiBubyB0aW1lem9uZSBpc1xyXG4gKiAgICBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpbnB1dCwgdGhlIHRpbWUgaXMgY29uc2lkZXJlZCB0byBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXHJcbiAqICAgIGBtZWRpdW1EYXRlYCBpcyB1c2VkLlxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nIG9yIHRoZSBpbnB1dCBpZiBpbnB1dCBpcyBub3QgcmVjb2duaXplZCBhcyBkYXRlL21pbGxpcy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj46XHJcbiAgICAgICAgICAge3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PGJyPlxyXG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj46XHJcbiAgICAgICAgICB7ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08YnI+XHJcbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjpcclxuICAgICAgICAgIHt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PGJyPlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgZGF0ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nXCIpKS5cclxuICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcXGQsIDIwMTAgXFxkezEsMn06XFxkezJ9OlxcZHsyfSAoQU18UE0pLyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWidcIikpLlxyXG4gICAgICAgICAgICB0b01hdGNoKC8yMDEwXFwtMTBcXC0yXFxkIFxcZHsyfTpcXGR7Mn06XFxkezJ9IChcXC18XFwrKT9cXGR7NH0vKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoXCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnXCIpKS5cclxuICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBAIFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuZGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XHJcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xyXG5cclxuXHJcbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcclxuICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICAgICAgMiAgICAgICAzICAgICAgICAgNCAgICAgICAgICA1ICAgICAgICAgIDYgICAgICAgICAgNyAgICAgICAgICA4ICA5ICAgICAxMCAgICAgIDExXHJcbiAgZnVuY3Rpb24ganNvblN0cmluZ1RvRGF0ZShzdHJpbmcpIHtcclxuICAgIHZhciBtYXRjaDtcclxuICAgIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChSX0lTTzg2MDFfU1RSKSkge1xyXG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApLFxyXG4gICAgICAgICAgdHpIb3VyID0gMCxcclxuICAgICAgICAgIHR6TWluICA9IDAsXHJcbiAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhcixcclxuICAgICAgICAgIHRpbWVTZXR0ZXIgPSBtYXRjaFs4XSA/IGRhdGUuc2V0VVRDSG91cnMgOiBkYXRlLnNldEhvdXJzO1xyXG5cclxuICAgICAgaWYgKG1hdGNoWzldKSB7XHJcbiAgICAgICAgdHpIb3VyID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTBdKTtcclxuICAgICAgICB0ek1pbiA9IGludChtYXRjaFs5XSArIG1hdGNoWzExXSk7XHJcbiAgICAgIH1cclxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIGludChtYXRjaFsxXSksIGludChtYXRjaFsyXSkgLSAxLCBpbnQobWF0Y2hbM10pKTtcclxuICAgICAgdmFyIGggPSBpbnQobWF0Y2hbNF18fDApIC0gdHpIb3VyO1xyXG4gICAgICB2YXIgbSA9IGludChtYXRjaFs1XXx8MCkgLSB0ek1pblxyXG4gICAgICB2YXIgcyA9IGludChtYXRjaFs2XXx8MCk7XHJcbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddfHwwKSkgKiAxMDAwKTtcclxuICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTtcclxuICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyaW5nO1xyXG4gIH1cclxuXHJcblxyXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQpIHtcclxuICAgIHZhciB0ZXh0ID0gJycsXHJcbiAgICAgICAgcGFydHMgPSBbXSxcclxuICAgICAgICBmbiwgbWF0Y2g7XHJcblxyXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcclxuICAgIGZvcm1hdCA9ICRsb2NhbGUuREFURVRJTUVfRk9STUFUU1tmb3JtYXRdIHx8IGZvcm1hdDtcclxuICAgIGlmIChpc1N0cmluZyhkYXRlKSkge1xyXG4gICAgICBpZiAoTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpKSB7XHJcbiAgICAgICAgZGF0ZSA9IGludChkYXRlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRlID0ganNvblN0cmluZ1RvRGF0ZShkYXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xyXG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc0RhdGUoZGF0ZSkpIHtcclxuICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUoZm9ybWF0KSB7XHJcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcclxuICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgcGFydHMgPSBjb25jYXQocGFydHMsIG1hdGNoLCAxKTtcclxuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJ0cy5wdXNoKGZvcm1hdCk7XHJcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvckVhY2gocGFydHMsIGZ1bmN0aW9uKHZhbHVlKXtcclxuICAgICAgZm4gPSBEQVRFX0ZPUk1BVFNbdmFsdWVdO1xyXG4gICAgICB0ZXh0ICs9IGZuID8gZm4oZGF0ZSwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTKVxyXG4gICAgICAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgXCInXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRleHQ7XHJcbiAgfTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZmlsdGVyXHJcbiAqIEBuYW1lIG5nLmZpbHRlcjpqc29uXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLlxyXG4gKlxyXG4gKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvblxyXG4gKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLlxyXG4gKlxyXG4gKlxyXG4gKiBAZXhhbXBsZTpcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHByZT57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbiB9fTwvcHJlPlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBqc29uaWZ5IGZpbHRlcmVkIG9iamVjdHMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoXCJ7J25hbWUnOid2YWx1ZSd9XCIpKS50b01hdGNoKC9cXHtcXG4gIFwibmFtZVwiOiA/XCJ2YWx1ZVwiXFxufS8pO1xyXG4gICAgICAgfSk7XHJcbiAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgIDwvZG9jOmV4YW1wbGU+XHJcbiAqXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRmlsdGVyKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgIHJldHVybiB0b0pzb24ob2JqZWN0LCB0cnVlKTtcclxuICB9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmaWx0ZXJcclxuICogQG5hbWUgbmcuZmlsdGVyOmxvd2VyY2FzZVxyXG4gKiBAZnVuY3Rpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvbnZlcnRzIHN0cmluZyB0byBsb3dlcmNhc2UuXHJcbiAqIEBzZWUgYW5ndWxhci5sb3dlcmNhc2VcclxuICovXHJcbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBmaWx0ZXJcclxuICogQG5hbWUgbmcuZmlsdGVyOnVwcGVyY2FzZVxyXG4gKiBAZnVuY3Rpb25cclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXHJcbiAqIEBzZWUgYW5ndWxhci51cHBlcmNhc2VcclxuICovXHJcbnZhciB1cHBlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKHVwcGVyY2FzZSk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIG5nLmZpbHRlcjpsaW1pdFRvXHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ3JlYXRlcyBhIG5ldyBhcnJheSBvciBzdHJpbmcgY29udGFpbmluZyBvbmx5IGEgc3BlY2lmaWVkIG51bWJlciBvZiBlbGVtZW50cy4gVGhlIGVsZW1lbnRzXHJcbiAqIGFyZSB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSBvciBzdHJpbmcsIGFzIHNwZWNpZmllZCBieVxyXG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLlxyXG4gKlxyXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYXVnbWVudCB0aGUgYEFycmF5YCB0eXBlIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMuIFNlZVxyXG4gKiB7QGxpbmsgbmcuJGZpbHRlcn0gZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgQW5ndWxhciBhcnJheXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBpbnB1dCBTb3VyY2UgYXJyYXkgb3Igc3RyaW5nIHRvIGJlIGxpbWl0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgVGhlIGxlbmd0aCBvZiB0aGUgcmV0dXJuZWQgYXJyYXkgb3Igc3RyaW5nLiBJZiB0aGUgYGxpbWl0YCBudW1iZXIgXHJcbiAqICAgICBpcyBwb3NpdGl2ZSwgYGxpbWl0YCBudW1iZXIgb2YgaXRlbXMgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIGFyZSBjb3BpZWQuXHJcbiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nIFxyXG4gKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGBcclxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5XHJcbiAqICAgICBoYWQgbGVzcyB0aGFuIGBsaW1pdGAgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgJHNjb3BlLm51bWJlcnMgPSBbMSwyLDMsNCw1LDYsNyw4LDldO1xyXG4gICAgICAgICAgICRzY29wZS5sZXR0ZXJzID0gXCJhYmNkZWZnaGlcIjtcclxuICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzO1xyXG4gICAgICAgICAgICRzY29wZS5sZXR0ZXJMaW1pdCA9IDM7XHJcbiAgICAgICAgIH1cclxuICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ3RybFwiPlxyXG4gICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzogPGlucHV0IHR5cGU9XCJpbnRlZ2VyXCIgbmctbW9kZWw9XCJudW1MaW1pdFwiPlxyXG4gICAgICAgICA8cD5PdXRwdXQgbnVtYmVyczoge3sgbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQgfX08L3A+XHJcbiAgICAgICAgIExpbWl0IHt7bGV0dGVyc319IHRvOiA8aW5wdXQgdHlwZT1cImludGVnZXJcIiBuZy1tb2RlbD1cImxldHRlckxpbWl0XCI+XHJcbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBpbnB1dFtuZy1tb2RlbD1udW1MaW1pdF0nKS52YWwoKSkudG9CZSgnMycpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgaW5wdXRbbmctbW9kZWw9bGV0dGVyTGltaXRdJykudmFsKCkpLnRvQmUoJzMnKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ251bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0JykpLnRvRXF1YWwoJ1sxLDIsM10nKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpLnRvRXF1YWwoJ2FiYycpO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG91dHB1dCB3aGVuIC0zIGlzIGVudGVyZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgaW5wdXQoJ251bUxpbWl0JykuZW50ZXIoLTMpO1xyXG4gICAgICAgICBpbnB1dCgnbGV0dGVyTGltaXQnKS5lbnRlcigtMyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKS50b0VxdWFsKCdbNyw4LDldJyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKS50b0VxdWFsKCdnaGknKTtcclxuICAgICAgIH0pO1xyXG5cclxuICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGlucHV0KCdudW1MaW1pdCcpLmVudGVyKDEwMCk7XHJcbiAgICAgICAgIGlucHV0KCdsZXR0ZXJMaW1pdCcpLmVudGVyKDEwMCk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKS50b0VxdWFsKCdbMSwyLDMsNCw1LDYsNyw4LDldJyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKS50b0VxdWFsKCdhYmNkZWZnaGknKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpe1xyXG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgbGltaXQpIHtcclxuICAgIGlmICghaXNBcnJheShpbnB1dCkgJiYgIWlzU3RyaW5nKGlucHV0KSkgcmV0dXJuIGlucHV0O1xyXG4gICAgXHJcbiAgICBsaW1pdCA9IGludChsaW1pdCk7XHJcblxyXG4gICAgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xyXG4gICAgICAvL05hTiBjaGVjayBvbiBsaW1pdFxyXG4gICAgICBpZiAobGltaXQpIHtcclxuICAgICAgICByZXR1cm4gbGltaXQgPj0gMCA/IGlucHV0LnNsaWNlKDAsIGxpbWl0KSA6IGlucHV0LnNsaWNlKGxpbWl0LCBpbnB1dC5sZW5ndGgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG91dCA9IFtdLFxyXG4gICAgICBpLCBuO1xyXG5cclxuICAgIC8vIGlmIGFicyhsaW1pdCkgZXhjZWVkcyBtYXhpbXVtIGxlbmd0aCwgdHJpbSBpdFxyXG4gICAgaWYgKGxpbWl0ID4gaW5wdXQubGVuZ3RoKVxyXG4gICAgICBsaW1pdCA9IGlucHV0Lmxlbmd0aDtcclxuICAgIGVsc2UgaWYgKGxpbWl0IDwgLWlucHV0Lmxlbmd0aClcclxuICAgICAgbGltaXQgPSAtaW5wdXQubGVuZ3RoO1xyXG5cclxuICAgIGlmIChsaW1pdCA+IDApIHtcclxuICAgICAgaSA9IDA7XHJcbiAgICAgIG4gPSBsaW1pdDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGkgPSBpbnB1dC5sZW5ndGggKyBsaW1pdDtcclxuICAgICAgbiA9IGlucHV0Lmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKDsgaTxuOyBpKyspIHtcclxuICAgICAgb3V0LnB1c2goaW5wdXRbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAqIEBuYW1lIG5nLmZpbHRlcjpvcmRlckJ5XHJcbiAqIEBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogT3JkZXJzIGEgc3BlY2lmaWVkIGBhcnJheWAgYnkgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuXHJcbiAqXHJcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBhdWdtZW50IHRoZSBgQXJyYXlgIHR5cGUgaW4gQW5ndWxhciBleHByZXNzaW9ucy4gU2VlXHJcbiAqIHtAbGluayBuZy4kZmlsdGVyfSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBBbmd1bGFyIGFycmF5cy5cclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKil8c3RyaW5nfEFycmF5LjwoZnVuY3Rpb24oKil8c3RyaW5nKT59IGV4cHJlc3Npb24gQSBwcmVkaWNhdGUgdG8gYmVcclxuICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiAgICBDYW4gYmUgb25lIG9mOlxyXG4gKlxyXG4gKiAgICAtIGBmdW5jdGlvbmA6IEdldHRlciBmdW5jdGlvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgc29ydGVkIHVzaW5nIHRoZVxyXG4gKiAgICAgIGA8YCwgYD1gLCBgPmAgb3BlcmF0b3IuXHJcbiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0IHRvIG9yZGVyIGJ5LCBzdWNoIGFzICduYW1lJ1xyXG4gKiAgICAgIHRvIHNvcnQgYnkgYSBwcm9wZXJ0eSBjYWxsZWQgJ25hbWUnLiBPcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYCtgIG9yIGAtYCB0byBjb250cm9sXHJcbiAqICAgICAgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcgc29ydCBvcmRlciAoZm9yIGV4YW1wbGUsICtuYW1lIG9yIC1uYW1lKS5cclxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBvciBzdHJpbmcgcHJlZGljYXRlcy4gVGhlIGZpcnN0IHByZWRpY2F0ZSBpbiB0aGUgYXJyYXlcclxuICogICAgICBpcyB1c2VkIGZvciBzb3J0aW5nLCBidXQgd2hlbiB0d28gaXRlbXMgYXJlIGVxdWl2YWxlbnQsIHRoZSBuZXh0IHByZWRpY2F0ZSBpcyB1c2VkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSByZXZlcnNlIFJldmVyc2UgdGhlIG9yZGVyIHRoZSBhcnJheS5cclxuICogQHJldHVybnMge0FycmF5fSBTb3J0ZWQgY29weSBvZiB0aGUgc291cmNlIGFycmF5LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkge1xyXG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID1cclxuICAgICAgICAgICAgICAgW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjEyJywgYWdlOjEwfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzU1NS05ODc2JywgYWdlOjE5fSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJywgYWdlOjIxfSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4JywgYWdlOjM1fSxcclxuICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NScsIGFnZToyOX1dXHJcbiAgICAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9ICctYWdlJztcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cclxuICAgICAgICAgPGhyLz5cclxuICAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGU9JydcIj51bnNvcnRlZDwvYT4gXVxyXG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cclxuICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlID0gJ25hbWUnOyByZXZlcnNlPWZhbHNlXCI+TmFtZTwvYT5cclxuICAgICAgICAgICAgICAgICAoPGEgaHJlZiBuZy1jbGljaz1cInByZWRpY2F0ZSA9ICctbmFtZSc7IHJldmVyc2U9ZmFsc2VcIj5ePC9hPik8L3RoPlxyXG4gICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInByZWRpY2F0ZSA9ICdwaG9uZSc7IHJldmVyc2U9IXJldmVyc2VcIj5QaG9uZSBOdW1iZXI8L2E+PC90aD5cclxuICAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGUgPSAnYWdlJzsgcmV2ZXJzZT0hcmV2ZXJzZVwiPkFnZTwvYT48L3RoPlxyXG4gICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZVwiPlxyXG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XHJcbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XHJcbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxyXG4gICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICA8L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgYmUgcmV2ZXJzZSBvcmRlcmVkIGJ5IGFnZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3ByZWRpY2F0ZScpKS50b0JlKCctYWdlJyk7XHJcbiAgICAgICAgIGV4cGVjdChyZXBlYXRlcigndGFibGUuZnJpZW5kJywgJ2ZyaWVuZCBpbiBmcmllbmRzJykuY29sdW1uKCdmcmllbmQuYWdlJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWyczNScsICcyOScsICcyMScsICcxOScsICcxMCddKTtcclxuICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydBZGFtJywgJ0p1bGllJywgJ01pa2UnLCAnTWFyeScsICdKb2huJ10pO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgaXQoJ3Nob3VsZCByZW9yZGVyIHRoZSB0YWJsZSB3aGVuIHVzZXIgc2VsZWN0cyBkaWZmZXJlbnQgcHJlZGljYXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIGE6Y29udGFpbnMoXCJOYW1lXCIpJykuY2xpY2soKTtcclxuICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydBZGFtJywgJ0pvaG4nLCAnSnVsaWUnLCAnTWFyeScsICdNaWtlJ10pO1xyXG4gICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLmFnZScpKS5cclxuICAgICAgICAgICB0b0VxdWFsKFsnMzUnLCAnMTAnLCAnMjknLCAnMTknLCAnMjEnXSk7XHJcblxyXG4gICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBhOmNvbnRhaW5zKFwiUGhvbmVcIiknKS5jbGljaygpO1xyXG4gICAgICAgICBleHBlY3QocmVwZWF0ZXIoJ3RhYmxlLmZyaWVuZCcsICdmcmllbmQgaW4gZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLnBob25lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWyc1NTUtOTg3NicsICc1NTUtODc2NScsICc1NTUtNTY3OCcsICc1NTUtNDMyMScsICc1NTUtMTIxMiddKTtcclxuICAgICAgICAgZXhwZWN0KHJlcGVhdGVyKCd0YWJsZS5mcmllbmQnLCAnZnJpZW5kIGluIGZyaWVuZHMnKS5jb2x1bW4oJ2ZyaWVuZC5uYW1lJykpLlxyXG4gICAgICAgICAgIHRvRXF1YWwoWydNYXJ5JywgJ0p1bGllJywgJ0FkYW0nLCAnTWlrZScsICdKb2huJ10pO1xyXG4gICAgICAgfSk7XHJcbiAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgIDwvZG9jOmV4YW1wbGU+XHJcbiAqL1xyXG5vcmRlckJ5RmlsdGVyLiRpbmplY3QgPSBbJyRwYXJzZSddO1xyXG5mdW5jdGlvbiBvcmRlckJ5RmlsdGVyKCRwYXJzZSl7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBzb3J0UHJlZGljYXRlLCByZXZlcnNlT3JkZXIpIHtcclxuICAgIGlmICghaXNBcnJheShhcnJheSkpIHJldHVybiBhcnJheTtcclxuICAgIGlmICghc29ydFByZWRpY2F0ZSkgcmV0dXJuIGFycmF5O1xyXG4gICAgc29ydFByZWRpY2F0ZSA9IGlzQXJyYXkoc29ydFByZWRpY2F0ZSkgPyBzb3J0UHJlZGljYXRlOiBbc29ydFByZWRpY2F0ZV07XHJcbiAgICBzb3J0UHJlZGljYXRlID0gbWFwKHNvcnRQcmVkaWNhdGUsIGZ1bmN0aW9uKHByZWRpY2F0ZSl7XHJcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gZmFsc2UsIGdldCA9IHByZWRpY2F0ZSB8fCBpZGVudGl0eTtcclxuICAgICAgaWYgKGlzU3RyaW5nKHByZWRpY2F0ZSkpIHtcclxuICAgICAgICBpZiAoKHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJysnIHx8IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nKSkge1xyXG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nO1xyXG4gICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnN1YnN0cmluZygxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2V0ID0gJHBhcnNlKHByZWRpY2F0ZSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGZ1bmN0aW9uKGEsYil7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBhcmUoZ2V0KGEpLGdldChiKSk7XHJcbiAgICAgIH0sIGRlc2NlbmRpbmcpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgYXJyYXlDb3B5ID0gW107XHJcbiAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgeyBhcnJheUNvcHkucHVzaChhcnJheVtpXSk7IH1cclxuICAgIHJldHVybiBhcnJheUNvcHkuc29ydChyZXZlcnNlQ29tcGFyYXRvcihjb21wYXJhdG9yLCByZXZlcnNlT3JkZXIpKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb21wYXJhdG9yKG8xLCBvMil7XHJcbiAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNvcnRQcmVkaWNhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY29tcCA9IHNvcnRQcmVkaWNhdGVbaV0obzEsIG8yKTtcclxuICAgICAgICBpZiAoY29tcCAhPT0gMCkgcmV0dXJuIGNvbXA7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXZlcnNlQ29tcGFyYXRvcihjb21wLCBkZXNjZW5kaW5nKSB7XHJcbiAgICAgIHJldHVybiB0b0Jvb2xlYW4oZGVzY2VuZGluZylcclxuICAgICAgICAgID8gZnVuY3Rpb24oYSxiKXtyZXR1cm4gY29tcChiLGEpO31cclxuICAgICAgICAgIDogY29tcDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNvbXBhcmUodjEsIHYyKXtcclxuICAgICAgdmFyIHQxID0gdHlwZW9mIHYxO1xyXG4gICAgICB2YXIgdDIgPSB0eXBlb2YgdjI7XHJcbiAgICAgIGlmICh0MSA9PSB0Mikge1xyXG4gICAgICAgIGlmICh0MSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgdjEgPSB2MS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgIHYyID0gdjIudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYxID09PSB2MikgcmV0dXJuIDA7XHJcbiAgICAgICAgcmV0dXJuIHYxIDwgdjIgPyAtMSA6IDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHQxIDwgdDIgPyAtMSA6IDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xyXG4gIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcclxuICAgIGRpcmVjdGl2ZSA9IHtcclxuICAgICAgbGluazogZGlyZWN0aXZlXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRpcmVjdGl2ZS5yZXN0cmljdCA9IGRpcmVjdGl2ZS5yZXN0cmljdCB8fCAnQUMnO1xyXG4gIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTphXHJcbiAqIEByZXN0cmljdCBFXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBNb2RpZmllcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBodG1sIEEgdGFnLCBzbyB0aGF0IHRoZSBkZWZhdWx0IGFjdGlvbiBpcyBwcmV2ZW50ZWQgd2hlbiBocmVmXHJcbiAqIGF0dHJpYnV0ZSBpcyBlbXB0eS5cclxuICpcclxuICogVGhlIHJlYXNvbmluZyBmb3IgdGhpcyBjaGFuZ2UgaXMgdG8gYWxsb3cgZWFzeSBjcmVhdGlvbiBvZiBhY3Rpb24gbGlua3Mgd2l0aCBgbmdDbGlja2AgZGlyZWN0aXZlXHJcbiAqIHdpdGhvdXQgY2hhbmdpbmcgdGhlIGxvY2F0aW9uIG9yIGNhdXNpbmcgcGFnZSByZWxvYWRzLCBlLmcuOlxyXG4gKiBgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwibW9kZWwuJHNhdmUoKVwiPlNhdmU8L2E+YFxyXG4gKi9cclxudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcclxuICByZXN0cmljdDogJ0UnLFxyXG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcclxuXHJcbiAgICBpZiAobXNpZSA8PSA4KSB7XHJcblxyXG4gICAgICAvLyB0dXJuIDxhIGhyZWYgbmctY2xpY2s9XCIuLlwiPmxpbms8L2E+IGludG8gYSBzdHlsYWJsZSBsaW5rIGluIElFXHJcbiAgICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGRvZXNuJ3QgaGF2ZSBuYW1lIGF0dHJpYnV0ZSwgaW4gd2hpY2ggY2FzZSBpdCdzIGFuIGFuY2hvclxyXG4gICAgICBpZiAoIWF0dHIuaHJlZiAmJiAhYXR0ci5uYW1lKSB7XHJcbiAgICAgICAgYXR0ci4kc2V0KCdocmVmJywgJycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBhZGQgYSBjb21tZW50IG5vZGUgdG8gYW5jaG9ycyB0byB3b3JrYXJvdW5kIElFIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50IGNvbnRlbnQgdG8gYmUgcmVzZXRcclxuICAgICAgLy8gdG8gbmV3IGF0dHJpYnV0ZSBjb250ZW50IGlmIGF0dHJpYnV0ZSBpcyB1cGRhdGVkIHdpdGggdmFsdWUgY29udGFpbmluZyBAIGFuZCBlbGVtZW50IGFsc29cclxuICAgICAgLy8gY29udGFpbnMgdmFsdWUgd2l0aCBAXHJcbiAgICAgIC8vIHNlZSBpc3N1ZSAjMTk0OVxyXG4gICAgICBlbGVtZW50LmFwcGVuZChkb2N1bWVudC5jcmVhdGVDb21tZW50KCdJRSBmaXgnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50KSB7XHJcbiAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xyXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgbm8gaHJlZiB1cmwsIHRoZW4gZG9uJ3QgbmF2aWdhdGUgYW55d2hlcmUuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoJ2hyZWYnKSkge1xyXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdIcmVmXHJcbiAqIEByZXN0cmljdCBBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIHt7aGFzaH19IGluIGFuIGhyZWYgYXR0cmlidXRlIG1ha2VzXHJcbiAqIHRoZSBwYWdlIG9wZW4gdG8gYSB3cm9uZyBVUkwsIGlmIHRoZSB1c2VyIGNsaWNrcyB0aGF0IGxpbmsgYmVmb3JlXHJcbiAqIGFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIHt7aGFzaH19IHdpdGggYWN0dWFsIFVSTCwgdGhlXHJcbiAqIGxpbmsgd2lsbCBiZSBicm9rZW4gYW5kIHdpbGwgbW9zdCBsaWtlbHkgcmV0dXJuIGEgNDA0IGVycm9yLlxyXG4gKiBUaGUgYG5nSHJlZmAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXHJcbiAqXHJcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XHJcbiAqIDxwcmU+XHJcbiAqIDxhIGhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIi8+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XHJcbiAqIDxwcmU+XHJcbiAqIDxhIG5nLWhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIi8+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBXHJcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIFRoaXMgZXhhbXBsZSB1c2VzIGBsaW5rYCB2YXJpYWJsZSBpbnNpZGUgYGhyZWZgIGF0dHJpYnV0ZTpcclxuICAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsdWVcIiAvPjxiciAvPlxyXG4gICAgICAgIDxhIGlkPVwibGluay0xXCIgaHJlZiBuZy1jbGljaz1cInZhbHVlID0gMVwiPmxpbmsgMTwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cclxuICAgICAgICA8YSBpZD1cImxpbmstMlwiIGhyZWY9XCJcIiBuZy1jbGljaz1cInZhbHVlID0gMlwiPmxpbmsgMjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cclxuICAgICAgICA8YSBpZD1cImxpbmstM1wiIG5nLWhyZWY9XCIve3snMTIzJ319XCI+bGluayAzPC9hPiAobGluaywgcmVsb2FkISk8YnIgLz5cclxuICAgICAgICA8YSBpZD1cImxpbmstNFwiIGhyZWY9XCJcIiBuYW1lPVwieHhcIiBuZy1jbGljaz1cInZhbHVlID0gNFwiPmFuY2hvcjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cclxuICAgICAgICA8YSBpZD1cImxpbmstNVwiIG5hbWU9XCJ4eHhcIiBuZy1jbGljaz1cInZhbHVlID0gNVwiPmFuY2hvcjwvYT4gKG5vIGxpbmspPGJyIC8+XHJcbiAgICAgICAgPGEgaWQ9XCJsaW5rLTZcIiBuZy1ocmVmPVwie3t2YWx1ZX19XCI+bGluazwvYT4gKGxpbmssIGNoYW5nZSBsb2NhdGlvbilcclxuICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgd2l0aG91dCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZWxlbWVudCgnI2xpbmstMScpLmNsaWNrKCk7XHJcbiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzEnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay0xJykuYXR0cignaHJlZicpKS50b0JlKFwiXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZWxlbWVudCgnI2xpbmstMicpLmNsaWNrKCk7XHJcbiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzInKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay0yJykuYXR0cignaHJlZicpKS50b0JlKFwiXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYW5kIGNoYW5nZSB1cmwgd2hlbiBuZy1ocmVmIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTMnKS5hdHRyKCdocmVmJykpLnRvQmUoXCIvMTIzXCIpO1xyXG5cclxuICAgICAgICAgIGVsZW1lbnQoJyNsaW5rLTMnKS5jbGljaygpO1xyXG4gICAgICAgICAgZXhwZWN0KGJyb3dzZXIoKS53aW5kb3coKS5wYXRoKCkpLnRvRXF1YWwoJy8xMjMnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBlbGVtZW50KCcjbGluay00JykuY2xpY2soKTtcclxuICAgICAgICAgIGV4cGVjdChpbnB1dCgndmFsdWUnKS52YWwoKSkudG9FcXVhbCgnNCcpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTQnKS5hdHRyKCdocmVmJykpLnRvQmUoJycpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZWxlbWVudCgnI2xpbmstNScpLmNsaWNrKCk7XHJcbiAgICAgICAgICBleHBlY3QoaW5wdXQoJ3ZhbHVlJykudmFsKCkpLnRvRXF1YWwoJzUnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjbGluay01JykuYXR0cignaHJlZicpKS50b0JlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpbnB1dCgndmFsdWUnKS5lbnRlcignNicpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNsaW5rLTYnKS5hdHRyKCdocmVmJykpLnRvQmUoJzYnKTtcclxuXHJcbiAgICAgICAgICBlbGVtZW50KCcjbGluay02JykuY2xpY2soKTtcclxuICAgICAgICAgIGV4cGVjdChicm93c2VyKCkubG9jYXRpb24oKS51cmwoKSkudG9FcXVhbCgnLzYnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1NyY1xyXG4gKiBAcmVzdHJpY3QgQVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY2AgYXR0cmlidXRlIGRvZXNuJ3RcclxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxyXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcclxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY2AgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXHJcbiAqXHJcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XHJcbiAqIDxwcmU+XHJcbiAqIDxpbWcgc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIvPlxyXG4gKiA8L3ByZT5cclxuICpcclxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxyXG4gKiA8cHJlPlxyXG4gKiA8aW1nIG5nLXNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiLz5cclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIEBlbGVtZW50IElNR1xyXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3Jjc2V0XHJcbiAqIEByZXN0cmljdCBBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3Jjc2V0YCBhdHRyaWJ1dGUgZG9lc24ndFxyXG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXHJcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxyXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3Jjc2V0YCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cclxuICpcclxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcclxuICogPHByZT5cclxuICogPGltZyBzcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIi8+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XHJcbiAqIDxwcmU+XHJcbiAqIDxpbWcgbmctc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIvPlxyXG4gKiA8L3ByZT5cclxuICpcclxuICogQGVsZW1lbnQgSU1HXHJcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3Jjc2V0IGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cclxuICovXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdEaXNhYmxlZFxyXG4gKiBAcmVzdHJpY3QgQVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICpcclxuICogVGhlIGZvbGxvd2luZyBtYXJrdXAgd2lsbCBtYWtlIHRoZSBidXR0b24gZW5hYmxlZCBvbiBDaHJvbWUvRmlyZWZveCBidXQgbm90IG9uIElFOCBhbmQgb2xkZXIgSUVzOlxyXG4gKiA8cHJlPlxyXG4gKiA8ZGl2IG5nLWluaXQ9XCJzY29wZSA9IHsgaXNEaXNhYmxlZDogZmFsc2UgfVwiPlxyXG4gKiAgPGJ1dHRvbiBkaXNhYmxlZD1cInt7c2NvcGUuaXNEaXNhYmxlZH19XCI+RGlzYWJsZWQ8L2J1dHRvbj5cclxuICogPC9kaXY+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgZGlzYWJsZWQuXHJcbiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKVxyXG4gKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi5cclxuICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ0Rpc2FibGVkYCBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgIENsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XHJcbiAgICAgICAgPGJ1dHRvbiBuZy1tb2RlbD1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiY2hlY2tlZFwiPkJ1dHRvbjwvYnV0dG9uPlxyXG4gICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpO1xyXG4gICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b24nKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgPC9kb2M6ZXhhbXBsZT5cclxuICpcclxuICogQGVsZW1lbnQgSU5QVVRcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIEFuZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkLlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDaGVja2VkXHJcbiAqIEByZXN0cmljdCBBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgY2hlY2tlZC5cclxuICogKFRoZSBwcmVzZW5jZSBvZiB0aGVtIG1lYW5zIHRydWUgYW5kIGFic2VuY2UgbWVhbnMgZmFsc2UpXHJcbiAqIFRoaXMgcHJldmVudHMgdGhlIGFuZ3VsYXIgY29tcGlsZXIgZnJvbSBjb3JyZWN0bHkgcmV0cmlldmluZyB0aGUgYmluZGluZyBleHByZXNzaW9uLlxyXG4gKiBUbyBzb2x2ZSB0aGlzIHByb2JsZW0sIHdlIGludHJvZHVjZSB0aGUgYG5nQ2hlY2tlZGAgZGlyZWN0aXZlLlxyXG4gKiBAZXhhbXBsZVxyXG4gICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgICBDaGVjayBtZSB0byBjaGVjayBib3RoOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJtYXN0ZXJcIj48YnIvPlxyXG4gICAgICAgIDxpbnB1dCBpZD1cImNoZWNrU2xhdmVcIiB0eXBlPVwiY2hlY2tib3hcIiBuZy1jaGVja2VkPVwibWFzdGVyXCI+XHJcbiAgICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNjaGVja1NsYXZlJykucHJvcCgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcclxuICAgICAgICAgIGlucHV0KCdtYXN0ZXInKS5jaGVjaygpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNjaGVja1NsYXZlJykucHJvcCgnY2hlY2tlZCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgPC9kb2M6ZXhhbXBsZT5cclxuICpcclxuICogQGVsZW1lbnQgSU5QVVRcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoZWNrZWQgQW5ndWxhciBleHByZXNzaW9uIHRoYXQgd2lsbCBiZSBldmFsdWF0ZWQuXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1JlYWRvbmx5XHJcbiAqIEByZXN0cmljdCBBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgSFRNTCBzcGVjcyBkbyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgc3BlY2lhbCBhdHRyaWJ1dGVzIHN1Y2ggYXMgcmVhZG9ubHkuXHJcbiAqIChUaGUgcHJlc2VuY2Ugb2YgdGhlbSBtZWFucyB0cnVlIGFuZCBhYnNlbmNlIG1lYW5zIGZhbHNlKVxyXG4gKiBUaGlzIHByZXZlbnRzIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGZyb20gY29ycmVjdGx5IHJldHJpZXZpbmcgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbi5cclxuICogVG8gc29sdmUgdGhpcyBwcm9ibGVtLCB3ZSBpbnRyb2R1Y2UgdGhlIGBuZ1JlYWRvbmx5YCBkaXJlY3RpdmUuXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgIENoZWNrIG1lIHRvIG1ha2UgdGV4dCByZWFkb25seTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctcmVhZG9ubHk9XCJjaGVja2VkXCIgdmFsdWU9XCJJJ20gQW5ndWxhclwiLz5cclxuICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgIGl0KCdzaG91bGQgdG9nZ2xlIHJlYWRvbmx5IGF0dHInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6dGV4dCcpLnByb3AoJ3JlYWRvbmx5JykpLnRvQmVGYWxzeSgpO1xyXG4gICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDp0ZXh0JykucHJvcCgncmVhZG9ubHknKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgIDwvZG9jOmV4YW1wbGU+XHJcbiAqXHJcbiAqIEBlbGVtZW50IElOUFVUXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIEFuZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkLlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdTZWxlY3RlZFxyXG4gKiBAcmVzdHJpY3QgQVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIEhUTUwgc3BlY3MgZG8gbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHNwZWNpYWwgYXR0cmlidXRlcyBzdWNoIGFzIHNlbGVjdGVkLlxyXG4gKiAoVGhlIHByZXNlbmNlIG9mIHRoZW0gbWVhbnMgdHJ1ZSBhbmQgYWJzZW5jZSBtZWFucyBmYWxzZSlcclxuICogVGhpcyBwcmV2ZW50cyB0aGUgYW5ndWxhciBjb21waWxlciBmcm9tIGNvcnJlY3RseSByZXRyaWV2aW5nIHRoZSBiaW5kaW5nIGV4cHJlc3Npb24uXHJcbiAqIFRvIHNvbHZlIHRoaXMgcHJvYmxlbSwgd2UgaW50cm9kdWNlZCB0aGUgYG5nU2VsZWN0ZWRgIGRpcmVjdGl2ZS5cclxuICogQGV4YW1wbGVcclxuICAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICAgQ2hlY2sgbWUgdG8gc2VsZWN0OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPjxici8+XHJcbiAgICAgICAgPHNlbGVjdD5cclxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIGlkPVwiZ3JlZXRcIiBuZy1zZWxlY3RlZD1cInNlbGVjdGVkXCI+R3JlZXRpbmdzITwvb3B0aW9uPlxyXG4gICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgR3JlZXRpbmdzIScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNncmVldCcpLnByb3AoJ3NlbGVjdGVkJykpLnRvQmVGYWxzeSgpO1xyXG4gICAgICAgICAgaW5wdXQoJ3NlbGVjdGVkJykuY2hlY2soKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjZ3JlZXQnKS5wcm9wKCdzZWxlY3RlZCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgPC9kb2M6ZXhhbXBsZT5cclxuICpcclxuICogQGVsZW1lbnQgT1BUSU9OXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIEFuZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHdpbGwgYmUgZXZhbHVhdGVkLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ09wZW5cclxuICogQHJlc3RyaWN0IEFcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBIVE1MIHNwZWNzIGRvIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSBzcGVjaWFsIGF0dHJpYnV0ZXMgc3VjaCBhcyBvcGVuLlxyXG4gKiAoVGhlIHByZXNlbmNlIG9mIHRoZW0gbWVhbnMgdHJ1ZSBhbmQgYWJzZW5jZSBtZWFucyBmYWxzZSlcclxuICogVGhpcyBwcmV2ZW50cyB0aGUgYW5ndWxhciBjb21waWxlciBmcm9tIGNvcnJlY3RseSByZXRyaWV2aW5nIHRoZSBiaW5kaW5nIGV4cHJlc3Npb24uXHJcbiAqIFRvIHNvbHZlIHRoaXMgcHJvYmxlbSwgd2UgaW50cm9kdWNlIHRoZSBgbmdPcGVuYCBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICAgIENoZWNrIG1lIGNoZWNrIG11bHRpcGxlOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJvcGVuXCI+PGJyLz5cclxuICAgICAgICAgPGRldGFpbHMgaWQ9XCJkZXRhaWxzXCIgbmctb3Blbj1cIm9wZW5cIj5cclxuICAgICAgICAgICAgPHN1bW1hcnk+U2hvdy9IaWRlIG1lPC9zdW1tYXJ5PlxyXG4gICAgICAgICA8L2RldGFpbHM+XHJcbiAgICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNkZXRhaWxzJykucHJvcCgnb3BlbicpKS50b0JlRmFsc3koKTtcclxuICAgICAgICAgICBpbnB1dCgnb3BlbicpLmNoZWNrKCk7XHJcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNkZXRhaWxzJykucHJvcCgnb3BlbicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICAgPC9kb2M6ZXhhbXBsZT5cclxuICpcclxuICogQGVsZW1lbnQgREVUQUlMU1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBBbmd1bGFyIGV4cHJlc3Npb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZC5cclxuICovXHJcblxyXG52YXIgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMgPSB7fTtcclxuXHJcblxyXG4vLyBib29sZWFuIGF0dHJzIGFyZSBldmFsdWF0ZWRcclxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xyXG4gIC8vIGJpbmRpbmcgdG8gbXVsdGlwbGUgaXMgbm90IHN1cHBvcnRlZFxyXG4gIGlmIChwcm9wTmFtZSA9PSBcIm11bHRpcGxlXCIpIHJldHVybjtcclxuXHJcbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XHJcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByaW9yaXR5OiAxMDAsXHJcbiAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBhdHRyLiRzZXQoYXR0ck5hbWUsICEhdmFsdWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9O1xyXG59KTtcclxuXHJcblxyXG4vLyBuZy1zcmMsIG5nLXNyY3NldCwgbmctaHJlZiBhcmUgaW50ZXJwb2xhdGVkXHJcbmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHtcclxuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcclxuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tub3JtYWxpemVkXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIGlmICghdmFsdWUpXHJcbiAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgYXR0ci4kc2V0KGF0dHJOYW1lLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgLy8gb24gSUUsIGlmIFwibmc6c3JjXCIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGlzIHVzZWQgYW5kIFwic3JjXCIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3RcclxuICAgICAgICAgIC8vIHRoZW4gY2FsbGluZyBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgJ2ZvbycpIGRvZXNuJ3QgZG8gYW55dGhpbmcsIHNvIHdlIG5lZWRcclxuICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cclxuICAgICAgICAgIC8vIHdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLlxyXG4gICAgICAgICAgaWYgKG1zaWUpIGVsZW1lbnQucHJvcChhdHRyTmFtZSwgYXR0clthdHRyTmFtZV0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH07XHJcbn0pO1xyXG5cclxudmFyIG51bGxGb3JtQ3RybCA9IHtcclxuICAkYWRkQ29udHJvbDogbm9vcCxcclxuICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcclxuICAkc2V0VmFsaWRpdHk6IG5vb3AsXHJcbiAgJHNldERpcnR5OiBub29wLFxyXG4gICRzZXRQcmlzdGluZTogbm9vcFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBvYmplY3RcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXJcclxuICpcclxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtIHlldC5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybS5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBjb250YWluaW5nIGNvbnRyb2wgb3IgZm9ybSBpcyBpbnZhbGlkLlxyXG4gKlxyXG4gKiBAcHJvcGVydHkge09iamVjdH0gJGVycm9yIElzIGFuIG9iamVjdCBoYXNoLCBjb250YWluaW5nIHJlZmVyZW5jZXMgdG8gYWxsIGludmFsaWQgY29udHJvbHMgb3JcclxuICogIGZvcm1zLCB3aGVyZTpcclxuICpcclxuICogIC0ga2V5cyBhcmUgdmFsaWRhdGlvbiB0b2tlbnMgKGVycm9yIG5hbWVzKSDDouKCrOKAnSBzdWNoIGFzIGByZXF1aXJlZGAsIGB1cmxgIG9yIGBlbWFpbGApLFxyXG4gKiAgLSB2YWx1ZXMgYXJlIGFycmF5cyBvZiBjb250cm9scyBvciBmb3JtcyB0aGF0IGFyZSBpbnZhbGlkIHdpdGggZ2l2ZW4gZXJyb3IuXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHN0YXRlIG9mIHRoZW0sXHJcbiAqIHN1Y2ggYXMgYmVpbmcgdmFsaWQvaW52YWxpZCBvciBkaXJ0eS9wcmlzdGluZS5cclxuICpcclxuICogRWFjaCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0gZGlyZWN0aXZlIGNyZWF0ZXMgYW4gaW5zdGFuY2VcclxuICogb2YgYEZvcm1Db250cm9sbGVyYC5cclxuICpcclxuICovXHJcbi8vYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXHJcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnXTtcclxuZnVuY3Rpb24gRm9ybUNvbnRyb2xsZXIoZWxlbWVudCwgYXR0cnMpIHtcclxuICB2YXIgZm9ybSA9IHRoaXMsXHJcbiAgICAgIHBhcmVudEZvcm0gPSBlbGVtZW50LnBhcmVudCgpLmNvbnRyb2xsZXIoJ2Zvcm0nKSB8fCBudWxsRm9ybUN0cmwsXHJcbiAgICAgIGludmFsaWRDb3VudCA9IDAsIC8vIHVzZWQgdG8gZWFzaWx5IGRldGVybWluZSBpZiB3ZSBhcmUgdmFsaWRcclxuICAgICAgZXJyb3JzID0gZm9ybS4kZXJyb3IgPSB7fSxcclxuICAgICAgY29udHJvbHMgPSBbXTtcclxuXHJcbiAgLy8gaW5pdCBzdGF0ZVxyXG4gIGZvcm0uJG5hbWUgPSBhdHRycy5uYW1lIHx8IGF0dHJzLm5nRm9ybTtcclxuICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xyXG4gIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcclxuICBmb3JtLiR2YWxpZCA9IHRydWU7XHJcbiAgZm9ybS4kaW52YWxpZCA9IGZhbHNlO1xyXG5cclxuICBwYXJlbnRGb3JtLiRhZGRDb250cm9sKGZvcm0pO1xyXG5cclxuICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXHJcbiAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7XHJcbiAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7XHJcblxyXG4gIC8vIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgZWFzeSB0b2dnbGluZyBvZiBjbGFzc2VzXHJcbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCwgdmFsaWRhdGlvbkVycm9yS2V5KSB7XHJcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xyXG4gICAgZWxlbWVudC5cclxuICAgICAgcmVtb3ZlQ2xhc3MoKGlzVmFsaWQgPyBJTlZBTElEX0NMQVNTIDogVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KS5cclxuICAgICAgYWRkQ2xhc3MoKGlzVmFsaWQgPyBWQUxJRF9DTEFTUyA6IElOVkFMSURfQ0xBU1MpICsgdmFsaWRhdGlvbkVycm9yS2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxyXG4gICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sXHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS5cclxuICAgKlxyXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGxpbmtlZC5cclxuICAgKi9cclxuICBmb3JtLiRhZGRDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xyXG4gICAgY29udHJvbHMucHVzaChjb250cm9sKTtcclxuXHJcbiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiAhZm9ybS5oYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lKSkge1xyXG4gICAgICBmb3JtW2NvbnRyb2wuJG5hbWVdID0gY29udHJvbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlciMkcmVtb3ZlQ29udHJvbFxyXG4gICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6Zm9ybS5Gb3JtQ29udHJvbGxlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogRGVyZWdpc3RlciBhIGNvbnRyb2wgZnJvbSB0aGUgZm9ybS5cclxuICAgKlxyXG4gICAqIElucHV0IGVsZW1lbnRzIHVzaW5nIG5nTW9kZWxDb250cm9sbGVyIGRvIHRoaXMgYXV0b21hdGljYWxseSB3aGVuIHRoZXkgYXJlIGRlc3Ryb3llZC5cclxuICAgKi9cclxuICBmb3JtLiRyZW1vdmVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCkge1xyXG4gICAgaWYgKGNvbnRyb2wuJG5hbWUgJiYgZm9ybVtjb250cm9sLiRuYW1lXSA9PT0gY29udHJvbCkge1xyXG4gICAgICBkZWxldGUgZm9ybVtjb250cm9sLiRuYW1lXTtcclxuICAgIH1cclxuICAgIGZvckVhY2goZXJyb3JzLCBmdW5jdGlvbihxdWV1ZSwgdmFsaWRhdGlvblRva2VuKSB7XHJcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KHZhbGlkYXRpb25Ub2tlbiwgdHJ1ZSwgY29udHJvbCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhcnJheVJlbW92ZShjb250cm9scywgY29udHJvbCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFZhbGlkaXR5XHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiBhIGZvcm0gY29udHJvbC5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxyXG4gICAqL1xyXG4gIGZvcm0uJHNldFZhbGlkaXR5ID0gZnVuY3Rpb24odmFsaWRhdGlvblRva2VuLCBpc1ZhbGlkLCBjb250cm9sKSB7XHJcbiAgICB2YXIgcXVldWUgPSBlcnJvcnNbdmFsaWRhdGlvblRva2VuXTtcclxuXHJcbiAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICBpZiAocXVldWUpIHtcclxuICAgICAgICBhcnJheVJlbW92ZShxdWV1ZSwgY29udHJvbCk7XHJcbiAgICAgICAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIGludmFsaWRDb3VudC0tO1xyXG4gICAgICAgICAgaWYgKCFpbnZhbGlkQ291bnQpIHtcclxuICAgICAgICAgICAgdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCk7XHJcbiAgICAgICAgICAgIGZvcm0uJHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9ybS4kaW52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZXJyb3JzW3ZhbGlkYXRpb25Ub2tlbl0gPSBmYWxzZTtcclxuICAgICAgICAgIHRvZ2dsZVZhbGlkQ3NzKHRydWUsIHZhbGlkYXRpb25Ub2tlbik7XHJcbiAgICAgICAgICBwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uVG9rZW4sIHRydWUsIGZvcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghaW52YWxpZENvdW50KSB7XHJcbiAgICAgICAgdG9nZ2xlVmFsaWRDc3MoaXNWYWxpZCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHF1ZXVlKSB7XHJcbiAgICAgICAgaWYgKGluY2x1ZGVzKHF1ZXVlLCBjb250cm9sKSkgcmV0dXJuO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVycm9yc1t2YWxpZGF0aW9uVG9rZW5dID0gcXVldWUgPSBbXTtcclxuICAgICAgICBpbnZhbGlkQ291bnQrKztcclxuICAgICAgICB0b2dnbGVWYWxpZENzcyhmYWxzZSwgdmFsaWRhdGlvblRva2VuKTtcclxuICAgICAgICBwYXJlbnRGb3JtLiRzZXRWYWxpZGl0eSh2YWxpZGF0aW9uVG9rZW4sIGZhbHNlLCBmb3JtKTtcclxuICAgICAgfVxyXG4gICAgICBxdWV1ZS5wdXNoKGNvbnRyb2wpO1xyXG5cclxuICAgICAgZm9ybS4kdmFsaWQgPSBmYWxzZTtcclxuICAgICAgZm9ybS4kaW52YWxpZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldERpcnR5XHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGEgZGlydHkgc3RhdGUuXHJcbiAgICpcclxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIGFkZCB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGEgZGlydHlcclxuICAgKiBzdGF0ZSAobmctZGlydHkgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIHBhcmVudCBmb3Jtcy5cclxuICAgKi9cclxuICBmb3JtLiRzZXREaXJ0eSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoRElSVFlfQ0xBU1MpO1xyXG4gICAgZm9ybS4kZGlydHkgPSB0cnVlO1xyXG4gICAgZm9ybS4kcHJpc3RpbmUgPSBmYWxzZTtcclxuICAgIHBhcmVudEZvcm0uJHNldERpcnR5KCk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFByaXN0aW5lXHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpmb3JtLkZvcm1Db250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZSBzdGF0ZS5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSAnbmctZGlydHknIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lXHJcbiAgICogc3RhdGUgKG5nLXByaXN0aW5lIGNsYXNzKS4gVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZFxyXG4gICAqIGluIHRoaXMgZm9ybS5cclxuICAgKlxyXG4gICAqIFNldHRpbmcgYSBmb3JtIGJhY2sgdG8gYSBwcmlzdGluZSBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvICdyZXVzZScgYSBmb3JtIGFmdGVyXHJcbiAgICogc2F2aW5nIG9yIHJlc2V0dGluZyBpdC5cclxuICAgKi9cclxuICBmb3JtLiRzZXRQcmlzdGluZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoRElSVFlfQ0xBU1MpLmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKTtcclxuICAgIGZvcm0uJGRpcnR5ID0gZmFsc2U7XHJcbiAgICBmb3JtLiRwcmlzdGluZSA9IHRydWU7XHJcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XHJcbiAgICAgIGNvbnRyb2wuJHNldFByaXN0aW5lKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nRm9ybVxyXG4gKiBAcmVzdHJpY3QgRUFDXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBOZXN0YWJsZSBhbGlhcyBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gYGZvcm1gfSBkaXJlY3RpdmUuIEhUTUxcclxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcclxuICogc3ViLWdyb3VwIG9mIGNvbnRyb2xzIG5lZWRzIHRvIGJlIGRldGVybWluZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZXxuZ0Zvcm0gTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cclxuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cclxuICpcclxuICovXHJcblxyXG4gLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOmZvcm1cclxuICogQHJlc3RyaWN0IEVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIERpcmVjdGl2ZSB0aGF0IGluc3RhbnRpYXRlc1xyXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LlxyXG4gKlxyXG4gKiBJZiBgbmFtZWAgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciBpcyBwdWJsaXNoZWQgb250byB0aGUgY3VycmVudCBzY29wZSB1bmRlclxyXG4gKiB0aGlzIG5hbWUuXHJcbiAqXHJcbiAqICMgQWxpYXM6IHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfVxyXG4gKlxyXG4gKiBJbiBhbmd1bGFyIGZvcm1zIGNhbiBiZSBuZXN0ZWQuIFRoaXMgbWVhbnMgdGhhdCB0aGUgb3V0ZXIgZm9ybSBpcyB2YWxpZCB3aGVuIGFsbCBvZiB0aGUgY2hpbGRcclxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIgYnJvd3NlcnMgZG8gbm90IGFsbG93IG5lc3Rpbmcgb2YgYDxmb3JtPmAgZWxlbWVudHMsIGZvciB0aGlzXHJcbiAqIHJlYXNvbiBhbmd1bGFyIHByb3ZpZGVzIHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfSBhbGlhc1xyXG4gKiB3aGljaCBiZWhhdmVzIGlkZW50aWNhbCB0byBgPGZvcm0+YCBidXQgYWxsb3dzIGZvcm0gbmVzdGluZy5cclxuICpcclxuICpcclxuICogIyBDU1MgY2xhc3Nlc1xyXG4gKiAgLSBgbmctdmFsaWRgIElzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC5cclxuICogIC0gYG5nLWludmFsaWRgIElzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxyXG4gKiAgLSBgbmctcHJpc3RpbmVgIElzIHNldCBpZiB0aGUgZm9ybSBpcyBwcmlzdGluZS5cclxuICogIC0gYG5nLWRpcnR5YCBJcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuXHJcbiAqXHJcbiAqXHJcbiAqICMgU3VibWl0dGluZyBhIGZvcm0gYW5kIHByZXZlbnRpbmcgZGVmYXVsdCBhY3Rpb25cclxuICpcclxuICogU2luY2UgdGhlIHJvbGUgb2YgZm9ybXMgaW4gY2xpZW50LXNpZGUgQW5ndWxhciBhcHBsaWNhdGlvbnMgaXMgZGlmZmVyZW50IHRoYW4gaW4gY2xhc3NpY2FsXHJcbiAqIHJvdW5kdHJpcCBhcHBzLCBpdCBpcyBkZXNpcmFibGUgZm9yIHRoZSBicm93c2VyIG5vdCB0byB0cmFuc2xhdGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbnRvIGEgZnVsbFxyXG4gKiBwYWdlIHJlbG9hZCB0aGF0IHNlbmRzIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXIuIEluc3RlYWQgc29tZSBqYXZhc2NyaXB0IGxvZ2ljIHNob3VsZCBiZSB0cmlnZ2VyZWRcclxuICogdG8gaGFuZGxlIHRoZSBmb3JtIHN1Ym1pc3Npb24gaW4gYXBwbGljYXRpb24gc3BlY2lmaWMgd2F5LlxyXG4gKlxyXG4gKiBGb3IgdGhpcyByZWFzb24sIEFuZ3VsYXIgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIChmb3JtIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlcikgdW5sZXNzIHRoZVxyXG4gKiBgPGZvcm0+YCBlbGVtZW50IGhhcyBhbiBgYWN0aW9uYCBhdHRyaWJ1dGUgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBZb3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgamF2YXNjcmlwdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuXHJcbiAqIGEgZm9ybSBpcyBzdWJtaXR0ZWQ6XHJcbiAqXHJcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH0gZGlyZWN0aXZlIG9uIHRoZSBmb3JtIGVsZW1lbnRcclxuICogLSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlIG9uIHRoZSBmaXJzdFxyXG4gICogIGJ1dHRvbiBvciBpbnB1dCBmaWVsZCBvZiB0eXBlIHN1Ym1pdCAoaW5wdXRbdHlwZT1zdWJtaXRdKVxyXG4gKlxyXG4gKiBUbyBwcmV2ZW50IGRvdWJsZSBleGVjdXRpb24gb2YgdGhlIGhhbmRsZXIsIHVzZSBvbmx5IG9uZSBvZiBuZ1N1Ym1pdCBvciBuZ0NsaWNrIGRpcmVjdGl2ZXMuIFRoaXNcclxuICogaXMgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGZvcm0gc3VibWlzc2lvbiBydWxlcyBjb21pbmcgZnJvbSB0aGUgaHRtbCBzcGVjOlxyXG4gKlxyXG4gKiAtIElmIGEgZm9ybSBoYXMgb25seSBvbmUgaW5wdXQgZmllbGQgdGhlbiBoaXR0aW5nIGVudGVyIGluIHRoaXMgZmllbGQgdHJpZ2dlcnMgZm9ybSBzdWJtaXRcclxuICogKGBuZ1N1Ym1pdGApXHJcbiAqIC0gaWYgYSBmb3JtIGhhcyBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXJcclxuICogZG9lc24ndCB0cmlnZ2VyIHN1Ym1pdFxyXG4gKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXHJcbiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvclxyXG4gKiBpbnB1dFt0eXBlPXN1Ym1pdF0gKGBuZ0NsaWNrYCkgKmFuZCogYSBzdWJtaXQgaGFuZGxlciBvbiB0aGUgZW5jbG9zaW5nIGZvcm0gKGBuZ1N1Ym1pdGApXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgJHNjb3BlLnVzZXJUeXBlID0gJ2d1ZXN0JztcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVzZXJUeXBlXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj48YnI+XHJcbiAgICAgICAgIDx0dD51c2VyVHlwZSA9IHt7dXNlclR5cGV9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnI+XHJcbiAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxicj5cclxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxicj5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXJUeXBlJykpLnRvRXF1YWwoJ2d1ZXN0Jyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGlucHV0KCd1c2VyVHlwZScpLmVudGVyKCcnKTtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXJUeXBlJykpLnRvRXF1YWwoJycpO1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgIDwvZG9jOmV4YW1wbGU+XHJcbiAqL1xyXG52YXIgZm9ybURpcmVjdGl2ZUZhY3RvcnkgPSBmdW5jdGlvbihpc05nRm9ybSkge1xyXG4gIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcclxuICAgIHZhciBmb3JtRGlyZWN0aXZlID0ge1xyXG4gICAgICBuYW1lOiAnZm9ybScsXHJcbiAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLFxyXG4gICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZm9ybUVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgaWYgKCFhdHRyLmFjdGlvbikge1xyXG4gICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVzZSBqcSBldmVudHMgYmVjYXVzZSBpZiBhIGZvcm0gaXMgZGVzdHJveWVkIGR1cmluZyBzdWJtaXNzaW9uIHRoZSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxyXG4gICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgLy8gSUUgOSBpcyBub3QgYWZmZWN0ZWQgYmVjYXVzZSBpdCBkb2Vzbid0IGZpcmUgYSBzdWJtaXQgZXZlbnQgYW5kIHRyeSB0byBkbyBhIGZ1bGxcclxuICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXHJcbiAgICAgICAgICAgICAgdmFyIHByZXZlbnREZWZhdWx0TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICAgIDogZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTsgLy8gSUVcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyRm4oZm9ybUVsZW1lbnRbMF0sICdzdWJtaXQnLCBwcmV2ZW50RGVmYXVsdExpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gdW5yZWdpc3RlciB0aGUgcHJldmVudERlZmF1bHQgbGlzdGVuZXIgc28gdGhhdCB3ZSBkb24ndCBub3QgbGVhayBtZW1vcnkgYnV0IGluIGFcclxuICAgICAgICAgICAgICAvLyB3YXkgdGhhdCB3aWxsIGFjaGlldmUgdGhlIHByZXZlbnRpb24gb2YgdGhlIGRlZmF1bHQgYWN0aW9uLlxyXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIHByZXZlbnREZWZhdWx0TGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBmb3JtRWxlbWVudC5wYXJlbnQoKS5jb250cm9sbGVyKCdmb3JtJyksXHJcbiAgICAgICAgICAgICAgICBhbGlhcyA9IGF0dHIubmFtZSB8fCBhdHRyLm5nRm9ybTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhbGlhcykge1xyXG4gICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIGNvbnRyb2xsZXIsIGFsaWFzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyZW50Rm9ybUN0cmwpIHtcclxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRyZW1vdmVDb250cm9sKGNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgYWxpYXMsIHVuZGVmaW5lZCwgYWxpYXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKGNvbnRyb2xsZXIsIG51bGxGb3JtQ3RybCk7IC8vc3RvcCBwcm9wYWdhdGluZyBjaGlsZCBkZXN0cnVjdGlvbiBoYW5kbGVycyB1cHdhcmRzXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBpc05nRm9ybSA/IGV4dGVuZChjb3B5KGZvcm1EaXJlY3RpdmUpLCB7cmVzdHJpY3Q6ICdFQUMnfSkgOiBmb3JtRGlyZWN0aXZlO1xyXG4gIH1dO1xyXG59O1xyXG5cclxudmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xyXG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XHJcblxyXG52YXIgVVJMX1JFR0VYUCA9IC9eKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPyQvO1xyXG52YXIgRU1BSUxfUkVHRVhQID0gL15bQS1aYS16MC05Ll8lKy1dK0BbQS1aYS16MC05Li1dK1xcLltBLVphLXpdezIsNn0kLztcclxudmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooXFwtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKVxccyokLztcclxuXHJcbnZhciBpbnB1dFR5cGUgPSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBuZ2RvYyBpbnB1dFR5cGVcclxuICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cclxuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxyXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXHJcbiAgICogICAgbWlubGVuZ3RoLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cclxuICAgKiAgICBtYXhsZW5ndGguXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZVxyXG4gICAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3JcclxuICAgKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXHJcbiAgICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW1taW5nIHRoZVxyXG4gICAqICAgIGlucHV0LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdndWVzdCc7XHJcbiAgICAgICAgICAgICAkc2NvcGUud29yZCA9IC9eXFxzKlxcdypcXHMqJC87XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICA8L3NjcmlwdD5cclxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgICAgU2luZ2xlIHdvcmQ6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1wYXR0ZXJuPVwid29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxyXG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxyXG4gICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxyXG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XHJcbiAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3RleHR9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XHJcbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XHJcbiAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgnZ3Vlc3QnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgndHJ1ZScpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJycpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCcnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBtdWx0aSB3b3JkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ2hlbGxvIHdvcmxkJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCBiZSB0cmltbWVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlucHV0KCd0ZXh0JykuZW50ZXIoJ3VudHJpbW1lZCAnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3RleHQnKSkudG9FcXVhbCgndW50cmltbWVkICcpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgICAgPC9kb2M6ZXhhbXBsZT5cclxuICAgKi9cclxuICAndGV4dCc6IHRleHRJbnB1dFR5cGUsXHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgaW5wdXRUeXBlXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGV4dCBpbnB1dCB3aXRoIG51bWJlciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gU2V0cyB0aGUgYG51bWJlcmAgdmFsaWRhdGlvblxyXG4gICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXHJcbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcclxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxyXG4gICAqICAgIG1pbmxlbmd0aC5cclxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXHJcbiAgICogICAgbWF4bGVuZ3RoLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGVcclxuICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXHJcbiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSAxMjtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgICBOdW1iZXI6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWluPVwiMFwiIG1heD1cIjk5XCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XHJcbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLm51bWJlclwiPlxyXG4gICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+XHJcbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3t2YWx1ZX19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XHJcbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZScpKS50b0VxdWFsKCcxMicpO1xyXG4gICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIGlucHV0KCd2YWx1ZScpLmVudGVyKCcnKTtcclxuICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUnKSkudG9FcXVhbCgnJyk7XHJcbiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIGlucHV0KCd2YWx1ZScpLmVudGVyKCcxMjMnKTtcclxuICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUnKSkudG9FcXVhbCgnJyk7XHJcbiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgICA8L2RvYzpleGFtcGxlPlxyXG4gICAqL1xyXG4gICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsXHJcblxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgaW5wdXRUeXBlXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOmlucHV0LnVybFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYVxyXG4gICAqIHZhbGlkIFVSTC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xyXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXHJcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXHJcbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cclxuICAgKiAgICBtaW5sZW5ndGguXHJcbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxyXG4gICAqICAgIG1heGxlbmd0aC5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXHJcbiAgICogICAgUmVnRXhwIHBhdHRlcm4gZXhwcmVzc2lvbi4gRXhwZWN0ZWQgdmFsdWUgaXMgYC9yZWdleHAvYCBmb3IgaW5saW5lIHBhdHRlcm5zIG9yIGByZWdleHBgIGZvclxyXG4gICAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXHJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkge1xyXG4gICAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnaHR0cDovL2dvb2dsZS5jb20nO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiQ3RybFwiPlxyXG4gICAgICAgICAgIFVSTDogPGlucHV0IHR5cGU9XCJ1cmxcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInRleHRcIiByZXF1aXJlZD5cclxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cclxuICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cclxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IudXJsXCI+XHJcbiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj5cclxuICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XHJcbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci51cmwgPSB7eyEhbXlGb3JtLiRlcnJvci51cmx9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCdodHRwOi8vZ29vZ2xlLmNvbScpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcignJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJycpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcigneHh4Jyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgICAgPC9kb2M6ZXhhbXBsZT5cclxuICAgKi9cclxuICAndXJsJzogdXJsSW5wdXRUeXBlLFxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGlucHV0VHlwZVxyXG4gICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogVGV4dCBpbnB1dCB3aXRoIGVtYWlsIHZhbGlkYXRpb24uIFNldHMgdGhlIGBlbWFpbGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgbm90IGEgdmFsaWQgZW1haWxcclxuICAgKiBhZGRyZXNzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXHJcbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcclxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxyXG4gICAqICAgIG1pbmxlbmd0aC5cclxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXHJcbiAgICogICAgbWF4bGVuZ3RoLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBtYXRjaCB0aGVcclxuICAgKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXHJcbiAgICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxyXG4gICAqXHJcbiAgICogQGV4YW1wbGVcclxuICAgICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdtZUBleGFtcGxlLmNvbSc7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICA8L3NjcmlwdD5cclxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgICAgIEVtYWlsOiA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ0ZXh0XCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cclxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxyXG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLmVtYWlsXCI+XHJcbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBlbWFpbCE8L3NwYW4+XHJcbiAgICAgICAgICAgICA8dHQ+dGV4dCA9IHt7dGV4dH19PC90dD48YnIvPlxyXG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XHJcbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxyXG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxyXG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IuZW1haWwgPSB7eyEhbXlGb3JtLiRlcnJvci5lbWFpbH19PC90dD48YnIvPlxyXG4gICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygndGV4dCcpKS50b0VxdWFsKCdtZUBleGFtcGxlLmNvbScpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5wdXQoJ3RleHQnKS5lbnRlcignJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJycpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKS50b0VxdWFsKCdmYWxzZScpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCd4eHgnKTtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgICA8L2RvYzpleGFtcGxlPlxyXG4gICAqL1xyXG4gICdlbWFpbCc6IGVtYWlsSW5wdXRUeXBlLFxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGlucHV0VHlwZVxyXG4gICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5yYWRpb1xyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogSFRNTCByYWRpbyBidXR0b24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICAgICRzY29wZS5jb2xvciA9ICdibHVlJztcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvclwiIHZhbHVlPVwicmVkXCI+ICBSZWQgPGJyLz5cclxuICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvclwiIHZhbHVlPVwiZ3JlZW5cIj4gR3JlZW4gPGJyLz5cclxuICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvclwiIHZhbHVlPVwiYmx1ZVwiPiBCbHVlIDxici8+XHJcbiAgICAgICAgICAgPHR0PmNvbG9yID0ge3tjb2xvcn19PC90dD48YnIvPlxyXG4gICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvbG9yJykpLnRvRXF1YWwoJ2JsdWUnKTtcclxuXHJcbiAgICAgICAgICAgIGlucHV0KCdjb2xvcicpLnNlbGVjdCgncmVkJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb2xvcicpKS50b0VxdWFsKCdyZWQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgICA8L2RvYzpleGFtcGxlPlxyXG4gICAqL1xyXG4gICdyYWRpbyc6IHJhZGlvSW5wdXRUeXBlLFxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGlucHV0VHlwZVxyXG4gICAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dC5jaGVja2JveFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogSFRNTCBjaGVja2JveC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cclxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXHJcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1RydWVWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdGYWxzZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXHJcbiAgICpcclxuICAgKiBAZXhhbXBsZVxyXG4gICAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICAgICRzY29wZS52YWx1ZTEgPSB0cnVlO1xyXG4gICAgICAgICAgICAgJHNjb3BlLnZhbHVlMiA9ICdZRVMnXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICA8L3NjcmlwdD5cclxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgICAgVmFsdWUxOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ2YWx1ZTFcIj4gPGJyLz5cclxuICAgICAgICAgICBWYWx1ZTI6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInZhbHVlMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmctdHJ1ZS12YWx1ZT1cIllFU1wiIG5nLWZhbHNlLXZhbHVlPVwiTk9cIj4gPGJyLz5cclxuICAgICAgICAgICA8dHQ+dmFsdWUxID0ge3t2YWx1ZTF9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgICA8dHQ+dmFsdWUyID0ge3t2YWx1ZTJ9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTEnKSkudG9FcXVhbCgndHJ1ZScpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUyJykpLnRvRXF1YWwoJ1lFUycpO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQoJ3ZhbHVlMScpLmNoZWNrKCk7XHJcbiAgICAgICAgICAgIGlucHV0KCd2YWx1ZTInKS5jaGVjaygpO1xyXG4gICAgICAgICAgICBleHBlY3QoYmluZGluZygndmFsdWUxJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd2YWx1ZTInKSkudG9FcXVhbCgnTk8nKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgICA8L2RvYzpleGFtcGxlPlxyXG4gICAqL1xyXG4gICdjaGVja2JveCc6IGNoZWNrYm94SW5wdXRUeXBlLFxyXG5cclxuICAnaGlkZGVuJzogbm9vcCxcclxuICAnYnV0dG9uJzogbm9vcCxcclxuICAnc3VibWl0Jzogbm9vcCxcclxuICAncmVzZXQnOiBub29wXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xyXG4gIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xyXG5cclxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsKCk7XHJcblxyXG4gICAgLy8gQnkgZGVmYXVsdCB3ZSB3aWxsIHRyaW0gdGhlIHZhbHVlXHJcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcclxuICAgIC8vIGUuZy4gPGlucHV0IG5nLW1vZGVsPVwiZm9vXCIgbmctdHJpbT1cImZhbHNlXCI+XHJcbiAgICBpZiAodG9Cb29sZWFuKGF0dHIubmdUcmltIHx8ICdUJykpIHtcclxuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2YWx1ZSkge1xyXG4gICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcclxuICAvLyBpbnB1dCBldmVudCBvbiBiYWNrc3BhY2UsIGRlbGV0ZSBvciBjdXRcclxuICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ2lucHV0JykpIHtcclxuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgdGltZW91dDtcclxuXHJcbiAgICB2YXIgZGVmZXJMaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoIXRpbWVvdXQpIHtcclxuICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBsaXN0ZW5lcigpO1xyXG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZWxlbWVudC5vbigna2V5ZG93bicsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xyXG5cclxuICAgICAgLy8gaWdub3JlXHJcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXHJcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XHJcblxyXG4gICAgICBkZWZlckxpc3RlbmVyKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBpZiB1c2VyIHBhc3RlIGludG8gaW5wdXQgdXNpbmcgbW91c2UsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxyXG4gICAgZWxlbWVudC5vbignY2hhbmdlJywgbGlzdGVuZXIpO1xyXG5cclxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcclxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xyXG4gICAgICBlbGVtZW50Lm9uKCdwYXN0ZSBjdXQnLCBkZWZlckxpc3RlbmVyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIGVsZW1lbnQudmFsKGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlKTtcclxuICB9O1xyXG5cclxuICAvLyBwYXR0ZXJuIHZhbGlkYXRvclxyXG4gIHZhciBwYXR0ZXJuID0gYXR0ci5uZ1BhdHRlcm4sXHJcbiAgICAgIHBhdHRlcm5WYWxpZGF0b3IsXHJcbiAgICAgIG1hdGNoO1xyXG5cclxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihyZWdleHAsIHZhbHVlKSB7XHJcbiAgICBpZiAoaXNFbXB0eSh2YWx1ZSkgfHwgcmVnZXhwLnRlc3QodmFsdWUpKSB7XHJcbiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdwYXR0ZXJuJywgdHJ1ZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdwYXR0ZXJuJywgZmFsc2UpO1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGlmIChwYXR0ZXJuKSB7XHJcbiAgICBtYXRjaCA9IHBhdHRlcm4ubWF0Y2goL15cXC8oLiopXFwvKFtnaW1dKikkLyk7XHJcbiAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAobWF0Y2hbMV0sIG1hdGNoWzJdKTtcclxuICAgICAgcGF0dGVyblZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHBhdHRlcm4sIHZhbHVlKVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGF0dGVyblZhbGlkYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHBhdHRlcm5PYmogPSBzY29wZS4kZXZhbChwYXR0ZXJuKTtcclxuXHJcbiAgICAgICAgaWYgKCFwYXR0ZXJuT2JqIHx8ICFwYXR0ZXJuT2JqLnRlc3QpIHtcclxuICAgICAgICAgIHRocm93IG1pbkVycignbmdQYXR0ZXJuJykoJ25vcmVnZXhwJyxcclxuICAgICAgICAgICAgJ0V4cGVjdGVkIHswfSB0byBiZSBhIFJlZ0V4cCBidXQgd2FzIHsxfS4gRWxlbWVudDogezJ9JywgcGF0dGVybixcclxuICAgICAgICAgICAgcGF0dGVybk9iaiwgc3RhcnRpbmdUYWcoZWxlbWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsaWRhdGUocGF0dGVybk9iaiwgdmFsdWUpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChwYXR0ZXJuVmFsaWRhdG9yKTtcclxuICAgIGN0cmwuJHBhcnNlcnMucHVzaChwYXR0ZXJuVmFsaWRhdG9yKTtcclxuICB9XHJcblxyXG4gIC8vIG1pbiBsZW5ndGggdmFsaWRhdG9yXHJcbiAgaWYgKGF0dHIubmdNaW5sZW5ndGgpIHtcclxuICAgIHZhciBtaW5sZW5ndGggPSBpbnQoYXR0ci5uZ01pbmxlbmd0aCk7XHJcbiAgICB2YXIgbWluTGVuZ3RoVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPCBtaW5sZW5ndGgpIHtcclxuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWlubGVuZ3RoJywgZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21pbmxlbmd0aCcsIHRydWUpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjdHJsLiRwYXJzZXJzLnB1c2gobWluTGVuZ3RoVmFsaWRhdG9yKTtcclxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5MZW5ndGhWYWxpZGF0b3IpO1xyXG4gIH1cclxuXHJcbiAgLy8gbWF4IGxlbmd0aCB2YWxpZGF0b3JcclxuICBpZiAoYXR0ci5uZ01heGxlbmd0aCkge1xyXG4gICAgdmFyIG1heGxlbmd0aCA9IGludChhdHRyLm5nTWF4bGVuZ3RoKTtcclxuICAgIHZhciBtYXhMZW5ndGhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBpZiAoIWlzRW1wdHkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IG1heGxlbmd0aCkge1xyXG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtYXhsZW5ndGgnLCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWF4bGVuZ3RoJywgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGN0cmwuJHBhcnNlcnMucHVzaChtYXhMZW5ndGhWYWxpZGF0b3IpO1xyXG4gICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1heExlbmd0aFZhbGlkYXRvcik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBudW1iZXJJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xyXG4gIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XHJcblxyXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgdmFyIGVtcHR5ID0gaXNFbXB0eSh2YWx1ZSk7XHJcbiAgICBpZiAoZW1wdHkgfHwgTlVNQkVSX1JFR0VYUC50ZXN0KHZhbHVlKSkge1xyXG4gICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgdHJ1ZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogKGVtcHR5ID8gdmFsdWUgOiBwYXJzZUZsb2F0KHZhbHVlKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgZmFsc2UpO1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBpc0VtcHR5KHZhbHVlKSA/ICcnIDogJycgKyB2YWx1ZTtcclxuICB9KTtcclxuXHJcbiAgaWYgKGF0dHIubWluKSB7XHJcbiAgICB2YXIgbWluID0gcGFyc2VGbG9hdChhdHRyLm1pbik7XHJcbiAgICB2YXIgbWluVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgaWYgKCFpc0VtcHR5KHZhbHVlKSAmJiB2YWx1ZSA8IG1pbikge1xyXG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtaW4nLCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbWluJywgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGN0cmwuJHBhcnNlcnMucHVzaChtaW5WYWxpZGF0b3IpO1xyXG4gICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKG1pblZhbGlkYXRvcik7XHJcbiAgfVxyXG5cclxuICBpZiAoYXR0ci5tYXgpIHtcclxuICAgIHZhciBtYXggPSBwYXJzZUZsb2F0KGF0dHIubWF4KTtcclxuICAgIHZhciBtYXhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBpZiAoIWlzRW1wdHkodmFsdWUpICYmIHZhbHVlID4gbWF4KSB7XHJcbiAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ21heCcsIGZhbHNlKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdtYXgnLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKG1heFZhbGlkYXRvcik7XHJcbiAgICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2gobWF4VmFsaWRhdG9yKTtcclxuICB9XHJcblxyXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCBpc051bWJlcih2YWx1ZSkpIHtcclxuICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ251bWJlcicsIHRydWUpO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgZmFsc2UpO1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cmxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xyXG4gIHRleHRJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XHJcblxyXG4gIHZhciB1cmxWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgaWYgKGlzRW1wdHkodmFsdWUpIHx8IFVSTF9SRUdFWFAudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3VybCcsIHRydWUpO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdHJsLiRzZXRWYWxpZGl0eSgndXJsJywgZmFsc2UpO1xyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaCh1cmxWYWxpZGF0b3IpO1xyXG4gIGN0cmwuJHBhcnNlcnMucHVzaCh1cmxWYWxpZGF0b3IpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XHJcbiAgdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcclxuXHJcbiAgdmFyIGVtYWlsVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgIGlmIChpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSkpIHtcclxuICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ2VtYWlsJywgdHJ1ZSk7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdlbWFpbCcsIGZhbHNlKTtcclxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZW1haWxWYWxpZGF0b3IpO1xyXG4gIGN0cmwuJHBhcnNlcnMucHVzaChlbWFpbFZhbGlkYXRvcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XHJcbiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkXHJcbiAgaWYgKGlzVW5kZWZpbmVkKGF0dHIubmFtZSkpIHtcclxuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XHJcbiAgfVxyXG5cclxuICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGVsZW1lbnRbMF0uY2hlY2tlZCkge1xyXG4gICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGF0dHIudmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBhdHRyLnZhbHVlO1xyXG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09IGN0cmwuJHZpZXdWYWx1ZSk7XHJcbiAgfTtcclxuXHJcbiAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBjdHJsLiRyZW5kZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gIHZhciB0cnVlVmFsdWUgPSBhdHRyLm5nVHJ1ZVZhbHVlLFxyXG4gICAgICBmYWxzZVZhbHVlID0gYXR0ci5uZ0ZhbHNlVmFsdWU7XHJcblxyXG4gIGlmICghaXNTdHJpbmcodHJ1ZVZhbHVlKSkgdHJ1ZVZhbHVlID0gdHJ1ZTtcclxuICBpZiAoIWlzU3RyaW5nKGZhbHNlVmFsdWUpKSBmYWxzZVZhbHVlID0gZmFsc2U7XHJcblxyXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50WzBdLmNoZWNrZWQpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xyXG4gIH07XHJcblxyXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlVmFsdWU7XHJcbiAgfSk7XHJcblxyXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID8gdHJ1ZVZhbHVlIDogZmFsc2VWYWx1ZTtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYVxyXG4gKiBAcmVzdHJpY3QgRVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogSFRNTCB0ZXh0YXJlYSBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gVGhlIGRhdGEtYmluZGluZyBhbmQgdmFsaWRhdGlvblxyXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcclxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dCBlbGVtZW50fS5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXHJcbiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXHJcbiAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxyXG4gKiAgICBtaW5sZW5ndGguXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cclxuICogICAgbWF4bGVuZ3RoLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXHJcbiAqICAgIFJlZ0V4cCBwYXR0ZXJuIGV4cHJlc3Npb24uIEV4cGVjdGVkIHZhbHVlIGlzIGAvcmVnZXhwL2AgZm9yIGlubGluZSBwYXR0ZXJucyBvciBgcmVnZXhwYCBmb3JcclxuICogICAgcGF0dGVybnMgZGVmaW5lZCBhcyBzY29wZSBleHByZXNzaW9ucy5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXHJcbiAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTppbnB1dFxyXG4gKiBAcmVzdHJpY3QgRVxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogSFRNTCBpbnB1dCBlbGVtZW50IGNvbnRyb2wgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy4gSW5wdXQgY29udHJvbCBmb2xsb3dzIEhUTUw1IGlucHV0IHR5cGVzXHJcbiAqIGFuZCBwb2x5ZmlsbHMgdGhlIEhUTUw1IHZhbGlkYXRpb24gYmVoYXZpb3IgZm9yIG9sZGVyIGJyb3dzZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cclxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcclxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cclxuICogICAgbWlubGVuZ3RoLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXHJcbiAqICAgIG1heGxlbmd0aC5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZVxyXG4gKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXHJcbiAqICAgIHBhdHRlcm5zIGRlZmluZWQgYXMgc2NvcGUgZXhwcmVzc2lvbnMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gICAgPGRvYzpleGFtcGxlPlxyXG4gICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7bmFtZTogJ2d1ZXN0JywgbGFzdDogJ3Zpc2l0b3InfTtcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cclxuICAgICAgICAgICBVc2VyIG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XHJcbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+PGJyPlxyXG4gICAgICAgICAgIExhc3QgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImxhc3ROYW1lXCIgbmctbW9kZWw9XCJ1c2VyLmxhc3RcIlxyXG4gICAgICAgICAgICAgbmctbWlubGVuZ3RoPVwiM1wiIG5nLW1heGxlbmd0aD1cIjEwXCI+XHJcbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1pbmxlbmd0aFwiPlxyXG4gICAgICAgICAgICAgVG9vIHNob3J0ITwvc3Bhbj5cclxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IubWF4bGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICBUb28gbG9uZyE8L3NwYW4+PGJyPlxyXG4gICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgIDxocj5cclxuICAgICAgICAgPHR0PnVzZXIgPSB7e3VzZXJ9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kdmFsaWQgPSB7e215Rm9ybS51c2VyTmFtZS4kdmFsaWR9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiRlcnJvciA9IHt7bXlGb3JtLnVzZXJOYW1lLiRlcnJvcn19PC90dD48YnI+XHJcbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxicj5cclxuICAgICAgICAgPHR0Pm15Rm9ybS5sYXN0TmFtZS4kZXJyb3IgPSB7e215Rm9ybS5sYXN0TmFtZS4kZXJyb3J9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+XHJcbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5taW5sZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5taW5sZW5ndGh9fTwvdHQ+PGJyPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5tYXhsZW5ndGggPSB7eyEhbXlGb3JtLiRlcnJvci5tYXhsZW5ndGh9fTwvdHQ+PGJyPlxyXG4gICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJ2aXNpdG9yXCJ9Jyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLnVzZXJOYW1lLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLiR2YWxpZCcpKS50b0VxdWFsKCd0cnVlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eSB3aGVuIHJlcXVpcmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpbnB1dCgndXNlci5uYW1lJykuZW50ZXIoJycpO1xyXG4gICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3VzZXInKSkudG9FcXVhbCgne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xyXG4gICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS51c2VyTmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5wdXQoJ3VzZXIubGFzdCcpLmVudGVyKCcnKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd1c2VyJykpLnRvRXF1YWwoJ3tcIm5hbWVcIjpcImd1ZXN0XCIsXCJsYXN0XCI6XCJcIn0nKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGxlc3MgdGhhbiByZXF1aXJlZCBtaW4gbGVuZ3RoJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpbnB1dCgndXNlci5sYXN0JykuZW50ZXIoJ3h4Jyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygndXNlcicpKS50b0VxdWFsKCd7XCJuYW1lXCI6XCJndWVzdFwifScpO1xyXG4gICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJGVycm9yJykpLnRvTWF0Y2goL21pbmxlbmd0aC8pO1xyXG4gICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGxvbmdlciB0aGFuIG1heCBsZW5ndGgnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlucHV0KCd1c2VyLmxhc3QnKS5lbnRlcignc29tZSByaWRpY3Vsb3VzbHkgbG9uZyBuYW1lJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygndXNlcicpKVxyXG4gICAgICAgICAgICAudG9FcXVhbCgne1wibmFtZVwiOlwiZ3Vlc3RcIn0nKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubGFzdE5hbWUuJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiRlcnJvcicpKS50b01hdGNoKC9tYXhsZW5ndGgvKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0uJHZhbGlkJykpLnRvRXF1YWwoJ2ZhbHNlJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICAgPC9kb2M6ZXhhbXBsZT5cclxuICovXHJcbnZhciBpbnB1dERpcmVjdGl2ZSA9IFsnJGJyb3dzZXInLCAnJHNuaWZmZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJHNuaWZmZXIpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICBpZiAoY3RybCkge1xyXG4gICAgICAgIChpbnB1dFR5cGVbbG93ZXJjYXNlKGF0dHIudHlwZSldIHx8IGlucHV0VHlwZS50ZXh0KShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRicm93c2VyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1dO1xyXG5cclxudmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJyxcclxuICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsXHJcbiAgICBQUklTVElORV9DTEFTUyA9ICduZy1wcmlzdGluZScsXHJcbiAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eSc7XHJcblxyXG4vKipcclxuICogQG5nZG9jIG9iamVjdFxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlclxyXG4gKlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gJHZpZXdWYWx1ZSBBY3R1YWwgc3RyaW5nIHZhbHVlIGluIHRoZSB2aWV3LlxyXG4gKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwsIHRoYXQgdGhlIGNvbnRyb2wgaXMgYm91bmQgdG8uXHJcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJHBhcnNlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXHJcbiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uICBFYWNoIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaW4gdHVybiwgcGFzc2luZyB0aGUgdmFsdWVcclxuICAgICAgIHRocm91Z2ggdG8gdGhlIG5leHQuIFVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB2YWx1ZSBhcyB3ZWxsIGFzIHZhbGlkYXRpb24uXHJcbiAgICAgICBGb3IgdmFsaWRhdGlvbiwgdGhlIHBhcnNlcnMgc2hvdWxkIHVwZGF0ZSB0aGUgdmFsaWRpdHkgc3RhdGUgdXNpbmdcclxuICAgICAgIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHkgJHNldFZhbGlkaXR5KCl9LFxyXG4gICAgICAgYW5kIHJldHVybiBgdW5kZWZpbmVkYCBmb3IgaW52YWxpZCB2YWx1ZXMuXHJcblxyXG4gKlxyXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxyXG4gICAgICAgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIEVhY2ggZnVuY3Rpb24gaXMgY2FsbGVkLCBpbiB0dXJuLCBwYXNzaW5nIHRoZSB2YWx1ZSB0aHJvdWdoIHRvIHRoZVxyXG4gICAgICAgbmV4dC4gVXNlZCB0byBmb3JtYXQgLyBjb252ZXJ0IHZhbHVlcyBmb3IgZGlzcGxheSBpbiB0aGUgY29udHJvbCBhbmQgdmFsaWRhdGlvbi5cclxuICogICAgICA8cHJlPlxyXG4gKiAgICAgIGZ1bmN0aW9uIGZvcm1hdHRlcih2YWx1ZSkge1xyXG4gKiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAqICAgICAgICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xyXG4gKiAgICAgICAgfVxyXG4gKiAgICAgIH1cclxuICogICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcclxuICogICAgICA8L3ByZT5cclxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBlcnJvcnMgYXMga2V5cy5cclxuICpcclxuICogQHByb3BlcnR5IHtib29sZWFufSAkcHJpc3RpbmUgVHJ1ZSBpZiB1c2VyIGhhcyBub3QgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sIHlldC5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci5cclxuICogQHByb3BlcnR5IHtib29sZWFufSAkaW52YWxpZCBUcnVlIGlmIGF0IGxlYXN0IG9uZSBlcnJvciBvbiB0aGUgY29udHJvbC5cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUgYG5nLW1vZGVsYCBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGNvbnRhaW5zXHJcbiAqIHNlcnZpY2VzIGZvciBkYXRhLWJpbmRpbmcsIHZhbGlkYXRpb24sIENTUyB1cGRhdGUsIHZhbHVlIGZvcm1hdHRpbmcgYW5kIHBhcnNpbmcuIEl0XHJcbiAqIHNwZWNpZmljYWxseSBkb2VzIG5vdCBjb250YWluIGFueSBsb2dpYyB3aGljaCBkZWFscyB3aXRoIERPTSByZW5kZXJpbmcgb3IgbGlzdGVuaW5nIHRvXHJcbiAqIERPTSBldmVudHMuIFRoZSBgTmdNb2RlbENvbnRyb2xsZXJgIGlzIG1lYW50IHRvIGJlIGV4dGVuZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hlcmUsIHRoZVxyXG4gKiBkaXJlY3RpdmUgcHJvdmlkZXMgRE9NIG1hbmlwdWxhdGlvbiBhbmQgdGhlIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgdGhlIGRhdGEtYmluZGluZy5cclxuICogTm90ZSB0aGF0IHlvdSBjYW5ub3QgdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgaW4gYSBkaXJlY3RpdmUgd2l0aCBhbiBpc29sYXRlZCBzY29wZSxcclxuICogYXMsIGluIHRoYXQgY2FzZSwgdGhlIGBuZy1tb2RlbGAgdmFsdWUgZ2V0cyBwdXQgaW50byB0aGUgaXNvbGF0ZWQgc2NvcGUgYW5kIGRvZXMgbm90IGdldFxyXG4gKiBwcm9wb2dhdGVkIHRvIHRoZSBwYXJlbnQgc2NvcGUuXHJcbiAqXHJcbiAqXHJcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmVcclxuICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApXHJcbiAqIGNvbGxhYm9yYXRlIHRvZ2V0aGVyIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgcmVzdWx0LlxyXG4gKlxyXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJjdXN0b21Db250cm9sXCI+XHJcbiAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XHJcbiAgICAgIFtjb250ZW50ZWRpdGFibGVdIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICBtaW4taGVpZ2h0OiAyMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAubmctaW52YWxpZCB7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxyXG4gICAgICBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tQ29udHJvbCcsIFtdKS5cclxuICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLCAvLyBnZXQgYSBob2xkIG9mIE5nTW9kZWxDb250cm9sbGVyXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xyXG4gICAgICAgICAgICAgIGlmKCFuZ01vZGVsKSByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcclxuXHJcbiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWRcclxuICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbChuZ01vZGVsLiR2aWV3VmFsdWUgfHwgJycpO1xyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhbmdlIGV2ZW50cyB0byBlbmFibGUgYmluZGluZ1xyXG4gICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkocmVhZCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgcmVhZCgpOyAvLyBpbml0aWFsaXplXHJcblxyXG4gICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsXHJcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBodG1sID0gZWxlbWVudC5odG1sKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBzdHJpcC1iciBhdHRyaWJ1dGUgaXMgcHJvdmlkZWQgdGhlbiB3ZSBzdHJpcCB0aGlzIG91dFxyXG4gICAgICAgICAgICAgICAgaWYoIGF0dHJzLnN0cmlwQnIgJiYgaHRtbCA9PSAnPGJyPicgKSB7XHJcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShodG1sKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XHJcbiAgICAgICA8ZGl2IGNvbnRlbnRlZGl0YWJsZVxyXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcclxuICAgICAgICAgICAgc3RyaXAtYnI9XCJ0cnVlXCJcclxuICAgICAgICAgICAgcmVxdWlyZWQ+Q2hhbmdlIG1lITwvZGl2PlxyXG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxyXG4gICAgICAgPGhyPlxyXG4gICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIj48L3RleHRhcmVhPlxyXG4gICAgICA8L2Zvcm0+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwic2NlbmFyaW8uanNcIj5cclxuICAgICAgaXQoJ3Nob3VsZCBkYXRhLWJpbmQgYW5kIGJlY29tZSBpbnZhbGlkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoJ1tjb250ZW50ZWRpdGFibGVdJyk7XHJcblxyXG4gICAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUudGV4dCgpKS50b0VxdWFsKCdDaGFuZ2UgbWUhJyk7XHJcbiAgICAgICAgaW5wdXQoJ3VzZXJDb250ZW50JykuZW50ZXIoJycpO1xyXG4gICAgICAgIGV4cGVjdChjb250ZW50RWRpdGFibGUudGV4dCgpKS50b0VxdWFsKCcnKTtcclxuICAgICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLnByb3AoJ2NsYXNzTmFtZScpKS50b01hdGNoKC9uZy1pbnZhbGlkLXJlcXVpcmVkLyk7XHJcbiAgICAgIH0pO1xyXG4gICAgPC9maWxlPlxyXG4gKiA8L2V4YW1wbGU+XHJcbiAqXHJcbiAqL1xyXG52YXIgTmdNb2RlbENvbnRyb2xsZXIgPSBbJyRzY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckYXR0cnMnLCAnJGVsZW1lbnQnLCAnJHBhcnNlJyxcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRhdHRyLCAkZWxlbWVudCwgJHBhcnNlKSB7XHJcbiAgdGhpcy4kdmlld1ZhbHVlID0gTnVtYmVyLk5hTjtcclxuICB0aGlzLiRtb2RlbFZhbHVlID0gTnVtYmVyLk5hTjtcclxuICB0aGlzLiRwYXJzZXJzID0gW107XHJcbiAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xyXG4gIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcclxuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XHJcbiAgdGhpcy4kZGlydHkgPSBmYWxzZTtcclxuICB0aGlzLiR2YWxpZCA9IHRydWU7XHJcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xyXG4gIHRoaXMuJG5hbWUgPSAkYXR0ci5uYW1lO1xyXG5cclxuICB2YXIgbmdNb2RlbEdldCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSxcclxuICAgICAgbmdNb2RlbFNldCA9IG5nTW9kZWxHZXQuYXNzaWduO1xyXG5cclxuICBpZiAoIW5nTW9kZWxTZXQpIHtcclxuICAgIHRocm93IG1pbkVycignbmdNb2RlbCcpKCdub25hc3NpZ24nLCBcIkV4cHJlc3Npb24gJ3swfScgaXMgbm9uLWFzc2lnbmFibGUuIEVsZW1lbnQ6IHsxfVwiLFxyXG4gICAgICAgICRhdHRyLm5nTW9kZWwsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyXHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbFxyXG4gICAqIGRpcmVjdGl2ZSB3aWxsIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cclxuICAgKi9cclxuICB0aGlzLiRyZW5kZXIgPSBub29wO1xyXG5cclxuICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCxcclxuICAgICAgaW52YWxpZENvdW50ID0gMCwgLy8gdXNlZCB0byBlYXNpbHkgZGV0ZXJtaW5lIGlmIHdlIGFyZSB2YWxpZFxyXG4gICAgICAkZXJyb3IgPSB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlXHJcblxyXG5cclxuICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXHJcbiAgJGVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpO1xyXG4gIHRvZ2dsZVZhbGlkQ3NzKHRydWUpO1xyXG5cclxuICAvLyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGVhc3kgdG9nZ2xpbmcgb2YgY2xhc3Nlc1xyXG4gIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSkge1xyXG4gICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJztcclxuICAgICRlbGVtZW50LlxyXG4gICAgICByZW1vdmVDbGFzcygoaXNWYWxpZCA/IElOVkFMSURfQ0xBU1MgOiBWQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpLlxyXG4gICAgICBhZGRDbGFzcygoaXNWYWxpZCA/IFZBTElEX0NMQVNTIDogSU5WQUxJRF9DTEFTUykgKyB2YWxpZGF0aW9uRXJyb3JLZXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XHJcbiAgICogQG1ldGhvZE9mIG5nLmRpcmVjdGl2ZTpuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZpZXMgdGhlIGZvcm0gd2hlbiB0aGUgY29udHJvbCBjaGFuZ2VzIHZhbGlkaXR5LiAoaS5lLiBpdFxyXG4gICAqIGRvZXMgbm90IG5vdGlmeSBmb3JtIGlmIGdpdmVuIHZhbGlkYXRvciBpcyBhbHJlYWR5IG1hcmtlZCBhcyBpbnZhbGlkKS5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYnkgdmFsaWRhdG9ycyAtIGkuZS4gdGhlIHBhcnNlciBvciBmb3JtYXR0ZXIgZnVuY3Rpb25zLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIHRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGFzc2lnblxyXG4gICAqICAgICAgICB0byBgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV09aXNWYWxpZGAgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cclxuICAgKiAgICAgICAgVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZVxyXG4gICAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYFxyXG4gICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpIG9yIGludmFsaWQgKGZhbHNlKS5cclxuICAgKi9cclxuICB0aGlzLiRzZXRWYWxpZGl0eSA9IGZ1bmN0aW9uKHZhbGlkYXRpb25FcnJvcktleSwgaXNWYWxpZCkge1xyXG4gICAgaWYgKCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldID09PSAhaXNWYWxpZCkgcmV0dXJuO1xyXG5cclxuICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgIGlmICgkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkgaW52YWxpZENvdW50LS07XHJcbiAgICAgIGlmICghaW52YWxpZENvdW50KSB7XHJcbiAgICAgICAgdG9nZ2xlVmFsaWRDc3ModHJ1ZSk7XHJcbiAgICAgICAgdGhpcy4kdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdG9nZ2xlVmFsaWRDc3MoZmFsc2UpO1xyXG4gICAgICB0aGlzLiRpbnZhbGlkID0gdHJ1ZTtcclxuICAgICAgdGhpcy4kdmFsaWQgPSBmYWxzZTtcclxuICAgICAgaW52YWxpZENvdW50Kys7XHJcbiAgICB9XHJcblxyXG4gICAgJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0gPSAhaXNWYWxpZDtcclxuICAgIHRvZ2dsZVZhbGlkQ3NzKGlzVmFsaWQsIHZhbGlkYXRpb25FcnJvcktleSk7XHJcblxyXG4gICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkLCB0aGlzKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBAbmdkb2MgZnVuY3Rpb25cclxuICAgKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcclxuICAgKiBAbWV0aG9kT2YgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxyXG4gICAqXHJcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmVcclxuICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLlxyXG4gICAqL1xyXG4gIHRoaXMuJHNldFByaXN0aW5lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kZGlydHkgPSBmYWxzZTtcclxuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcclxuICAgICRlbGVtZW50LnJlbW92ZUNsYXNzKERJUlRZX0NMQVNTKS5hZGRDbGFzcyhQUklTVElORV9DTEFTUyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogQG5nZG9jIGZ1bmN0aW9uXHJcbiAgICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxyXG4gICAqIEBtZXRob2RPZiBuZy5kaXJlY3RpdmU6bmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlclxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICogUmVhZCBhIHZhbHVlIGZyb20gdmlldy5cclxuICAgKlxyXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgZnJvbSB3aXRoaW4gYSBET00gZXZlbnQgaGFuZGxlci5cclxuICAgKiBGb3IgZXhhbXBsZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fSBvclxyXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH0gZGlyZWN0aXZlcyBjYWxsIGl0LlxyXG4gICAqXHJcbiAgICogSXQgaW50ZXJuYWxseSBjYWxscyBhbGwgYCRwYXJzZXJzYCAoaW5jbHVkaW5nIHZhbGlkYXRvcnMpIGFuZCB1cGRhdGVzIHRoZSBgJG1vZGVsVmFsdWVgIGFuZCB0aGUgYWN0dWFsIG1vZGVsIHBhdGguXHJcbiAgICogTGFzdGx5IGl0IGNhbGxzIGFsbCByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgZnJvbSB0aGUgdmlldy5cclxuICAgKi9cclxuICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgdGhpcy4kdmlld1ZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgLy8gY2hhbmdlIHRvIGRpcnR5XHJcbiAgICBpZiAodGhpcy4kcHJpc3RpbmUpIHtcclxuICAgICAgdGhpcy4kZGlydHkgPSB0cnVlO1xyXG4gICAgICB0aGlzLiRwcmlzdGluZSA9IGZhbHNlO1xyXG4gICAgICAkZWxlbWVudC5yZW1vdmVDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoRElSVFlfQ0xBU1MpO1xyXG4gICAgICBwYXJlbnRGb3JtLiRzZXREaXJ0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvckVhY2godGhpcy4kcGFyc2VycywgZnVuY3Rpb24oZm4pIHtcclxuICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy4kbW9kZWxWYWx1ZSAhPT0gdmFsdWUpIHtcclxuICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICBuZ01vZGVsU2V0KCRzY29wZSwgdmFsdWUpO1xyXG4gICAgICBmb3JFYWNoKHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGxpc3RlbmVyKCk7XHJcbiAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gbW9kZWwgLT4gdmFsdWVcclxuICB2YXIgY3RybCA9IHRoaXM7XHJcblxyXG4gICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKCkge1xyXG4gICAgdmFyIHZhbHVlID0gbmdNb2RlbEdldCgkc2NvcGUpO1xyXG5cclxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xyXG4gICAgaWYgKGN0cmwuJG1vZGVsVmFsdWUgIT09IHZhbHVlKSB7XHJcblxyXG4gICAgICB2YXIgZm9ybWF0dGVycyA9IGN0cmwuJGZvcm1hdHRlcnMsXHJcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcclxuXHJcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgd2hpbGUoaWR4LS0pIHtcclxuICAgICAgICB2YWx1ZSA9IGZvcm1hdHRlcnNbaWR4XSh2YWx1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgY3RybC4kdmlld1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufV07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW9kZWxcclxuICpcclxuICogQGVsZW1lbnQgaW5wdXRcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIElzIGEgZGlyZWN0aXZlIHRoYXQgdGVsbHMgQW5ndWxhciB0byBkbyB0d28td2F5IGRhdGEgYmluZGluZy4gSXQgd29ya3MgdG9nZXRoZXIgd2l0aCBgaW5wdXRgLFxyXG4gKiBgc2VsZWN0YCwgYHRleHRhcmVhYCBhbmQgZXZlbiBjdXN0b20gZm9ybSBjb250cm9scyB0aGF0IHVzZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcclxuICogTmdNb2RlbENvbnRyb2xsZXJ9IGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqIGBuZ01vZGVsYCBpcyByZXNwb25zaWJsZSBmb3I6XHJcbiAqXHJcbiAqIC0gYmluZGluZyB0aGUgdmlldyBpbnRvIHRoZSBtb2RlbCwgd2hpY2ggb3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBpbnB1dGAsIGB0ZXh0YXJlYWAgb3IgYHNlbGVjdGBcclxuICogICByZXF1aXJlLFxyXG4gKiAtIHByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLFxyXG4gKiAtIGtlZXBpbmcgc3RhdGUgb2YgdGhlIGNvbnRyb2wgKHZhbGlkL2ludmFsaWQsIGRpcnR5L3ByaXN0aW5lLCB2YWxpZGF0aW9uIGVycm9ycyksXHJcbiAqIC0gc2V0dGluZyByZWxhdGVkIGNzcyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50IChgbmctdmFsaWRgLCBgbmctaW52YWxpZGAsIGBuZy1kaXJ0eWAsIGBuZy1wcmlzdGluZWApLFxyXG4gKiAtIHJlZ2lzdGVyIHRoZSBjb250cm9sIHdpdGggcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS5cclxuICpcclxuICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlXHJcbiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIGltcGxpY2l0bHkgYW5kIGFkZGVkIHRvIHRoZSBzY29wZS5cclxuICpcclxuICogRm9yIGJhc2ljIGV4YW1wbGVzLCBob3cgdG8gdXNlIGBuZ01vZGVsYCwgc2VlOlxyXG4gKlxyXG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxyXG4gKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQudGV4dCB0ZXh0fVxyXG4gKiAgICAtIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQuY2hlY2tib3ggY2hlY2tib3h9XHJcbiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5yYWRpbyByYWRpb31cclxuICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0Lm51bWJlciBudW1iZXJ9XHJcbiAqICAgIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dC5lbWFpbCBlbWFpbH1cclxuICogICAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0LnVybCB1cmx9XHJcbiAqICAtIHtAbGluayBuZy5kaXJlY3RpdmU6c2VsZWN0IHNlbGVjdH1cclxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX1cclxuICpcclxuICovXHJcbnZhciBuZ01vZGVsRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdeP2Zvcm0nXSxcclxuICAgIGNvbnRyb2xsZXI6IE5nTW9kZWxDb250cm9sbGVyLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XHJcbiAgICAgIC8vIG5vdGlmeSBvdGhlcnMsIGVzcGVjaWFsbHkgcGFyZW50IGZvcm1zXHJcblxyXG4gICAgICB2YXIgbW9kZWxDdHJsID0gY3RybHNbMF0sXHJcbiAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG51bGxGb3JtQ3RybDtcclxuXHJcbiAgICAgIGZvcm1DdHJsLiRhZGRDb250cm9sKG1vZGVsQ3RybCk7XHJcblxyXG4gICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvcm1DdHJsLiRyZW1vdmVDb250cm9sKG1vZGVsQ3RybCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2hhbmdlXHJcbiAqIEByZXN0cmljdCBFXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBFdmFsdWF0ZSBnaXZlbiBleHByZXNzaW9uIHdoZW4gdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cclxuICogVGhlIGV4cHJlc3Npb24gaXMgbm90IGV2YWx1YXRlZCB3aGVuIHRoZSB2YWx1ZSBjaGFuZ2UgaXMgY29taW5nIGZyb20gdGhlIG1vZGVsLlxyXG4gKlxyXG4gKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC5cclxuICpcclxuICogQGVsZW1lbnQgaW5wdXRcclxuICpcclxuICogQGV4YW1wbGVcclxuICogPGRvYzpleGFtcGxlPlxyXG4gKiAgIDxkb2M6c291cmNlPlxyXG4gKiAgICAgPHNjcmlwdD5cclxuICogICAgICAgZnVuY3Rpb24gQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICogICAgICAgICAkc2NvcGUuY291bnRlciA9IDA7XHJcbiAqICAgICAgICAgJHNjb3BlLmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKztcclxuICogICAgICAgICB9O1xyXG4gKiAgICAgICB9XHJcbiAqICAgICA8L3NjcmlwdD5cclxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNvbnRyb2xsZXJcIj5cclxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgbmctY2hhbmdlPVwiY2hhbmdlKClcIiBpZD1cIm5nLWNoYW5nZS1leGFtcGxlMVwiIC8+XHJcbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUyXCIgLz5cclxuICogICAgICAgPGxhYmVsIGZvcj1cIm5nLWNoYW5nZS1leGFtcGxlMlwiPkNvbmZpcm1lZDwvbGFiZWw+PGJyIC8+XHJcbiAqICAgICAgIGRlYnVnID0ge3tjb25maXJtZWR9fTxiciAvPlxyXG4gKiAgICAgICBjb3VudGVyID0ge3tjb3VudGVyfX1cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIDwvZG9jOnNvdXJjZT5cclxuICogICA8ZG9jOnNjZW5hcmlvPlxyXG4gKiAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBpZiBjaGFuZ2luZyBmcm9tIHZpZXcnLCBmdW5jdGlvbigpIHtcclxuICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMCcpO1xyXG4gKiAgICAgICBlbGVtZW50KCcjbmctY2hhbmdlLWV4YW1wbGUxJykuY2xpY2soKTtcclxuICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMScpO1xyXG4gKiAgICAgICBleHBlY3QoYmluZGluZygnY29uZmlybWVkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICogICAgIH0pO1xyXG4gKlxyXG4gKiAgICAgaXQoJ3Nob3VsZCBub3QgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSBtb2RlbCcsIGZ1bmN0aW9uKCkge1xyXG4gKiAgICAgICBlbGVtZW50KCcjbmctY2hhbmdlLWV4YW1wbGUyJykuY2xpY2soKTtcclxuICogICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50ZXInKSkudG9FcXVhbCgnMCcpO1xyXG4gKiAgICAgICBleHBlY3QoYmluZGluZygnY29uZmlybWVkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICogICAgIH0pO1xyXG4gKiAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gKiA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7XHJcbiAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XHJcbiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNjb3BlLiRldmFsKGF0dHIubmdDaGFuZ2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcblxyXG52YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcclxuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XHJcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcclxuXHJcbiAgICAgIHZhciB2YWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmIChhdHRyLnJlcXVpcmVkICYmIChpc0VtcHR5KHZhbHVlKSB8fCB2YWx1ZSA9PT0gZmFsc2UpKSB7XHJcbiAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgncmVxdWlyZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIHRydWUpO1xyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaCh2YWxpZGF0b3IpO1xyXG4gICAgICBjdHJsLiRwYXJzZXJzLnVuc2hpZnQodmFsaWRhdG9yKTtcclxuXHJcbiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFsaWRhdG9yKGN0cmwuJHZpZXdWYWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTGlzdFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGV4dCBpbnB1dCB0aGF0IGNvbnZlcnRzIGJldHdlZW4gY29tbWEtc2VwYXJhdGVkIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHN0cmluZ3MuXHJcbiAqXHJcbiAqIEBlbGVtZW50IGlucHV0XHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdMaXN0IG9wdGlvbmFsIGRlbGltaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZS4gSWZcclxuICogICBzcGVjaWZpZWQgaW4gZm9ybSBgL3NvbWV0aGluZy9gIHRoZW4gdGhlIHZhbHVlIHdpbGwgYmUgY29udmVydGVkIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgPHNjcmlwdD5cclxuICAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWlza28nLCAndm9qdGEnXTtcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgTGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+XHJcbiAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XHJcbiAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxyXG4gICAgICAgICA8YnI+XHJcbiAgICAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz5cclxuICAgICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XHJcbiAgICAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxyXG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbmFtZXMnKSkudG9FcXVhbCgnW1wiaWdvclwiLFwibWlza29cIixcInZvanRhXCJdJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpLnRvRXF1YWwoJ3RydWUnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCdzcGFuLmVycm9yJykuY3NzKCdkaXNwbGF5JykpLnRvQmUoJ25vbmUnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpbnB1dCgnbmFtZXMnKS5lbnRlcignJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygnbmFtZXMnKSkudG9FcXVhbCgnW10nKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdteUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQnKSkudG9FcXVhbCgnZmFsc2UnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCdzcGFuLmVycm9yJykuY3NzKCdkaXNwbGF5JykpLm5vdCgpLnRvQmUoJ25vbmUnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICB2YXIgbWF0Y2ggPSAvXFwvKC4qKVxcLy8uZXhlYyhhdHRyLm5nTGlzdCksXHJcbiAgICAgICAgICBzZXBhcmF0b3IgPSBtYXRjaCAmJiBuZXcgUmVnRXhwKG1hdGNoWzFdKSB8fCBhdHRyLm5nTGlzdCB8fCAnLCc7XHJcblxyXG4gICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbih2aWV3VmFsdWUpIHtcclxuICAgICAgICB2YXIgbGlzdCA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodmlld1ZhbHVlKSB7XHJcbiAgICAgICAgICBmb3JFYWNoKHZpZXdWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIGxpc3QucHVzaCh0cmltKHZhbHVlKSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcclxuICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbignLCAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5cclxudmFyIENPTlNUQU5UX1ZBTFVFX1JFR0VYUCA9IC9eKHRydWV8ZmFsc2V8XFxkKykkLztcclxuXHJcbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHByaW9yaXR5OiAxMDAsXHJcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcclxuICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0cikge1xyXG4gICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHNjb3BlLiRldmFsKGF0dHIubmdWYWx1ZSkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIpIHtcclxuICAgICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nVmFsdWUsIGZ1bmN0aW9uIHZhbHVlV2F0Y2hBY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQmluZFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIGBuZ0JpbmRgIGF0dHJpYnV0ZSB0ZWxscyBBbmd1bGFyIHRvIHJlcGxhY2UgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3BlY2lmaWVkIEhUTUwgZWxlbWVudFxyXG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0XHJcbiAqIGV4cHJlc3Npb24gY2hhbmdlcy5cclxuICpcclxuICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2VcclxuICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS5cclxuICpcclxuICogSXQgaXMgcHJlZmVycmFibGUgdG8gdXNlIGBuZ0JpbmRgIGluc3RlYWQgb2YgYHt7IGV4cHJlc3Npb24gfX1gIHdoZW4gYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseSBcclxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuIFxyXG4gKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxyXG4gKlxyXG4gKiBBbiBhbHRlcm5hdGl2ZSBzb2x1dGlvbiB0byB0aGlzIHByb2JsZW0gd291bGQgYmUgdXNpbmcgdGhlXHJcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXHJcbiAqXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV2hpcmxlZCc7XHJcbiAgICAgICAgIH1cclxuICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ3RybFwiPlxyXG4gICAgICAgICBFbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48YnI+XHJcbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLnRvQmUoJ1doaXJsZWQnKTtcclxuICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ25hbWUnKS5lbnRlcignd29ybGQnKTtcclxuICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJ25hbWUnKSkudG9CZSgnd29ybGQnKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nQmluZERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgZWxlbWVudC5hZGRDbGFzcygnbmctYmluZGluZycpLmRhdGEoJyRiaW5kaW5nJywgYXR0ci5uZ0JpbmQpO1xyXG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHtcclxuICAgIGVsZW1lbnQudGV4dCh2YWx1ZSA9PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlKTtcclxuICB9KTtcclxufSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQmluZFRlbXBsYXRlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcclxuICogdGV4dCBjb250ZW50IHNob3VsZCBiZSByZXBsYWNlZCB3aXRoIHRoZSBpbnRlcnBvbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZVxyXG4gKiBpbiB0aGUgYG5nQmluZFRlbXBsYXRlYCBhdHRyaWJ1dGUuXHJcbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXHJcbiAqIGV4cHJlc3Npb25zLiBUaGlzIGRpcmVjdGl2ZSBpcyBuZWVkZWQgc2luY2Ugc29tZSBIVE1MIGVsZW1lbnRzXHJcbiAqIChzdWNoIGFzIFRJVExFIGFuZCBPUFRJT04pIGNhbm5vdCBjb250YWluIFNQQU4gZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdCaW5kVGVtcGxhdGUgdGVtcGxhdGUgb2YgZm9ybVxyXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgJHNjb3BlLnNhbHV0YXRpb24gPSAnSGVsbG8nO1xyXG4gICAgICAgICAgICRzY29wZS5uYW1lID0gJ1dvcmxkJztcclxuICAgICAgICAgfVxyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgU2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PGJyPlxyXG4gICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiPjxicj5cclxuICAgICAgICA8cHJlIG5nLWJpbmQtdGVtcGxhdGU9XCJ7e3NhbHV0YXRpb259fSB7e25hbWV9fSFcIj48L3ByZT5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpLlxyXG4gICAgICAgICAgIHRvQmUoJ0hlbGxvJyk7XHJcbiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCduYW1lJykpLlxyXG4gICAgICAgICAgIHRvQmUoJ1dvcmxkJyk7XHJcbiAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdzYWx1dGF0aW9uJykuZW50ZXIoJ0dyZWV0aW5ncycpO1xyXG4gICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgnbmFtZScpLmVudGVyKCd1c2VyJyk7XHJcbiAgICAgICAgIGV4cGVjdCh1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpLlxyXG4gICAgICAgICAgIHRvQmUoJ0dyZWV0aW5ncycpO1xyXG4gICAgICAgICBleHBlY3QodXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuYmluZGluZygnbmFtZScpKS5cclxuICAgICAgICAgICB0b0JlKCd1c2VyJyk7XHJcbiAgICAgICB9KTtcclxuICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuICovXHJcbnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgdG8gc2NlbmFyaW8gcnVubmVyXHJcbiAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xyXG4gICAgZWxlbWVudC5hZGRDbGFzcygnbmctYmluZGluZycpLmRhdGEoJyRiaW5kaW5nJywgaW50ZXJwb2xhdGVGbik7XHJcbiAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgIGVsZW1lbnQudGV4dCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1dO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JpbmRIdG1sXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDcmVhdGVzIGEgYmluZGluZyB0aGF0IHdpbGwgaW5uZXJIVE1MIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgYGV4cHJlc3Npb25gIGludG8gdGhlIGN1cnJlbnRcclxuICogZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuICBCeSBkZWZhdWx0LCB0aGUgaW5uZXJIVE1MLWVkIGNvbnRlbnQgd2lsbCBiZSBzYW5pdGl6ZWQgdXNpbmcgdGhlIHtAbGlua1xyXG4gKiBuZ1Nhbml0aXplLiRzYW5pdGl6ZSAkc2FuaXRpemV9IHNlcnZpY2UuICBUbyB1dGlsaXplIHRoaXMgZnVuY3Rpb25hbGl0eSwgZW5zdXJlIHRoYXQgYCRzYW5pdGl6ZWBcclxuICogaXMgYXZhaWxhYmxlLCBmb3IgZXhhbXBsZSwgYnkgaW5jbHVkaW5nIHtAbGluayBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluXHJcbiAqIGNvcmUgQW5ndWxhci4pICBZb3UgbWF5IGFsc28gYnlwYXNzIHNhbml0aXphdGlvbiBmb3IgdmFsdWVzIHlvdSBrbm93IGFyZSBzYWZlLiBUbyBkbyBzbywgYmluZCB0b1xyXG4gKiBhbiBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWUgdmlhIHtAbGluayBuZy4kc2NlI3RydXN0QXNIdG1sICRzY2UudHJ1c3RBc0h0bWx9LiAgU2VlIHRoZSBleGFtcGxlXHJcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI0V4YW1wbGUgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxyXG4gKlxyXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxyXG4gKiB3aWxsIGhhdmUgYW4gZXhjZXB0aW9uIChpbnN0ZWFkIG9mIGFuIGV4cGxvaXQuKVxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmRIdG1sIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxyXG4gKi9cclxudmFyIG5nQmluZEh0bWxEaXJlY3RpdmUgPSBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBhdHRyLm5nQmluZEh0bWwpO1xyXG4gICAgc2NvcGUuJHdhdGNoKGF0dHIubmdCaW5kSHRtbCwgZnVuY3Rpb24gbmdCaW5kSHRtbFdhdGNoQWN0aW9uKHZhbHVlKSB7XHJcbiAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKSB8fCAnJyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XTtcclxuXHJcbmZ1bmN0aW9uIGNsYXNzRGlyZWN0aXZlKG5hbWUsIHNlbGVjdG9yKSB7XHJcbiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdBQycsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgICAgdmFyIG9sZFZhbCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbmFtZV0sIG5nQ2xhc3NXYXRjaEFjdGlvbiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihzY29wZS4kZXZhbChhdHRyW25hbWVdKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAobmFtZSAhPT0gJ25nQ2xhc3MnKSB7XHJcbiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBtb2QgPSAkaW5kZXggJiAxO1xyXG4gICAgICAgICAgICBpZiAobW9kICE9PSBvbGQkaW5kZXggJiAxKSB7XHJcbiAgICAgICAgICAgICAgaWYgKG1vZCA9PT0gc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld1ZhbCkge1xyXG4gICAgICAgICAgaWYgKHNlbGVjdG9yID09PSB0cnVlIHx8IHNjb3BlLiRpbmRleCAlIDIgPT09IHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIGlmIChvbGRWYWwgJiYgIWVxdWFscyhuZXdWYWwsb2xkVmFsKSkge1xyXG4gICAgICAgICAgICAgIHJlbW92ZUNsYXNzKG9sZFZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRkQ2xhc3MobmV3VmFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG9sZFZhbCA9IGNvcHkobmV3VmFsKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc1ZhbCkge1xyXG4gICAgICAgICAgYXR0ci4kcmVtb3ZlQ2xhc3MoZmxhdHRlbkNsYXNzZXMoY2xhc3NWYWwpKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZGRDbGFzcyhjbGFzc1ZhbCkge1xyXG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3MoZmxhdHRlbkNsYXNzZXMoY2xhc3NWYWwpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZsYXR0ZW5DbGFzc2VzKGNsYXNzVmFsKSB7XHJcbiAgICAgICAgICBpZihpc0FycmF5KGNsYXNzVmFsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2xhc3NWYWwuam9pbignICcpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChjbGFzc1ZhbCkpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSBbXSwgaSA9IDA7XHJcbiAgICAgICAgICAgIGZvckVhY2goY2xhc3NWYWwsIGZ1bmN0aW9uKHYsIGspIHtcclxuICAgICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGspO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gY2xhc3NWYWw7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbGFzc1xyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIGBuZ0NsYXNzYCBhbGxvd3MgeW91IHRvIHNldCBDU1MgY2xhc3NlcyBvbiBIVE1MIGFuIGVsZW1lbnQsIGR5bmFtaWNhbGx5LCBieSBkYXRhYmluZGluZ1xyXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC5cclxuICpcclxuICogVGhlIGRpcmVjdGl2ZSB3b24ndCBhZGQgZHVwbGljYXRlIGNsYXNzZXMgaWYgYSBwYXJ0aWN1bGFyIGNsYXNzIHdhcyBhbHJlYWR5IHNldC5cclxuICpcclxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gdGhlXHJcbiAqIG5ldyBjbGFzc2VzIGFyZSBhZGRlZC5cclxuICpcclxuICogQGFuaW1hdGlvbnNcclxuICogYWRkIC0gaGFwcGVucyBqdXN0IGJlZm9yZSB0aGUgY2xhc3MgaXMgYXBwbGllZCB0byB0aGUgZWxlbWVudFxyXG4gKiByZW1vdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcclxuICpcclxuICogQGVsZW1lbnQgQU5ZXHJcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XHJcbiAqICAgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3NcclxuICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLiBJbiB0aGUgY2FzZSBvZiBhIG1hcCwgdGhlXHJcbiAqICAgbmFtZXMgb2YgdGhlIHByb3BlcnRpZXMgd2hvc2UgdmFsdWVzIGFyZSB0cnV0aHkgd2lsbCBiZSBhZGRlZCBhcyBjc3MgY2xhc3NlcyB0byB0aGVcclxuICogICBlbGVtZW50LlxyXG4gKlxyXG4gKiBAZXhhbXBsZSBFeGFtcGxlIHRoYXQgZGVtb3N0cmF0ZXMgYmFzaWMgYmluZGluZ3MgdmlhIG5nQ2xhc3MgZGlyZWN0aXZlLlxyXG4gICA8ZXhhbXBsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICAgPHAgbmctY2xhc3M9XCJ7c3RyaWtlOiBzdHJpa2UsIGJvbGQ6IGJvbGQsIHJlZDogcmVkfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cclxuICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImJvbGRcIj4gYm9sZFxyXG4gICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic3RyaWtlXCI+IHN0cmlrZVxyXG4gICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwicmVkXCI+IHJlZFxyXG4gICAgICAgPGhyPlxyXG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XHJcbiAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInN0eWxlXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkIHN0cmlrZSByZWRcIj5cclxuICAgICAgIDxocj5cclxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlMSwgc3R5bGUyLCBzdHlsZTNdXCI+VXNpbmcgQXJyYXkgU3ludGF4PC9wPlxyXG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUxXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkXCI+PGJyPlxyXG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUyXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBzdHJpa2VcIj48YnI+XHJcbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTNcIiBwbGFjZWhvbGRlcj1cIlR5cGU6IHJlZFwiPjxicj5cclxuICAgICA8L2ZpbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxyXG4gICAgICAgLnN0cmlrZSB7XHJcbiAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xyXG4gICAgICAgfVxyXG4gICAgICAgLmJvbGQge1xyXG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgICAgfVxyXG4gICAgICAgLnJlZCB7XHJcbiAgICAgICAgICAgY29sb3I6IHJlZDtcclxuICAgICAgIH1cclxuICAgICA8L2ZpbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cInNjZW5hcmlvLmpzXCI+XHJcbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHRoZSBjbGFzcycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHA6Zmlyc3QnKS5wcm9wKCdjbGFzc05hbWUnKSkubm90KCkudG9NYXRjaCgvYm9sZC8pO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpmaXJzdCcpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS50b01hdGNoKC9yZWQvKTtcclxuXHJcbiAgICAgICAgIGlucHV0KCdib2xkJykuY2hlY2soKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHA6Zmlyc3QnKS5wcm9wKCdjbGFzc05hbWUnKSkudG9NYXRjaCgvYm9sZC8pO1xyXG5cclxuICAgICAgICAgaW5wdXQoJ3JlZCcpLmNoZWNrKCk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBwOmZpcnN0JykucHJvcCgnY2xhc3NOYW1lJykpLnRvTWF0Y2goL3JlZC8pO1xyXG4gICAgICAgfSk7XHJcblxyXG4gICAgICAgaXQoJ3Nob3VsZCBsZXQgeW91IHRvZ2dsZSBzdHJpbmcgZXhhbXBsZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpudGgtb2YtdHlwZSgyKScpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCcnKTtcclxuICAgICAgICAgaW5wdXQoJ3N0eWxlJykuZW50ZXIoJ3JlZCcpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpudGgtb2YtdHlwZSgyKScpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCdyZWQnKTtcclxuICAgICAgIH0pO1xyXG5cclxuICAgICAgIGl0KCdhcnJheSBleGFtcGxlIHNob3VsZCBoYXZlIDMgY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgcDpsYXN0JykucHJvcCgnY2xhc3NOYW1lJykpLnRvQmUoJycpO1xyXG4gICAgICAgICBpbnB1dCgnc3R5bGUxJykuZW50ZXIoJ2JvbGQnKTtcclxuICAgICAgICAgaW5wdXQoJ3N0eWxlMicpLmVudGVyKCdzdHJpa2UnKTtcclxuICAgICAgICAgaW5wdXQoJ3N0eWxlMycpLmVudGVyKCdyZWQnKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHA6bGFzdCcpLnByb3AoJ2NsYXNzTmFtZScpKS50b0JlKCdib2xkIHN0cmlrZSByZWQnKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZmlsZT5cclxuICAgPC9leGFtcGxlPlxyXG5cclxuICAgIyMgQW5pbWF0aW9uc1xyXG5cclxuICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy5cclxuXHJcbiAgIDxleGFtcGxlIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XHJcbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldFwiIG5nLWNsaWNrPVwibXlWYXI9J215LWNsYXNzJ1wiPlxyXG4gICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XHJcbiAgICAgIDxicj5cclxuICAgICAgPHNwYW4gbmctY2xhc3M9XCJteVZhclwiPlNhbXBsZSBUZXh0PC9zcGFuPlxyXG4gICAgIDwvZmlsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XHJcbiAgICAgICAubXktY2xhc3MtYWRkLCAubXktY2xhc3MtcmVtb3ZlIHtcclxuICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgICAgIC1tb3otdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xyXG4gICAgICAgICAtby10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcclxuICAgICAgIH1cclxuXHJcbiAgICAgICAubXktY2xhc3MsXHJcbiAgICAgICAubXktY2xhc3MtYWRkLm15LWNsYXNzLWFkZC1hY3RpdmUge1xyXG4gICAgICAgICBjb2xvcjogcmVkO1xyXG4gICAgICAgICBmb250LXNpemU6M2VtO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgIC5teS1jbGFzcy1yZW1vdmUubXktY2xhc3MtcmVtb3ZlLWFjdGl2ZSB7XHJcbiAgICAgICAgIGZvbnQtc2l6ZToxLjBlbTtcclxuICAgICAgICAgY29sb3I6YmxhY2s7XHJcbiAgICAgICB9XHJcbiAgICAgPC9maWxlPlxyXG4gICAgIDxmaWxlIG5hbWU9XCJzY2VuYXJpby5qc1wiPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS5ub3QoKS5cclxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xyXG5cclxuICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuZWxlbWVudCgnOmJ1dHRvbjpmaXJzdCcpLmNsaWNrKCk7XHJcblxyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLnByb3AoJ2NsYXNzTmFtZScpKS5cclxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xyXG5cclxuICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuZWxlbWVudCgnOmJ1dHRvbjpsYXN0JykuY2xpY2soKTtcclxuXHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLm5vdCgpLlxyXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XHJcbiAgICAgICB9KTtcclxuICAgICA8L2ZpbGU+XHJcbiAgIDwvZXhhbXBsZT5cclxuXHJcblxyXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXHJcbiAgIFRoZSBuZ0NsYXNzIGRpcmVjdGl2ZSBzdGlsbCBzdXBwb3J0cyBDU1MzIFRyYW5zaXRpb25zL0FuaW1hdGlvbnMgZXZlbiBpZiB0aGV5IGRvIG5vdCBmb2xsb3cgdGhlIG5nQW5pbWF0ZSBDU1MgbmFtaW5nIHN0cnVjdHVyZS5cclxuICAgVGhlcmVmb3JlLCBpZiBhbnkgQ1NTMyBUcmFuc2l0aW9uL0FuaW1hdGlvbiBzdHlsZXMgKG91dHNpZGUgb2YgbmdBbmltYXRlKSBhcmUgc2V0IG9uIHRoZSBlbGVtZW50LCB0aGVuLCBpZiBhIG5nQ2xhc3MgYW5pbWF0aW9uXHJcbiAgIGlzIHRyaWdnZXJlZCwgdGhlIG5nQ2xhc3MgYW5pbWF0aW9uIHdpbGwgYmUgc2tpcHBlZCBzbyB0aGF0IG5nQW5pbWF0ZSBjYW4gYWxsb3cgZm9yIHRoZSBwcmUtZXhpc3RpbmcgdHJhbnNpdGlvbiBvciBhbmltYXRpb24gdG9cclxuICAgdGFrZSBvdmVyLiBUaGlzIHJlc3RyaWN0aW9uIGFsbG93cyBmb3IgbmdDbGFzcyB0byBzdGlsbCB3b3JrIHdpdGggc3RhbmRhcmQgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIHRoYXQgYXJlIGRlZmluZWRcclxuICAgb3V0c2lkZSBvZiBuZ0FuaW1hdGUuXHJcbiAqL1xyXG52YXIgbmdDbGFzc0RpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCcnLCB0cnVlKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzT2RkXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXHJcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGFzcyBuZ0NsYXNzfSwgZXhjZXB0IGl0IHdvcmtzIGluXHJcbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZXMgYWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxyXG4gKlxyXG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCBvbmx5IHdpdGhpbiBhIHNjb3BlIG9mIGFuXHJcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQgbmdSZXBlYXR9LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsYXNzT2RkIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZSByZXN1bHRcclxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGV4YW1wbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cclxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XHJcbiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPVwiJ29kZCdcIiBuZy1jbGFzcy1ldmVuPVwiJ2V2ZW4nXCI+XHJcbiAgICAgICAgICAgICB7e25hbWV9fVxyXG4gICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC9vbD5cclxuICAgICA8L2ZpbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxyXG4gICAgICAgLm9kZCB7XHJcbiAgICAgICAgIGNvbG9yOiByZWQ7XHJcbiAgICAgICB9XHJcbiAgICAgICAuZXZlbiB7XHJcbiAgICAgICAgIGNvbG9yOiBibHVlO1xyXG4gICAgICAgfVxyXG4gICAgIDwvZmlsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwic2NlbmFyaW8uanNcIj5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLlxyXG4gICAgICAgICAgIHRvTWF0Y2goL29kZC8pO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLlxyXG4gICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZmlsZT5cclxuICAgPC9leGFtcGxlPlxyXG4gKi9cclxudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdDbGFzc0V2ZW5cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBgbmdDbGFzc09kZGAgYW5kIGBuZ0NsYXNzRXZlbmAgZGlyZWN0aXZlcyB3b3JrIGV4YWN0bHkgYXNcclxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgaXQgd29ya3MgaW5cclxuICogY29uanVuY3Rpb24gd2l0aCBgbmdSZXBlYXRgIGFuZCB0YWtlcyBhZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXHJcbiAqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIGEgc2NvcGUgb2YgYW5cclxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxyXG4gKiAgIHJlc3VsdCBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGV4YW1wbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cclxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cclxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XHJcbiAgICAgICAgICAgPHNwYW4gbmctY2xhc3Mtb2RkPVwiJ29kZCdcIiBuZy1jbGFzcy1ldmVuPVwiJ2V2ZW4nXCI+XHJcbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xyXG4gICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC9vbD5cclxuICAgICA8L2ZpbGU+XHJcbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxyXG4gICAgICAgLm9kZCB7XHJcbiAgICAgICAgIGNvbG9yOiByZWQ7XHJcbiAgICAgICB9XHJcbiAgICAgICAuZXZlbiB7XHJcbiAgICAgICAgIGNvbG9yOiBibHVlO1xyXG4gICAgICAgfVxyXG4gICAgIDwvZmlsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwic2NlbmFyaW8uanNcIj5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBsaTpmaXJzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLlxyXG4gICAgICAgICAgIHRvTWF0Y2goL29kZC8pO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbGk6bGFzdCBzcGFuJykucHJvcCgnY2xhc3NOYW1lJykpLlxyXG4gICAgICAgICAgIHRvTWF0Y2goL2V2ZW4vKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZmlsZT5cclxuICAgPC9leGFtcGxlPlxyXG4gKi9cclxudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcclxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xyXG4gKiBkaXJlY3RpdmUgdG8gYXZvaWQgdGhlIHVuZGVzaXJhYmxlIGZsaWNrZXIgZWZmZWN0IGNhdXNlZCBieSB0aGUgaHRtbCB0ZW1wbGF0ZSBkaXNwbGF5LlxyXG4gKlxyXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdHlwaWNhbGx5IGEgZmluZS1ncmFpbmVkIGFwcGxpY2F0aW9uIGlzXHJcbiAqIHByZWZlcnJlZCBpbiBvcmRlciB0byBiZW5lZml0IGZyb20gcHJvZ3Jlc3NpdmUgcmVuZGVyaW5nIG9mIHRoZSBicm93c2VyIHZpZXcuXHJcbiAqXHJcbiAqIGBuZ0Nsb2FrYCB3b3JrcyBpbiBjb29wZXJhdGlvbiB3aXRoIGEgY3NzIHJ1bGUgdGhhdCBpcyBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxyXG4gKiAgYGFuZ3VsYXIubWluLmpzYCBmaWxlcy4gRm9sbG93aW5nIGlzIHRoZSBjc3MgcnVsZTpcclxuICpcclxuICogPHByZT5cclxuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XHJcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG4gKiB9XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBXaGVuIHRoaXMgY3NzIHJ1bGUgaXMgbG9hZGVkIGJ5IHRoZSBicm93c2VyLCBhbGwgaHRtbCBlbGVtZW50cyAoaW5jbHVkaW5nIHRoZWlyIGNoaWxkcmVuKSB0aGF0XHJcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nLWNsb2FrYCBkaXJlY3RpdmUgYXJlIGhpZGRlbi4gV2hlbiBBbmd1bGFyIGNvbWVzIGFjcm9zcyB0aGlzIGRpcmVjdGl2ZVxyXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIHdoaWNoXHJcbiAqIG1ha2VzIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXHJcbiAqXHJcbiAqIEZvciB0aGUgYmVzdCByZXN1bHQsIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbCBmaWxlO1xyXG4gKiBhbHRlcm5hdGl2ZWx5LCB0aGUgY3NzIHJ1bGUgKGFib3ZlKSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxyXG4gKiBhcHBsaWNhdGlvbi5cclxuICpcclxuICogTGVnYWN5IGJyb3dzZXJzLCBsaWtlIElFNywgZG8gbm90IHByb3ZpZGUgYXR0cmlidXRlIHNlbGVjdG9yIHN1cHBvcnQgKGFkZGVkIGluIENTUyAyLjEpIHNvIHRoZXlcclxuICogY2Fubm90IG1hdGNoIHRoZSBgW25nXFw6Y2xvYWtdYCBzZWxlY3Rvci4gVG8gd29yayBhcm91bmQgdGhpcyBsaW1pdGF0aW9uLCB5b3UgbXVzdCBhZGQgdGhlIGNzc1xyXG4gKiBjbGFzcyBgbmdDbG9ha2AgaW4gYWRkaXRpb24gdG8gYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcyBzaG93biBpbiB0aGUgZXhhbXBsZSBiZWxvdy5cclxuICpcclxuICogQGVsZW1lbnQgQU5ZXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxyXG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBuZy1jbG9hayBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ2hlbGxvIElFNycgfX08L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgcmVtb3ZlIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmUgYW5kIGNzcyBjbGFzcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3RlbXBsYXRlMScpLmF0dHIoJ25nLWNsb2FrJykpLlxyXG4gICAgICAgICAgIG5vdCgpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAjdGVtcGxhdGUyJykuYXR0cignbmctY2xvYWsnKSkuXHJcbiAgICAgICAgICAgbm90KCkudG9CZURlZmluZWQoKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKlxyXG4gKi9cclxudmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XHJcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xyXG4gICAgYXR0ci4kc2V0KCduZ0Nsb2FrJywgdW5kZWZpbmVkKTtcclxuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXJcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUgYXNzaWducyBiZWhhdmlvciB0byBhIHNjb3BlLiBUaGlzIGlzIGEga2V5IGFzcGVjdCBvZiBob3cgYW5ndWxhclxyXG4gKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi5cclxuICpcclxuICogTVZDIGNvbXBvbmVudHMgaW4gYW5ndWxhcjpcclxuICpcclxuICogKiBNb2RlbCDDouKCrOKAnSBUaGUgTW9kZWwgaXMgZGF0YSBpbiBzY29wZSBwcm9wZXJ0aWVzOyBzY29wZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBET00uXHJcbiAqICogVmlldyDDouKCrOKAnSBUaGUgdGVtcGxhdGUgKEhUTUwgd2l0aCBkYXRhIGJpbmRpbmdzKSBpcyByZW5kZXJlZCBpbnRvIHRoZSBWaWV3LlxyXG4gKiAqIENvbnRyb2xsZXIgw6LigqzigJ0gVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgaGFzXHJcbiAqICAgbWV0aG9kcyB0aGF0IHR5cGljYWxseSBleHByZXNzIHRoZSBidXNpbmVzcyBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgYW4gYWx0ZXJuYXRpdmUgd2F5IHRvIGRlZmluZSBjb250cm9sbGVycyBpcyB2aWEgdGhlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAc2NvcGVcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NvbnRyb2xsZXIgTmFtZSBvZiBhIGdsb2JhbGx5IGFjY2Vzc2libGUgY29uc3RydWN0b3IgZnVuY3Rpb24gb3IgYW5cclxuICogICAgIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IHRoYXQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZXZhbHVhdGVzIHRvIGFcclxuICogICAgIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpbnN0YW5jZSBjYW4gZnVydGhlciBiZSBwdWJsaXNoZWQgaW50byB0aGUgc2NvcGVcclxuICogICAgIGJ5IGFkZGluZyBgYXMgbG9jYWxOYW1lYCB0aGUgY29udHJvbGxlciBuYW1lIGF0dHJpYnV0ZS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZFxyXG4gKiBncmVldGluZyBhcmUgbWV0aG9kcyBkZWNsYXJlZCBvbiB0aGUgY29udHJvbGxlciAoc2VlIHNvdXJjZSB0YWIpLiBUaGVzZSBtZXRob2RzIGNhblxyXG4gKiBlYXNpbHkgYmUgY2FsbGVkIGZyb20gdGhlIGFuZ3VsYXIgbWFya3VwLiBOb3RpY2UgdGhhdCB0aGUgc2NvcGUgYmVjb21lcyB0aGUgYHRoaXNgIGZvciB0aGVcclxuICogY29udHJvbGxlcidzIGluc3RhbmNlLiBUaGlzIGFsbG93cyBmb3IgZWFzeSBhY2Nlc3MgdG8gdGhlIHZpZXcgZGF0YSBmcm9tIHRoZSBjb250cm9sbGVyLiBBbHNvXHJcbiAqIG5vdGljZSB0aGF0IGFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZCBpbiB0aGUgVmlldyB3aXRob3V0IHRoZSBuZWVkXHJcbiAqIGZvciBhIG1hbnVhbCB1cGRhdGUuIFRoZSBleGFtcGxlIGlzIGluY2x1ZGVkIGluIHR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGJhc2VkIG9uXHJcbiAqIHlvdXIgc3R5bGUgcHJlZmVyZW5jZXMuXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgPHNjcmlwdD5cclxuICAgICAgICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIxKCkge1xyXG4gICAgICAgICAgdGhpcy5uYW1lID0gXCJKb2huIFNtaXRoXCI7XHJcbiAgICAgICAgICB0aGlzLmNvbnRhY3RzID0gW1xyXG4gICAgICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcclxuICAgICAgICAgICAge3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAnam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgYWxlcnQodGhpcy5uYW1lKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbnRhY3RzLnB1c2goe3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xyXG4gICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcclxuICAgICAgICAgIHRoaXMuY29udGFjdHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XHJcbiAgICAgICAgICBjb250YWN0LnR5cGUgPSAncGhvbmUnO1xyXG4gICAgICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIH07XHJcbiAgICAgIDwvc2NyaXB0PlxyXG4gICAgICA8ZGl2IGlkPVwiY3RybC1hcy1leG1wbFwiIG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCI+XHJcbiAgICAgICAgTmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPlxyXG4gICAgICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0dGluZ3MuZ3JlZXQoKVwiPmdyZWV0PC9hPiBdPGJyLz5cclxuICAgICAgICBDb250YWN0OlxyXG4gICAgICAgIDx1bD5cclxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzXCI+XHJcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIj5cclxuICAgICAgICAgICAgICAgPG9wdGlvbj5waG9uZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cImNvbnRhY3QudmFsdWVcIi8+XHJcbiAgICAgICAgICAgIFsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0dGluZ3MuY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2E+XHJcbiAgICAgICAgICAgIHwgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0dGluZ3MucmVtb3ZlQ29udGFjdChjb250YWN0KVwiPlg8L2E+IF1cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+WyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXR0aW5ncy5hZGRDb250YWN0KClcIj5hZGQ8L2E+IF08L2xpPlxyXG4gICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgIDxkb2M6c2NlbmFyaW8+XHJcbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXIgYXMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWFzLWV4bXBsPjppbnB1dCcpLnZhbCgpKS50b0JlKCdKb2huIFNtaXRoJyk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjY3RybC1hcy1leG1wbCBsaTpudGgtY2hpbGQoMSkgaW5wdXQnKS52YWwoKSlcclxuICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcjY3RybC1hcy1leG1wbCBsaTpudGgtY2hpbGQoMikgaW5wdXQnKS52YWwoKSlcclxuICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xyXG5cclxuICAgICAgICAgZWxlbWVudCgnI2N0cmwtYXMtZXhtcGwgbGk6Zmlyc3QgYTpjb250YWlucyhcImNsZWFyXCIpJykuY2xpY2soKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWFzLWV4bXBsIGxpOmZpcnN0IGlucHV0JykudmFsKCkpLnRvQmUoJycpO1xyXG5cclxuICAgICAgICAgZWxlbWVudCgnI2N0cmwtYXMtZXhtcGwgbGk6bGFzdCBhOmNvbnRhaW5zKFwiYWRkXCIpJykuY2xpY2soKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWFzLWV4bXBsIGxpOm50aC1jaGlsZCgzKSBpbnB1dCcpLnZhbCgpKVxyXG4gICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpO1xyXG4gICAgICAgfSk7XHJcbiAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgIDwvZG9jOmV4YW1wbGU+XHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMigkc2NvcGUpIHtcclxuICAgICAgICAgICRzY29wZS5uYW1lID0gXCJKb2huIFNtaXRoXCI7XHJcbiAgICAgICAgICAkc2NvcGUuY29udGFjdHMgPSBbXHJcbiAgICAgICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSxcclxuICAgICAgICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xyXG5cclxuICAgICAgICAgICRzY29wZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIGFsZXJ0KHRoaXMubmFtZSk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICRzY29wZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgdGhpcy5jb250YWN0cy5wdXNoKHt0eXBlOidlbWFpbCcsIHZhbHVlOid5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgJHNjb3BlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHtcclxuICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcclxuICAgICAgICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICRzY29wZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XHJcbiAgICAgICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcclxuICAgICAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgIDxkaXYgaWQ9XCJjdHJsLWV4bXBsXCIgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcIj5cclxuICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+XHJcbiAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJncmVldCgpXCI+Z3JlZXQ8L2E+IF08YnIvPlxyXG4gICAgICAgIENvbnRhY3Q6XHJcbiAgICAgICAgPHVsPlxyXG4gICAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gY29udGFjdHNcIj5cclxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cImNvbnRhY3QudHlwZVwiPlxyXG4gICAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj5cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiLz5cclxuICAgICAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJjbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYT5cclxuICAgICAgICAgICAgfCA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZW1vdmVDb250YWN0KGNvbnRhY3QpXCI+WDwvYT4gXVxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5bIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYT4gXTwvbGk+XHJcbiAgICAgICA8L3VsPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGw+OmlucHV0JykudmFsKCkpLnRvQmUoJ0pvaG4gU21pdGgnKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWV4bXBsIGxpOm50aC1jaGlsZCgxKSBpbnB1dCcpLnZhbCgpKVxyXG4gICAgICAgICAgIC50b0JlKCc0MDggNTU1IDEyMTInKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyNjdHJsLWV4bXBsIGxpOm50aC1jaGlsZCgyKSBpbnB1dCcpLnZhbCgpKVxyXG4gICAgICAgICAgIC50b0JlKCdqb2huLnNtaXRoQGV4YW1wbGUub3JnJyk7XHJcblxyXG4gICAgICAgICBlbGVtZW50KCcjY3RybC1leG1wbCBsaTpmaXJzdCBhOmNvbnRhaW5zKFwiY2xlYXJcIiknKS5jbGljaygpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGwgbGk6Zmlyc3QgaW5wdXQnKS52YWwoKSkudG9CZSgnJyk7XHJcblxyXG4gICAgICAgICBlbGVtZW50KCcjY3RybC1leG1wbCBsaTpsYXN0IGE6Y29udGFpbnMoXCJhZGRcIiknKS5jbGljaygpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnI2N0cmwtZXhtcGwgbGk6bnRoLWNoaWxkKDMpIGlucHV0JykudmFsKCkpXHJcbiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XHJcbiAgICAgICB9KTtcclxuICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuXHJcbiAqL1xyXG52YXIgbmdDb250cm9sbGVyRGlyZWN0aXZlID0gW2Z1bmN0aW9uKCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZTogdHJ1ZSxcclxuICAgIGNvbnRyb2xsZXI6ICdAJ1xyXG4gIH07XHJcbn1dO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ3NwXHJcbiAqIEBwcmlvcml0eSAxMDAwXHJcbiAqXHJcbiAqIEBlbGVtZW50IGh0bWxcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEVuYWJsZXMgW0NTUCAoQ29udGVudCBTZWN1cml0eSBQb2xpY3kpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9TZWN1cml0eS9DU1ApIHN1cHBvcnQuXHJcbiAqIFxyXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSB3aGVuIGRldmVsb3BpbmcgdGhpbmdzIGxpa2UgR29vZ2xlIENocm9tZSBFeHRlbnNpb25zLlxyXG4gKiBcclxuICogQ1NQIGZvcmJpZHMgYXBwcyB0byB1c2UgYGV2YWxgIG9yIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zIChhbW9uZyBvdGhlciB0aGluZ3MpLlxyXG4gKiBGb3IgdXMgdG8gYmUgY29tcGF0aWJsZSwgd2UganVzdCBuZWVkIHRvIGltcGxlbWVudCB0aGUgXCJnZXR0ZXJGblwiIGluICRwYXJzZSB3aXRob3V0IHZpb2xhdGluZ1xyXG4gKiBhbnkgb2YgdGhlc2UgcmVzdHJpY3Rpb25zLlxyXG4gKiBcclxuICogQW5ndWxhckpTIHVzZXMgYEZ1bmN0aW9uKHN0cmluZylgIGdlbmVyYXRlZCBmdW5jdGlvbnMgYXMgYSBzcGVlZCBvcHRpbWl6YXRpb24uIEJ5IGFwcGx5aW5nIGBuZ0NzcGBcclxuICogaXQgaXMgYmUgcG9zc2libGUgdG8gb3B0IGludG8gdGhlIENTUCBjb21wYXRpYmxlIG1vZGUuIFdoZW4gdGhpcyBtb2RlIGlzIG9uIEFuZ3VsYXJKUyB3aWxsXHJcbiAqIGV2YWx1YXRlIGFsbCBleHByZXNzaW9ucyB1cCB0byAzMCUgc2xvd2VyIHRoYW4gaW4gbm9uLUNTUCBtb2RlLCBidXQgbm8gc2VjdXJpdHkgdmlvbGF0aW9ucyB3aWxsXHJcbiAqIGJlIHJhaXNlZC5cclxuICogXHJcbiAqIEluIG9yZGVyIHRvIHVzZSB0aGlzIGZlYXR1cmUgcHV0IGBuZ0NzcGAgZGlyZWN0aXZlIG9uIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGFwcGxpY2F0aW9uLlxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXHJcbiAgIDxwcmU+XHJcbiAgICAgPCFkb2N0eXBlIGh0bWw+XHJcbiAgICAgPGh0bWwgbmctYXBwIG5nLWNzcD5cclxuICAgICAuLi5cclxuICAgICAuLi5cclxuICAgICA8L2h0bWw+XHJcbiAgIDwvcHJlPlxyXG4gKi9cclxuXHJcbnZhciBuZ0NzcERpcmVjdGl2ZSA9IFsnJHNuaWZmZXInLCBmdW5jdGlvbigkc25pZmZlcikge1xyXG4gIHJldHVybiB7XHJcbiAgICBwcmlvcml0eTogMTAwMCxcclxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc25pZmZlci5jc3AgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nQ2xpY2tcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBuZ0NsaWNrIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlblxyXG4gKiBlbGVtZW50IGlzIGNsaWNrZWQuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBjbGljay4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGApXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxkb2M6ZXhhbXBsZT5cclxuICAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cclxuICAgICAgICBJbmNyZW1lbnRcclxuICAgICAgPC9idXR0b24+XHJcbiAgICAgIGNvdW50OiB7e2NvdW50fX1cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2NvdW50JykpLnRvQmUoJzAnKTtcclxuICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgOmJ1dHRvbicpLmNsaWNrKCk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdjb3VudCcpKS50b0JlKCcxJyk7XHJcbiAgICAgICB9KTtcclxuICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuICovXHJcbi8qXHJcbiAqIEEgZGlyZWN0aXZlIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBvbmNsaWNrIGhhbmRsZXJzIHRoYXQgYXJlIGRlZmluZWQgYXMgYW5ndWxhclxyXG4gKiBleHByZXNzaW9ucyBhbmQgYXJlIGNvbXBpbGVkIGFuZCBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgc2NvcGUuXHJcbiAqXHJcbiAqIEV2ZW50cyB0aGF0IGFyZSBoYW5kbGVkIHZpYSB0aGVzZSBoYW5kbGVyIGFyZSBhbHdheXMgY29uZmlndXJlZCBub3QgdG8gcHJvcGFnYXRlIGZ1cnRoZXIuXHJcbiAqL1xyXG52YXIgbmdFdmVudERpcmVjdGl2ZXMgPSB7fTtcclxuZm9yRWFjaChcclxuICAnY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlbW92ZSBtb3VzZWVudGVyIG1vdXNlbGVhdmUga2V5ZG93biBrZXl1cCBrZXlwcmVzcyBzdWJtaXQgZm9jdXMgYmx1cicuc3BsaXQoJyAnKSxcclxuICBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIG5hbWUpO1xyXG4gICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7XHJcbiAgICAgICAgZWxlbWVudC5vbihsb3dlcmNhc2UobmFtZSksIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZuKHNjb3BlLCB7JGV2ZW50OmV2ZW50fSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1dO1xyXG4gIH1cclxuKTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0RibGNsaWNrXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGRibGNsaWNrIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cclxuICogZGJsY2xpY2suIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNlZG93blxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIG5nTW91c2Vkb3duIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlZG93biBldmVudC5cclxuICpcclxuICogQGVsZW1lbnQgQU5ZXHJcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBtb3VzZWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ01vdXNldXBcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXHJcbiAqIG1vdXNldXAuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nTW91c2VvdmVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VvdmVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cclxuICogbW91c2VvdmVyLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcclxuICpcclxuICogQGV4YW1wbGVcclxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZWVudGVyXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWVudGVyIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZW50ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBtb3VzZWVudGVyLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcclxuICpcclxuICogQGV4YW1wbGVcclxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZWxlYXZlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBtb3VzZWxlYXZlLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcclxuICpcclxuICogQGV4YW1wbGVcclxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdNb3VzZW1vdmVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cclxuICpcclxuICogQGVsZW1lbnQgQU5ZXHJcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW1vdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBtb3VzZW1vdmUuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0tleWRvd25cclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXHJcbiAqIGtleWRvd24uIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nS2V5dXBcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleXVwIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cclxuICoga2V5dXAuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nS2V5cHJlc3NcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXByZXNzIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleXByZXNzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cclxuICoga2V5cHJlc3MuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nU3VibWl0XHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBFbmFibGVzIGJpbmRpbmcgYW5ndWxhciBleHByZXNzaW9ucyB0byBvbnN1Ym1pdCBldmVudHMuXHJcbiAqXHJcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXHJcbiAqIHNlcnZlciBhbmQgcmVsb2FkaW5nIHRoZSBjdXJyZW50IHBhZ2UpICoqYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBhbiBgYWN0aW9uYFxyXG4gKiBhdHRyaWJ1dGUqKi5cclxuICpcclxuICogQGVsZW1lbnQgZm9ybVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIChFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgZnVuY3Rpb24gQ3RybCgkc2NvcGUpIHtcclxuICAgICAgICAgICRzY29wZS5saXN0ID0gW107XHJcbiAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7XHJcbiAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHQpIHtcclxuICAgICAgICAgICAgICB0aGlzLmxpc3QucHVzaCh0aGlzLnRleHQpO1xyXG4gICAgICAgICAgICAgIHRoaXMudGV4dCA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgIDxmb3JtIG5nLXN1Ym1pdD1cInN1Ym1pdCgpXCIgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ0ZXh0XCIgbmFtZT1cInRleHRcIiAvPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJzdWJtaXRcIiB2YWx1ZT1cIlN1Ym1pdFwiIC8+XHJcbiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+XHJcbiAgICAgIDwvZm9ybT5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdsaXN0JykpLnRvQmUoJ1tdJyk7XHJcbiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpO1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZygnbGlzdCcpKS50b0JlKCdbXCJoZWxsb1wiXScpO1xyXG4gICAgICAgICBleHBlY3QoaW5wdXQoJ3RleHQnKS52YWwoKSkudG9CZSgnJyk7XHJcbiAgICAgICB9KTtcclxuICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2xpc3QnKSkudG9CZSgnW10nKTtcclxuICAgICAgICAgZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgI3N1Ym1pdCcpLmNsaWNrKCk7XHJcbiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlICNzdWJtaXQnKS5jbGljaygpO1xyXG4gICAgICAgICBleHBlY3QoYmluZGluZygnbGlzdCcpKS50b0JlKCdbXCJoZWxsb1wiXScpO1xyXG4gICAgICAgfSk7XHJcbiAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgIDwvZG9jOmV4YW1wbGU+XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nRm9jdXNcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGZvY3VzIGV2ZW50LlxyXG4gKlxyXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXHJcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXHJcbiAqIGZvY3VzLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcclxuICpcclxuICogQGV4YW1wbGVcclxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0JsdXJcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGJsdXIgZXZlbnQuXHJcbiAqXHJcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JsdXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxyXG4gKiBibHVyLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcclxuICpcclxuICogQGV4YW1wbGVcclxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0lmXHJcbiAqIEByZXN0cmljdCBBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nSWZgIGRpcmVjdGl2ZSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSAoSFRNTClcclxuICogY29uZGl0aW9uYWxseSBiYXNlZCBvbiAqKlwiZmFsc3lcIioqIGFuZCAqKlwidHJ1dGh5XCIqKiB2YWx1ZXMsIHJlc3BlY3RpdmVseSwgZXZhbHVhdGVkIHdpdGhpblxyXG4gKiBhbiB7ZXhwcmVzc2lvbn0uIEluIG90aGVyIHdvcmRzLCBpZiB0aGUgZXhwcmVzc2lvbiBhc3NpZ25lZCB0byAqKm5nSWYgZXZhbHVhdGVzIHRvIGEgZmFsc2VcclxuICogdmFsdWUqKiB0aGVuICoqdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00qKiBhbmQgKippZiB0cnVlKiogdGhlbiAqKmEgY2xvbmUgb2YgdGhlXHJcbiAqIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00qKi5cclxuICpcclxuICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXHJcbiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxyXG4gKiBjYXNlIHdoZW4gdGhpcyBkaWZmZXJlbmNlIGlzIHNpZ25pZmljYW50IGlzIHdoZW4gdXNpbmcgY3NzIHNlbGVjdG9ycyB0aGF0IHJlbHkgb24gYW4gZWxlbWVudCdzXHJcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NIChIVE1MKSwgc3VjaCBhcyB0aGUgYDpmaXJzdC1jaGlsZGAgb3IgYDpsYXN0LWNoaWxkYCBwc2V1ZG8tY2xhc3Nlcy5cclxuICpcclxuICogTm90ZSB0aGF0ICoqd2hlbiBhbiBlbGVtZW50IGlzIHJlbW92ZWQgdXNpbmcgbmdJZiBpdHMgc2NvcGUgaXMgZGVzdHJveWVkKiogYW5kICoqYSBuZXcgc2NvcGVcclxuICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkKiouICBUaGUgc2NvcGUgY3JlYXRlZCB3aXRoaW4gYG5nSWZgIGluaGVyaXRzIGZyb20gXHJcbiAqIGl0cyBwYXJlbnQgc2NvcGUgdXNpbmdcclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9UaGUtTnVhbmNlcy1vZi1TY29wZS1Qcm90b3R5cGFsLUluaGVyaXRhbmNlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2V9LlxyXG4gKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG9cclxuICogYSBqYXZhc2NyaXB0IHByaW1pdGl2ZSBkZWZpbmVkIGluIHRoZSBwYXJlbnQgc2NvcGUuIEluIHRoaXMgY2FzZSBhbnkgbW9kaWZpY2F0aW9ucyBtYWRlIHRvIHRoZVxyXG4gKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLlxyXG4gKlxyXG4gKiBBbHNvLCBgbmdJZmAgcmVjcmVhdGVzIGVsZW1lbnRzIHVzaW5nIHRoZWlyIGNvbXBpbGVkIHN0YXRlLiBBbiBleGFtcGxlIHNjZW5hcmlvIG9mIHRoaXMgYmVoYXZpb3JcclxuICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZSBcclxuICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcclxuICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBuZ0FuaW1hdGUgbW9kdWxlIHRvIGFuaW1hdGUgdGhlICoqZW50ZXIqKlxyXG4gKiBhbmQgKipsZWF2ZSoqIGVmZmVjdHMuXHJcbiAqXHJcbiAqIEBhbmltYXRpb25zXHJcbiAqIGVudGVyIC0gaGFwcGVucyBqdXN0IGFmdGVyIHRoZSBuZ0lmIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgbmdJZiBjb250YWluZXJcclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBuZ0lmIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTVxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHNjb3BlXHJcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxyXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZSAoSFRNTCkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgPGV4YW1wbGUgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PGJyLz5cclxuICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6XHJcbiAgICAgIDxzcGFuIG5nLWlmPVwiY2hlY2tlZFwiIGNsYXNzPVwiYW5pbWF0ZS1pZlwiPlxyXG4gICAgICAgIEknbSByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC5cclxuICAgICAgPC9zcGFuPlxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XHJcbiAgICAgIC5hbmltYXRlLWlmIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xyXG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XHJcbiAgICAgICAgcGFkZGluZzoxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlciwgLmFuaW1hdGUtaWYubmctbGVhdmUge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xyXG4gICAgICAgIC1tb3otdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xyXG4gICAgICAgIC1vLXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcclxuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLFxyXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xyXG4gICAgICAgIG9wYWNpdHk6MDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIubmctZW50ZXItYWN0aXZlLFxyXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XHJcbiAgICAgICAgb3BhY2l0eToxO1xyXG4gICAgICB9XHJcbiAgICA8L2ZpbGU+XHJcbiAgPC9leGFtcGxlPlxyXG4gKi9cclxudmFyIG5nSWZEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxyXG4gICAgcHJpb3JpdHk6IDEwMDAsXHJcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBjb21waWxlOiBmdW5jdGlvbiAoZWxlbWVudCwgYXR0ciwgdHJhbnNjbHVkZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkRWxlbWVudCwgY2hpbGRTY29wZTtcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgaWYgKGNoaWxkRWxlbWVudCkge1xyXG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjaGlsZEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBjaGlsZEVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xyXG4gICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XHJcbiAgICAgICAgICAgIGNoaWxkU2NvcGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodG9Cb29sZWFuKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBjaGlsZFNjb3BlID0gJHNjb3BlLiRuZXcoKTtcclxuICAgICAgICAgICAgdHJhbnNjbHVkZShjaGlsZFNjb3BlLCBmdW5jdGlvbiAoY2xvbmUpIHtcclxuICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQgPSBjbG9uZTtcclxuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgJGVsZW1lbnQucGFyZW50KCksICRlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1dO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZVxyXG4gKiBAcmVzdHJpY3QgRUNBXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cclxuICpcclxuICogS2VlcCBpbiBtaW5kIHRoYXQ6XHJcbiAqXHJcbiAqIC0gICAgYnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlXHJcbiAqICAgICAgYXBwbGljYXRpb24gZG9jdW1lbnQuICBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcclxuICogICAgICAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gaXQuICBUbyBsb2FkIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgYW5kL29yIHByb3RvY29scyxcclxuICogICAgICB5b3UgbWF5IGVpdGhlciBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxyXG4gKiAgICAgIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS4gIFJlZmVyIEFuZ3VsYXIncyB7QGxpbmtcclxuICogICAgICBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nfS5cclxuICogLSAgICBpbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXInc1xyXG4gKiAgICAgIHtAbGluayBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0XHJcbiAqICAgICAgU2FtZSBPcmlnaW4gUG9saWN5fSBhbmQge0BsaW5rIGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvIENyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nXHJcbiAqICAgICAgKENPUlMpfSBwb2xpY3kgYXBwbHkgdGhhdCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLlxyXG4gKiAgICAgIChlLmcuICBuZ0luY2x1ZGUgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxyXG4gKiAgICAgIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzKVxyXG4gKlxyXG4gKiBAYW5pbWF0aW9uc1xyXG4gKiBlbnRlciAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGJyaW5nIG5ldyBjb250ZW50IGludG8gdGhlIGJyb3dzZXIuXHJcbiAqIGxlYXZlIC0gYW5pbWF0aW9uIGlzIHVzZWQgdG8gYW5pbWF0ZSBleGlzdGluZyBjb250ZW50IGF3YXkuXHJcbiAqXHJcbiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cclxuICpcclxuICogQHNjb3BlXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcclxuICogICAgICAgICAgICAgICAgIG1ha2Ugc3VyZSB5b3Ugd3JhcCBpdCBpbiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBvbmxvYWQgRXhwcmVzc2lvbiB0byBldmFsdWF0ZSB3aGVuIGEgbmV3IHBhcnRpYWwgaXMgbG9hZGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxyXG4gKiAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGx9IHRvIHNjcm9sbCB0aGUgdmlld3BvcnQgYWZ0ZXIgdGhlIGNvbnRlbnQgaXMgbG9hZGVkLlxyXG4gKlxyXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cclxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgc2V0IHdpdGhvdXQgdmFsdWUsIGVuYWJsZSBzY3JvbGxpbmcuXHJcbiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgPGV4YW1wbGUgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ3RybFwiPlxyXG4gICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInRlbXBsYXRlXCIgbmctb3B0aW9ucz1cInQubmFtZSBmb3IgdCBpbiB0ZW1wbGF0ZXNcIj5cclxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxyXG4gICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICB1cmwgb2YgdGhlIHRlbXBsYXRlOiA8dHQ+e3t0ZW1wbGF0ZS51cmx9fTwvdHQ+XHJcbiAgICAgICA8aHIvPlxyXG4gICAgICAgPGRpdiBjbGFzcz1cImV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXJcIj5cclxuICAgICAgICAgPGRpdiBjbGFzcz1cImluY2x1ZGUtZXhhbXBsZVwiIG5nLWluY2x1ZGU9XCJ0ZW1wbGF0ZS51cmxcIj48L2Rpdj5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZGl2PlxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxyXG4gICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkge1xyXG4gICAgICAgICRzY29wZS50ZW1wbGF0ZXMgPVxyXG4gICAgICAgICAgWyB7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ31cclxuICAgICAgICAgICwgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9IF07XHJcbiAgICAgICAgJHNjb3BlLnRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlc1swXTtcclxuICAgICAgfVxyXG4gICAgIDwvZmlsZT5cclxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTEuaHRtbFwiPlxyXG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMS5odG1sXHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUyLmh0bWxcIj5cclxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbFxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XHJcbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcclxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xyXG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XHJcbiAgICAgICAgaGVpZ2h0OjQwcHg7XHJcbiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciA+IGRpdiB7XHJcbiAgICAgICAgcGFkZGluZzoxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuaW5jbHVkZS1leGFtcGxlLm5nLWVudGVyLCAuaW5jbHVkZS1leGFtcGxlLm5nLWxlYXZlIHtcclxuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcclxuICAgICAgICAtbW96LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcclxuICAgICAgICAtby10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xyXG5cclxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICAgICAgICB0b3A6MDtcclxuICAgICAgICBsZWZ0OjA7XHJcbiAgICAgICAgcmlnaHQ6MDtcclxuICAgICAgICBib3R0b206MDtcclxuICAgICAgICBkaXNwbGF5OmJsb2NrO1xyXG4gICAgICAgIHBhZGRpbmc6MTBweDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmluY2x1ZGUtZXhhbXBsZS5uZy1lbnRlciB7XHJcbiAgICAgICAgdG9wOi01MHB4O1xyXG4gICAgICB9XHJcbiAgICAgIC5pbmNsdWRlLWV4YW1wbGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcclxuICAgICAgICB0b3A6MDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmluY2x1ZGUtZXhhbXBsZS5uZy1sZWF2ZSB7XHJcbiAgICAgICAgdG9wOjA7XHJcbiAgICAgIH1cclxuICAgICAgLmluY2x1ZGUtZXhhbXBsZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xyXG4gICAgICAgIHRvcDo1MHB4O1xyXG4gICAgICB9XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwic2NlbmFyaW8uanNcIj5cclxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMS5odG1sJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS5cclxuICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xyXG4gICAgICB9KTtcclxuICAgICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlMi5odG1sJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICBzZWxlY3QoJ3RlbXBsYXRlJykub3B0aW9uKCcxJyk7XHJcbiAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLWluY2x1ZGVdJykudGV4dCgpKS5cclxuICAgICAgICAgdG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTIuaHRtbC8pO1xyXG4gICAgICB9KTtcclxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcclxuICAgICAgIHNlbGVjdCgndGVtcGxhdGUnKS5vcHRpb24oJycpO1xyXG4gICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1pbmNsdWRlXScpKS50b0JlKHVuZGVmaW5lZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgPC9maWxlPlxyXG4gIDwvZXhhbXBsZT5cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBldmVudFxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFxyXG4gKiBAZXZlbnRPZiBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlXHJcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogRW1pdHRlZCBldmVyeSB0aW1lIHRoZSBuZ0luY2x1ZGUgY29udGVudCBpcyByZXF1ZXN0ZWQuXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZXZlbnRcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRMb2FkZWRcclxuICogQGV2ZW50T2YgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZVxyXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLlxyXG4gKi9cclxudmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJGFuY2hvclNjcm9sbCcsICckY29tcGlsZScsICckYW5pbWF0ZScsICckc2NlJyxcclxuICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJGFuY2hvclNjcm9sbCwgICAkY29tcGlsZSwgICAkYW5pbWF0ZSwgICAkc2NlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUNBJyxcclxuICAgIHRlcm1pbmFsOiB0cnVlLFxyXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxyXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0ciwgdHJhbnNjbHVzaW9uKSB7XHJcbiAgICAgIHZhciBzcmNFeHAgPSBhdHRyLm5nSW5jbHVkZSB8fCBhdHRyLnNyYyxcclxuICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLFxyXG4gICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDtcclxuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSxcclxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoY3VycmVudFNjb3BlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xyXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoY3VycmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpO1xyXG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHNyY0V4cCksIGZ1bmN0aW9uIG5nSW5jbHVkZVdhdGNoQWN0aW9uKHNyYykge1xyXG4gICAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcclxuXHJcbiAgICAgICAgICBpZiAoc3JjKSB7XHJcbiAgICAgICAgICAgICRodHRwLmdldChzcmMsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCAhPT0gY2hhbmdlQ291bnRlcikgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcclxuXHJcbiAgICAgICAgICAgICAgdHJhbnNjbHVzaW9uKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RWxlbWVudC5odG1sKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGN1cnJlbnRFbGVtZW50LCBudWxsLCAkZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAkY29tcGlsZShjdXJyZW50RWxlbWVudC5jb250ZW50cygpKShjdXJyZW50U2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgKCFhdXRvU2Nyb2xsRXhwIHx8IHNjb3BlLiRldmFsKGF1dG9TY3JvbGxFeHApKSkge1xyXG4gICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnKTtcclxuICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWQnKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ0luaXRcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBgbmdJbml0YCBkaXJlY3RpdmUgc3BlY2lmaWVzIGluaXRpYWxpemF0aW9uIHRhc2tzIHRvIGJlIGV4ZWN1dGVkXHJcbiAqICBiZWZvcmUgdGhlIHRlbXBsYXRlIGVudGVycyBleGVjdXRpb24gbW9kZSBkdXJpbmcgYm9vdHN0cmFwLlxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0luaXQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICAgPGRvYzpleGFtcGxlPlxyXG4gICAgIDxkb2M6c291cmNlPlxyXG4gICAgPGRpdiBuZy1pbml0PVwiZ3JlZXRpbmc9J0hlbGxvJzsgcGVyc29uPSdXb3JsZCdcIj5cclxuICAgICAge3tncmVldGluZ319IHt7cGVyc29ufX0hXHJcbiAgICA8L2Rpdj5cclxuICAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICAgPGRvYzpzY2VuYXJpbz5cclxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgZ3JlZXRpbmcnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ2dyZWV0aW5nJykpLnRvQmUoJ0hlbGxvJyk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdwZXJzb24nKSkudG9CZSgnV29ybGQnKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZG9jOnNjZW5hcmlvPlxyXG4gICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcclxuICBjb21waWxlOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdJbml0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdOb25CaW5kYWJsZVxyXG4gKiBAcHJpb3JpdHkgMTAwMFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogU29tZXRpbWVzIGl0IGlzIG5lY2Vzc2FyeSB0byB3cml0ZSBjb2RlIHdoaWNoIGxvb2tzIGxpa2UgYmluZGluZ3MgYnV0IHdoaWNoIHNob3VsZCBiZSBsZWZ0IGFsb25lXHJcbiAqIGJ5IGFuZ3VsYXIuIFVzZSBgbmdOb25CaW5kYWJsZWAgdG8gbWFrZSBhbmd1bGFyIGlnbm9yZSBhIGNodW5rIG9mIEhUTUwuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBJbiB0aGlzIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBsb2NhdGlvbiB3aGVyZSBhIHNpbXBsZSBiaW5kaW5nIChge3t9fWApIGlzIHByZXNlbnQsIGJ1dCB0aGUgb25lXHJcbiAqIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgIDxkaXY+Tm9ybWFsOiB7ezEgKyAyfX08L2Rpdj5cclxuICAgICAgICA8ZGl2IG5nLW5vbi1iaW5kYWJsZT5JZ25vcmVkOiB7ezEgKyAyfX08L2Rpdj5cclxuICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1ub24tYmluZGFibGUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmJpbmRpbmcoJzEgKyAyJykpLnRvQmUoJzMnKTtcclxuICAgICAgICAgZXhwZWN0KHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmVsZW1lbnQoJ2RpdjpsYXN0JykudGV4dCgpKS5cclxuICAgICAgICAgICB0b01hdGNoKC8xIFxcKyAyLyk7XHJcbiAgICAgICB9KTtcclxuICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nTm9uQmluZGFibGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7IHRlcm1pbmFsOiB0cnVlLCBwcmlvcml0eTogMTAwMCB9KTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1BsdXJhbGl6ZVxyXG4gKiBAcmVzdHJpY3QgRUFcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqICMgT3ZlcnZpZXdcclxuICogYG5nUGx1cmFsaXplYCBpcyBhIGRpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIG1lc3NhZ2VzIGFjY29yZGluZyB0byBlbi1VUyBsb2NhbGl6YXRpb24gcnVsZXMuXHJcbiAqIFRoZXNlIHJ1bGVzIGFyZSBidW5kbGVkIHdpdGggYW5ndWxhci5qcywgYnV0IGNhbiBiZSBvdmVycmlkZGVuXHJcbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxyXG4gKiBieSBzcGVjaWZ5aW5nIHRoZSBtYXBwaW5ncyBiZXR3ZWVuXHJcbiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWxcclxuICogcGx1cmFsIGNhdGVnb3JpZXN9IGFuZCB0aGUgc3RyaW5ncyB0byBiZSBkaXNwbGF5ZWQuXHJcbiAqXHJcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xyXG4gKiBUaGVyZSBhcmUgdHdvXHJcbiAqIHtAbGluayBodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWxcclxuICogcGx1cmFsIGNhdGVnb3JpZXN9IGluIEFuZ3VsYXIncyBkZWZhdWx0IGVuLVVTIGxvY2FsZTogXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxyXG4gKlxyXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXHJcbiAqIGFueSBudW1iZXIgdGhhdCBpcyBub3QgMSksIGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGNhbiBvbmx5IG1hdGNoIG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCB0aGVcclxuICogZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yIFwiM1wiIG1hdGNoZXMgdGhlIG51bWJlciAzLiBUaGVyZSBhcmUgZXhhbXBsZXMgb2YgcGx1cmFsIGNhdGVnb3JpZXNcclxuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cclxuICpcclxuICogIyBDb25maWd1cmluZyBuZ1BsdXJhbGl6ZVxyXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cclxuICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgYXR0cmlidXRlLCBgb2Zmc2V0YC5cclxuICpcclxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXHJcbiAqIEFuZ3VsYXIgZXhwcmVzc2lvbn07IHRoZXNlIGFyZSBldmFsdWF0ZWQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZm9yIGl0cyBib3VuZCB2YWx1ZS5cclxuICpcclxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXHJcbiAqIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQuIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIHNob3VsZCBiZSBhIEpTT04gb2JqZWN0LlxyXG4gKlxyXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcclxuICpcclxuICogPHByZT5cclxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCJcclxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAnMSBwZXJzb24gaXMgdmlld2luZy4nLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne30gcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XHJcbiAqIDwvbmctcGx1cmFsaXplPlxyXG4gKjwvcHJlPlxyXG4gKlxyXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxyXG4gKiBzcGVjaWZ5IHRoaXMgcnVsZSwgMCB3b3VsZCBiZSBtYXRjaGVkIHRvIHRoZSBcIm90aGVyXCIgY2F0ZWdvcnkgYW5kIFwiMCBwZW9wbGUgYXJlIHZpZXdpbmdcIlxyXG4gKiB3b3VsZCBiZSBzaG93biBpbnN0ZWFkIG9mIFwiTm9ib2R5IGlzIHZpZXdpbmdcIi4gWW91IGNhbiBzcGVjaWZ5IGFuIGV4cGxpY2l0IG51bWJlciBydWxlIGZvclxyXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxyXG4gKiBzaG93IFwiYSBkb3plbiBwZW9wbGUgYXJlIHZpZXdpbmdcIi5cclxuICpcclxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyhge31gKSBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGUgbnVtYmVyIHRoYXQgeW91IHdhbnQgc3Vic3RpdHV0ZWRcclxuICogaW50byBwbHVyYWxpemVkIHN0cmluZ3MuIEluIHRoZSBwcmV2aW91cyBleGFtcGxlLCBBbmd1bGFyIHdpbGwgcmVwbGFjZSBge31gIHdpdGhcclxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXHJcbiAqIGZvciA8c3BhbiBuZy1ub24tYmluZGFibGU+e3tudW1iZXJFeHByZXNzaW9ufX08L3NwYW4+LlxyXG4gKlxyXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0XHJcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cclxuICogYSBiZXR0ZXIgdXNlciBleHBlcmllbmNlLiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZiB0aGUgbWVzc2FnZSBcIjQgcGVvcGxlIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIixcclxuICogeW91IG1pZ2h0IGRpc3BsYXkgXCJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIuXHJcbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxyXG4gKiBMZXQncyB0YWtlIGEgbG9vayBhdCBhbiBleGFtcGxlOlxyXG4gKlxyXG4gKiA8cHJlPlxyXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxyXG4gKiAgICAgICAgICAgICAgIHdoZW49XCJ7JzAnOiAnTm9ib2R5IGlzIHZpZXdpbmcuJyxcclxuICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcclxuICogICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICd7e3BlcnNvbjF9fSwge3twZXJzb24yfX0gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyxcclxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XHJcbiAqIDwvbmctcGx1cmFsaXplPlxyXG4gKiA8L3ByZT5cclxuICpcclxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXHJcbiAqIHRocmVlIGV4cGxpY2l0IG51bWJlciBydWxlcyAwLCAxIGFuZCAyLlxyXG4gKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCBcIkpvaG4gaXMgdmlld2luZ1wiIHdpbGwgYmUgc2hvd24uXHJcbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cclxuICogYW4gb2Zmc2V0IG9mIDIgaXMgdGFrZW4gb2ZmIDMsIGFuZCBBbmd1bGFyIHVzZXMgMSB0byBkZWNpZGUgdGhlIHBsdXJhbCBjYXRlZ29yeS5cclxuICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgXCJKb2huLCBNYXJyeSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZ1wiXHJcbiAqIGlzIHNob3duLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgd2hlbiB5b3Ugc3BlY2lmeSBvZmZzZXRzLCB5b3UgbXVzdCBwcm92aWRlIGV4cGxpY2l0IG51bWJlciBydWxlcyBmb3JcclxuICogbnVtYmVycyBmcm9tIDAgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgb2Zmc2V0LiBJZiB5b3UgdXNlIGFuIG9mZnNldCBvZiAzLCBmb3IgZXhhbXBsZSxcclxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcclxuICogcGx1cmFsIGNhdGVnb3JpZXMgXCJvbmVcIiBhbmQgXCJvdGhlclwiLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmRlZCB0by5cclxuICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy5cclxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkge1xyXG4gICAgICAgICAgICAkc2NvcGUucGVyc29uMSA9ICdJZ29yJztcclxuICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjIgPSAnTWlza28nO1xyXG4gICAgICAgICAgICAkc2NvcGUucGVyc29uQ291bnQgPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvc2NyaXB0PlxyXG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkN0cmxcIj5cclxuICAgICAgICAgIFBlcnNvbiAxOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMVwiIHZhbHVlPVwiSWdvclwiIC8+PGJyLz5cclxuICAgICAgICAgIFBlcnNvbiAyOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMlwiIHZhbHVlPVwiTWlza29cIiAvPjxici8+XHJcbiAgICAgICAgICBOdW1iZXIgb2YgUGVvcGxlOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uQ291bnRcIiB2YWx1ZT1cIjFcIiAvPjxici8+XHJcblxyXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxyXG4gICAgICAgICAgV2l0aG91dCBPZmZzZXQ6XHJcbiAgICAgICAgICA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cclxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cclxuXHJcbiAgICAgICAgICA8IS0tLSBFeGFtcGxlIHdpdGggb2Zmc2V0IC0tLT5cclxuICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxyXG4gICAgICAgICAgPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XHJcbiAgICAgICAgICA8L25nLXBsdXJhbGl6ZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBjb3JyZWN0IHBsdXJhbGl6ZWQgc3RyaW5nJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmZpcnN0JykudGV4dCgpKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnMSBwZXJzb24gaXMgdmlld2luZy4nKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJ0lnb3IgaXMgdmlld2luZy4nKTtcclxuXHJcbiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uQ291bnQnKS5lbnRlcignMCcpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpmaXJzdCcpLnRleHQoKSkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XHJcbiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnTm9ib2R5IGlzIHZpZXdpbmcuJyk7XHJcblxyXG4gICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzInKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciBhbmQgTWlza28gYXJlIHZpZXdpbmcuJyk7XHJcblxyXG4gICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzMnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7XHJcblxyXG4gICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbkNvdW50JykuZW50ZXIoJzQnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6Zmlyc3QnKS50ZXh0KCkpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvQmUoJzQgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xyXG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIG5nLXBsdXJhbGl6ZTpsYXN0JykudGV4dCgpKS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9CZSgnSWdvciwgTWlza28gYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdCgnc2hvdWxkIHNob3cgZGF0YS1iaW5kZWQgbmFtZXMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLmlucHV0KCdwZXJzb25Db3VudCcpLmVudGVyKCc0Jyk7XHJcbiAgICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgbmctcGx1cmFsaXplOmxhc3QnKS50ZXh0KCkpLlxyXG4gICAgICAgICAgICAgIHRvQmUoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcclxuXHJcbiAgICAgICAgICB1c2luZygnLmRvYy1leGFtcGxlLWxpdmUnKS5pbnB1dCgncGVyc29uMScpLmVudGVyKCdEaScpO1xyXG4gICAgICAgICAgdXNpbmcoJy5kb2MtZXhhbXBsZS1saXZlJykuaW5wdXQoJ3BlcnNvbjInKS5lbnRlcignVm9qdGEnKTtcclxuICAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBuZy1wbHVyYWxpemU6bGFzdCcpLnRleHQoKSkuXHJcbiAgICAgICAgICAgICAgdG9CZSgnRGksIFZvanRhIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcclxuICAgICAgICB9KTtcclxuICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIG5nUGx1cmFsaXplRGlyZWN0aXZlID0gWyckbG9jYWxlJywgJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSkge1xyXG4gIHZhciBCUkFDRSA9IC97fS9nO1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0VBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgIHZhciBudW1iZXJFeHAgPSBhdHRyLmNvdW50LFxyXG4gICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSwgLy8gd2UgaGF2ZSB7e319IGluIGF0dHJzXHJcbiAgICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLFxyXG4gICAgICAgICAgd2hlbnMgPSBzY29wZS4kZXZhbCh3aGVuRXhwKSB8fCB7fSxcclxuICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXHJcbiAgICAgICAgICBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxyXG4gICAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxyXG4gICAgICAgICAgaXNXaGVuID0gL153aGVuKE1pbnVzKT8oLispJC87XHJcblxyXG4gICAgICBmb3JFYWNoKGF0dHIsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGF0dHJpYnV0ZU5hbWUpIHtcclxuICAgICAgICBpZiAoaXNXaGVuLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcclxuICAgICAgICAgIHdoZW5zW2xvd2VyY2FzZShhdHRyaWJ1dGVOYW1lLnJlcGxhY2UoJ3doZW4nLCAnJykucmVwbGFjZSgnTWludXMnLCAnLScpKV0gPVxyXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoYXR0ci4kYXR0clthdHRyaWJ1dGVOYW1lXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgZm9yRWFjaCh3aGVucywgZnVuY3Rpb24oZXhwcmVzc2lvbiwga2V5KSB7XHJcbiAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9XHJcbiAgICAgICAgICAkaW50ZXJwb2xhdGUoZXhwcmVzc2lvbi5yZXBsYWNlKEJSQUNFLCBzdGFydFN5bWJvbCArIG51bWJlckV4cCArICctJyArXHJcbiAgICAgICAgICAgIG9mZnNldCArIGVuZFN5bWJvbCkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ1BsdXJhbGl6ZVdhdGNoKCkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQoc2NvcGUuJGV2YWwobnVtYmVyRXhwKSk7XHJcblxyXG4gICAgICAgIGlmICghaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgICAvL2lmIGV4cGxpY2l0IG51bWJlciBydWxlIHN1Y2ggYXMgMSwgMiwgMy4uLiBpcyBkZWZpbmVkLCBqdXN0IHVzZSBpdC4gT3RoZXJ3aXNlLFxyXG4gICAgICAgICAgLy9jaGVjayBpdCBhZ2FpbnN0IHBsdXJhbGl6YXRpb24gcnVsZXMgaW4gJGxvY2FsZSBzZXJ2aWNlXHJcbiAgICAgICAgICBpZiAoISh2YWx1ZSBpbiB3aGVucykpIHZhbHVlID0gJGxvY2FsZS5wbHVyYWxDYXQodmFsdWUgLSBvZmZzZXQpO1xyXG4gICAgICAgICAgIHJldHVybiB3aGVuc0V4cEZuc1t2YWx1ZV0oc2NvcGUsIGVsZW1lbnQsIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBmdW5jdGlvbiBuZ1BsdXJhbGl6ZVdhdGNoQWN0aW9uKG5ld1ZhbCkge1xyXG4gICAgICAgIGVsZW1lbnQudGV4dChuZXdWYWwpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcclxuICogaW5zdGFuY2UgZ2V0cyBpdHMgb3duIHNjb3BlLCB3aGVyZSB0aGUgZ2l2ZW4gbG9vcCB2YXJpYWJsZSBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29sbGVjdGlvbiBpdGVtLFxyXG4gKiBhbmQgYCRpbmRleGAgaXMgc2V0IHRvIHRoZSBpdGVtIGluZGV4IG9yIGtleS5cclxuICpcclxuICogU3BlY2lhbCBwcm9wZXJ0aWVzIGFyZSBleHBvc2VkIG9uIHRoZSBsb2NhbCBzY29wZSBvZiBlYWNoIHRlbXBsYXRlIGluc3RhbmNlLCBpbmNsdWRpbmc6XHJcbiAqXHJcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogfC0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxyXG4gKiB8IGAkaW5kZXhgICB8IHtAdHlwZSBudW1iZXJ9ICB8IGl0ZXJhdG9yIG9mZnNldCBvZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCAoMC4ubGVuZ3RoLTEpICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcclxuICogfCBgJG1pZGRsZWAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSByZXBlYXRlZCBlbGVtZW50IGlzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGluIHRoZSBpdGVyYXRvci4gfFxyXG4gKiB8IGAkbGFzdGAgICB8IHtAdHlwZSBib29sZWFufSB8IHRydWUgaWYgdGhlIHJlcGVhdGVkIGVsZW1lbnQgaXMgbGFzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcclxuICogfCBgJG9kZGAgICAgfCB7QHR5cGUgYm9vbGVhbn0gfCB0cnVlIGlmIHRoZSBpdGVyYXRvciBwb3NpdGlvbiBgJGluZGV4YCBpcyBvZGQgKG90aGVyd2lzZSBmYWxzZSkuICAgICAgICAgICAgfFxyXG4gKlxyXG4gKlxyXG4gKiAjIFNwZWNpYWwgcmVwZWF0IHN0YXJ0IGFuZCBlbmQgcG9pbnRzXHJcbiAqIFRvIHJlcGVhdCBhIHNlcmllcyBvZiBlbGVtZW50cyBpbnN0ZWFkIG9mIGp1c3Qgb25lIHBhcmVudCBlbGVtZW50LCBuZ1JlcGVhdCAoYXMgd2VsbCBhcyBvdGhlciBuZyBkaXJlY3RpdmVzKSBzdXBwb3J0cyBleHRlbmRpbmdcclxuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXHJcbiAqIFRoZSAqKm5nLXJlcGVhdC1zdGFydCoqIGRpcmVjdGl2ZSB3b3JrcyB0aGUgc2FtZSBhcyAqKm5nLXJlcGVhdCoqLCBidXQgd2lsbCByZXBlYXQgYWxsIHRoZSBIVE1MIGNvZGUgKGluY2x1ZGluZyB0aGUgdGFnIGl0J3MgZGVmaW5lZCBvbilcclxuICogdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZW5kaW5nIEhUTUwgdGFnIHdoZXJlICoqbmctcmVwZWF0LWVuZCoqIGlzIHBsYWNlZC5cclxuICpcclxuICogVGhlIGV4YW1wbGUgYmVsb3cgbWFrZXMgdXNlIG9mIHRoaXMgZmVhdHVyZTpcclxuICogPHByZT5cclxuICogICA8aGVhZGVyIG5nLXJlcGVhdC1zdGFydD1cIml0ZW0gaW4gaXRlbXNcIj5cclxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XHJcbiAqICAgPC9oZWFkZXI+XHJcbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cclxuICogICAgIEJvZHkge3sgaXRlbSB9fVxyXG4gKiAgIDwvZGl2PlxyXG4gKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD5cclxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XHJcbiAqICAgPC9mb290ZXI+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBBbmQgd2l0aCBhbiBpbnB1dCBvZiB7QHR5cGUgWydBJywnQiddfSBmb3IgdGhlIGl0ZW1zIHZhcmlhYmxlIGluIHRoZSBleGFtcGxlIGFib3ZlLCB0aGUgb3V0cHV0IHdpbGwgZXZhbHVhdGUgdG86XHJcbiAqIDxwcmU+XHJcbiAqICAgPGhlYWRlcj5cclxuICogICAgIEhlYWRlciBBXHJcbiAqICAgPC9oZWFkZXI+XHJcbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cclxuICogICAgIEJvZHkgQVxyXG4gKiAgIDwvZGl2PlxyXG4gKiAgIDxmb290ZXI+XHJcbiAqICAgICBGb290ZXIgQVxyXG4gKiAgIDwvZm9vdGVyPlxyXG4gKiAgIDxoZWFkZXI+XHJcbiAqICAgICBIZWFkZXIgQlxyXG4gKiAgIDwvaGVhZGVyPlxyXG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XHJcbiAqICAgICBCb2R5IEJcclxuICogICA8L2Rpdj5cclxuICogICA8Zm9vdGVyPlxyXG4gKiAgICAgRm9vdGVyIEJcclxuICogICA8L2Zvb3Rlcj5cclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIFRoZSBjdXN0b20gc3RhcnQgYW5kIGVuZCBwb2ludHMgZm9yIG5nUmVwZWF0IGFsc28gc3VwcG9ydCBhbGwgb3RoZXIgSFRNTCBkaXJlY3RpdmUgc3ludGF4IGZsYXZvcnMgcHJvdmlkZWQgaW4gQW5ndWxhckpTIChzdWNoXHJcbiAqIGFzICoqZGF0YS1uZy1yZXBlYXQtc3RhcnQqKiwgKip4LW5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nOnJlcGVhdC1zdGFydCoqKS5cclxuICpcclxuICogQGFuaW1hdGlvbnNcclxuICogZW50ZXIgLSB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyXHJcbiAqIGxlYXZlIC0gd2hlbiBhbiBpdGVtIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlzdCBvciB3aGVuIGFuIGl0ZW0gaXMgZmlsdGVyZWQgb3V0XHJcbiAqIG1vdmUgLSB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZFxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHNjb3BlXHJcbiAqIEBwcmlvcml0eSAxMDAwXHJcbiAqIEBwYXJhbSB7cmVwZWF0X2V4cHJlc3Npb259IG5nUmVwZWF0IFRoZSBleHByZXNzaW9uIGluZGljYXRpbmcgaG93IHRvIGVudW1lcmF0ZSBhIGNvbGxlY3Rpb24uIFRoZXNlXHJcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcclxuICpcclxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uYCDDouKCrOKAnCB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxyXG4gKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXHJcbiAqXHJcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxyXG4gKlxyXG4gKiAgICogYChrZXksIHZhbHVlKSBpbiBleHByZXNzaW9uYCDDouKCrOKAnCB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcclxuICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cclxuICpcclxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cclxuICpcclxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIHRyYWNrIGJ5IHRyYWNraW5nX2V4cHJlc3Npb25gIMOi4oKs4oCcIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGZ1bmN0aW9uXHJcbiAqICAgICB3aGljaCBjYW4gYmUgdXNlZCB0byBhc3NvY2lhdGUgdGhlIG9iamVjdHMgaW4gdGhlIGNvbGxlY3Rpb24gd2l0aCB0aGUgRE9NIGVsZW1lbnRzLiBJZiBubyB0cmFja2luZyBmdW5jdGlvblxyXG4gKiAgICAgaXMgc3BlY2lmaWVkIHRoZSBuZy1yZXBlYXQgYXNzb2NpYXRlcyBlbGVtZW50cyBieSBpZGVudGl0eSBpbiB0aGUgY29sbGVjdGlvbi4gSXQgaXMgYW4gZXJyb3IgdG8gaGF2ZVxyXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBmdW5jdGlvbiB0byByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxyXG4gKiAgICAgbWFwcGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LCB3aGljaCBpcyBub3QgcG9zc2libGUuKSAgRmlsdGVycyBzaG91bGQgYmUgYXBwbGllZCB0byB0aGUgZXhwcmVzc2lvbixcclxuICogICAgIGJlZm9yZSBzcGVjaWZ5aW5nIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cclxuICpcclxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtc2AgaXMgZXF1aXZhbGVudCB0byBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSknLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgRE9NIGVsZW1lbnRzXHJcbiAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXHJcbiAqXHJcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gQSBidWlsdCBpbiBgJGlkKClgIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGFzc2lnbiBhIHVuaXF1ZVxyXG4gKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcclxuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXHJcbiAqICAgICBlbGVtZW50IGluIHRoZSBzYW1lIHdheSBpYW4gdGhlIERPTS5cclxuICpcclxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzXHJcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxyXG4gKiAgICAgcHJvcGVydHkgaXMgc2FtZS5cclxuICpcclxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcclxuICogICAgIHRvIGl0ZW1zIGluIGNvbmp1bmN0aW9uIHdpdGggYSB0cmFja2luZyBleHByZXNzaW9uLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBUaGlzIGV4YW1wbGUgaW5pdGlhbGl6ZXMgdGhlIHNjb3BlIHRvIGEgbGlzdCBvZiBuYW1lcyBhbmRcclxuICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246XHJcbiAgPGV4YW1wbGUgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbXHJcbiAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXHJcbiAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXHJcbiAgICAgICAge25hbWU6J0pvaGFubmEnLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxyXG4gICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxyXG4gICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcclxuICAgICAgICB7bmFtZTonUGV0ZXInLCBhZ2U6OTUsIGdlbmRlcjonYm95J30sXHJcbiAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcclxuICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxyXG4gICAgICAgIHtuYW1lOidQYXRyaWNrJywgYWdlOjQwLCBnZW5kZXI6J2JveSd9LFxyXG4gICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cclxuICAgICAgXVwiPlxyXG4gICAgICAgIEkgaGF2ZSB7e2ZyaWVuZHMubGVuZ3RofX0gZnJpZW5kcy4gVGhleSBhcmU6XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgLz5cclxuICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgZmlsdGVyOnFcIj5cclxuICAgICAgICAgICAgW3t7JGluZGV4ICsgMX19XSB7e2ZyaWVuZC5uYW1lfX0gd2hvIGlzIHt7ZnJpZW5kLmFnZX19IHllYXJzIG9sZC5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cclxuICAgICAgLmV4YW1wbGUtYW5pbWF0ZS1jb250YWluZXIge1xyXG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XHJcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcclxuICAgICAgICBsaXN0LXN0eWxlOm5vbmU7XHJcbiAgICAgICAgbWFyZ2luOjA7XHJcbiAgICAgICAgcGFkZGluZzowO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lciA+IGxpIHtcclxuICAgICAgICBwYWRkaW5nOjEwcHg7XHJcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIsXHJcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSxcclxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XHJcbiAgICAgICAgLW1vei10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICAtby10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgfVxyXG5cclxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyIHtcclxuICAgICAgICBsaW5lLWhlaWdodDowO1xyXG4gICAgICAgIG9wYWNpdHk6MDtcclxuICAgICAgICBwYWRkaW5nLXRvcDowO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOjA7XHJcbiAgICAgIH1cclxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6MjBweDtcclxuICAgICAgICBvcGFjaXR5OjE7XHJcbiAgICAgICAgcGFkZGluZzoxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUge1xyXG4gICAgICAgIG9wYWNpdHk6MTtcclxuICAgICAgICBsaW5lLWhlaWdodDoyMHB4O1xyXG4gICAgICAgIHBhZGRpbmc6MTBweDtcclxuICAgICAgfVxyXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcclxuICAgICAgICBvcGFjaXR5OjA7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6MDtcclxuICAgICAgICBwYWRkaW5nLXRvcDowO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1tb3ZlIHsgfVxyXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZS5uZy1tb3ZlLWFjdGl2ZSB7IH1cclxuICAgIDwvZmlsZT5cclxuICAgIDxmaWxlIG5hbWU9XCJzY2VuYXJpby5qc1wiPlxyXG4gICAgICAgaXQoJ3Nob3VsZCByZW5kZXIgaW5pdGlhbCBkYXRhIHNldCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICB2YXIgciA9IHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLnJlcGVhdGVyKCd1bCBsaScpO1xyXG4gICAgICAgICBleHBlY3Qoci5jb3VudCgpKS50b0JlKDEwKTtcclxuICAgICAgICAgZXhwZWN0KHIucm93KDApKS50b0VxdWFsKFtcIjFcIixcIkpvaG5cIixcIjI1XCJdKTtcclxuICAgICAgICAgZXhwZWN0KHIucm93KDEpKS50b0VxdWFsKFtcIjJcIixcIkplc3NpZVwiLFwiMzBcIl0pO1xyXG4gICAgICAgICBleHBlY3Qoci5yb3coOSkpLnRvRXF1YWwoW1wiMTBcIixcIlNhbWFudGhhXCIsXCI2MFwiXSk7XHJcbiAgICAgICAgIGV4cGVjdChiaW5kaW5nKCdmcmllbmRzLmxlbmd0aCcpKS50b0JlKFwiMTBcIik7XHJcbiAgICAgICB9KTtcclxuXHJcbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICB2YXIgciA9IHVzaW5nKCcuZG9jLWV4YW1wbGUtbGl2ZScpLnJlcGVhdGVyKCd1bCBsaScpO1xyXG4gICAgICAgICBleHBlY3Qoci5jb3VudCgpKS50b0JlKDEwKTtcclxuXHJcbiAgICAgICAgIGlucHV0KCdxJykuZW50ZXIoJ21hJyk7XHJcblxyXG4gICAgICAgICBleHBlY3Qoci5jb3VudCgpKS50b0JlKDIpO1xyXG4gICAgICAgICBleHBlY3Qoci5yb3coMCkpLnRvRXF1YWwoW1wiMVwiLFwiTWFyeVwiLFwiMjhcIl0pO1xyXG4gICAgICAgICBleHBlY3Qoci5yb3coMSkpLnRvRXF1YWwoW1wiMlwiLFwiU2FtYW50aGFcIixcIjYwXCJdKTtcclxuICAgICAgIH0pO1xyXG4gICAgICA8L2ZpbGU+XHJcbiAgICA8L2V4YW1wbGU+XHJcbiAqL1xyXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUpIHtcclxuICB2YXIgTkdfUkVNT1ZFRCA9ICckJE5HX1JFTU9WRUQnO1xyXG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcclxuICByZXR1cm4ge1xyXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxyXG4gICAgcHJpb3JpdHk6IDEwMDAsXHJcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcclxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIsIGxpbmtlcikge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIpe1xyXG4gICAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XHJcbiAgICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooLispXFxzK2luXFxzKyguKj8pXFxzKihcXHMrdHJhY2tcXHMrYnlcXHMrKC4rKVxccyopPyQvKSxcclxuICAgICAgICAgIHRyYWNrQnlFeHAsIHRyYWNrQnlFeHBHZXR0ZXIsIHRyYWNrQnlJZEZuLCB0cmFja0J5SWRBcnJheUZuLCB0cmFja0J5SWRPYmpGbiwgbGhzLCByaHMsIHZhbHVlSWRlbnRpZmllciwga2V5SWRlbnRpZmllcixcclxuICAgICAgICAgIGhhc2hGbkxvY2FscyA9IHskaWQ6IGhhc2hLZXl9O1xyXG5cclxuICAgICAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fWyB0cmFjayBieSBfaWRfXScgYnV0IGdvdCAnezB9Jy5cIixcclxuICAgICAgICAgICAgZXhwcmVzc2lvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaHMgPSBtYXRjaFsxXTtcclxuICAgICAgICByaHMgPSBtYXRjaFsyXTtcclxuICAgICAgICB0cmFja0J5RXhwID0gbWF0Y2hbNF07XHJcblxyXG4gICAgICAgIGlmICh0cmFja0J5RXhwKSB7XHJcbiAgICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApO1xyXG4gICAgICAgICAgdHJhY2tCeUlkRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICAvLyBhc3NpZ24ga2V5LCB2YWx1ZSwgYW5kICRpbmRleCB0byB0aGUgbG9jYWxzIHNvIHRoYXQgdGhleSBjYW4gYmUgdXNlZCBpbiBoYXNoIGZ1bmN0aW9uc1xyXG4gICAgICAgICAgICBpZiAoa2V5SWRlbnRpZmllcikgaGFzaEZuTG9jYWxzW2tleUlkZW50aWZpZXJdID0ga2V5O1xyXG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHMuJGluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFja0J5RXhwR2V0dGVyKCRzY29wZSwgaGFzaEZuTG9jYWxzKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRyYWNrQnlJZEFycmF5Rm4gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRyYWNrQnlJZE9iakZuID0gZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihbXFwkXFx3XSspfFxcKChbXFwkXFx3XSspXFxzKixcXHMqKFtcXCRcXHddKylcXCkpJC8pO1xyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpaWRleHAnLCBcIidfaXRlbV8nIGluICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBzaG91bGQgYmUgYW4gaWRlbnRpZmllciBvciAnKF9rZXlfLCBfdmFsdWVfKScgZXhwcmVzc2lvbiwgYnV0IGdvdCAnezB9Jy5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZUlkZW50aWZpZXIgPSBtYXRjaFszXSB8fCBtYXRjaFsxXTtcclxuICAgICAgICBrZXlJZGVudGlmaWVyID0gbWF0Y2hbMl07XHJcblxyXG4gICAgICAgIC8vIFN0b3JlIGEgbGlzdCBvZiBlbGVtZW50cyBmcm9tIHByZXZpb3VzIHJ1bi4gVGhpcyBpcyBhIGhhc2ggd2hlcmUga2V5IGlzIHRoZSBpdGVtIGZyb20gdGhlXHJcbiAgICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGVcclxuICAgICAgICAvLyAgIC0gZWxlbWVudDogcHJldmlvdXMgZWxlbWVudC5cclxuICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uXHJcbiAgICAgICAgdmFyIGxhc3RCbG9ja01hcCA9IHt9O1xyXG5cclxuICAgICAgICAvL3dhdGNoIHByb3BzXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24ocmhzLCBmdW5jdGlvbiBuZ1JlcGVhdEFjdGlvbihjb2xsZWN0aW9uKXtcclxuICAgICAgICAgIHZhciBpbmRleCwgbGVuZ3RoLFxyXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgbm9kZVxyXG4gICAgICAgICAgICAgIG5leHROb2RlLFxyXG4gICAgICAgICAgICAgIC8vIFNhbWUgYXMgbGFzdEJsb2NrTWFwIGJ1dCBpdCBoYXMgdGhlIGN1cnJlbnQgc3RhdGUuIEl0IHdpbGwgYmVjb21lIHRoZVxyXG4gICAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBvbiB0aGUgbmV4dCBpdGVyYXRpb24uXHJcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwID0ge30sXHJcbiAgICAgICAgICAgICAgYXJyYXlMZW5ndGgsXHJcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSxcclxuICAgICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgdHJhY2tCeUlkLFxyXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxyXG4gICAgICAgICAgICAgIGJsb2NrLCAgICAgICAvLyBsYXN0IG9iamVjdCBpbmZvcm1hdGlvbiB7c2NvcGUsIGVsZW1lbnQsIGlkfVxyXG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyID0gW107XHJcblxyXG5cclxuICAgICAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IGNvbGxlY3Rpb247XHJcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRm4gfHwgdHJhY2tCeUlkT2JqRm47XHJcbiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBzb3J0IHRoZW0gYW5kIHVzZSB0byBkZXRlcm1pbmUgb3JkZXIgb2YgaXRlcmF0aW9uIG92ZXIgb2JqIHByb3BzXHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGNvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbi5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5jaGFyQXQoMCkgIT0gJyQnKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnNvcnQoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBhcnJheUxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAvLyBsb2NhdGUgZXhpc3RpbmcgaXRlbXNcclxuICAgICAgICAgIGxlbmd0aCA9IG5leHRCbG9ja09yZGVyLmxlbmd0aCA9IGNvbGxlY3Rpb25LZXlzLmxlbmd0aDtcclxuICAgICAgICAgIGZvcihpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xyXG4gICAgICAgICAgIHZhbHVlID0gY29sbGVjdGlvbltrZXldO1xyXG4gICAgICAgICAgIHRyYWNrQnlJZCA9IHRyYWNrQnlJZEZuKGtleSwgdmFsdWUsIGluZGV4KTtcclxuICAgICAgICAgICBpZihsYXN0QmxvY2tNYXAuaGFzT3duUHJvcGVydHkodHJhY2tCeUlkKSkge1xyXG4gICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXVxyXG4gICAgICAgICAgICAgZGVsZXRlIGxhc3RCbG9ja01hcFt0cmFja0J5SWRdO1xyXG4gICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jaztcclxuICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IGJsb2NrO1xyXG4gICAgICAgICAgIH0gZWxzZSBpZiAobmV4dEJsb2NrTWFwLmhhc093blByb3BlcnR5KHRyYWNrQnlJZCkpIHtcclxuICAgICAgICAgICAgIC8vIHJlc3RvcmUgbGFzdEJsb2NrTWFwXHJcbiAgICAgICAgICAgICBmb3JFYWNoKG5leHRCbG9ja09yZGVyLCBmdW5jdGlvbihibG9jaykge1xyXG4gICAgICAgICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2suc3RhcnROb2RlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XHJcbiAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBkdXBsaWNhdGUgYW5kIHdlIG5lZWQgdG8gdGhyb3cgYW4gZXJyb3JcclxuICAgICAgICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdkdXBlcycsIFwiRHVwbGljYXRlcyBpbiBhIHJlcGVhdGVyIGFyZSBub3QgYWxsb3dlZC4gVXNlICd0cmFjayBieScgZXhwcmVzc2lvbiB0byBzcGVjaWZ5IHVuaXF1ZSBrZXlzLiBSZXBlYXRlcjogezB9LCBEdXBsaWNhdGUga2V5OiB7MX1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sICAgICAgIHRyYWNrQnlJZCk7XHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgIC8vIG5ldyBuZXZlciBiZWZvcmUgc2VlbiBibG9ja1xyXG4gICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0geyBpZDogdHJhY2tCeUlkIH07XHJcbiAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IGZhbHNlO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZyBpdGVtc1xyXG4gICAgICAgICAgZm9yIChrZXkgaW4gbGFzdEJsb2NrTWFwKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0QmxvY2tNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW2tleV07XHJcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoYmxvY2suZWxlbWVudHMpO1xyXG4gICAgICAgICAgICAgIGZvckVhY2goYmxvY2suZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHsgZWxlbWVudFtOR19SRU1PVkVEXSA9IHRydWV9KTtcclxuICAgICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbClcclxuICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBjb2xsZWN0aW9uS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGtleSA9IChjb2xsZWN0aW9uID09PSBjb2xsZWN0aW9uS2V5cykgPyBpbmRleCA6IGNvbGxlY3Rpb25LZXlzW2luZGV4XTtcclxuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XHJcbiAgICAgICAgICAgIGJsb2NrID0gbmV4dEJsb2NrT3JkZXJbaW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJsb2NrLnN0YXJ0Tm9kZSkge1xyXG4gICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlXHJcbiAgICAgICAgICAgICAgLy8gYXNzb2NpYXRlZCBzY29wZS9lbGVtZW50XHJcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IGJsb2NrLnNjb3BlO1xyXG5cclxuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHByZXZpb3VzTm9kZTtcclxuICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgIH0gd2hpbGUobmV4dE5vZGUgJiYgbmV4dE5vZGVbTkdfUkVNT1ZFRF0pO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoYmxvY2suc3RhcnROb2RlID09IG5leHROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXHJcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5tb3ZlKGJsb2NrLmVsZW1lbnRzLCBudWxsLCBqcUxpdGUocHJldmlvdXNOb2RlKSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGJsb2NrLmVuZE5vZGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dFxyXG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSAkc2NvcGUuJG5ldygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGlsZFNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGtleUlkZW50aWZpZXIpIGNoaWxkU2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XHJcbiAgICAgICAgICAgIGNoaWxkU2NvcGUuJGluZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgIGNoaWxkU2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTtcclxuICAgICAgICAgICAgY2hpbGRTY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICBjaGlsZFNjb3BlLiRtaWRkbGUgPSAhKGNoaWxkU2NvcGUuJGZpcnN0IHx8IGNoaWxkU2NvcGUuJGxhc3QpO1xyXG4gICAgICAgICAgICBjaGlsZFNjb3BlLiRvZGQgPSAhKGNoaWxkU2NvcGUuJGV2ZW4gPSBpbmRleCUyPT0wKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghYmxvY2suc3RhcnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgbGlua2VyKGNoaWxkU2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XHJcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xyXG4gICAgICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gY2xvbmU7XHJcbiAgICAgICAgICAgICAgICBibG9jay5zY29wZSA9IGNoaWxkU2NvcGU7XHJcbiAgICAgICAgICAgICAgICBibG9jay5zdGFydE5vZGUgPSBjbG9uZVswXTtcclxuICAgICAgICAgICAgICAgIGJsb2NrLmVsZW1lbnRzID0gY2xvbmU7XHJcbiAgICAgICAgICAgICAgICBibG9jay5lbmROb2RlID0gY2xvbmVbY2xvbmUubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxhc3RCbG9ja01hcCA9IG5leHRCbG9ja01hcDtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1Nob3dcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3MgYW5kIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgY29uZGl0aW9uYWxseSBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxyXG4gKiBwcm92aWRlZCB0byB0aGUgbmdTaG93IGF0dHJpYnV0ZS4gVGhlIHNob3cgYW5kIGhpZGUgbWVjaGFuaXNtIGlzIGEgYWNoaWV2ZWQgYnkgcmVtb3ZpbmcgYW5kIGFkZGluZ1xyXG4gKiB0aGUgYG5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LiBUaGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYSBwcmVkZWZpbmVkIENTUyBjbGFzcyBwcmVzZW50XHJcbiAqIGluIEFuZ3VsYXJKUyB3aGljaCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuICFpbXBvcnRhbnQgZmxhZykuXHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XHJcbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIj48L2Rpdj5cclxuICpcclxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XHJcbiAqIDxkaXYgbmctc2hvdz1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIFdoZW4gdGhlIG5nU2hvdyBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBmYWxzZSB0aGVuIHRoZSBuZy1oaWRlIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3MgYXR0cmlidXRlXHJcbiAqIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnVlLCB0aGUgbmctaGlkZSBDU1MgY2xhc3MgaXMgcmVtb3ZlZFxyXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXHJcbiAqXHJcbiAqICMjIFdoeSBpcyAhaW1wb3J0YW50IHVzZWQ/XHJcbiAqXHJcbiAqIFlvdSBtYXkgYmUgd29uZGVyaW5nIHdoeSAhaW1wb3J0YW50IGlzIHVzZWQgZm9yIHRoZSAubmctaGlkZSBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxyXG4gKiBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXMgc2ltcGxlXHJcbiAqIGFzIGNoYW5naW5nIHRoZSBkaXNwbGF5IHN0eWxlIG9uIGEgSFRNTCBsaXN0IGl0ZW0gd291bGQgbWFrZSBoaWRkZW4gZWxlbWVudHMgYXBwZWFyIHZpc2libGUuXHJcbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxyXG4gKlxyXG4gKiBCeSB1c2luZyAhaW1wb3J0YW50LCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlbiBDU1Mgc2VsZWN0b3JcclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXHJcbiAqIHN0eWxpbmcgdG8gY2hhbmdlIGhvdyB0byBoaWRlIGFuIGVsZW1lbnQgdGhlbiBpdCBpcyBqdXN0IGEgbWF0dGVyIG9mIHVzaW5nICFpbXBvcnRhbnQgaW4gdGhlaXIgb3duIENTUyBjb2RlLlxyXG4gKlxyXG4gKiAjIyMgT3ZlcnJpZGluZyAubmctaGlkZVxyXG4gKlxyXG4gKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnlcclxuICogcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSAubmctaGlkZSBjbGFzcyBpbiBDU1M6XHJcbiAqIDxwcmU+XHJcbiAqIC5uZy1oaWRlIHtcclxuICogICAvLyFhbm5vdGF0ZSBDU1MgU3BlY2lmaWNpdHl8Tm90IHRvIHdvcnJ5LCB0aGlzIHdpbGwgb3ZlcnJpZGUgdGhlIEFuZ3VsYXJKUyBkZWZhdWx0Li4uXHJcbiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7XHJcbiAqXHJcbiAqICAgLy90aGlzIGlzIGp1c3QgYW5vdGhlciBmb3JtIG9mIGhpZGluZyBhbiBlbGVtZW50XHJcbiAqICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAqICAgdG9wOi05OTk5cHg7XHJcbiAqICAgbGVmdDotOTk5OXB4O1xyXG4gKiB9XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBKdXN0IHJlbWVtYmVyIHRvIGluY2x1ZGUgdGhlIGltcG9ydGFudCBmbGFnIHNvIHRoZSBDU1Mgb3ZlcnJpZGUgd2lsbCBmdW5jdGlvbi5cclxuICpcclxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBuZ1Nob3dcclxuICpcclxuICogQW5pbWF0aW9ucyBpbiBuZ1Nob3cvbmdIaWRlIHdvcmsgd2l0aCB0aGUgc2hvdyBhbmQgaGlkZSBldmVudHMgdGhhdCBhcmUgdHJpZ2dlcmVkIHdoZW4gdGhlIGRpcmVjdGl2ZSBleHByZXNzaW9uXHJcbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBzaW1pbGFyIHRvIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzLCBob3dldmVyLCB0aGVcclxuICogb25seSBkaWZmZXJlbmNlIGlzIHRoYXQgeW91IG11c3QgYWxzbyBpbmNsdWRlIHRoZSAhaW1wb3J0YW50IGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXkgcHJvcGVydHkgc29cclxuICogdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLlxyXG4gKlxyXG4gKiA8cHJlPlxyXG4gKiAvL1xyXG4gKiAvL2Egd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZVxyXG4gKiAvL1xyXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xyXG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xyXG4gKiAgIGRpc3BsYXk6YmxvY2shaW1wb3J0YW50O1xyXG4gKiB9XHJcbiAqXHJcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkIHsgLi4uIH1cclxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cclxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxyXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZS5uZy1oaWRlLXJlbW92ZS1hY3RpdmUgeyAuLi4gfVxyXG4gKiA8L3ByZT5cclxuICpcclxuICogQGFuaW1hdGlvbnNcclxuICogYWRkQ2xhc3M6IC5uZy1oaWRlIC0gaGFwcGVucyBhZnRlciB0aGUgbmdTaG93IGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCB0aGUganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXHJcbiAqIHJlbW92ZUNsYXNzOiAubmctaGlkZSAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU2hvdyBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxyXG4gKlxyXG4gKiBAZWxlbWVudCBBTllcclxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Nob3cgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeVxyXG4gKiAgICAgdGhlbiB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gIDxleGFtcGxlIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XHJcbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgU2hvdzpcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLXRodW1icy11cFwiPjwvc3Bhbj4gSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdj5cclxuICAgICAgICBIaWRlOlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvd1wiIG5nLWhpZGU9XCJjaGVja2VkXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24tdGh1bWJzLWRvd25cIj48L3NwYW4+IEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cclxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlLWFkZCwgXHJcbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1yZW1vdmUge1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XHJcbiAgICAgICAgLW1vei10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICAtby10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICBkaXNwbGF5OmJsb2NrIWltcG9ydGFudDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUsXHJcbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1yZW1vdmUge1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OjA7XHJcbiAgICAgICAgb3BhY2l0eTowO1xyXG4gICAgICAgIHBhZGRpbmc6MCAxMHB4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLFxyXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6MjBweDtcclxuICAgICAgICBvcGFjaXR5OjE7XHJcbiAgICAgICAgcGFkZGluZzoxMHB4O1xyXG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XHJcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xyXG4gICAgICAgIHBhZGRpbmc6MTBweDtcclxuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xyXG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XHJcbiAgICAgIH1cclxuICAgIDwvZmlsZT5cclxuICAgIDxmaWxlIG5hbWU9XCJzY2VuYXJpby5qc1wiPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zaG93IC8gbmctaGlkZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpmaXJzdDpoaWRkZW4nKS5jb3VudCgpKS50b0VxdWFsKDEpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbjpsYXN0OnZpc2libGUnKS5jb3VudCgpKS50b0VxdWFsKDEpO1xyXG5cclxuICAgICAgICAgaW5wdXQoJ2NoZWNrZWQnKS5jaGVjaygpO1xyXG5cclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIHNwYW46Zmlyc3Q6dmlzaWJsZScpLmNvdW50KCkpLnRvRXF1YWwoMSk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuOmxhc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTtcclxuICAgICAgIH0pO1xyXG4gICAgPC9maWxlPlxyXG4gIDwvZXhhbXBsZT5cclxuICovXHJcbnZhciBuZ1Nob3dEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpe1xyXG4gICAgICAkYW5pbWF0ZVt0b0Jvb2xlYW4odmFsdWUpID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsICduZy1oaWRlJyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XTtcclxuXHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdIaWRlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nSGlkZWAgZGlyZWN0aXZlIHNob3dzIGFuZCBoaWRlcyB0aGUgZ2l2ZW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkgYmFzZWQgb24gdGhlIGV4cHJlc3Npb25cclxuICogcHJvdmlkZWQgdG8gdGhlIG5nSGlkZSBhdHRyaWJ1dGUuIFRoZSBzaG93IGFuZCBoaWRlIG1lY2hhbmlzbSBpcyBhIGFjaGlldmVkIGJ5IHJlbW92aW5nIGFuZCBhZGRpbmdcclxuICogdGhlIGBuZy1oaWRlYCBDU1MgY2xhc3Mgb250byB0aGUgZWxlbWVudC4gVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGEgcHJlZGVmaW5lZCBDU1MgY2xhc3MgcHJlc2VudFxyXG4gKiBpbiBBbmd1bGFySlMgd2hpY2ggc2V0cyB0aGUgZGlzcGxheSBzdHlsZSB0byBub25lICh1c2luZyBhbiAhaW1wb3J0YW50IGZsYWcpLlxyXG4gKlxyXG4gKiA8cHJlPlxyXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XHJcbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIj48L2Rpdj5cclxuICpcclxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxyXG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBXaGVuIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZSB0aGVuIHRoZSAubmctaGlkZSBDU1MgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZVxyXG4gKiBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gZmFsc2UsIHRoZSBuZy1oaWRlIENTUyBjbGFzcyBpcyByZW1vdmVkXHJcbiAqIGZyb20gdGhlIGVsZW1lbnQgY2F1c2luZyB0aGUgZWxlbWVudCBub3QgdG8gYXBwZWFyIGhpZGRlbi5cclxuICpcclxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cclxuICpcclxuICogWW91IG1heSBiZSB3b25kZXJpbmcgd2h5ICFpbXBvcnRhbnQgaXMgdXNlZCBmb3IgdGhlIC5uZy1oaWRlIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgLm5nLWhpZGVgIHNlbGVjdG9yXHJcbiAqIGNhbiBiZSBlYXNpbHkgb3ZlcnJpZGRlbiBieSBoZWF2aWVyIHNlbGVjdG9ycy4gRm9yIGV4YW1wbGUsIHNvbWV0aGluZyBhcyBzaW1wbGVcclxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cclxuICogVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXHJcbiAqXHJcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxyXG4gKiBzcGVjaWZpY2l0eSAod2hlbiAhaW1wb3J0YW50IGlzbid0IHVzZWQgd2l0aCBhbnkgY29uZmxpY3Rpbmcgc3R5bGVzKS4gSWYgYSBkZXZlbG9wZXIgY2hvb3NlcyB0byBvdmVycmlkZSB0aGVcclxuICogc3R5bGluZyB0byBjaGFuZ2UgaG93IHRvIGhpZGUgYW4gZWxlbWVudCB0aGVuIGl0IGlzIGp1c3QgYSBtYXR0ZXIgb2YgdXNpbmcgIWltcG9ydGFudCBpbiB0aGVpciBvd24gQ1NTIGNvZGUuXHJcbiAqXHJcbiAqICMjIyBPdmVycmlkaW5nIC5uZy1oaWRlXHJcbiAqXHJcbiAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGUgaGlkZSBiZWhhdmlvciB3aXRoIG5nU2hvdy9uZ0hpZGUgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieVxyXG4gKiByZXN0YXRpbmcgdGhlIHN0eWxlcyBmb3IgdGhlIC5uZy1oaWRlIGNsYXNzIGluIENTUzpcclxuICogPHByZT5cclxuICogLm5nLWhpZGUge1xyXG4gKiAgIC8vIWFubm90YXRlIENTUyBTcGVjaWZpY2l0eXxOb3QgdG8gd29ycnksIHRoaXMgd2lsbCBvdmVycmlkZSB0aGUgQW5ndWxhckpTIGRlZmF1bHQuLi5cclxuICogICBkaXNwbGF5OmJsb2NrIWltcG9ydGFudDtcclxuICpcclxuICogICAvL3RoaXMgaXMganVzdCBhbm90aGVyIGZvcm0gb2YgaGlkaW5nIGFuIGVsZW1lbnRcclxuICogICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICogICB0b3A6LTk5OTlweDtcclxuICogICBsZWZ0Oi05OTk5cHg7XHJcbiAqIH1cclxuICogPC9wcmU+XHJcbiAqXHJcbiAqIEp1c3QgcmVtZW1iZXIgdG8gaW5jbHVkZSB0aGUgaW1wb3J0YW50IGZsYWcgc28gdGhlIENTUyBvdmVycmlkZSB3aWxsIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiAjIyBBIG5vdGUgYWJvdXQgYW5pbWF0aW9ucyB3aXRoIG5nSGlkZVxyXG4gKlxyXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cclxuICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIHNpbWlsYXIgdG8gdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MsIGhvd2V2ZXIsIHRoZVxyXG4gKiBvbmx5IGRpZmZlcmVuY2UgaXMgdGhhdCB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlICFpbXBvcnRhbnQgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheSBwcm9wZXJ0eSBzb1xyXG4gKiB0aGF0IHlvdSBjYW4gcGVyZm9ybSBhbiBhbmltYXRpb24gd2hlbiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gZHVyaW5nIHRoZSB0aW1lIG9mIHRoZSBhbmltYXRpb24uXHJcbiAqXHJcbiAqIDxwcmU+XHJcbiAqIC8vXHJcbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXHJcbiAqIC8vXHJcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XHJcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XHJcbiAqICAgZGlzcGxheTpibG9jayFpbXBvcnRhbnQ7XHJcbiAqIH1cclxuICpcclxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxyXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxyXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7IC4uLiB9XHJcbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBAYW5pbWF0aW9uc1xyXG4gKiByZW1vdmVDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlblxyXG4gKiBhZGRDbGFzczogLm5nLWhpZGUgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ0hpZGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW5cclxuICogICAgIHRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiByZXNwZWN0aXZlbHkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgPGV4YW1wbGUgYW5pbWF0aW9ucz1cInRydWVcIj5cclxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XHJcbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PGJyLz5cclxuICAgICAgPGRpdj5cclxuICAgICAgICBTaG93OlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZVwiIG5nLXNob3c9XCJjaGVja2VkXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24tdGh1bWJzLXVwXCI+PC9zcGFuPiBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIEhpZGU6XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgYW5pbWF0ZS1oaWRlXCIgbmctaGlkZT1cImNoZWNrZWRcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi10aHVtYnMtZG93blwiPjwvc3Bhbj4gSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZmlsZT5cclxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxyXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUtYWRkLCBcclxuICAgICAgLmFuaW1hdGUtaGlkZS5uZy1oaWRlLXJlbW92ZSB7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcclxuICAgICAgICAtbW96LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xyXG4gICAgICAgIC1vLXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xyXG4gICAgICAgIGRpc3BsYXk6YmxvY2shaW1wb3J0YW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSxcclxuICAgICAgLmFuaW1hdGUtaGlkZS5uZy1oaWRlLXJlbW92ZSB7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6MDtcclxuICAgICAgICBvcGFjaXR5OjA7XHJcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZS1hZGQsXHJcbiAgICAgIC5hbmltYXRlLWhpZGUubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcclxuICAgICAgICBsaW5lLWhlaWdodDoyMHB4O1xyXG4gICAgICAgIG9wYWNpdHk6MTtcclxuICAgICAgICBwYWRkaW5nOjEwcHg7XHJcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcclxuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuY2hlY2stZWxlbWVudCB7XHJcbiAgICAgICAgcGFkZGluZzoxMHB4O1xyXG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XHJcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcclxuICAgICAgfVxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cInNjZW5hcmlvLmpzXCI+XHJcbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAuY2hlY2stZWxlbWVudDpmaXJzdDpoaWRkZW4nKS5jb3VudCgpKS50b0VxdWFsKDEpO1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgLmNoZWNrLWVsZW1lbnQ6bGFzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTtcclxuXHJcbiAgICAgICAgIGlucHV0KCdjaGVja2VkJykuY2hlY2soKTtcclxuXHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSAuY2hlY2stZWxlbWVudDpmaXJzdDp2aXNpYmxlJykuY291bnQoKSkudG9FcXVhbCgxKTtcclxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIC5jaGVjay1lbGVtZW50Omxhc3Q6aGlkZGVuJykuY291bnQoKSkudG9FcXVhbCgxKTtcclxuICAgICAgIH0pO1xyXG4gICAgPC9maWxlPlxyXG4gIDwvZXhhbXBsZT5cclxuICovXHJcbnZhciBuZ0hpZGVEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpe1xyXG4gICAgICAkYW5pbWF0ZVt0b0Jvb2xlYW4odmFsdWUpID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKGVsZW1lbnQsICduZy1oaWRlJyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N0eWxlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBUaGUgYG5nU3R5bGVgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNldCBDU1Mgc3R5bGUgb24gYW4gSFRNTCBlbGVtZW50IGNvbmRpdGlvbmFsbHkuXHJcbiAqXHJcbiAqIEBlbGVtZW50IEFOWVxyXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cclxuICogICAgICBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgQ1NTIHN0eWxlIG5hbWVzIGFuZCB2YWx1ZXMgYXJlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZvciB0aG9zZSBDU1NcclxuICogICAgICBrZXlzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gICA8ZXhhbXBsZT5cclxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXRcIiBuZy1jbGljaz1cIm15U3R5bGU9e2NvbG9yOidyZWQnfVwiPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJjbGVhclwiIG5nLWNsaWNrPVwibXlTdHlsZT17fVwiPlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAgPHNwYW4gbmctc3R5bGU9XCJteVN0eWxlXCI+U2FtcGxlIFRleHQ8L3NwYW4+XHJcbiAgICAgICAgPHByZT5teVN0eWxlPXt7bXlTdHlsZX19PC9wcmU+XHJcbiAgICAgPC9maWxlPlxyXG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cclxuICAgICAgIHNwYW4ge1xyXG4gICAgICAgICBjb2xvcjogYmxhY2s7XHJcbiAgICAgICB9XHJcbiAgICAgPC9maWxlPlxyXG4gICAgIDxmaWxlIG5hbWU9XCJzY2VuYXJpby5qc1wiPlxyXG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zdHlsZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgc3BhbicpLmNzcygnY29sb3InKSkudG9CZSgncmdiKDAsIDAsIDApJyk7XHJcbiAgICAgICAgIGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIDpidXR0b25bdmFsdWU9c2V0XScpLmNsaWNrKCk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykuY3NzKCdjb2xvcicpKS50b0JlKCdyZ2IoMjU1LCAwLCAwKScpO1xyXG4gICAgICAgICBlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSA6YnV0dG9uW3ZhbHVlPWNsZWFyXScpLmNsaWNrKCk7XHJcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KCcuZG9jLWV4YW1wbGUtbGl2ZSBzcGFuJykuY3NzKCdjb2xvcicpKS50b0JlKCdyZ2IoMCwgMCwgMCknKTtcclxuICAgICAgIH0pO1xyXG4gICAgIDwvZmlsZT5cclxuICAgPC9leGFtcGxlPlxyXG4gKi9cclxudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xyXG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykge1xyXG4gICAgaWYgKG9sZFN0eWxlcyAmJiAobmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpKSB7XHJcbiAgICAgIGZvckVhY2gob2xkU3R5bGVzLCBmdW5jdGlvbih2YWwsIHN0eWxlKSB7IGVsZW1lbnQuY3NzKHN0eWxlLCAnJyk7fSk7XHJcbiAgICB9XHJcbiAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpO1xyXG4gIH0sIHRydWUpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpuZ1N3aXRjaFxyXG4gKiBAcmVzdHJpY3QgRUFcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIFRoZSBuZ1N3aXRjaCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi5cclxuICogRWxlbWVudHMgd2l0aGluIG5nU3dpdGNoIGJ1dCB3aXRob3V0IG5nU3dpdGNoV2hlbiBvciBuZ1N3aXRjaERlZmF1bHQgZGlyZWN0aXZlcyB3aWxsIGJlIHByZXNlcnZlZCBhdCB0aGUgbG9jYXRpb25cclxuICogYXMgc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cclxuICpcclxuICogVGhlIGRpcmVjdGl2ZSBpdHNlbGYgd29ya3Mgc2ltaWxhciB0byBuZ0luY2x1ZGUsIGhvd2V2ZXIsIGluc3RlYWQgb2YgZG93bmxvYWRpbmcgdGVtcGxhdGUgY29kZSAob3IgbG9hZGluZyBpdFxyXG4gKiBmcm9tIHRoZSB0ZW1wbGF0ZSBjYWNoZSksIG5nU3dpdGNoIHNpbXBseSBjaG9zZXMgb25lIG9mIHRoZSBuZXN0ZWQgZWxlbWVudHMgYW5kIG1ha2VzIGl0IHZpc2libGUgYmFzZWQgb24gd2hpY2ggZWxlbWVudFxyXG4gKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudFxyXG4gKiAod2hlcmUgeW91IHBsYWNlIHRoZSBkaXJlY3RpdmUpLCBwbGFjZSBhbiBleHByZXNzaW9uIG9uIHRoZSAqKm9uPVwiLi4uXCIgYXR0cmlidXRlKipcclxuICogKG9yIHRoZSAqKm5nLXN3aXRjaD1cIi4uLlwiIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcclxuICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvblxyXG4gKiBleHByZXNzaW9uIGlzIGV2YWx1YXRlZC4gSWYgYSBtYXRjaGluZyBleHByZXNzaW9uIGlzIG5vdCBmb3VuZCB2aWEgYSB3aGVuIGF0dHJpYnV0ZSB0aGVuIGFuIGVsZW1lbnQgd2l0aCB0aGUgZGVmYXVsdFxyXG4gKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxyXG4gKlxyXG4gKiBAYW5pbWF0aW9uc1xyXG4gKiBlbnRlciAtIGhhcHBlbnMgYWZ0ZXIgdGhlIG5nU3d0aWNoIGNvbnRlbnRzIGNoYW5nZSBhbmQgdGhlIG1hdGNoZWQgY2hpbGQgZWxlbWVudCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBjb250YWluZXJcclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYWZ0ZXIgdGhlIG5nU3dpdGNoIGNvbnRlbnRzIGNoYW5nZSBhbmQganVzdCBiZWZvcmUgdGhlIGZvcm1lciBjb250ZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cclxuICpcclxuICogQHVzYWdlXHJcbiAqIDxBTlkgbmctc3dpdGNoPVwiZXhwcmVzc2lvblwiPlxyXG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMVwiPi4uLjwvQU5ZPlxyXG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxyXG4gKiAgIDxBTlkgbmctc3dpdGNoLWRlZmF1bHQ+Li4uPC9BTlk+XHJcbiAqIDwvQU5ZPlxyXG4gKlxyXG4gKiBAc2NvcGVcclxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPHR0Pm5nLXN3aXRjaC13aGVuPC90dD4uXHJcbiAqIEBwYXJhbURlc2NyaXB0aW9uXHJcbiAqIE9uIGNoaWxkIGVsZW1lbnRzIGFkZDpcclxuICpcclxuICogKiBgbmdTd2l0Y2hXaGVuYDogdGhlIGNhc2Ugc3RhdGVtZW50IHRvIG1hdGNoIGFnYWluc3QuIElmIG1hdGNoIHRoZW4gdGhpc1xyXG4gKiAgIGNhc2Ugd2lsbCBiZSBkaXNwbGF5ZWQuIElmIHRoZSBzYW1lIG1hdGNoIGFwcGVhcnMgbXVsdGlwbGUgdGltZXMsIGFsbCB0aGVcclxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC5cclxuICogKiBgbmdTd2l0Y2hEZWZhdWx0YDogdGhlIGRlZmF1bHQgY2FzZSB3aGVuIG5vIG90aGVyIGNhc2UgbWF0Y2guIElmIHRoZXJlXHJcbiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXJcclxuICogICBjYXNlIG1hdGNoLlxyXG4gKlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gIDxleGFtcGxlIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XHJcbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxyXG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInNlbGVjdGlvblwiIG5nLW9wdGlvbnM9XCJpdGVtIGZvciBpdGVtIGluIGl0ZW1zXCI+XHJcbiAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgPHR0PnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC90dD5cclxuICAgICAgICA8aHIvPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaC1jb250YWluZXJcIlxyXG4gICAgICAgICAgbmctc3dpdGNoIG9uPVwic2VsZWN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxkaXYgbmctc3dpdGNoLXdoZW49XCJzZXR0aW5nc1wiPlNldHRpbmdzIERpdjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IG5nLXN3aXRjaC13aGVuPVwiaG9tZVwiPkhvbWUgU3BhbjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2ZpbGU+XHJcbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XHJcbiAgICAgIGZ1bmN0aW9uIEN0cmwoJHNjb3BlKSB7XHJcbiAgICAgICAgJHNjb3BlLml0ZW1zID0gWydzZXR0aW5ncycsICdob21lJywgJ290aGVyJ107XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTtcclxuICAgICAgfVxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XHJcbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIge1xyXG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xyXG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XHJcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcclxuICAgICAgICBoZWlnaHQ6NDBweDtcclxuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIgPiBkaXYge1xyXG4gICAgICAgIHBhZGRpbmc6MTBweDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciA+IC5uZy1lbnRlcixcclxuICAgICAgLmFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lciA+IC5uZy1sZWF2ZSB7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgICAgLW1vei10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XHJcbiAgICAgICAgLW8tdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xyXG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcclxuXHJcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOjA7XHJcbiAgICAgICAgbGVmdDowO1xyXG4gICAgICAgIHJpZ2h0OjA7XHJcbiAgICAgICAgYm90dG9tOjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIgPiAubmctZW50ZXIge1xyXG4gICAgICAgIHRvcDotNTBweDtcclxuICAgICAgfVxyXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyID4gLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XHJcbiAgICAgICAgdG9wOjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIgPiAubmctbGVhdmUge1xyXG4gICAgICAgIHRvcDowO1xyXG4gICAgICB9XHJcbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIgPiAubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcclxuICAgICAgICB0b3A6NTBweDtcclxuICAgICAgfVxyXG4gICAgPC9maWxlPlxyXG4gICAgPGZpbGUgbmFtZT1cInNjZW5hcmlvLmpzXCI+XHJcbiAgICAgIGl0KCdzaG91bGQgc3RhcnQgaW4gc2V0dGluZ3MnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xyXG4gICAgICB9KTtcclxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gaG9tZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNlbGVjdCgnc2VsZWN0aW9uJykub3B0aW9uKCdob21lJyk7XHJcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoJy5kb2MtZXhhbXBsZS1saXZlIFtuZy1zd2l0Y2hdJykudGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGRlZmF1bHQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBzZWxlY3QoJ3NlbGVjdGlvbicpLm9wdGlvbignb3RoZXInKTtcclxuICAgICAgICBleHBlY3QoZWxlbWVudCgnLmRvYy1leGFtcGxlLWxpdmUgW25nLXN3aXRjaF0nKS50ZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTtcclxuICAgICAgfSk7XHJcbiAgICA8L2ZpbGU+XHJcbiAgPC9leGFtcGxlPlxyXG4gKi9cclxudmFyIG5nU3dpdGNoRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgcmVxdWlyZTogJ25nU3dpdGNoJyxcclxuXHJcbiAgICAvLyBhc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcclxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gbmdTd2l0Y2hDb250cm9sbGVyKCkge1xyXG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcclxuICAgIH1dLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nU3dpdGNoQ29udHJvbGxlcikge1xyXG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxyXG4gICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlcyxcclxuICAgICAgICAgIHNlbGVjdGVkRWxlbWVudHMsXHJcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xyXG5cclxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGZvciAodmFyIGk9IDAsIGlpPXNlbGVjdGVkU2NvcGVzLmxlbmd0aDsgaTxpaTsgaSsrKSB7XHJcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xyXG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoc2VsZWN0ZWRFbGVtZW50c1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW107XHJcbiAgICAgICAgc2VsZWN0ZWRTY29wZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHtcclxuICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHIuY2hhbmdlKTtcclxuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFNjb3BlID0gc2NvcGUuJG5ldygpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShzZWxlY3RlZFNjb3BlLCBmdW5jdGlvbihjYXNlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWxlY3RlZFRyYW5zY2x1ZGUuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50cy5wdXNoKGNhc2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XTtcclxuXHJcbnZhciBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XHJcbiAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxyXG4gIHByaW9yaXR5OiA1MDAsXHJcbiAgcmVxdWlyZTogJ15uZ1N3aXRjaCcsXHJcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMsIHRyYW5zY2x1ZGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICBjdHJsLmNhc2VzWychJyArIGF0dHJzLm5nU3dpdGNoV2hlbl0gPSAoY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dIHx8IFtdKTtcclxuICAgICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiB0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xyXG4gICAgfTtcclxuICB9XHJcbn0pO1xyXG5cclxudmFyIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcclxuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXHJcbiAgcHJpb3JpdHk6IDUwMCxcclxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcclxuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XHJcbiAgICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pO1xyXG4gICAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxufSk7XHJcblxyXG4vKipcclxuICogQG5nZG9jIGRpcmVjdGl2ZVxyXG4gKiBAbmFtZSBuZy5kaXJlY3RpdmU6bmdUcmFuc2NsdWRlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi5cclxuICpcclxuICogQW55IGV4aXN0aW5nIGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB0aGlzIGRpcmVjdGl2ZSBpcyBwbGFjZWQgb24gd2lsbCBiZSByZW1vdmVkIGJlZm9yZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBpbnNlcnRlZC5cclxuICpcclxuICogQGVsZW1lbnQgQU5ZXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgIDxkb2M6ZXhhbXBsZSBtb2R1bGU9XCJ0cmFuc2NsdWRlXCI+XHJcbiAgICAgPGRvYzpzb3VyY2U+XHJcbiAgICAgICA8c2NyaXB0PlxyXG4gICAgICAgICBmdW5jdGlvbiBDdHJsKCRzY29wZSkge1xyXG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XHJcbiAgICAgICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZScsIFtdKVxyXG4gICAgICAgICAgLmRpcmVjdGl2ZSgncGFuZScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICAgICB0cmFuc2NsdWRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICBzY29wZTogeyB0aXRsZTonQCcgfSxcclxuICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjogZ3JheVwiPnt7dGl0bGV9fTwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcclxuICAgICAgICAgICAgIH07XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJDdHJsXCI+XHJcbiAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInRpdGxlXCI+PGJyPlxyXG4gICAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ0ZXh0XCI+PC90ZXh0YXJlYT4gPGJyLz5cclxuICAgICAgICAgPHBhbmUgdGl0bGU9XCJ7e3RpdGxlfX1cIj57e3RleHR9fTwvcGFuZT5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgIDwvZG9jOnNvdXJjZT5cclxuICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5wdXQoJ3RpdGxlJykuZW50ZXIoJ1RJVExFJyk7XHJcbiAgICAgICAgICBpbnB1dCgndGV4dCcpLmVudGVyKCdURVhUJyk7XHJcbiAgICAgICAgICBleHBlY3QoYmluZGluZygndGl0bGUnKSkudG9FcXVhbCgnVElUTEUnKTtcclxuICAgICAgICAgIGV4cGVjdChiaW5kaW5nKCd0ZXh0JykpLnRvRXF1YWwoJ1RFWFQnKTtcclxuICAgICAgICB9KTtcclxuICAgICA8L2RvYzpzY2VuYXJpbz5cclxuICAgPC9kb2M6ZXhhbXBsZT5cclxuICpcclxuICovXHJcbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XHJcbiAgY29udHJvbGxlcjogWyckdHJhbnNjbHVkZScsIGZ1bmN0aW9uKCR0cmFuc2NsdWRlKSB7XHJcbiAgICAvLyByZW1lbWJlciB0aGUgdHJhbnNjbHVzaW9uIGZuIGJ1dCBjYWxsIGl0IGR1cmluZyBsaW5raW5nIHNvIHRoYXQgd2UgZG9uJ3QgcHJvY2VzcyB0cmFuc2NsdXNpb24gYmVmb3JlIGRpcmVjdGl2ZXMgb25cclxuICAgIC8vIHRoZSBwYXJlbnQgZWxlbWVudCBldmVuIHdoZW4gdGhlIHRyYW5zY2x1c2lvbiByZXBsYWNlcyB0aGUgY3VycmVudCBlbGVtZW50LiAod2UgY2FuJ3QgdXNlIHByaW9yaXR5IGhlcmUgYmVjYXVzZVxyXG4gICAgLy8gdGhhdCBhcHBsaWVzIG9ubHkgdG8gY29tcGlsZSBmbnMgYW5kIG5vdCBjb250cm9sbGVyc1xyXG4gICAgdGhpcy4kdHJhbnNjbHVkZSA9ICR0cmFuc2NsdWRlO1xyXG4gIH1dLFxyXG5cclxuICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIpIHtcclxuICAgIGNvbnRyb2xsZXIuJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUpIHtcclxuICAgICAgJGVsZW1lbnQuaHRtbCgnJyk7XHJcbiAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcclxuICogQG5hbWUgbmcuZGlyZWN0aXZlOnNjcmlwdFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogTG9hZCBjb250ZW50IG9mIGEgc2NyaXB0IHRhZywgd2l0aCB0eXBlIGB0ZXh0L25nLXRlbXBsYXRlYCwgaW50byBgJHRlbXBsYXRlQ2FjaGVgLCBzbyB0aGF0IHRoZVxyXG4gKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSBgbmdJbmNsdWRlYCwgYG5nVmlld2Agb3IgZGlyZWN0aXZlIHRlbXBsYXRlcy5cclxuICpcclxuICogQHJlc3RyaWN0IEVcclxuICogQHBhcmFtIHsndGV4dC9uZy10ZW1wbGF0ZSd9IHR5cGUgbXVzdCBiZSBzZXQgdG8gYCd0ZXh0L25nLXRlbXBsYXRlJ2BcclxuICpcclxuICogQGV4YW1wbGVcclxuICA8ZG9jOmV4YW1wbGU+XHJcbiAgICA8ZG9jOnNvdXJjZT5cclxuICAgICAgPHNjcmlwdCB0eXBlPVwidGV4dC9uZy10ZW1wbGF0ZVwiIGlkPVwiL3RwbC5odG1sXCI+XHJcbiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXHJcbiAgICAgIDwvc2NyaXB0PlxyXG5cclxuICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cclxuICAgICAgPGRpdiBpZD1cInRwbC1jb250ZW50XCIgbmctaW5jbHVkZSBzcmM9XCJjdXJyZW50VHBsXCI+PC9kaXY+XHJcbiAgICA8L2RvYzpzb3VyY2U+XHJcbiAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGVsZW1lbnQoJyN0cGwtbGluaycpLmNsaWNrKCk7XHJcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoJyN0cGwtY29udGVudCcpLnRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcclxuICAgICAgfSk7XHJcbiAgICA8L2RvYzpzY2VuYXJpbz5cclxuICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxudmFyIHNjcmlwdERpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgdGVybWluYWw6IHRydWUsXHJcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XHJcbiAgICAgIGlmIChhdHRyLnR5cGUgPT0gJ3RleHQvbmctdGVtcGxhdGUnKSB7XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCxcclxuICAgICAgICAgICAgLy8gSUUgaXMgbm90IGNvbnNpc3RlbnQsIGluIHNjcmlwdHMgd2UgaGF2ZSB0byByZWFkIC50ZXh0IGJ1dCBpbiBvdGhlciBub2RlcyB3ZSBoYXZlIHRvIHJlYWQgLnRleHRDb250ZW50XHJcbiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XHJcblxyXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZVVybCwgdGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59XTtcclxuXHJcbi8qKlxyXG4gKiBAbmdkb2MgZGlyZWN0aXZlXHJcbiAqIEBuYW1lIG5nLmRpcmVjdGl2ZTpzZWxlY3RcclxuICogQHJlc3RyaWN0IEVcclxuICpcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqIEhUTUwgYFNFTEVDVGAgZWxlbWVudCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLlxyXG4gKlxyXG4gKiAjIGBuZ09wdGlvbnNgXHJcbiAqXHJcbiAqIE9wdGlvbmFsbHkgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gXHJcbiAqIGVsZW1lbnRzIGZvciBhIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyBhbiBhcnJheSBvciBhbiBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGVcclxuICogYG5nT3B0aW9uc2AgZXhwcmVzc2lvbi5cclxuICpcclxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eVxyXG4gKiByZXByZXNlbnRlZCBieSB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIGlkZW50aWZpZWQgYnkgdGhlIGBuZ01vZGVsYFxyXG4gKiBkaXJlY3RpdmUgb2YgdGhlIHBhcmVudCBzZWxlY3QgZWxlbWVudC5cclxuICpcclxuICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhblxyXG4gKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxyXG4gKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxyXG4gKlxyXG4gKiBOb3RlOiBgbmdPcHRpb25zYCBwcm92aWRlcyBpdGVyYXRvciBmYWNpbGl0eSBmb3IgYDxvcHRpb24+YCBlbGVtZW50IHdoaWNoIHNob3VsZCBiZSB1c2VkIGluc3RlYWRcclxuICogb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gd2hlbiB5b3Ugd2FudCB0aGVcclxuICogYHNlbGVjdGAgbW9kZWwgdG8gYmUgYm91bmQgdG8gYSBub24tc3RyaW5nIHZhbHVlLiBUaGlzIGlzIGJlY2F1c2UgYW4gb3B0aW9uIGVsZW1lbnQgY2FuIGN1cnJlbnRseVxyXG4gKiBiZSBib3VuZCB0byBzdHJpbmcgdmFsdWVzIG9ubHkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cclxuICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcclxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXHJcbiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9uPX0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOlxyXG4gKlxyXG4gKiAgICogZm9yIGFycmF5IGRhdGEgc291cmNlczpcclxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXHJcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxyXG4gKiAgICAgKiBgbGFiZWxgICAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcclxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcclxuICogICAqIGZvciBvYmplY3QgZGF0YSBzb3VyY2VzOlxyXG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxyXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxyXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yIChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcclxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgXHJcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxyXG4gKlxyXG4gKiBXaGVyZTpcclxuICpcclxuICogICAqIGBhcnJheWAgLyBgb2JqZWN0YDogYW4gZXhwcmVzc2lvbiB3aGljaCBldmFsdWF0ZXMgdG8gYW4gYXJyYXkgLyBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxyXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxyXG4gKiAgICAgIG9mIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXHJcbiAqICAgKiBga2V5YDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBhIHByb3BlcnR5IG5hbWUgaW4gYG9iamVjdGAgZHVyaW5nIGl0ZXJhdGlvbi5cclxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxyXG4gKiAgICAgYGV4cHJlc3Npb25gIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLlxyXG4gKiAgICogYHNlbGVjdGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgYm91bmQgdG8gdGhlIG1vZGVsIG9mIHRoZSBwYXJlbnQgYDxzZWxlY3Q+YFxyXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXHJcbiAqICAgKiBgZ3JvdXBgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZ3JvdXAgb3B0aW9ucyB1c2luZyB0aGUgYDxvcHRncm91cD5gXHJcbiAqICAgICAgRE9NIGVsZW1lbnQuXHJcbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXHJcbiAqICAgICAgdXNlZCB0byBpZGVudGlmeSB0aGUgb2JqZWN0cyBpbiB0aGUgYXJyYXkuIFRoZSBgdHJhY2tleHByYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZVxyXG4gKiAgICAgYHZhbHVlYCB2YXJpYWJsZSAoZS5nLiBgdmFsdWUucHJvcGVydHlOYW1lYCkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAgICA8ZG9jOmV4YW1wbGU+XHJcbiAgICAgIDxkb2M6c291cmNlPlxyXG4gICAgICAgIDxzY3JpcHQ+XHJcbiAgICAgICAgZnVuY3Rpb24gTXlDbnRybCgkc2NvcGUpIHtcclxuICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbXHJcbiAgICAgICAgICAgIHtuYW1lOidibGFjaycsIHNoYWRlOidkYXJrJ30sXHJcbiAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCd9LFxyXG4gICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSxcclxuICAgICAgICAgICAge25hbWU6J2JsdWUnLCBzaGFkZTonZGFyayd9LFxyXG4gICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0J31cclxuICAgICAgICAgIF07XHJcbiAgICAgICAgICAkc2NvcGUuY29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgPC9zY3JpcHQ+XHJcbiAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDbnRybFwiPlxyXG4gICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICA8bGkgbmctcmVwZWF0PVwiY29sb3IgaW4gY29sb3JzXCI+XHJcbiAgICAgICAgICAgICAgTmFtZTogPGlucHV0IG5nLW1vZGVsPVwiY29sb3IubmFtZVwiPlxyXG4gICAgICAgICAgICAgIFs8YSBocmVmIG5nLWNsaWNrPVwiY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpXCI+WDwvYT5dXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYT5dXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPGhyLz5cclxuICAgICAgICAgIENvbG9yIChudWxsIG5vdCBhbGxvd2VkKTpcclxuICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb2xvclwiIG5nLW9wdGlvbnM9XCJjLm5hbWUgZm9yIGMgaW4gY29sb3JzXCI+PC9zZWxlY3Q+PGJyPlxyXG5cclxuICAgICAgICAgIENvbG9yIChudWxsIGFsbG93ZWQpOlxyXG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cclxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cImNvbG9yXCIgbmctb3B0aW9ucz1cImMubmFtZSBmb3IgYyBpbiBjb2xvcnNcIj5cclxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvc2UgY29sb3IgLS08L29wdGlvbj5cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICA8L3NwYW4+PGJyLz5cclxuXHJcbiAgICAgICAgICBDb2xvciBncm91cGVkIGJ5IHNoYWRlOlxyXG4gICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cImNvbG9yXCIgbmctb3B0aW9ucz1cImMubmFtZSBncm91cCBieSBjLnNoYWRlIGZvciBjIGluIGNvbG9yc1wiPlxyXG4gICAgICAgICAgPC9zZWxlY3Q+PGJyLz5cclxuXHJcblxyXG4gICAgICAgICAgU2VsZWN0IDxhIGhyZWYgbmctY2xpY2s9XCJjb2xvcj17bmFtZTonbm90IGluIGxpc3QnfVwiPmJvZ3VzPC9hPi48YnI+XHJcbiAgICAgICAgICA8aHIvPlxyXG4gICAgICAgICAgQ3VycmVudGx5IHNlbGVjdGVkOiB7eyB7c2VsZWN0ZWRfY29sb3I6Y29sb3J9ICB9fVxyXG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJvcmRlcjpzb2xpZCAxcHggYmxhY2s7IGhlaWdodDoyMHB4XCJcclxuICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7J2JhY2tncm91bmQtY29sb3InOmNvbG9yLm5hbWV9XCI+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kb2M6c291cmNlPlxyXG4gICAgICA8ZG9jOnNjZW5hcmlvPlxyXG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICBleHBlY3QoYmluZGluZygne3NlbGVjdGVkX2NvbG9yOmNvbG9yfScpKS50b01hdGNoKCdyZWQnKTtcclxuICAgICAgICAgICBzZWxlY3QoJ2NvbG9yJykub3B0aW9uKCcwJyk7XHJcbiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgnYmxhY2snKTtcclxuICAgICAgICAgICB1c2luZygnLm51bGxhYmxlJykuc2VsZWN0KCdjb2xvcicpLm9wdGlvbignJyk7XHJcbiAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpjb2xvcn0nKSkudG9NYXRjaCgnbnVsbCcpO1xyXG4gICAgICAgICB9KTtcclxuICAgICAgPC9kb2M6c2NlbmFyaW8+XHJcbiAgICA8L2RvYzpleGFtcGxlPlxyXG4gKi9cclxuXHJcbnZhciBuZ09wdGlvbnNEaXJlY3RpdmUgPSB2YWx1ZUZuKHsgdGVybWluYWw6IHRydWUgfSk7XHJcbnZhciBzZWxlY3REaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAgICRwYXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8wMDAwMTExMTEwMDAwMDAwMDAwMDIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMzMzMzAwMDAwMDAwMDAwMDAwNDQ0NDQ0NDQ0NDQ0NDQ0NDQwMDAwMDAwMDA1NTU1NTU1NTU1NTU1NTU1NTAwMDAwMDA2NjY2NjY2NjY2NjY2NjY2NjAwMDAwMDAwMDAwMDAwMDA3Nzc3MDAwMDAwMDAwMDAwMDAwMDAwMDg4ODg4XHJcbiAgdmFyIE5HX09QVElPTlNfUkVHRVhQID0gL15cXHMqKC4qPykoPzpcXHMrYXNcXHMrKC4qPykpPyg/Olxccytncm91cFxccytieVxccysoLiopKT9cXHMrZm9yXFxzKyg/OihbXFwkXFx3XVtcXCRcXHdcXGRdKil8KD86XFwoXFxzKihbXFwkXFx3XVtcXCRcXHdcXGRdKilcXHMqLFxccyooW1xcJFxcd11bXFwkXFx3XFxkXSopXFxzKlxcKSkpXFxzK2luXFxzKyguKj8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyguKj8pKT8kLyxcclxuICAgICAgbnVsbE1vZGVsQ3RybCA9IHskc2V0Vmlld1ZhbHVlOiBub29wfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICByZXF1aXJlOiBbJ3NlbGVjdCcsICc/bmdNb2RlbCddLFxyXG4gICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgIG9wdGlvbnNNYXAgPSB7fSxcclxuICAgICAgICAgIG5nTW9kZWxDdHJsID0gbnVsbE1vZGVsQ3RybCxcclxuICAgICAgICAgIG51bGxPcHRpb24sXHJcbiAgICAgICAgICB1bmtub3duT3B0aW9uO1xyXG5cclxuXHJcbiAgICAgIHNlbGYuZGF0YWJvdW5kID0gJGF0dHJzLm5nTW9kZWw7XHJcblxyXG5cclxuICAgICAgc2VsZi5pbml0ID0gZnVuY3Rpb24obmdNb2RlbEN0cmxfLCBudWxsT3B0aW9uXywgdW5rbm93bk9wdGlvbl8pIHtcclxuICAgICAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcclxuICAgICAgICBudWxsT3B0aW9uID0gbnVsbE9wdGlvbl87XHJcbiAgICAgICAgdW5rbm93bk9wdGlvbiA9IHVua25vd25PcHRpb25fO1xyXG4gICAgICB9XHJcblxyXG5cclxuICAgICAgc2VsZi5hZGRPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIG9wdGlvbnNNYXBbdmFsdWVdID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgaWYgKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT0gdmFsdWUpIHtcclxuICAgICAgICAgICRlbGVtZW50LnZhbCh2YWx1ZSk7XHJcbiAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG5cclxuICAgICAgc2VsZi5yZW1vdmVPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc09wdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zTWFwW3ZhbHVlXTtcclxuICAgICAgICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuXHJcbiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgIHZhciB1bmtub3duVmFsID0gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7XHJcbiAgICAgICAgdW5rbm93bk9wdGlvbi52YWwodW5rbm93blZhbCk7XHJcbiAgICAgICAgJGVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTtcclxuICAgICAgICAkZWxlbWVudC52YWwodW5rbm93blZhbCk7XHJcbiAgICAgICAgdW5rbm93bk9wdGlvbi5wcm9wKCdzZWxlY3RlZCcsIHRydWUpOyAvLyBuZWVkZWQgZm9yIElFXHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICBzZWxmLmhhc09wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnNNYXAuaGFzT3duUHJvcGVydHkodmFsdWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWRcclxuICAgICAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xyXG4gICAgICB9KTtcclxuICAgIH1dLFxyXG5cclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xyXG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICAgIGlmICghY3RybHNbMV0pIHJldHVybjtcclxuXHJcbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF0sXHJcbiAgICAgICAgICBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdLFxyXG4gICAgICAgICAgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlLFxyXG4gICAgICAgICAgb3B0aW9uc0V4cCA9IGF0dHIubmdPcHRpb25zLFxyXG4gICAgICAgICAgbnVsbE9wdGlvbiA9IGZhbHNlLCAvLyBpZiBmYWxzZSwgdXNlciB3aWxsIG5vdCBiZSBhYmxlIHRvIHNlbGVjdCBpdCAodXNlZCBieSBuZ09wdGlvbnMpXHJcbiAgICAgICAgICBlbXB0eU9wdGlvbixcclxuICAgICAgICAgIC8vIHdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXHJcbiAgICAgICAgICAvLyB0byBjcmVhdGUgaXQgaW4gPHNlbGVjdD4gYW5kIElFIGJhcmZzIG90aGVyd2lzZS5cclxuICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSxcclxuICAgICAgICAgIG9wdEdyb3VwVGVtcGxhdGUgPWpxTGl0ZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRncm91cCcpKSxcclxuICAgICAgICAgIHVua25vd25PcHRpb24gPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpO1xyXG5cclxuICAgICAgLy8gZmluZCBcIm51bGxcIiBvcHRpb25cclxuICAgICAgZm9yKHZhciBpID0gMCwgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbltpXS52YWx1ZSA9PSAnJykge1xyXG4gICAgICAgICAgZW1wdHlPcHRpb24gPSBudWxsT3B0aW9uID0gY2hpbGRyZW4uZXEoaSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGVjdEN0cmwuaW5pdChuZ01vZGVsQ3RybCwgbnVsbE9wdGlvbiwgdW5rbm93bk9wdGlvbik7XHJcblxyXG4gICAgICAvLyByZXF1aXJlZCB2YWxpZGF0b3JcclxuICAgICAgaWYgKG11bHRpcGxlICYmIChhdHRyLnJlcXVpcmVkIHx8IGF0dHIubmdSZXF1aXJlZCkpIHtcclxuICAgICAgICB2YXIgcmVxdWlyZWRWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsICFhdHRyLnJlcXVpcmVkIHx8ICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpKTtcclxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBuZ01vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKHJlcXVpcmVkVmFsaWRhdG9yKTtcclxuICAgICAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy51bnNoaWZ0KHJlcXVpcmVkVmFsaWRhdG9yKTtcclxuXHJcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgncmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJlcXVpcmVkVmFsaWRhdG9yKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9uc0V4cCkgT3B0aW9ucyhzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwpO1xyXG4gICAgICBlbHNlIGlmIChtdWx0aXBsZSkgTXVsdGlwbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTtcclxuICAgICAgZWxzZSBTaW5nbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKTtcclxuXHJcblxyXG4gICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5cclxuXHJcbiAgICAgIGZ1bmN0aW9uIFNpbmdsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpIHtcclxuICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZWN0Q3RybC5oYXNPcHRpb24odmlld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgc2VsZWN0RWxlbWVudC52YWwodmlld1ZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKHZpZXdWYWx1ZSA9PT0gJycpIGVtcHR5T3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIHRvIG1ha2UgSUU5IGhhcHB5XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmlld1ZhbHVlKSAmJiBlbXB0eU9wdGlvbikge1xyXG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKCcnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBzZWxlY3RDdHJsLnJlbmRlclVua25vd25PcHRpb24odmlld1ZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RFbGVtZW50LnZhbCgpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBNdWx0aXBsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgY3RybCkge1xyXG4gICAgICAgIHZhciBsYXN0VmlldztcclxuICAgICAgICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBpdGVtcyA9IG5ldyBIYXNoTWFwKGN0cmwuJHZpZXdWYWx1ZSk7XHJcbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdEVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xyXG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpc0RlZmluZWQoaXRlbXMuZ2V0KG9wdGlvbi52YWx1ZSkpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxyXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWRcclxuICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gc2VsZWN0TXVsdGlwbGVXYXRjaCgpIHtcclxuICAgICAgICAgIGlmICghZXF1YWxzKGxhc3RWaWV3LCBjdHJsLiR2aWV3VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGxhc3RWaWV3ID0gY29weShjdHJsLiR2aWV3VmFsdWUpO1xyXG4gICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZWN0RWxlbWVudC5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBmb3JFYWNoKHNlbGVjdEVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xyXG4gICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGFycmF5LnB1c2gob3B0aW9uLnZhbHVlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXJyYXkpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIE9wdGlvbnMoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHtcclxuICAgICAgICB2YXIgbWF0Y2g7XHJcblxyXG4gICAgICAgIGlmICghIChtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApKSkge1xyXG4gICAgICAgICAgdGhyb3cgbWluRXJyKCduZ09wdGlvbnMnKSgnaWV4cCcsXHJcbiAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mICdfc2VsZWN0XyAoYXMgX2xhYmVsXyk/IGZvciAoX2tleV8sKT9fdmFsdWVfIGluIF9jb2xsZWN0aW9uXycgYnV0IGdvdCAnezB9Jy4gRWxlbWVudDogezF9XCIsXHJcbiAgICAgICAgICAgIG9wdGlvbnNFeHAsIHN0YXJ0aW5nVGFnKHNlbGVjdEVsZW1lbnQpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pLFxyXG4gICAgICAgICAgICB2YWx1ZU5hbWUgPSBtYXRjaFs0XSB8fCBtYXRjaFs2XSxcclxuICAgICAgICAgICAga2V5TmFtZSA9IG1hdGNoWzVdLFxyXG4gICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLFxyXG4gICAgICAgICAgICB2YWx1ZUZuID0gJHBhcnNlKG1hdGNoWzJdID8gbWF0Y2hbMV0gOiB2YWx1ZU5hbWUpLFxyXG4gICAgICAgICAgICB2YWx1ZXNGbiA9ICRwYXJzZShtYXRjaFs3XSksXHJcbiAgICAgICAgICAgIHRyYWNrID0gbWF0Y2hbOF0sXHJcbiAgICAgICAgICAgIHRyYWNrRm4gPSB0cmFjayA/ICRwYXJzZShtYXRjaFs4XSkgOiBudWxsLFxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLiBXZSB0cnkgdG8gcmV1c2UgdGhlc2UgaWYgcG9zc2libGVcclxuICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbMF0gaXMgdGhlIG9wdGlvbnMgd2l0aCBubyBvcHRpb24gZ3JvdXBcclxuICAgICAgICAgICAgLy8gb3B0aW9uR3JvdXBzQ2FjaGVbP11bMF0gaXMgdGhlIHBhcmVudDogZWl0aGVyIHRoZSBTRUxFQ1Qgb3IgT1BUR1JPVVAgZWxlbWVudFxyXG4gICAgICAgICAgICBvcHRpb25Hcm91cHNDYWNoZSA9IFtbe2VsZW1lbnQ6IHNlbGVjdEVsZW1lbnQsIGxhYmVsOicnfV1dO1xyXG5cclxuICAgICAgICBpZiAobnVsbE9wdGlvbikge1xyXG4gICAgICAgICAgLy8gY29tcGlsZSB0aGUgZWxlbWVudCBzaW5jZSB0aGVyZSBtaWdodCBiZSBiaW5kaW5ncyBpbiBpdFxyXG4gICAgICAgICAgJGNvbXBpbGUobnVsbE9wdGlvbikoc2NvcGUpO1xyXG5cclxuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XHJcbiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XHJcbiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZUNsYXNzKCduZy1zY29wZScpO1xyXG5cclxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuaHRtbCgnJykgYmVjYXVzZSBvdGhlcndpc2UgSUUgd2lsbFxyXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/XHJcbiAgICAgICAgICBudWxsT3B0aW9uLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xlYXIgY29udGVudHMsIHdlJ2xsIGFkZCB3aGF0J3MgbmVlZGVkIGJhc2VkIG9uIHRoZSBtb2RlbFxyXG4gICAgICAgIHNlbGVjdEVsZW1lbnQuaHRtbCgnJyk7XHJcblxyXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9uR3JvdXAsXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxzID0ge30sXHJcbiAgICAgICAgICAgICAgICBrZXksIHZhbHVlLCBvcHRpb25FbGVtZW50LCBpbmRleCwgZ3JvdXBJbmRleCwgbGVuZ3RoLCBncm91cExlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xyXG4gICAgICAgICAgICAgIHZhbHVlID0gW107XHJcbiAgICAgICAgICAgICAgZm9yIChncm91cEluZGV4ID0gMCwgZ3JvdXBMZW5ndGggPSBvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICBncm91cEluZGV4IDwgZ3JvdXBMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICBncm91cEluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhhdCBncm91cC4gKGZpcnN0IGl0ZW0gaGFzIHRoZSBwYXJlbnQpXHJcbiAgICAgICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc0NhY2hlW2dyb3VwSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcihpbmRleCA9IDEsIGxlbmd0aCA9IG9wdGlvbkdyb3VwLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKChvcHRpb25FbGVtZW50ID0gb3B0aW9uR3JvdXBbaW5kZXhdLmVsZW1lbnQpWzBdLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gb3B0aW9uRWxlbWVudC52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5TmFtZSkgbG9jYWxzW2tleU5hbWVdID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0cmFja0luZGV4ID0gMDsgdHJhY2tJbmRleCA8IGNvbGxlY3Rpb24ubGVuZ3RoOyB0cmFja0luZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW3RyYWNrSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tGbihzY29wZSwgbG9jYWxzKSA9PSBrZXkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IGNvbGxlY3Rpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaCh2YWx1ZUZuKHNjb3BlLCBsb2NhbHMpKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBrZXkgPSBzZWxlY3RFbGVtZW50LnZhbCgpO1xyXG4gICAgICAgICAgICAgIGlmIChrZXkgPT0gJz8nKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnJyl7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7XHJcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRyYWNrSW5kZXggPSAwOyB0cmFja0luZGV4IDwgY29sbGVjdGlvbi5sZW5ndGg7IHRyYWNrSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gY29sbGVjdGlvblt0cmFja0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tGbihzY29wZSwgbG9jYWxzKSA9PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSBjb2xsZWN0aW9uW2tleV07XHJcbiAgICAgICAgICAgICAgICAgIGlmIChrZXlOYW1lKSBsb2NhbHNba2V5TmFtZV0gPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVGbihzY29wZSwgbG9jYWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjdHJsLiRyZW5kZXIgPSByZW5kZXI7XHJcblxyXG4gICAgICAgIC8vIFRPRE8odm9qdGEpOiBjYW4ndCB3ZSBvcHRpbWl6ZSB0aGlzID9cclxuICAgICAgICBzY29wZS4kd2F0Y2gocmVuZGVyKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gICAgICAgICAgdmFyIG9wdGlvbkdyb3VwcyA9IHsnJzpbXX0sIC8vIFRlbXBvcmFyeSBsb2NhdGlvbiBmb3IgdGhlIG9wdGlvbiBncm91cHMgYmVmb3JlIHdlIHJlbmRlciB0aGVtXHJcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sXHJcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lLFxyXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3VwLFxyXG4gICAgICAgICAgICAgIG9wdGlvbixcclxuICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCwgZXhpc3RpbmdPcHRpb25zLCBleGlzdGluZ09wdGlvbixcclxuICAgICAgICAgICAgICBtb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZSxcclxuICAgICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGbihzY29wZSkgfHwgW10sXHJcbiAgICAgICAgICAgICAga2V5cyA9IGtleU5hbWUgPyBzb3J0ZWRLZXlzKHZhbHVlcykgOiB2YWx1ZXMsXHJcbiAgICAgICAgICAgICAgZ3JvdXBMZW5ndGgsIGxlbmd0aCxcclxuICAgICAgICAgICAgICBncm91cEluZGV4LCBpbmRleCxcclxuICAgICAgICAgICAgICBsb2NhbHMgPSB7fSxcclxuICAgICAgICAgICAgICBzZWxlY3RlZCxcclxuICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IGZhbHNlLCAvLyBub3RoaW5nIGlzIHNlbGVjdGVkIHlldFxyXG4gICAgICAgICAgICAgIGxhc3RFbGVtZW50LFxyXG4gICAgICAgICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgbGFiZWw7XHJcblxyXG4gICAgICAgICAgaWYgKG11bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGlmICh0cmFja0ZuICYmIGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IG5ldyBIYXNoTWFwKFtdKTtcclxuICAgICAgICAgICAgICBmb3IgKHZhciB0cmFja0luZGV4ID0gMDsgdHJhY2tJbmRleCA8IG1vZGVsVmFsdWUubGVuZ3RoOyB0cmFja0luZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gbW9kZWxWYWx1ZVt0cmFja0luZGV4XTtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU2V0LnB1dCh0cmFja0ZuKHNjb3BlLCBsb2NhbHMpLCBtb2RlbFZhbHVlW3RyYWNrSW5kZXhdKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBuZXcgSGFzaE1hcChtb2RlbFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFdlIG5vdyBidWlsZCB1cCB0aGUgbGlzdCBvZiBvcHRpb25zIHdlIG5lZWQgKHdlIG1lcmdlIGxhdGVyKVxyXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGxlbmd0aCA9IGtleXMubGVuZ3RoLCBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlc1trZXlOYW1lID8gbG9jYWxzW2tleU5hbWVdPWtleXNbaW5kZXhdOmluZGV4XTtcclxuICAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lID0gZ3JvdXBCeUZuKHNjb3BlLCBsb2NhbHMpIHx8ICcnO1xyXG4gICAgICAgICAgICBpZiAoIShvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdKSkge1xyXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzW29wdGlvbkdyb3VwTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWVzLnB1c2gob3B0aW9uR3JvdXBOYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcclxuICAgICAgICAgICAgICBzZWxlY3RlZCA9IHNlbGVjdGVkU2V0LnJlbW92ZSh0cmFja0ZuID8gdHJhY2tGbihzY29wZSwgbG9jYWxzKSA6IHZhbHVlRm4oc2NvcGUsIGxvY2FscykpICE9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpZiAodHJhY2tGbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsQ2FzdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgbW9kZWxDYXN0W3ZhbHVlTmFtZV0gPSBtb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cmFja0ZuKHNjb3BlLCBtb2RlbENhc3QpID09PSB0cmFja0ZuKHNjb3BlLCBsb2NhbHMpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IG1vZGVsVmFsdWUgPT09IHZhbHVlRm4oc2NvcGUsIGxvY2Fscyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkU2V0ID0gc2VsZWN0ZWRTZXQgfHwgc2VsZWN0ZWQ7IC8vIHNlZSBpZiBhdCBsZWFzdCBvbmUgaXRlbSBpcyBzZWxlY3RlZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhYmVsID0gZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpOyAvLyB3aGF0IHdpbGwgYmUgc2VlbiBieSB0aGUgdXNlclxyXG4gICAgICAgICAgICBsYWJlbCA9IGxhYmVsID09PSB1bmRlZmluZWQgPyAnJyA6IGxhYmVsOyAvLyBkb2luZyBkaXNwbGF5Rm4oc2NvcGUsIGxvY2FscykgfHwgJycgb3ZlcndyaXRlcyB6ZXJvIHZhbHVlc1xyXG4gICAgICAgICAgICBvcHRpb25Hcm91cC5wdXNoKHtcclxuICAgICAgICAgICAgICBpZDogdHJhY2tGbiA/IHRyYWNrRm4oc2NvcGUsIGxvY2FscykgOiAoa2V5TmFtZSA/IGtleXNbaW5kZXhdIDogaW5kZXgpLCAgIC8vIGVpdGhlciB0aGUgaW5kZXggaW50byBhcnJheSBvciBrZXkgZnJvbSBvYmplY3RcclxuICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsXHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBzaG91bGQgYmUgc2VsZWN0ZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoIW11bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGlmIChudWxsT3B0aW9uIHx8IG1vZGVsVmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAvLyBpbnNlcnQgbnVsbCBvcHRpb24gaWYgd2UgaGF2ZSBhIHBsYWNlaG9sZGVyLCBvciB0aGUgbW9kZWwgaXMgbnVsbFxyXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc1snJ10udW5zaGlmdCh7aWQ6JycsIGxhYmVsOicnLCBzZWxlY3RlZDohc2VsZWN0ZWRTZXR9KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICghc2VsZWN0ZWRTZXQpIHtcclxuICAgICAgICAgICAgICAvLyBvcHRpb24gY291bGQgbm90IGJlIGZvdW5kLCB3ZSBoYXZlIHRvIGluc2VydCB0aGUgdW5kZWZpbmVkIGl0ZW1cclxuICAgICAgICAgICAgICBvcHRpb25Hcm91cHNbJyddLnVuc2hpZnQoe2lkOic/JywgbGFiZWw6JycsIHNlbGVjdGVkOnRydWV9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIE5vdyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbGlzdCBvZiBET00gbm9kZXMgdG8gbWF0Y2ggdGhlIG9wdGlvbkdyb3VwcyB3ZSBjb21wdXRlZCBhYm92ZVxyXG4gICAgICAgICAgZm9yIChncm91cEluZGV4ID0gMCwgZ3JvdXBMZW5ndGggPSBvcHRpb25Hcm91cE5hbWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgZ3JvdXBJbmRleCA8IGdyb3VwTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICBncm91cEluZGV4KyspIHtcclxuICAgICAgICAgICAgLy8gY3VycmVudCBvcHRpb24gZ3JvdXAgbmFtZSBvciAnJyBpZiBubyBncm91cFxyXG4gICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBvcHRpb25Hcm91cE5hbWVzW2dyb3VwSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgLy8gbGlzdCBvZiBvcHRpb25zIGZvciB0aGF0IGdyb3VwLiAoZmlyc3QgaXRlbSBoYXMgdGhlIHBhcmVudClcclxuICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPD0gZ3JvdXBJbmRleCkge1xyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ3JvdyB0aGUgb3B0aW9uR3JvdXBzXHJcbiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBvcHRHcm91cFRlbXBsYXRlLmNsb25lKCkuYXR0cignbGFiZWwnLCBvcHRpb25Hcm91cE5hbWUpLFxyXG4gICAgICAgICAgICAgICAgbGFiZWw6IG9wdGlvbkdyb3VwLmxhYmVsXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMgPSBbZXhpc3RpbmdQYXJlbnRdO1xyXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnB1c2goZXhpc3RpbmdPcHRpb25zKTtcclxuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZChleGlzdGluZ1BhcmVudC5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMgPSBvcHRpb25Hcm91cHNDYWNoZVtncm91cEluZGV4XTtcclxuICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IGV4aXN0aW5nT3B0aW9uc1swXTsgIC8vIGVpdGhlciBTRUxFQ1QgKG5vIGdyb3VwKSBvciBPUFRHUk9VUCBlbGVtZW50XHJcblxyXG4gICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgT1BUR1JPVVAgbGFiZWwgaWYgbm90IHRoZSBzYW1lLlxyXG4gICAgICAgICAgICAgIGlmIChleGlzdGluZ1BhcmVudC5sYWJlbCAhPSBvcHRpb25Hcm91cE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXR0cignbGFiZWwnLCBleGlzdGluZ1BhcmVudC5sYWJlbCA9IG9wdGlvbkdyb3VwTmFtZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsYXN0RWxlbWVudCA9IG51bGw7ICAvLyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgIGZvcihpbmRleCA9IDAsIGxlbmd0aCA9IG9wdGlvbkdyb3VwLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICBvcHRpb24gPSBvcHRpb25Hcm91cFtpbmRleF07XHJcbiAgICAgICAgICAgICAgaWYgKChleGlzdGluZ09wdGlvbiA9IGV4aXN0aW5nT3B0aW9uc1tpbmRleCsxXSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJldXNlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICBsYXN0RWxlbWVudCA9IGV4aXN0aW5nT3B0aW9uLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdPcHRpb24ubGFiZWwgIT09IG9wdGlvbi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC50ZXh0KGV4aXN0aW5nT3B0aW9uLmxhYmVsID0gb3B0aW9uLmxhYmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5pZCAhPT0gb3B0aW9uLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnZhbChleGlzdGluZ09wdGlvbi5pZCA9IG9wdGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpIHByb3ZpZGVkIGJ5IGpRdWVyeSBoYXMgc2lkZS1lZmZlY3RzXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdEVsZW1lbnRbMF0uc2VsZWN0ZWQgIT09IG9wdGlvbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIChleGlzdGluZ09wdGlvbi5zZWxlY3RlZCA9IG9wdGlvbi5zZWxlY3RlZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBncm93IGVsZW1lbnRzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIG51bGwgb3B0aW9uXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlkID09PSAnJyAmJiBudWxsT3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIHB1dCBiYWNrIHRoZSBwcmUtY29tcGlsZWQgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbE9wdGlvbjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIGpRdWVyeSh2MS40LjIpIEJ1ZzogV2Ugc2hvdWxkIGJlIGFibGUgdG8gY2hhaW4gdGhlIG1ldGhvZCBjYWxscywgYnV0XHJcbiAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnkgb24gc29tZSBicm93c2VyIHRoZSAudGV4dCgpIHJldHVybnMgYSBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoZW4gdGhlIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICAgIChlbGVtZW50ID0gb3B0aW9uVGVtcGxhdGUuY2xvbmUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgIC52YWwob3B0aW9uLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NlbGVjdGVkJywgb3B0aW9uLnNlbGVjdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnRleHQob3B0aW9uLmxhYmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucHVzaChleGlzdGluZ09wdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG9wdGlvbi5pZCxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uLnNlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5hZnRlcihlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUGFyZW50LmVsZW1lbnQuYXBwZW5kKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXBcclxuICAgICAgICAgICAgaW5kZXgrKzsgLy8gaW5jcmVtZW50IHNpbmNlIHRoZSBleGlzdGluZ09wdGlvbnNbMF0gaXMgcGFyZW50IGVsZW1lbnQgbm90IE9QVElPTlxyXG4gICAgICAgICAgICB3aGlsZShleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgICBleGlzdGluZ09wdGlvbnMucG9wKCkuZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy8gcmVtb3ZlIGFueSBleGNlc3NpdmUgT1BUR1JPVVBzIGZyb20gc2VsZWN0XHJcbiAgICAgICAgICB3aGlsZShvcHRpb25Hcm91cHNDYWNoZS5sZW5ndGggPiBncm91cEluZGV4KSB7XHJcbiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlLnBvcCgpWzBdLmVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XTtcclxuXHJcbnZhciBvcHRpb25EaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSkge1xyXG4gIHZhciBudWxsU2VsZWN0Q3RybCA9IHtcclxuICAgIGFkZE9wdGlvbjogbm9vcCxcclxuICAgIHJlbW92ZU9wdGlvbjogbm9vcFxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgcHJpb3JpdHk6IDEwMCxcclxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGF0dHIudmFsdWUpKSB7XHJcbiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xyXG4gICAgICAgIGlmICghaW50ZXJwb2xhdGVGbikge1xyXG4gICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIGVsZW1lbnQudGV4dCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcclxuICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLFxyXG4gICAgICAgICAgICBzZWxlY3RDdHJsID0gcGFyZW50LmRhdGEoc2VsZWN0Q3RybE5hbWUpIHx8XHJcbiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cFxyXG5cclxuICAgICAgICBpZiAoc2VsZWN0Q3RybCAmJiBzZWxlY3RDdHJsLmRhdGFib3VuZCkge1xyXG4gICAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIE9wZXJhIGRlZmF1bHRzIHRvIHRydWUgYW5kIGlmIG5vdCBvdmVycmlkZGVuIHRoaXMgbWVzc2VzIHVwIHRoZSByZXBlYXRlci5cclxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdGhlIHZpZXcgdG8gZHJpdmUgdGhlIGluaXRpYWxpemF0aW9uIG9mIHRoZSBtb2RlbCBhbnl3YXkuXHJcbiAgICAgICAgICBlbGVtZW50LnByb3AoJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxlY3RDdHJsID0gbnVsbFNlbGVjdEN0cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xyXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGludGVycG9sYXRlRm4sIGZ1bmN0aW9uIGludGVycG9sYXRlV2F0Y2hBY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcclxuICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIGlmIChuZXdWYWwgIT09IG9sZFZhbCkgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24ob2xkVmFsKTtcclxuICAgICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24obmV3VmFsKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihhdHRyLnZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihhdHRyLnZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbn1dO1xyXG5cclxudmFyIHN0eWxlRGlyZWN0aXZlID0gdmFsdWVGbih7XHJcbiAgcmVzdHJpY3Q6ICdFJyxcclxuICB0ZXJtaW5hbDogdHJ1ZVxyXG59KTtcclxuXHJcbiAgLy90cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBhbmd1bGFyLmVsZW1lbnQoKS5yZWFkKClcclxuICAvL2J1dCB3ZSB3aWxsIHJlYmluZCBvbiBib290c3RyYXAgYWdhaW4uXHJcbiAgYmluZEpRdWVyeSgpO1xyXG5cclxuICBwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcik7XHJcblxyXG4gIGpxTGl0ZShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBhbmd1bGFySW5pdChkb2N1bWVudCwgYm9vdHN0cmFwKTtcclxuICB9KTtcclxuXHJcbn0pKHdpbmRvdywgZG9jdW1lbnQpO1xyXG5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLmZpbmQoJ2hlYWQnKS5wcmVwZW5kKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+QGNoYXJzZXQgXCJVVEYtOFwiO1tuZ1xcXFw6Y2xvYWtdLFtuZy1jbG9ha10sW2RhdGEtbmctY2xvYWtdLFt4LW5nLWNsb2FrXSwubmctY2xvYWssLngtbmctY2xvYWssLm5nLWhpZGV7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7IiwiOyhmdW5jdGlvbiAoZXhwb3J0cykge1xyXG5cclxuLy9MaXN0IGZyb20gbm9kZS1odG1scGFyc2VyXHJcbnZhciBzaW5nbGVUYWdzID0ge1xyXG4gIGFyZWE6IDEsXHJcbiAgYmFzZTogMSxcclxuICBiYXNlZm9udDogMSxcclxuICBicjogMSxcclxuICBjb2w6IDEsXHJcbiAgZnJhbWU6IDEsXHJcbiAgaHI6IDEsXHJcbiAgaW1nOiAxLFxyXG4gIGlucHV0OiAxLFxyXG4gIGlzaW5kZXg6IDEsXHJcbiAgbGluazogMSxcclxuICBtZXRhOiAxLFxyXG4gIHBhcmFtOiAxLFxyXG4gIGVtYmVkOiAxXHJcbn07XHJcblxyXG52YXIgZXhwciA9IHtcclxuICB1cHBlckNhc2VDaGFyczogLyhbQS1aXSkvZyxcclxuICBicmVha0JldHdlZW5UYWdzOiAvKDwoXFwvP1xcdyspLio/PikoPz08KD8hXFwvXFwyKSkvZ2ksXHJcbiAgc2luZ2xlVGFnOiAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGFncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSBpbiBzaW5nbGVUYWdzKSB7XHJcbiAgICAgIHRhZ3MucHVzaChpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVnRXhwKCc8JyArIHRhZ3Muam9pbignfDwnKSwgJ2knKTtcclxuICB9KSgpXHJcbn07XHJcblxyXG52YXIgdW5jYW5vbiA9IGZ1bmN0aW9uKHN0ciwgbGV0dGVyKSB7XHJcbiAgcmV0dXJuICctJyArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG5cclxudmFyIEhUTUxFbmNvZGUgPSBmdW5jdGlvbih0ZXh0KSB7IHJldHVybiB0ZXh0OyB9OyAvLyBOb29wXHJcblxyXG5leHBvcnRzLnN0cmluZ2lmeUVsZW1lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlFbGVtZW50KGVsZW1lbnQpIHtcclxuICB2YXIgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICByZXQgPSB7XHJcbiAgICAgICAgc3RhcnQ6IFwiPFwiICsgdGFnTmFtZSxcclxuICAgICAgICBlbmQ6JydcclxuICAgICAgfSxcclxuICAgICAgYXR0cmlidXRlcyA9IFtdLFxyXG4gICAgICBpLFxyXG4gICAgICBhdHRyaWJ1dGUgPSBudWxsO1xyXG5cclxuICBpZiAoZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aCkge1xyXG4gICAgcmV0LnN0YXJ0ICs9IFwiIFwiO1xyXG4gICAgZm9yIChpID0gMDsgaTxlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgYXR0cmlidXRlID0gZWxlbWVudC5hdHRyaWJ1dGVzLml0ZW0oaSk7XHJcbiAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUubmFtZSArICc9XCInICtcclxuICAgICAgICAgICAgICAgICAgICAgIEhUTUxFbmNvZGUoYXR0cmlidXRlLm5vZGVWYWx1ZSwgdHJ1ZSkgKyAnXCInKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0LnN0YXJ0ICs9IGF0dHJpYnV0ZXMuam9pbihcIiBcIik7XHJcblxyXG4gIGlmIChzaW5nbGVUYWdzW3RhZ05hbWVdKSB7XHJcbiAgICByZXQuc3RhcnQgKz0gXCIgLz5cIjtcclxuICAgIHJldC5lbmQgPSAnJztcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0LnN0YXJ0ICs9IFwiPlwiO1xyXG4gICAgcmV0LmVuZCA9IFwiPC9cIiArIHRhZ05hbWUgKyBcIj5cIjtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXQ7XHJcbn07XHJcblxyXG52YXIgcmF3VGV4dEVsZW1lbnRzID0gL1NDUklQVHxTVFlMRS9pO1xyXG5cclxuZnVuY3Rpb24gc3RyaW5naWZ5RG9jdHlwZSAoZG9jdHlwZSkge1xyXG4gIGlmIChkb2N0eXBlLm93bmVyRG9jdW1lbnQgJiYgZG9jdHlwZS5vd25lckRvY3VtZW50LmZ1bGxEVCkge1xyXG4gICAgcmV0dXJuIGRvY3R5cGUub3duZXJEb2N1bWVudC5mdWxsRFQ7XHJcbiAgfVxyXG5cclxuICB2YXIgZHQgPSAnPCFET0NUWVBFICcgKyBkb2N0eXBlLm5hbWU7XHJcbiAgaWYgKGRvY3R5cGUucHVibGljSWQpIHtcclxuICAgIC8vIFB1YmxpYyBJRCBtYXkgbmV2ZXIgY29udGFpbiBkb3VibGUgcXVvdGVzLCBzbyB0aGlzIGlzIGFsd2F5cyBzYWZlLlxyXG4gICAgZHQgKz0gJyBQVUJMSUMgXCInICsgZG9jdHlwZS5wdWJsaWNJZCArICdcIiAnO1xyXG4gIH1cclxuICBpZiAoIWRvY3R5cGUucHVibGljSWQgJiYgZG9jdHlwZS5zeXN0ZW1JZCkge1xyXG4gICAgZHQgKz0gJyBTWVNURU0gJztcclxuICB9XHJcbiAgaWYgKGRvY3R5cGUuc3lzdGVtSWQpIHtcclxuICAgIC8vIFN5c3RlbSBJRCBtYXkgY29udGFpbiBkb3VibGUgcXVvdGVzIE9SIHNpbmdsZSBxdW90ZXMsIG5vdCBuZXZlciBib3RoLlxyXG4gICAgaWYgKGRvY3R5cGUuc3lzdGVtSWQuaW5kZXhPZignXCInKSA+IC0xKSB7XHJcbiAgICAgIGR0ICs9IFwiJ1wiICsgZG9jdHlwZS5zeXN0ZW1JZCArIFwiJ1wiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHQgKz0gJ1wiJyArIGRvY3R5cGUuc3lzdGVtSWQgKyAnXCInO1xyXG4gICAgfVxyXG4gIH1cclxuICBkdCArPSAnPic7XHJcbiAgcmV0dXJuIGR0O1xyXG59XHJcblxyXG5leHBvcnRzLm1ha2VIdG1sR2VuZXJhdG9yID0gZnVuY3Rpb24gbWFrZUh0bWxHZW5lcmF0b3IoaW5kZW50VW5pdCwgZW9sKSB7XHJcbiAgaW5kZW50VW5pdCA9IGluZGVudFVuaXQgfHwgXCJcIjtcclxuICBlb2wgPSBlb2wgfHwgXCJcIjtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGdlbmVyYXRlSHRtbFJlY3Vyc2l2ZShub2RlLCByYXdUZXh0LCBjdXJJbmRlbnQpIHtcclxuICAgIHZhciByZXQgPSBcIlwiLCBwYXJlbnQsIGN1cnJlbnQsIGksIGNoaWxkcmVuO1xyXG4gICAgY3VySW5kZW50ID0gY3VySW5kZW50IHx8IFwiXCI7XHJcbiAgICBpZiAobm9kZSkge1xyXG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSAmJlxyXG4gICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gbm9kZS5FTlRJVFlfUkVGRVJFTkNFX05PREUpIHtcclxuICAgICAgICBub2RlID0gbm9kZS5lbnRpdHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBjaGlsZE5vZGVzUmF3VGV4dCA9IHJhd1RleHQgfHwgcmF3VGV4dEVsZW1lbnRzLnRlc3Qobm9kZS5ub2RlTmFtZSk7XHJcbiAgICAgIFxyXG4gICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcclxuICAgICAgICBjYXNlIG5vZGUuRUxFTUVOVF9OT0RFOlxyXG4gICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gXCJURU1QTEFURVwiKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jb250ZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZXNSYXdUZXh0ID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjdXJyZW50ID0gZXhwb3J0cy5zdHJpbmdpZnlFbGVtZW50KG5vZGUpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoY2hpbGROb2Rlc1Jhd1RleHQpIHtcclxuICAgICAgICAgICAgcmV0ICs9IGN1ckluZGVudCArIGN1cnJlbnQuc3RhcnQ7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXQgKz0gY3VySW5kZW50ICsgY3VycmVudC5zdGFydDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09IFwiSFRNTFwiKSByZXQgKz0gZW9sO1xyXG5cclxuICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlblswXS5ub2RlVHlwZSAhPT0gbm9kZS5URVhUX05PREUpIHtcclxuICAgICAgICAgICAgICByZXQgKz0gZW9sO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoaT0wOyBpPGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgcmV0ICs9IGdlbmVyYXRlSHRtbFJlY3Vyc2l2ZShjaGlsZHJlbltpXSwgY2hpbGROb2Rlc1Jhd1RleHQsIGN1ckluZGVudCArIGluZGVudFVuaXQpIHx8IChpID09PSAwICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEgPyBlb2wgOiBcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ubm9kZVR5cGUgIT09IG5vZGUuVEVYVF9OT0RFIHx8IHJldC5jaGFyQXQocmV0Lmxlbmd0aCAtIDEpID09PSBlb2wpIHtcclxuICAgICAgICAgICAgICByZXQgKz0gY3VySW5kZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldCArPSBjdXJyZW50LmVuZCArIGVvbDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldCArPSAoKHJhd1RleHQgPyBub2RlLm5vZGVWYWx1ZSA6IEhUTUxFbmNvZGUobm9kZS5ub2RlVmFsdWUsIGZhbHNlKSkgfHwgJycpICsgY3VycmVudC5lbmQgKyBlb2w7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmIChub2RlLm5vZGVOYW1lID09PSBcIkhFQURcIiB8fCBub2RlLm5vZGVOYW1lID09PSBcIkJPRFlcIikgcmV0ICs9IGVvbDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBub2RlLlRFWFRfTk9ERTpcclxuICAgICAgICAgIC8vIFNraXAgcHVyZSB3aGl0ZXNwYWNlIG5vZGVzIGlmIHdlJ3JlIGluZGVudGluZ1xyXG4gICAgICAgICAgaWYgKCFpbmRlbnRVbml0IHx8ICEvXltcXHNcXG5dKiQvLnRlc3Qobm9kZS5ub2RlVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldCArPSAocmF3VGV4dCA/IG5vZGUubm9kZVZhbHVlIDogSFRNTEVuY29kZShub2RlLm5vZGVWYWx1ZSwgZmFsc2UpKSB8fCAnJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2Ugbm9kZS5DT01NRU5UX05PREU6XHJcbiAgICAgICAgICByZXQgKz0gY3VySW5kZW50ICsgJzwhLS0nICsgbm9kZS5ub2RlVmFsdWUgKyAnLS0+JyArIGVvbDtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2Ugbm9kZS5ET0NVTUVOVF9OT0RFOlxyXG4gICAgICAgICAgZm9yIChpPTA7IGk8bm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldCArPSBnZW5lcmF0ZUh0bWxSZWN1cnNpdmUobm9kZS5jaGlsZE5vZGVzW2ldLCBjaGlsZE5vZGVzUmF3VGV4dCwgY3VySW5kZW50KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2Ugbm9kZS5ET0NVTUVOVF9UWVBFX05PREU6XHJcbiAgICAgICAgICByZXQgKz0gc3RyaW5naWZ5RG9jdHlwZShub2RlKTtcclxuICAgICAgICAgIHJldCArPSBlb2w7IC8vIFR3byBuZXdsaW5lcyBhZnRlciBkb2N0eXBlXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydHMuZG9tVG9IdG1sID0gZnVuY3Rpb24oZG9tLCBub2Zvcm1hdCwgcmF3KSB7XHJcbiAgdmFyIGh0bWxHZW5lcmF0b3IgPSBleHBvcnRzLm1ha2VIdG1sR2VuZXJhdG9yKG5vZm9ybWF0ID8gXCJcIiA6IFwiICBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9mb3JtYXQgPyBcIlwiIDogXCJcXG5cIik7XHJcbiAgaWYgKGRvbS50b0FycmF5KSB7XHJcbiAgICAvLyBub2RlIGxpc3RcclxuICAgIGRvbSA9IGRvbS50b0FycmF5KCk7XHJcbiAgfVxyXG4gIGlmICh0eXBlb2YgZG9tLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHZhciByZXQgPSBcIlwiO1xyXG4gICAgZm9yICh2YXIgaT0wLGxlbj1kb20ubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XHJcbiAgICAgIHJldCArPSBodG1sR2VuZXJhdG9yKGRvbVtpXSwgcmF3KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHNpbmdsZSBub2RlXHJcbiAgICByZXR1cm4gaHRtbEdlbmVyYXRvcihkb20sIHJhdyk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbn0pKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiID8gZXhwb3J0cyA6IGRvbWluYXRyaXggPSB7fSk7IiwiLyoqXHJcbiAqIE9wZXJhdGl2ZVxyXG4gKiAtLS1cclxuICogT3BlcmF0aXZlIGlzIGEgc21hbGwgSlMgdXRpbGl0eSBmb3Igc2VhbWxlc3NseSBjcmVhdGluZyBXZWIgV29ya2VyIHNjcmlwdHMuXHJcbiAqIC0tLVxyXG4gKiBAYXV0aG9yIEphbWVzIFBhZG9sc2V5IGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb21cclxuICogQHJlcG8gaHR0cDovL2dpdGh1Yi5jb20vcGFkb2xzZXkvb3BlcmF0aXZlXHJcbiAqIEB2ZXJzaW9uIDAuMi4xXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmltcG9ydFNjcmlwdHMpIHtcclxuXHRcdC8vIEknbSBhIHdvcmtlciEgUnVuIHRoZSBib2lsZXItc2NyaXB0OlxyXG5cdFx0Ly8gKE9wZXJhdGl2ZSBpdHNlbGYgaXMgY2FsbGVkIGluIElFMTAgYXMgYSB3b3JrZXIsXHJcblx0XHQvLyAgdG8gYXZvaWQgU2VjdXJpdHlFcnJvcnMpXHJcblx0XHR3b3JrZXJCb2lsZXJTY3JpcHQoKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcblx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcblx0dmFyIG9wU2NyaXB0ID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdO1xyXG5cdHZhciBvcFNjcmlwdFVSTCA9IC9vcGVyYXRpdmUvLnRlc3Qob3BTY3JpcHQuc3JjKSAmJiBvcFNjcmlwdC5zcmM7XHJcblxyXG5cdC8vIERlZmF1bHQgYmFzZSBVUkwgKHRvIGJlIHByZXBlbmRlZCB0byByZWxhdGl2ZSBkZXBlbmRlbmN5IFVSTHMpXHJcblx0Ly8gaXMgY3VycmVudCBwYWdlJ3MgcGFyZW50IGRpcjpcclxuXHR2YXIgYmFzZVVSTCA9IChcclxuXHRcdGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArXHJcblx0XHRsb2NhdGlvbi5ob3N0bmFtZSArXHJcblx0XHQobG9jYXRpb24ucG9ydD8nOicrbG9jYXRpb24ucG9ydDonJykgK1xyXG5cdFx0bG9jYXRpb24ucGF0aG5hbWVcclxuXHQpLnJlcGxhY2UoL1teXFwvXSskLywgJycpO1xyXG5cclxuXHR2YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xyXG5cdHZhciBCbG9iQnVpbGRlciA9IHdpbmRvdy5CbG9iQnVpbGRlciB8fCB3aW5kb3cuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1vekJsb2JCdWlsZGVyO1xyXG5cclxuXHR2YXIgd29ya2VyVmlhQmxvYlN1cHBvcnQgPSAoZnVuY3Rpb24oKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRuZXcgV29ya2VyKG1ha2VCbG9iVVJJKCc7JykpO1xyXG5cdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0oKSk7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFByb3ZpZGUgT2JqZWN0LmNyZWF0ZSBzaGltXHJcblx0ICovXHJcblx0dmFyIG9iakNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24obykge1xyXG5cdFx0ZnVuY3Rpb24gRigpIHt9XHJcblx0XHRGLnByb3RvdHlwZSA9IG87XHJcblx0XHRyZXR1cm4gbmV3IEYoKTtcclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBtYWtlQmxvYlVSSShzY3JpcHQpIHtcclxuXHRcdHZhciBibG9iO1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdGJsb2IgPSBuZXcgQmxvYihbc2NyaXB0XSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KTtcclxuXHRcdH0gY2F0Y2ggKGUpIHsgXHJcblx0XHRcdGJsb2IgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcclxuXHRcdFx0YmxvYi5hcHBlbmQoc2NyaXB0KTtcclxuXHRcdFx0YmxvYiA9IGJsb2IuZ2V0QmxvYigpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cdH1cclxuXHJcblx0Ly8gSW5kaWNhdGVzIHdoZXRoZXIgb3BlcmF0aXZlcyB3aWxsIHJ1biB3aXRoaW4gd29ya2VyczpcclxuXHRvcGVyYXRpdmUuaGFzV29ya2VyU3VwcG9ydCA9ICEhd2luZG93LldvcmtlcjtcclxuXHJcblx0b3BlcmF0aXZlLlByb21pc2UgPSB3aW5kb3cuUHJvbWlzZTtcclxuXHJcblx0Ly8gRXhwb3NlOlxyXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBvcGVyYXRpdmU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHdpbmRvdy5vcGVyYXRpdmUgPSBvcGVyYXRpdmU7XHJcblx0fVxyXG5cdFxyXG5cclxuXHRvcGVyYXRpdmUuc2V0U2VsZlVSTCA9IGZ1bmN0aW9uKHVybCkge1xyXG5cdFx0b3BTY3JpcHRVUkwgPSB1cmw7XHJcblx0fTtcclxuXHJcblx0b3BlcmF0aXZlLnNldEJhc2VVUkwgPSBmdW5jdGlvbihiYXNlKSB7XHJcblx0XHRiYXNlVVJMID0gYmFzZTtcclxuXHR9O1xyXG5cclxuXHRvcGVyYXRpdmUuZ2V0QmFzZVVSTCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIGJhc2VVUkw7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogT3BlcmF0aXZlOiBFeHBvc2VkIE9wZXJhdGl2ZSBDb25zdHJ1Y3RvclxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBtb2R1bGUgT2JqZWN0IGNvbnRhaW5pbmcgbWV0aG9kcy9wcm9wZXJ0aWVzXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gT3BlcmF0aXZlKG1vZHVsZSwgZGVwZW5kZW5jaWVzKSB7XHJcblxyXG5cdFx0dmFyIF9zZWxmID0gdGhpcztcclxuXHJcblx0XHRtb2R1bGUuZ2V0ID0gbW9kdWxlLmdldCB8fCBmdW5jdGlvbihwcm9wKSB7XHJcblx0XHRcdHJldHVybiB0aGlzW3Byb3BdO1xyXG5cdFx0fTtcclxuXHJcblx0XHRtb2R1bGUuc2V0ID0gbW9kdWxlLnNldCB8fCBmdW5jdGlvbihwcm9wLCB2YWx1ZSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpc1twcm9wXSA9IHZhbHVlO1xyXG5cdFx0fTtcclxuXHJcblx0XHR0aGlzLl9jdXJUb2tlbiA9IDA7XHJcblx0XHR0aGlzLl9xdWV1ZSA9IFtdO1xyXG5cclxuXHRcdHRoaXMuaXNEZXN0cm95ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuaXNDb250ZXh0UmVhZHkgPSBmYWxzZTtcclxuXHJcblx0XHR0aGlzLm1vZHVsZSA9IG1vZHVsZTtcclxuXHRcdHRoaXMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzIHx8IFtdO1xyXG5cclxuXHRcdHRoaXMuZGF0YVByb3BlcnRpZXMgPSB7fTtcclxuXHRcdHRoaXMuYXBpID0ge307XHJcblx0XHR0aGlzLmNhbGxiYWNrcyA9IHt9O1xyXG5cdFx0dGhpcy5kZWZlcnJlZHMgPSB7fTtcclxuXHJcblx0XHR0aGlzLl9maXhEZXBlbmRlbmN5VVJMcygpO1xyXG5cdFx0dGhpcy5fc2V0dXAoKTtcclxuXHJcblx0XHRmb3IgKHZhciBtZXRob2ROYW1lIGluIG1vZHVsZSkge1xyXG5cdFx0XHRpZiAoaGFzT3duLmNhbGwobW9kdWxlLCBtZXRob2ROYW1lKSkge1xyXG5cdFx0XHRcdHRoaXMuX2NyZWF0ZUV4cG9zZWRNZXRob2QobWV0aG9kTmFtZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmFwaS5fX29wZXJhdGl2ZV9fID0gdGhpcztcclxuXHJcblx0XHQvLyBQcm92aWRlIHRoZSBpbnN0YW5jZSdzIGRlc3Ryb3kgbWV0aG9kIG9uIHRoZSBleHBvc2VkIEFQSTpcclxuXHRcdHRoaXMuYXBpLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9zZWxmLmRlc3Ryb3koKTtcclxuXHRcdH07XHJcblxyXG5cdH1cclxuXHJcblx0T3BlcmF0aXZlLnByb3RvdHlwZSA9IHtcclxuXHJcblx0XHRfbWFyc2hhbDogZnVuY3Rpb24odikge1xyXG5cdFx0XHRyZXR1cm4gdjtcclxuXHRcdH0sXHJcblxyXG5cdFx0X2RlbWFyc2hhbDogZnVuY3Rpb24odikge1xyXG5cdFx0XHRyZXR1cm4gdjtcclxuXHRcdH0sXHJcblxyXG5cdFx0X2VucXVldWU6IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHRcdHRoaXMuX3F1ZXVlLnB1c2goZm4pO1xyXG5cdFx0fSxcclxuXHJcblx0XHRfZml4RGVwZW5kZW5jeVVSTHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgZGVwcyA9IHRoaXMuZGVwZW5kZW5jaWVzO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGRlcHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcblx0XHRcdFx0dmFyIGRlcCA9IGRlcHNbaV07XHJcblx0XHRcdFx0aWYgKCEvXFwvXFwvLy50ZXN0KGRlcCkpIHtcclxuXHRcdFx0XHRcdGRlcHNbaV0gPSBkZXAucmVwbGFjZSgvXlxcLz8vLCBiYXNlVVJMKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0X2RlcXVldWVBbGw6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX3F1ZXVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG5cdFx0XHRcdHRoaXMuX3F1ZXVlW2ldLmNhbGwodGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5fcXVldWUgPSBbXTtcclxuXHRcdH0sXHJcblxyXG5cdFx0X2J1aWxkQ29udGV4dFNjcmlwdDogZnVuY3Rpb24oYm9pbGVyU2NyaXB0KSB7XHJcblxyXG5cdFx0XHR2YXIgc2NyaXB0ID0gW107XHJcblx0XHRcdHZhciBtb2R1bGUgPSB0aGlzLm1vZHVsZTtcclxuXHRcdFx0dmFyIGRhdGFQcm9wZXJ0aWVzID0gdGhpcy5kYXRhUHJvcGVydGllcztcclxuXHRcdFx0dmFyIHByb3BlcnR5O1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSBpbiBtb2R1bGUpIHtcclxuXHRcdFx0XHRwcm9wZXJ0eSA9IG1vZHVsZVtpXTtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHByb3BlcnR5ID09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdHNjcmlwdC5wdXNoKCcgICBzZWxmW1wiJyArIGkucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpICsgJ1wiXSA9ICcgKyBwcm9wZXJ0eS50b1N0cmluZygpICsgJzsnKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGF0YVByb3BlcnRpZXNbaV0gPSBwcm9wZXJ0eTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBzY3JpcHQuam9pbignXFxuJykgKyAoXHJcblx0XHRcdFx0Ym9pbGVyU2NyaXB0ID8gJ1xcbignICsgYm9pbGVyU2NyaXB0LnRvU3RyaW5nKCkgKyAnKCkpOycgOiAnJ1xyXG5cdFx0XHQpO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0X2NyZWF0ZUV4cG9zZWRNZXRob2Q6IGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcclxuXHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdHRoaXMuYXBpW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cdFx0XHRcdGlmIChzZWxmLmlzRGVzdHJveWVkKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZXJhdGl2ZTogQ2Fubm90IHJ1biBtZXRob2QuIE9wZXJhdGl2ZSBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZCcpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIHRva2VuID0gKytzZWxmLl9jdXJUb2tlbjtcclxuXHRcdFx0XHR2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuXHRcdFx0XHR2YXIgY2IgPSB0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09ICdmdW5jdGlvbicgJiYgYXJncy5wb3AoKTtcclxuXHJcblx0XHRcdFx0aWYgKCFjYiAmJiAhb3BlcmF0aXZlLlByb21pc2UpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcclxuXHRcdFx0XHRcdFx0J09wZXJhdGl2ZTogTm8gY2FsbGJhY2sgaGFzIGJlZW4gcGFzc2VkLiBBc3N1bWVkIHRoYXQgeW91IHdhbnQgYSBwcm9taXNlLiAnICtcclxuXHRcdFx0XHRcdFx0J0J1dCBgb3BlcmF0aXZlLlByb21pc2VgIGlzIG51bGwuIFBsZWFzZSBwcm92aWRlIFByb21pc2UgcG9seWZpbGwvbGliLidcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoY2IpIHtcclxuXHJcblx0XHRcdFx0XHRzZWxmLmNhbGxiYWNrc1t0b2tlbl0gPSBjYjtcclxuXHJcblx0XHRcdFx0XHQvLyBFbnN1cmUgZWl0aGVyIGNvbnRleHQgcnVucyB0aGUgbWV0aG9kIGFzeW5jOlxyXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0cnVuTWV0aG9kKCk7XHJcblx0XHRcdFx0XHR9LCAxKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmIChvcGVyYXRpdmUuUHJvbWlzZSkge1xyXG5cclxuXHRcdFx0XHRcdC8vIE5vIENhbGxiYWNrIC0tIFByb21pc2UgdXNlZDpcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gbmV3IG9wZXJhdGl2ZS5Qcm9taXNlKGZ1bmN0aW9uKGRlZmVycmVkKSB7XHJcblx0XHRcdFx0XHRcdGRlZmVycmVkLmZ1bGZpbCA9IGRlZmVycmVkLmZ1bGZpbGw7XHJcblx0XHRcdFx0XHRcdHNlbGYuZGVmZXJyZWRzW3Rva2VuXSA9IGRlZmVycmVkO1xyXG5cdFx0XHRcdFx0XHRydW5NZXRob2QoKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uIHJ1bk1ldGhvZCgpIHtcclxuXHRcdFx0XHRcdGlmIChzZWxmLmlzQ29udGV4dFJlYWR5KSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuX3J1bk1ldGhvZChtZXRob2ROYW1lLCB0b2tlbiwgYXJncyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZWxmLl9lbnF1ZXVlKHJ1bk1ldGhvZCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmlzRGVzdHJveWVkID0gdHJ1ZTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHJcblx0LyoqXHJcblx0ICogT3BlcmF0aXZlIFdvcmtlclxyXG5cdCAqL1xyXG5cdE9wZXJhdGl2ZS5Xb3JrZXIgPSBmdW5jdGlvbiBXb3JrZXIobW9kdWxlKSB7XHJcblx0XHR0aGlzLl9tc2dRdWV1ZSA9IFtdO1xyXG5cdFx0T3BlcmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0fTtcclxuXHJcblx0dmFyIFdvcmtlclByb3RvID0gT3BlcmF0aXZlLldvcmtlci5wcm90b3R5cGUgPSBvYmpDcmVhdGUoT3BlcmF0aXZlLnByb3RvdHlwZSk7XHJcblxyXG5cdFdvcmtlclByb3RvLl9vbldvcmtlck1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XHJcblx0XHR2YXIgZGF0YSA9IGUuZGF0YTtcclxuXHJcblx0XHRpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnICYmIGRhdGEuaW5kZXhPZigncGluZ2JhY2snKSA9PT0gMCkge1xyXG5cdFx0XHRpZiAoZGF0YSA9PT0gJ3BpbmdiYWNrOnN0cnVjdHVyZWRDbG9uaW5nU3VwcG9ydD1OTycpIHtcclxuXHRcdFx0XHQvLyBObyBzdHJ1Y3R1cmVkQ2xvbmluZ1N1cHBvcnQgc3VwcG9ydCAobWFyc2hhbCBKU09OIGZyb20gbm93IG9uKTpcclxuXHRcdFx0XHR0aGlzLl9tYXJzaGFsID0gZnVuY3Rpb24obykgeyByZXR1cm4gSlNPTi5zdHJpbmdpZnkobyk7IH07XHJcblx0XHRcdFx0dGhpcy5fZGVtYXJzaGFsID0gZnVuY3Rpb24obykgeyByZXR1cm4gSlNPTi5wYXJzZShvKTsgfTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5pc0NvbnRleHRSZWFkeSA9IHRydWU7XHJcblx0XHRcdHRoaXMuX3Bvc3RNZXNzYWdlKHtcclxuXHRcdFx0XHRkZWZpbml0aW9uczogdGhpcy5kYXRhUHJvcGVydGllc1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5fZGVxdWV1ZUFsbCgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRhdGEgPSB0aGlzLl9kZW1hcnNoYWwoZGF0YSk7XHJcblxyXG5cdFx0c3dpdGNoIChkYXRhLmNtZCkge1xyXG5cdFx0XHRjYXNlICdjb25zb2xlJzpcclxuXHRcdFx0XHR3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZVtkYXRhLm1ldGhvZF0uYXBwbHkod2luZG93LmNvbnNvbGUsIGRhdGEuYXJncyk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJ3Jlc3VsdCc6XHJcblxyXG5cdFx0XHRcdHZhciBjYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tzW2RhdGEudG9rZW5dO1xyXG5cdFx0XHRcdHZhciBkZWZlcnJlZCA9IHRoaXMuZGVmZXJyZWRzW2RhdGEudG9rZW5dO1xyXG5cclxuXHRcdFx0XHRkZWxldGUgdGhpcy5jYWxsYmFja3NbZGF0YS50b2tlbl07XHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZGVmZXJyZWRzW2RhdGEudG9rZW5dO1xyXG5cclxuXHRcdFx0XHR2YXIgZGVmZXJyZWRBY3Rpb24gPSBkYXRhLnJlc3VsdCAmJiBkYXRhLnJlc3VsdC5pc0RlZmVycmVkICYmIGRhdGEucmVzdWx0LmFjdGlvbjtcclxuXHJcblx0XHRcdFx0aWYgKGRlZmVycmVkICYmIGRlZmVycmVkQWN0aW9uKSB7XHJcblx0XHRcdFx0XHRkZWZlcnJlZFtkZWZlcnJlZEFjdGlvbl0oZGF0YS5yZXN1bHQuYXJnc1swXSk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChjYWxsYmFjaykge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkodGhpcywgZGF0YS5yZXN1bHQuYXJncyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHRXb3JrZXJQcm90by5fc2V0dXAgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgd29ya2VyO1xyXG5cdFx0dmFyIHNjcmlwdCA9IHRoaXMuX2J1aWxkQ29udGV4dFNjcmlwdChcclxuXHRcdFx0Ly8gVGhlIHNjcmlwdCBpcyBub3QgaW5jbHVkZWQgaWYgd2UncmUgRXZhbCdpbmcgdGhpcyBmaWxlIGRpcmVjdGx5OlxyXG5cdFx0XHR3b3JrZXJWaWFCbG9iU3VwcG9ydCA/IHdvcmtlckJvaWxlclNjcmlwdCA6ICcnXHJcblx0XHQpO1xyXG5cclxuXHRcdGlmICh0aGlzLmRlcGVuZGVuY2llcy5sZW5ndGgpIHtcclxuXHRcdFx0c2NyaXB0ID0gJ2ltcG9ydFNjcmlwdHMoXCInICsgdGhpcy5kZXBlbmRlbmNpZXMuam9pbignXCIsIFwiJykgKyAnXCIpO1xcbicgKyBzY3JpcHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHdvcmtlclZpYUJsb2JTdXBwb3J0KSB7XHJcblx0XHRcdHdvcmtlciA9IHRoaXMud29ya2VyID0gbmV3IFdvcmtlciggbWFrZUJsb2JVUkkoc2NyaXB0KSApO1xyXG5cdFx0fSAgZWxzZSB7XHJcblx0XHRcdGlmICghb3BTY3JpcHRVUkwpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZXJhcml0dmU6IE5vIG9wZXJhdGl2ZS5qcyBVUkwgYXZhaWxhYmxlLiBQbGVhc2Ugc2V0IHZpYSBvcGVyYXRpdmUuc2V0U2VsZlVSTCguLi4pJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0d29ya2VyID0gdGhpcy53b3JrZXIgPSBuZXcgV29ya2VyKCBvcFNjcmlwdFVSTCApO1xyXG5cdFx0XHQvLyBNYXJzaGFsLWFnbm9zdGljIGluaXRpYWwgbWVzc2FnZSBpcyBib2lsZXItY29kZTpcclxuXHRcdFx0Ly8gKFdlIGRvbid0IHlldCBrbm93IGlmIHN0cnVjdHVyZWQtY2xvbmluZyBpcyBzdXBwb3J0ZWQgc28gd2Ugc2VuZCBhIHN0cmluZylcclxuXHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKCdFVkFMfCcgKyBzY3JpcHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHdvcmtlci5wb3N0TWVzc2FnZShbJ1BJTkcnXSk7IC8vIEluaXRpYWwgUElOR1xyXG5cclxuXHRcdHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRzZWxmLl9vbldvcmtlck1lc3NhZ2UoZSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHRXb3JrZXJQcm90by5fcG9zdE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHtcclxuXHRcdHJldHVybiB0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh0aGlzLl9tYXJzaGFsKG1zZykpO1xyXG5cdH07XHJcblxyXG5cdFdvcmtlclByb3RvLl9ydW5NZXRob2QgPSBmdW5jdGlvbihtZXRob2ROYW1lLCB0b2tlbiwgYXJncykge1xyXG5cdFx0dGhpcy5fcG9zdE1lc3NhZ2Uoe1xyXG5cdFx0XHRtZXRob2Q6IG1ldGhvZE5hbWUsXHJcblx0XHRcdGFyZ3M6IGFyZ3MsXHJcblx0XHRcdHRva2VuOiB0b2tlblxyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0V29ya2VyUHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy53b3JrZXIudGVybWluYXRlKCk7XHJcblx0XHRPcGVyYXRpdmUucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcclxuXHR9O1xyXG5cclxuXHJcblx0LyoqXHJcblx0ICogT3BlcmF0aXZlIElGcmFtZVxyXG5cdCAqL1xyXG5cdE9wZXJhdGl2ZS5JZnJhbWUgPSBmdW5jdGlvbiBJZnJhbWUobW9kdWxlKSB7XHJcblx0XHRPcGVyYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHR9O1xyXG5cclxuXHR2YXIgSWZyYW1lUHJvdG8gPSBPcGVyYXRpdmUuSWZyYW1lLnByb3RvdHlwZSA9IG9iakNyZWF0ZShPcGVyYXRpdmUucHJvdG90eXBlKTtcclxuXHJcblx0dmFyIF9sb2FkZWRNZXRob2ROYW1lSSA9IDA7XHJcblxyXG5cdElmcmFtZVByb3RvLl9zZXR1cCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciBsb2FkZWRNZXRob2ROYW1lID0gJ19fb3BlcmF0aXZlSUZyYW1lTG9hZGVkJyArICsrX2xvYWRlZE1ldGhvZE5hbWVJO1xyXG5cclxuXHRcdHRoaXMubW9kdWxlLmlzV29ya2VyID0gZmFsc2U7XHJcblxyXG5cdFx0dmFyIGlmcmFtZSA9IHRoaXMuaWZyYW1lID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChcclxuXHRcdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcclxuXHRcdCk7XHJcblxyXG5cdFx0aWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG5cdFx0dmFyIGlXaW4gPSB0aGlzLmlmcmFtZVdpbmRvdyA9IGlmcmFtZS5jb250ZW50V2luZG93O1xyXG5cdFx0dmFyIGlEb2MgPSBpV2luLmRvY3VtZW50O1xyXG5cclxuXHRcdC8vIENyb3NzIGJyb3dzZXIgKHRlc3RlZCBpbiBJRTgsOSkgd2F5IHRvIGNhbGwgbWV0aG9kIGZyb20gd2l0aGluXHJcblx0XHQvLyBJRlJBTUUgYWZ0ZXIgYWxsIDxTY3JpcHQ+cyBoYXZlIGxvYWRlZDpcclxuXHRcdHdpbmRvd1tsb2FkZWRNZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdFx0d2luZG93W2xvYWRlZE1ldGhvZE5hbWVdID0gbnVsbDtcclxuXHJcblx0XHRcdHZhciBzY3JpcHQgPSBpRG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG5cdFx0XHR2YXIganMgPSBzZWxmLl9idWlsZENvbnRleHRTY3JpcHQoaWZyYW1lQm9pbGVyU2NyaXB0KTtcclxuXHJcblx0XHRcdGlmIChzY3JpcHQudGV4dCAhPT0gdm9pZCAwKSB7XHJcblx0XHRcdFx0c2NyaXB0LnRleHQgPSBqcztcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzY3JpcHQuaW5uZXJIVE1MID0ganM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlEb2MuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpIGluIHNlbGYuZGF0YVByb3BlcnRpZXMpIHtcclxuXHRcdFx0XHRpV2luW2ldID0gc2VsZi5kYXRhUHJvcGVydGllc1tpXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2VsZi5pc0NvbnRleHRSZWFkeSA9IHRydWU7XHJcblx0XHRcdHNlbGYuX2RlcXVldWVBbGwoKTtcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdGlEb2Mub3BlbigpO1xyXG5cdFx0aWYgKHRoaXMuZGVwZW5kZW5jaWVzLmxlbmd0aCkge1xyXG5cdFx0XHRpRG9jLndyaXRlKFxyXG5cdFx0XHRcdCc8c2NyaXB0IHNyYz1cIicgKyB0aGlzLmRlcGVuZGVuY2llcy5qb2luKCdcIj48L3NjcmlwdD48c2NyaXB0IHNyYz1cIicpICsgJ1wiPjwvc2NyaXB0PidcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdC8vIFBsYWNlIDxzY3JpcHQ+IGF0IGJvdHRvbSB0byB0ZWxsIHBhcmVudC1wYWdlIHdoZW4gZGVwZW5kZW5jaWVzIGFyZSBsb2FkZWQ6XHJcblx0XHRpRG9jLndyaXRlKCc8c2NyaXB0PndpbmRvdy50b3AuJyArIGxvYWRlZE1ldGhvZE5hbWUgKyAnKCk7PC9zY3JpcHQ+Jyk7XHJcblx0XHRpRG9jLmNsb3NlKCk7XHJcblxyXG5cdH07XHJcblxyXG5cdElmcmFtZVByb3RvLl9ydW5NZXRob2QgPSBmdW5jdGlvbihtZXRob2ROYW1lLCB0b2tlbiwgYXJncykge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dmFyIGNhbGxiYWNrID0gdGhpcy5jYWxsYmFja3NbdG9rZW5dO1xyXG5cdFx0dmFyIGRlZmVycmVkID0gdGhpcy5kZWZlcnJlZHNbdG9rZW5dO1xyXG5cdFx0ZGVsZXRlIHRoaXMuY2FsbGJhY2tzW3Rva2VuXTtcclxuXHRcdGRlbGV0ZSB0aGlzLmRlZmVycmVkc1t0b2tlbl07XHJcblx0XHR0aGlzLmlmcmFtZVdpbmRvdy5fX3J1bl9fKG1ldGhvZE5hbWUsIGFyZ3MsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgY2IgPSBjYWxsYmFjaztcclxuXHRcdFx0aWYgKGNiKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xyXG5cdFx0XHRcdGNiLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPcGVyYXRpdmU6IFlvdSBoYXZlIGFscmVhZHkgcmV0dXJuZWQuJyk7XHJcblx0XHRcdH1cclxuXHRcdH0sIGRlZmVycmVkKTtcclxuXHR9O1xyXG5cclxuXHRJZnJhbWVQcm90by5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuaWZyYW1lKTtcclxuXHRcdE9wZXJhdGl2ZS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xyXG5cdH07XHJcblxyXG5cdG9wZXJhdGl2ZS5PcGVyYXRpdmUgPSBPcGVyYXRpdmU7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cG9zZWQgb3BlcmF0aXZlIGZhY3RvcnlcclxuXHQgKi9cclxuXHRmdW5jdGlvbiBvcGVyYXRpdmUobW9kdWxlLCBkZXBlbmRlbmNpZXMpIHtcclxuXHJcblx0XHR2YXIgT3BlcmF0aXZlQ29udGV4dCA9IG9wZXJhdGl2ZS5oYXNXb3JrZXJTdXBwb3J0ID9cclxuXHRcdFx0T3BlcmF0aXZlLldvcmtlciA6IE9wZXJhdGl2ZS5JZnJhbWU7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBtb2R1bGUgPT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHQvLyBBbGxvdyBhIHNpbmdsZSBmdW5jdGlvbiB0byBiZSBwYXNzZWQuXHJcblx0XHRcdHZhciBvID0gbmV3IE9wZXJhdGl2ZUNvbnRleHQoeyBtYWluOiBtb2R1bGUgfSwgZGVwZW5kZW5jaWVzKTtcclxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBvLmFwaS5tYWluLmFwcGx5KG8sIGFyZ3VtZW50cyk7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBPcGVyYXRpdmVDb250ZXh0KG1vZHVsZSwgZGVwZW5kZW5jaWVzKS5hcGk7XHJcblxyXG5cdH1cclxuXHJcbi8qKlxyXG4gKiBUaGUgYm9pbGVycGxhdGUgZm9yIHRoZSBJZnJhbWUgQ29udGV4dFxyXG4gKiBOT1RFOlxyXG4gKiAgdGhpcydsbCBiZSBleGVjdXRlZCB3aXRoaW4gYW4gaWZyYW1lLCBub3QgaGVyZS5cclxuICogIEluZGVudGVkIEAgWmVybyB0byBtYWtlIG5pY2VyIGRlYnVnIGNvZGUgd2l0aGluIHdvcmtlclxyXG4gKi9cclxuZnVuY3Rpb24gaWZyYW1lQm9pbGVyU2NyaXB0KCkge1xyXG5cclxuXHQvLyBDYWxsZWQgZnJvbSBwYXJlbnQtd2luZG93OlxyXG5cdHdpbmRvdy5fX3J1bl9fID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgYXJncywgY2IsIGRlZmVycmVkKSB7XHJcblxyXG5cdFx0dmFyIGlzQXN5bmMgPSBmYWxzZTtcclxuXHRcdHZhciBpc0RlZmVycmVkID0gZmFsc2U7XHJcblxyXG5cdFx0d2luZG93LmFzeW5jID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlzQXN5bmMgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gY2I7XHJcblx0XHR9O1xyXG5cclxuXHRcdHdpbmRvdy5kZWZlcnJlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpc0RlZmVycmVkID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIGRlZmVycmVkO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAoY2IpIHtcclxuXHRcdFx0YXJncy5wdXNoKGNiKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcmVzdWx0ID0gd2luZG93W21ldGhvZE5hbWVdLmFwcGx5KHdpbmRvdywgYXJncyk7XHJcblxyXG5cdFx0d2luZG93LmFzeW5jID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignT3BlcmF0aXZlOiBhc3luYygpIGNhbGxlZCBhdCBvZGQgdGltZScpO1xyXG5cdFx0fTtcclxuXHJcblx0XHR3aW5kb3cuZGVmZXJyZWQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPcGVyYXRpdmU6IGRlZmVycmVkKCkgY2FsbGVkIGF0IG9kZCB0aW1lJyk7XHJcblx0XHR9O1xyXG5cclxuXHJcblx0XHRpZiAoIWlzRGVmZXJyZWQgJiYgIWlzQXN5bmMgJiYgcmVzdWx0ICE9PSB2b2lkIDApIHtcclxuXHRcdFx0Ly8gRGVwcmVjYXRlZCBkaXJlY3QtcmV0dXJuaW5nIGFzIG9mIDAuMi4wXHJcblx0XHRcdGNiKHJlc3VsdCk7XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBib2lsZXJwbGF0ZSBmb3IgdGhlIFdvcmtlciBCbG9iXHJcbiAqIE5PVEU6XHJcbiAqICB0aGlzJ2xsIGJlIGV4ZWN1dGVkIHdpdGhpbiBhbiBpZnJhbWUsIG5vdCBoZXJlLlxyXG4gKiAgSW5kZW50ZWQgQCBaZXJvIHRvIG1ha2UgbmljZXIgZGVidWcgY29kZSB3aXRoaW4gd29ya2VyXHJcbiAqL1xyXG5mdW5jdGlvbiB3b3JrZXJCb2lsZXJTY3JpcHQoKSB7XHJcblxyXG5cdHZhciBwb3N0TWVzc2FnZSA9IHNlbGYucG9zdE1lc3NhZ2U7XHJcblx0dmFyIHN0cnVjdHVyZWRDbG9uaW5nU3VwcG9ydCA9IG51bGw7XHJcblxyXG5cdHNlbGYuY29uc29sZSA9IHt9O1xyXG5cdHNlbGYuaXNXb3JrZXIgPSB0cnVlO1xyXG5cclxuXHQvLyBQcm92aWRlIGJhc2ljIGNvbnNvbGUgaW50ZXJmYWNlOlxyXG5cdFsnbG9nJywgJ2RlYnVnJywgJ2Vycm9yJywgJ2luZm8nLCAnd2FybicsICd0aW1lJywgJ3RpbWVFbmQnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGgpIHtcclxuXHRcdHNlbGYuY29uc29sZVttZXRoXSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRwb3N0TWVzc2FnZSh7XHJcblx0XHRcdFx0Y21kOiAnY29uc29sZScsXHJcblx0XHRcdFx0bWV0aG9kOiBtZXRoLFxyXG5cdFx0XHRcdGFyZ3M6IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0fSk7XHJcblxyXG5cdHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uKGUpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IGUuZGF0YTtcclxuXHJcblx0XHRpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycgJiYgZGF0YS5pbmRleE9mKCdFVkFMfCcpID09PSAwKSB7XHJcblx0XHRcdGV2YWwoZGF0YS5zdWJzdHJpbmcoNSkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN0cnVjdHVyZWRDbG9uaW5nU3VwcG9ydCA9PSBudWxsKSB7XHJcblxyXG5cdFx0XHQvLyBlLmRhdGEgb2YgWydQSU5HJ10gKEFuIGFycmF5KSBpbmRpY2F0ZXMgdHJhbnNmZXJyYWJsZU9ialN1cHBvcnRcclxuXHRcdFx0Ly8gZS5kYXRhIG9mICdcIlBJTkdcIicgKEEgc3RyaW5nKSBpbmRpY2F0ZXMgbm8gc3VwcG9ydCAoQXJyYXkgaGFzIGJlZW4gc2VyaWFsaXplZClcclxuXHRcdFx0c3RydWN0dXJlZENsb25pbmdTdXBwb3J0ID0gZS5kYXRhWzBdID09PSAnUElORyc7XHJcblxyXG5cdFx0XHQvLyBQaW5nYmFjayB0byBwYXJlbnQgcGFnZTpcclxuXHRcdFx0c2VsZi5wb3N0TWVzc2FnZShcclxuXHRcdFx0XHRzdHJ1Y3R1cmVkQ2xvbmluZ1N1cHBvcnQgP1xyXG5cdFx0XHRcdFx0J3BpbmdiYWNrOnN0cnVjdHVyZWRDbG9uaW5nU3VwcG9ydD1ZRVMnIDpcclxuXHRcdFx0XHRcdCdwaW5nYmFjazpzdHJ1Y3R1cmVkQ2xvbmluZ1N1cHBvcnQ9Tk8nXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRpZiAoIXN0cnVjdHVyZWRDbG9uaW5nU3VwcG9ydCkge1xyXG5cdFx0XHRcdHBvc3RNZXNzYWdlID0gZnVuY3Rpb24obXNnKSB7XHJcblx0XHRcdFx0XHQvLyBNYXJzaGFsIGJlZm9yZSBzZW5kaW5nXHJcblx0XHRcdFx0XHRyZXR1cm4gc2VsZi5wb3N0TWVzc2FnZShKU09OLnN0cmluZ2lmeShtc2cpKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFzdHJ1Y3R1cmVkQ2xvbmluZ1N1cHBvcnQpIHtcclxuXHRcdFx0Ly8gRGVtYXJzaGFsOlxyXG5cdFx0XHRkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGVmcyA9IGRhdGEuZGVmaW5pdGlvbnM7XHJcblx0XHR2YXIgaXNEZWZlcnJlZCA9IGZhbHNlO1xyXG5cdFx0dmFyIGlzQXN5bmMgPSBmYWxzZTtcclxuXHRcdHZhciBhcmdzID0gZGF0YS5hcmdzO1xyXG5cclxuXHRcdGlmIChkZWZzKSB7XHJcblx0XHRcdC8vIEluaXRpYWwgZGVmaW5pdGlvbnM6XHJcblx0XHRcdGZvciAodmFyIGkgaW4gZGVmcykge1xyXG5cdFx0XHRcdHNlbGZbaV0gPSBkZWZzW2ldO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRhcmdzLnB1c2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdC8vIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCB0byBvcGVyYXRpdmUgbWV0aG9kXHJcblx0XHRcdHJldHVyblJlc3VsdCh7XHJcblx0XHRcdFx0YXJnczogW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0c2VsZi5hc3luYyA9IGZ1bmN0aW9uKCkgeyAvLyBBc3luYyBkZXByZWNhdGVkIGFzIG9mIDAuMi4wXHJcblx0XHRcdGlzQXN5bmMgPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVyblJlc3VsdCh7IGFyZ3M6IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSB9KTsgfTtcclxuXHRcdH07XHJcblxyXG5cdFx0c2VsZi5kZWZlcnJlZCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpc0RlZmVycmVkID0gdHJ1ZTtcclxuXHRcdFx0dmFyIGRlZiA9IHt9O1xyXG5cdFx0XHRmdW5jdGlvbiBmdWxmaWxsKHIpIHtcclxuXHRcdFx0XHRyZXR1cm5SZXN1bHQoe1xyXG5cdFx0XHRcdFx0aXNEZWZlcnJlZDogdHJ1ZSxcclxuXHRcdFx0XHRcdGFjdGlvbjogJ2Z1bGZpbGwnLFxyXG5cdFx0XHRcdFx0YXJnczogW3JdXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGRlZjtcclxuXHRcdFx0fVxyXG5cdFx0XHRmdW5jdGlvbiByZWplY3Qocikge1xyXG5cdFx0XHRcdHJldHVyblJlc3VsdCh7XHJcblx0XHRcdFx0XHRpc0RlZmVycmVkOiB0cnVlLFxyXG5cdFx0XHRcdFx0YWN0aW9uOiAncmVqZWN0JyxcclxuXHRcdFx0XHRcdGFyZ3M6IFtyXVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRlZi5mdWxmaWwgPSBkZWYuZnVsZmlsbCA9IGZ1bGZpbGw7XHJcblx0XHRcdGRlZi5yZWplY3QgPSByZWplY3Q7XHJcblx0XHRcdHJldHVybiBkZWY7XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIENhbGwgYWN0dWFsIG9wZXJhdGl2ZSBtZXRob2Q6XHJcblx0XHR2YXIgcmVzdWx0ID0gc2VsZltkYXRhLm1ldGhvZF0uYXBwbHkoc2VsZiwgYXJncyk7XHJcblxyXG5cdFx0aWYgKCFpc0RlZmVycmVkICYmICFpc0FzeW5jICYmIHJlc3VsdCAhPT0gdm9pZCAwKSB7XHJcblx0XHRcdC8vIERlcHJlY2F0ZWQgZGlyZWN0LXJldHVybmluZyBhcyBvZiAwLjIuMFxyXG5cdFx0XHRyZXR1cm5SZXN1bHQoe1xyXG5cdFx0XHRcdGFyZ3M6IFtyZXN1bHRdXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuZGVmZXJyZWQgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPcGVyYXRpdmU6IGRlZmVycmVkKCkgY2FsbGVkIGF0IG9kZCB0aW1lJyk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHNlbGYuYXN5bmMgPSBmdW5jdGlvbigpIHsgLy8gQXN5bmMgZGVwcmVjYXRlZCBhcyBvZiAwLjIuMFxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZXJhdGl2ZTogYXN5bmMoKSBjYWxsZWQgYXQgb2RkIHRpbWUnKTtcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmV0dXJuUmVzdWx0KHJlcykge1xyXG5cdFx0XHRwb3N0TWVzc2FnZSh7XHJcblx0XHRcdFx0Y21kOiAncmVzdWx0JyxcclxuXHRcdFx0XHR0b2tlbjogZGF0YS50b2tlbixcclxuXHRcdFx0XHRyZXN1bHQ6IHJlc1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0Ly8gT3ZlcnJpZGUgd2l0aCBlcnJvci10aHJvd2VyIGlmIHdlJ3ZlIGFscmVhZHkgcmV0dXJuZWQ6XHJcblx0XHRcdHJldHVyblJlc3VsdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignT3BlcmF0aXZlOiBZb3UgaGF2ZSBhbHJlYWR5IHJldHVybmVkLicpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59XHJcblxyXG59KCkpOyIsIihmdW5jdGlvbigpe1xuZnVuY3Rpb24gZSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICB9XG59XG5mdW5jdGlvbiBtKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGIpIHtcbiAgICB0aGlzW2FdID0gYlxuICB9XG59XG5mdW5jdGlvbiBhYShhKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1thXVxuICB9XG59XG5mdW5jdGlvbiBiYShhKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYVxuICB9XG59XG52YXIgcCwgY2EgPSBjYSB8fCB7fSwgcSA9IHRoaXM7XG5mdW5jdGlvbiBkYShhKSB7XG4gIGEgPSBhLnNwbGl0KFwiLlwiKTtcbiAgZm9yKHZhciBiID0gcSwgYztjID0gYS5zaGlmdCgpOykge1xuICAgIGlmKG51bGwgIT0gYltjXSkge1xuICAgICAgYiA9IGJbY11cbiAgICB9ZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuICByZXR1cm4gYlxufVxuZnVuY3Rpb24gZWEoKSB7XG59XG5mdW5jdGlvbiBmYShhKSB7XG4gIHZhciBiID0gdHlwZW9mIGE7XG4gIGlmKFwib2JqZWN0XCIgPT0gYikge1xuICAgIGlmKGEpIHtcbiAgICAgIGlmKGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm5cImFycmF5XCJcbiAgICAgIH1cbiAgICAgIGlmKGEgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJcbiAgICAgIH1cbiAgICAgIHZhciBjID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpO1xuICAgICAgaWYoXCJbb2JqZWN0IFdpbmRvd11cIiA9PSBjKSB7XG4gICAgICAgIHJldHVyblwib2JqZWN0XCJcbiAgICAgIH1cbiAgICAgIGlmKFwiW29iamVjdCBBcnJheV1cIiA9PSBjIHx8IFwibnVtYmVyXCIgPT0gdHlwZW9mIGEubGVuZ3RoICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGEuc3BsaWNlICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUgJiYgIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJzcGxpY2VcIikpIHtcbiAgICAgICAgcmV0dXJuXCJhcnJheVwiXG4gICAgICB9XG4gICAgICBpZihcIltvYmplY3QgRnVuY3Rpb25dXCIgPT0gYyB8fCBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBhLmNhbGwgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiAhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcImNhbGxcIikpIHtcbiAgICAgICAgcmV0dXJuXCJmdW5jdGlvblwiXG4gICAgICB9XG4gICAgfWVsc2Uge1xuICAgICAgcmV0dXJuXCJudWxsXCJcbiAgICB9XG4gIH1lbHNlIHtcbiAgICBpZihcImZ1bmN0aW9uXCIgPT0gYiAmJiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiBhLmNhbGwpIHtcbiAgICAgIHJldHVyblwib2JqZWN0XCJcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJcbn1cbmZ1bmN0aW9uIHMoYSkge1xuICByZXR1cm5cImFycmF5XCIgPT0gZmEoYSlcbn1cbmZ1bmN0aW9uIGdhKGEpIHtcbiAgdmFyIGIgPSBmYShhKTtcbiAgcmV0dXJuXCJhcnJheVwiID09IGIgfHwgXCJvYmplY3RcIiA9PSBiICYmIFwibnVtYmVyXCIgPT0gdHlwZW9mIGEubGVuZ3RoXG59XG5mdW5jdGlvbiB1KGEpIHtcbiAgcmV0dXJuXCJzdHJpbmdcIiA9PSB0eXBlb2YgYVxufVxuZnVuY3Rpb24gaGEoYSkge1xuICByZXR1cm5cImZ1bmN0aW9uXCIgPT0gZmEoYSlcbn1cbmZ1bmN0aW9uIHYoYSkge1xuICByZXR1cm4gYVtpYV0gfHwgKGFbaWFdID0gKytqYSlcbn1cbnZhciBpYSA9IFwiY2xvc3VyZV91aWRfXCIgKyAoMUU5ICogTWF0aC5yYW5kb20oKSA+Pj4gMCksIGphID0gMDtcbmZ1bmN0aW9uIGthKGEsIGIsIGMpIHtcbiAgcmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsIGFyZ3VtZW50cylcbn1cbmZ1bmN0aW9uIGxhKGEsIGIsIGMpIHtcbiAgaWYoIWEpIHtcbiAgICB0aHJvdyBFcnJvcigpO1xuICB9XG4gIGlmKDIgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdmFyIGQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGMsIGQpO1xuICAgICAgcmV0dXJuIGEuYXBwbHkoYiwgYylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhLmFwcGx5KGIsIGFyZ3VtZW50cylcbiAgfVxufVxuZnVuY3Rpb24gdyhhLCBiLCBjKSB7XG4gIHcgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAmJiAtMSAhPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKSA/IGthIDogbGE7XG4gIHJldHVybiB3LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbn1cbnZhciB4ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gIHJldHVybituZXcgRGF0ZVxufTtcbmZ1bmN0aW9uIHkoYSwgYikge1xuICBmdW5jdGlvbiBjKCkge1xuICB9XG4gIGMucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucmEgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgY1xufVxuO2Z1bmN0aW9uIG1hKGEsIGIpIHtcbiAgZm9yKHZhciBjID0gMTtjIDwgYXJndW1lbnRzLmxlbmd0aDtjKyspIHtcbiAgICB2YXIgZCA9IFN0cmluZyhhcmd1bWVudHNbY10pLnJlcGxhY2UoL1xcJC9nLCBcIiQkJCRcIik7XG4gICAgYSA9IGEucmVwbGFjZSgvXFwlcy8sIGQpXG4gIH1cbiAgcmV0dXJuIGFcbn1cbmZ1bmN0aW9uIG5hKGEpIHtcbiAgaWYoIW9hLnRlc3QoYSkpIHtcbiAgICByZXR1cm4gYVxuICB9XG4gIC0xICE9IGEuaW5kZXhPZihcIiZcIikgJiYgKGEgPSBhLnJlcGxhY2UocGEsIFwiJmFtcDtcIikpO1xuICAtMSAhPSBhLmluZGV4T2YoXCI8XCIpICYmIChhID0gYS5yZXBsYWNlKHFhLCBcIiZsdDtcIikpO1xuICAtMSAhPSBhLmluZGV4T2YoXCI+XCIpICYmIChhID0gYS5yZXBsYWNlKHJhLCBcIiZndDtcIikpO1xuICAtMSAhPSBhLmluZGV4T2YoJ1wiJykgJiYgKGEgPSBhLnJlcGxhY2Uoc2EsIFwiJnF1b3Q7XCIpKTtcbiAgcmV0dXJuIGFcbn1cbnZhciBwYSA9IC8mL2csIHFhID0gLzwvZywgcmEgPSAvPi9nLCBzYSA9IC9cXFwiL2csIG9hID0gL1smPD5cXFwiXS87XG52YXIgeiwgdGEsIHVhLCB2YTtcbmZ1bmN0aW9uIHdhKCkge1xuICByZXR1cm4gcS5uYXZpZ2F0b3IgPyBxLm5hdmlnYXRvci51c2VyQWdlbnQgOiBudWxsXG59XG52YSA9IHVhID0gdGEgPSB6ID0gITE7XG52YXIgeGE7XG5pZih4YSA9IHdhKCkpIHtcbiAgdmFyIHlhID0gcS5uYXZpZ2F0b3I7XG4gIHogPSAwID09IHhhLmluZGV4T2YoXCJPcGVyYVwiKTtcbiAgdGEgPSAheiAmJiAtMSAhPSB4YS5pbmRleE9mKFwiTVNJRVwiKTtcbiAgdWEgPSAheiAmJiAtMSAhPSB4YS5pbmRleE9mKFwiV2ViS2l0XCIpO1xuICB2YSA9ICF6ICYmICF1YSAmJiBcIkdlY2tvXCIgPT0geWEucHJvZHVjdFxufVxudmFyIHphID0geiwgQSA9IHRhLCBBYSA9IHZhLCBCID0gdWEsIEJhID0gcS5uYXZpZ2F0b3IsIENhID0gLTEgIT0gKEJhICYmIEJhLnBsYXRmb3JtIHx8IFwiXCIpLmluZGV4T2YoXCJNYWNcIik7XG5mdW5jdGlvbiBEYSgpIHtcbiAgdmFyIGEgPSBxLmRvY3VtZW50O1xuICByZXR1cm4gYSA/IGEuZG9jdW1lbnRNb2RlIDogdm9pZCAwXG59XG52YXIgRWE7XG5hOiB7XG4gIHZhciBGYSA9IFwiXCIsIEdhO1xuICBpZih6YSAmJiBxLm9wZXJhKSB7XG4gICAgdmFyIEhhID0gcS5vcGVyYS52ZXJzaW9uLCBGYSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgSGEgPyBIYSgpIDogSGFcbiAgfWVsc2Uge1xuICAgIGlmKEFhID8gR2EgPSAvcnZcXDooW15cXCk7XSspKFxcKXw7KS8gOiBBID8gR2EgPSAvTVNJRVxccysoW15cXCk7XSspKFxcKXw7KS8gOiBCICYmIChHYSA9IC9XZWJLaXRcXC8oXFxTKykvKSwgR2EpIHtcbiAgICAgIHZhciBJYSA9IEdhLmV4ZWMod2EoKSksIEZhID0gSWEgPyBJYVsxXSA6IFwiXCJcbiAgICB9XG4gIH1cbiAgaWYoQSkge1xuICAgIHZhciBKYSA9IERhKCk7XG4gICAgaWYoSmEgPiBwYXJzZUZsb2F0KEZhKSkge1xuICAgICAgRWEgPSBTdHJpbmcoSmEpO1xuICAgICAgYnJlYWsgYVxuICAgIH1cbiAgfVxuICBFYSA9IEZhXG59XG52YXIgS2EgPSB7fTtcbmZ1bmN0aW9uIEMoYSkge1xuICB2YXIgYjtcbiAgaWYoIShiID0gS2FbYV0pKSB7XG4gICAgYiA9IDA7XG4gICAgZm9yKHZhciBjID0gU3RyaW5nKEVhKS5yZXBsYWNlKC9eW1xcc1xceGEwXSt8W1xcc1xceGEwXSskL2csIFwiXCIpLnNwbGl0KFwiLlwiKSwgZCA9IFN0cmluZyhhKS5yZXBsYWNlKC9eW1xcc1xceGEwXSt8W1xcc1xceGEwXSskL2csIFwiXCIpLnNwbGl0KFwiLlwiKSwgZiA9IE1hdGgubWF4KGMubGVuZ3RoLCBkLmxlbmd0aCksIGcgPSAwOzAgPT0gYiAmJiBnIDwgZjtnKyspIHtcbiAgICAgIHZhciBoID0gY1tnXSB8fCBcIlwiLCBuID0gZFtnXSB8fCBcIlwiLCBrID0gUmVnRXhwKFwiKFxcXFxkKikoXFxcXEQqKVwiLCBcImdcIiksIHQgPSBSZWdFeHAoXCIoXFxcXGQqKShcXFxcRCopXCIsIFwiZ1wiKTtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGwgPSBrLmV4ZWMoaCkgfHwgW1wiXCIsIFwiXCIsIFwiXCJdLCByID0gdC5leGVjKG4pIHx8IFtcIlwiLCBcIlwiLCBcIlwiXTtcbiAgICAgICAgaWYoMCA9PSBsWzBdLmxlbmd0aCAmJiAwID09IHJbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBiID0gKCgwID09IGxbMV0ubGVuZ3RoID8gMCA6IHBhcnNlSW50KGxbMV0sIDEwKSkgPCAoMCA9PSByWzFdLmxlbmd0aCA/IDAgOiBwYXJzZUludChyWzFdLCAxMCkpID8gLTEgOiAoMCA9PSBsWzFdLmxlbmd0aCA/IDAgOiBwYXJzZUludChsWzFdLCAxMCkpID4gKDAgPT0gclsxXS5sZW5ndGggPyAwIDogcGFyc2VJbnQoclsxXSwgMTApKSA/IDEgOiAwKSB8fCAoKDAgPT0gbFsyXS5sZW5ndGgpIDwgKDAgPT0gclsyXS5sZW5ndGgpID8gLTEgOiAoMCA9PSBsWzJdLmxlbmd0aCkgPiAoMCA9PSByWzJdLmxlbmd0aCkgPyAxIDogMCkgfHwgKGxbMl0gPCByWzJdID8gLTEgOiBsWzJdID4gclsyXSA/IDEgOiAwKVxuICAgICAgfXdoaWxlKDAgPT0gYilcbiAgICB9XG4gICAgYiA9IEthW2FdID0gMCA8PSBiXG4gIH1cbiAgcmV0dXJuIGJcbn1cbnZhciBMYSA9IHEuZG9jdW1lbnQsIE1hID0gTGEgJiYgQSA/IERhKCkgfHwgKFwiQ1NTMUNvbXBhdFwiID09IExhLmNvbXBhdE1vZGUgPyBwYXJzZUludChFYSwgMTApIDogNSkgOiB2b2lkIDA7XG5mdW5jdGlvbiBOYShhKSB7XG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgTmEpIDogdGhpcy5zdGFjayA9IEVycm9yKCkuc3RhY2sgfHwgXCJcIjtcbiAgYSAmJiAodGhpcy5tZXNzYWdlID0gU3RyaW5nKGEpKVxufVxueShOYSwgRXJyb3IpO1xuTmEucHJvdG90eXBlLm5hbWUgPSBcIkN1c3RvbUVycm9yXCI7XG5mdW5jdGlvbiBPYShhLCBiKSB7XG4gIGIudW5zaGlmdChhKTtcbiAgTmEuY2FsbCh0aGlzLCBtYS5hcHBseShudWxsLCBiKSk7XG4gIGIuc2hpZnQoKTtcbiAgdGhpcy5KYyA9IGFcbn1cbnkoT2EsIE5hKTtcbk9hLnByb3RvdHlwZS5uYW1lID0gXCJBc3NlcnRpb25FcnJvclwiO1xuZnVuY3Rpb24gUGEoYSwgYikge1xuICB0aHJvdyBuZXcgT2EoXCJGYWlsdXJlXCIgKyAoYSA/IFwiOiBcIiArIGEgOiBcIlwiKSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG59XG47dmFyIFFhID0gUmVnRXhwKFwiXig/OihbXjovPyMuXSspOik/KD86Ly8oPzooW14vPyNdKilAKT8oW14vIz9dKj8pKD86OihbMC05XSspKT8oPz1bLyM/XXwkKSk/KFtePyNdKyk/KD86XFxcXD8oW14jXSopKT8oPzojKC4qKSk/JFwiKTtcbmZ1bmN0aW9uIFJhKGEpIHtcbiAgdmFyIGIgPSBTYSwgYztcbiAgZm9yKGMgaW4gYikge1xuICAgIGEuY2FsbCh2b2lkIDAsIGJbY10sIGMsIGIpXG4gIH1cbn1cbmZ1bmN0aW9uIFRhKGEpIHtcbiAgdmFyIGIgPSBbXSwgYyA9IDAsIGQ7XG4gIGZvcihkIGluIGEpIHtcbiAgICBiW2MrK10gPSBhW2RdXG4gIH1cbiAgcmV0dXJuIGJcbn1cbmZ1bmN0aW9uIFVhKGEpIHtcbiAgdmFyIGIgPSBbXSwgYyA9IDAsIGQ7XG4gIGZvcihkIGluIGEpIHtcbiAgICBiW2MrK10gPSBkXG4gIH1cbiAgcmV0dXJuIGJcbn1cbnZhciBWYSA9IFwiY29uc3RydWN0b3IgaGFzT3duUHJvcGVydHkgaXNQcm90b3R5cGVPZiBwcm9wZXJ0eUlzRW51bWVyYWJsZSB0b0xvY2FsZVN0cmluZyB0b1N0cmluZyB2YWx1ZU9mXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gV2EoYSwgYikge1xuICBmb3IodmFyIGMsIGQsIGYgPSAxO2YgPCBhcmd1bWVudHMubGVuZ3RoO2YrKykge1xuICAgIGQgPSBhcmd1bWVudHNbZl07XG4gICAgZm9yKGMgaW4gZCkge1xuICAgICAgYVtjXSA9IGRbY11cbiAgICB9XG4gICAgZm9yKHZhciBnID0gMDtnIDwgVmEubGVuZ3RoO2crKykge1xuICAgICAgYyA9IFZhW2ddLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZCwgYykgJiYgKGFbY10gPSBkW2NdKVxuICAgIH1cbiAgfVxufVxuO3ZhciBEID0gQXJyYXkucHJvdG90eXBlLCBYYSA9IEQuaW5kZXhPZiA/IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgcmV0dXJuIEQuaW5kZXhPZi5jYWxsKGEsIGIsIGMpXG59IDogZnVuY3Rpb24oYSwgYiwgYykge1xuICBjID0gbnVsbCA9PSBjID8gMCA6IDAgPiBjID8gTWF0aC5tYXgoMCwgYS5sZW5ndGggKyBjKSA6IGM7XG4gIGlmKHUoYSkpIHtcbiAgICByZXR1cm4gdShiKSAmJiAxID09IGIubGVuZ3RoID8gYS5pbmRleE9mKGIsIGMpIDogLTFcbiAgfVxuICBmb3IoO2MgPCBhLmxlbmd0aDtjKyspIHtcbiAgICBpZihjIGluIGEgJiYgYVtjXSA9PT0gYikge1xuICAgICAgcmV0dXJuIGNcbiAgICB9XG4gIH1cbiAgcmV0dXJuLTFcbn0sIFlhID0gRC5mb3JFYWNoID8gZnVuY3Rpb24oYSwgYiwgYykge1xuICBELmZvckVhY2guY2FsbChhLCBiLCBjKVxufSA6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgZm9yKHZhciBkID0gYS5sZW5ndGgsIGYgPSB1KGEpID8gYS5zcGxpdChcIlwiKSA6IGEsIGcgPSAwO2cgPCBkO2crKykge1xuICAgIGcgaW4gZiAmJiBiLmNhbGwoYywgZltnXSwgZywgYSlcbiAgfVxufTtcbmZ1bmN0aW9uIFphKGEpIHtcbiAgcmV0dXJuIEQuY29uY2F0LmFwcGx5KEQsIGFyZ3VtZW50cylcbn1cbmZ1bmN0aW9uICRhKGEpIHtcbiAgdmFyIGIgPSBhLmxlbmd0aDtcbiAgaWYoMCA8IGIpIHtcbiAgICBmb3IodmFyIGMgPSBBcnJheShiKSwgZCA9IDA7ZCA8IGI7ZCsrKSB7XG4gICAgICBjW2RdID0gYVtkXVxuICAgIH1cbiAgICByZXR1cm4gY1xuICB9XG4gIHJldHVybltdXG59XG47ZnVuY3Rpb24gYWIoYSkge1xuICBpZihcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuTikge1xuICAgIHJldHVybiBhLk4oKVxuICB9XG4gIGlmKHUoYSkpIHtcbiAgICByZXR1cm4gYS5zcGxpdChcIlwiKVxuICB9XG4gIGlmKGdhKGEpKSB7XG4gICAgZm9yKHZhciBiID0gW10sIGMgPSBhLmxlbmd0aCwgZCA9IDA7ZCA8IGM7ZCsrKSB7XG4gICAgICBiLnB1c2goYVtkXSlcbiAgICB9XG4gICAgcmV0dXJuIGJcbiAgfVxuICByZXR1cm4gVGEoYSlcbn1cbmZ1bmN0aW9uIEUoYSwgYiwgYykge1xuICBpZihcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGEuZm9yRWFjaCkge1xuICAgIGEuZm9yRWFjaChiLCBjKVxuICB9ZWxzZSB7XG4gICAgaWYoZ2EoYSkgfHwgdShhKSkge1xuICAgICAgWWEoYSwgYiwgYylcbiAgICB9ZWxzZSB7XG4gICAgICB2YXIgZDtcbiAgICAgIGlmKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYS5rYSkge1xuICAgICAgICBkID0gYS5rYSgpXG4gICAgICB9ZWxzZSB7XG4gICAgICAgIGlmKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgYS5OKSB7XG4gICAgICAgICAgaWYoZ2EoYSkgfHwgdShhKSkge1xuICAgICAgICAgICAgZCA9IFtdO1xuICAgICAgICAgICAgZm9yKHZhciBmID0gYS5sZW5ndGgsIGcgPSAwO2cgPCBmO2crKykge1xuICAgICAgICAgICAgICBkLnB1c2goZylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICBkID0gVWEoYSlcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICBkID0gdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvcih2YXIgZiA9IGFiKGEpLCBnID0gZi5sZW5ndGgsIGggPSAwO2ggPCBnO2grKykge1xuICAgICAgICBiLmNhbGwoYywgZltoXSwgZCAmJiBkW2hdLCBhKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuO2Z1bmN0aW9uIGJiKGEsIGIpIHtcbiAgdGhpcy5PID0ge307XG4gIHRoaXMuaiA9IFtdO1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmKDEgPCBjKSB7XG4gICAgaWYoYyAlIDIpIHtcbiAgICAgIHRocm93IEVycm9yKFwiVW5ldmVuIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxuICAgIGZvcih2YXIgZCA9IDA7ZCA8IGM7ZCArPSAyKSB7XG4gICAgICB0aGlzLnNldChhcmd1bWVudHNbZF0sIGFyZ3VtZW50c1tkICsgMV0pXG4gICAgfVxuICB9ZWxzZSB7XG4gICAgaWYoYSkge1xuICAgICAgYSBpbnN0YW5jZW9mIGJiID8gKGMgPSBhLmthKCksIGQgPSBhLk4oKSkgOiAoYyA9IFVhKGEpLCBkID0gVGEoYSkpO1xuICAgICAgZm9yKHZhciBmID0gMDtmIDwgYy5sZW5ndGg7ZisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGNbZl0sIGRbZl0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5wID0gYmIucHJvdG90eXBlO1xucC5mID0gMDtcbnAuYmMgPSAwO1xucC5OID0gZnVuY3Rpb24oKSB7XG4gIGNiKHRoaXMpO1xuICBmb3IodmFyIGEgPSBbXSwgYiA9IDA7YiA8IHRoaXMuai5sZW5ndGg7YisrKSB7XG4gICAgYS5wdXNoKHRoaXMuT1t0aGlzLmpbYl1dKVxuICB9XG4gIHJldHVybiBhXG59O1xucC5rYSA9IGZ1bmN0aW9uKCkge1xuICBjYih0aGlzKTtcbiAgcmV0dXJuIHRoaXMuai5jb25jYXQoKVxufTtcbnAuaWEgPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiBkYih0aGlzLk8sIGEpXG59O1xucC5yZW1vdmUgPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiBkYih0aGlzLk8sIGEpID8gKGRlbGV0ZSB0aGlzLk9bYV0sIHRoaXMuZi0tLCB0aGlzLmJjKyssIHRoaXMuai5sZW5ndGggPiAyICogdGhpcy5mICYmIGNiKHRoaXMpLCAhMCkgOiAhMVxufTtcbmZ1bmN0aW9uIGNiKGEpIHtcbiAgaWYoYS5mICE9IGEuai5sZW5ndGgpIHtcbiAgICBmb3IodmFyIGIgPSAwLCBjID0gMDtiIDwgYS5qLmxlbmd0aDspIHtcbiAgICAgIHZhciBkID0gYS5qW2JdO1xuICAgICAgZGIoYS5PLCBkKSAmJiAoYS5qW2MrK10gPSBkKTtcbiAgICAgIGIrK1xuICAgIH1cbiAgICBhLmoubGVuZ3RoID0gY1xuICB9XG4gIGlmKGEuZiAhPSBhLmoubGVuZ3RoKSB7XG4gICAgZm9yKHZhciBmID0ge30sIGMgPSBiID0gMDtiIDwgYS5qLmxlbmd0aDspIHtcbiAgICAgIGQgPSBhLmpbYl0sIGRiKGYsIGQpIHx8IChhLmpbYysrXSA9IGQsIGZbZF0gPSAxKSwgYisrXG4gICAgfVxuICAgIGEuai5sZW5ndGggPSBjXG4gIH1cbn1cbnAuZ2V0ID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gZGIodGhpcy5PLCBhKSA/IHRoaXMuT1thXSA6IGJcbn07XG5wLnNldCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgZGIodGhpcy5PLCBhKSB8fCAodGhpcy5mKyssIHRoaXMuai5wdXNoKGEpLCB0aGlzLmJjKyspO1xuICB0aGlzLk9bYV0gPSBiXG59O1xucC5uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgYmIodGhpcylcbn07XG5mdW5jdGlvbiBkYihhLCBiKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYilcbn1cbjtmdW5jdGlvbiBGKGEsIGIpIHtcbiAgdmFyIGM7XG4gIGlmKGEgaW5zdGFuY2VvZiBGKSB7XG4gICAgdGhpcy5EID0gdm9pZCAwICE9PSBiID8gYiA6IGEuRCwgZWIodGhpcywgYS5xYSksIGMgPSBhLmFiLCBIKHRoaXMpLCB0aGlzLmFiID0gYywgZmIodGhpcywgYS5qYSksIGdiKHRoaXMsIGEuQmEpLCBoYih0aGlzLCBhLkgpLCBpYih0aGlzLCBhLlIubigpKSwgYyA9IGEuTWEsIEgodGhpcyksIHRoaXMuTWEgPSBjXG4gIH1lbHNlIHtcbiAgICBpZihhICYmIChjID0gU3RyaW5nKGEpLm1hdGNoKFFhKSkpIHtcbiAgICAgIHRoaXMuRCA9ICEhYjtcbiAgICAgIGViKHRoaXMsIGNbMV0gfHwgXCJcIiwgITApO1xuICAgICAgdmFyIGQgPSBjWzJdIHx8IFwiXCI7XG4gICAgICBIKHRoaXMpO1xuICAgICAgdGhpcy5hYiA9IGQgPyBkZWNvZGVVUklDb21wb25lbnQoZCkgOiBcIlwiO1xuICAgICAgZmIodGhpcywgY1szXSB8fCBcIlwiLCAhMCk7XG4gICAgICBnYih0aGlzLCBjWzRdKTtcbiAgICAgIGhiKHRoaXMsIGNbNV0gfHwgXCJcIiwgITApO1xuICAgICAgaWIodGhpcywgY1s2XSB8fCBcIlwiLCAhMCk7XG4gICAgICBjID0gY1s3XSB8fCBcIlwiO1xuICAgICAgSCh0aGlzKTtcbiAgICAgIHRoaXMuTWEgPSBjID8gZGVjb2RlVVJJQ29tcG9uZW50KGMpIDogXCJcIlxuICAgIH1lbHNlIHtcbiAgICAgIHRoaXMuRCA9ICEhYiwgdGhpcy5SID0gbmV3IGpiKG51bGwsIDAsIHRoaXMuRClcbiAgICB9XG4gIH1cbn1cbnAgPSBGLnByb3RvdHlwZTtcbnAucWEgPSBcIlwiO1xucC5hYiA9IFwiXCI7XG5wLmphID0gXCJcIjtcbnAuQmEgPSBudWxsO1xucC5IID0gXCJcIjtcbnAuTWEgPSBcIlwiO1xucC5tYyA9ICExO1xucC5EID0gITE7XG5wLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gW10sIGIgPSB0aGlzLnFhO1xuICBiICYmIGEucHVzaChrYihiLCBsYiksIFwiOlwiKTtcbiAgaWYoYiA9IHRoaXMuamEpIHtcbiAgICBhLnB1c2goXCIvL1wiKTtcbiAgICB2YXIgYyA9IHRoaXMuYWI7XG4gICAgYyAmJiBhLnB1c2goa2IoYywgbGIpLCBcIkBcIik7XG4gICAgYS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoYikpKTtcbiAgICBiID0gdGhpcy5CYTtcbiAgICBudWxsICE9IGIgJiYgYS5wdXNoKFwiOlwiLCBTdHJpbmcoYikpXG4gIH1cbiAgaWYoYiA9IHRoaXMuSCkge1xuICAgIHRoaXMuamEgJiYgXCIvXCIgIT0gYi5jaGFyQXQoMCkgJiYgYS5wdXNoKFwiL1wiKSwgYS5wdXNoKGtiKGIsIFwiL1wiID09IGIuY2hhckF0KDApID8gbWIgOiBuYikpXG4gIH1cbiAgKGIgPSB0aGlzLlIudG9TdHJpbmcoKSkgJiYgYS5wdXNoKFwiP1wiLCBiKTtcbiAgKGIgPSB0aGlzLk1hKSAmJiBhLnB1c2goXCIjXCIsIGtiKGIsIG9iKSk7XG4gIHJldHVybiBhLmpvaW4oXCJcIilcbn07XG5wLm4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBGKHRoaXMpXG59O1xuZnVuY3Rpb24gZWIoYSwgYiwgYykge1xuICBIKGEpO1xuICBhLnFhID0gYyA/IGIgPyBkZWNvZGVVUklDb21wb25lbnQoYikgOiBcIlwiIDogYjtcbiAgYS5xYSAmJiAoYS5xYSA9IGEucWEucmVwbGFjZSgvOiQvLCBcIlwiKSlcbn1cbmZ1bmN0aW9uIGZiKGEsIGIsIGMpIHtcbiAgSChhKTtcbiAgYS5qYSA9IGMgPyBiID8gZGVjb2RlVVJJQ29tcG9uZW50KGIpIDogXCJcIiA6IGJcbn1cbmZ1bmN0aW9uIGdiKGEsIGIpIHtcbiAgSChhKTtcbiAgaWYoYikge1xuICAgIGIgPSBOdW1iZXIoYik7XG4gICAgaWYoaXNOYU4oYikgfHwgMCA+IGIpIHtcbiAgICAgIHRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiICsgYik7XG4gICAgfVxuICAgIGEuQmEgPSBiXG4gIH1lbHNlIHtcbiAgICBhLkJhID0gbnVsbFxuICB9XG59XG5mdW5jdGlvbiBoYihhLCBiLCBjKSB7XG4gIEgoYSk7XG4gIGEuSCA9IGMgPyBiID8gZGVjb2RlVVJJQ29tcG9uZW50KGIpIDogXCJcIiA6IGJcbn1cbmZ1bmN0aW9uIGliKGEsIGIsIGMpIHtcbiAgSChhKTtcbiAgYiBpbnN0YW5jZW9mIGpiID8gKGEuUiA9IGIsIGEuUi5xYihhLkQpKSA6IChjIHx8IChiID0ga2IoYiwgcGIpKSwgYS5SID0gbmV3IGpiKGIsIDAsIGEuRCkpXG59XG5mdW5jdGlvbiBJKGEsIGIsIGMpIHtcbiAgSChhKTtcbiAgYS5SLnNldChiLCBjKVxufVxuZnVuY3Rpb24gcWIoYSwgYiwgYykge1xuICBIKGEpO1xuICBzKGMpIHx8IChjID0gW1N0cmluZyhjKV0pO1xuICByYihhLlIsIGIsIGMpXG59XG5mdW5jdGlvbiBKKGEpIHtcbiAgSChhKTtcbiAgSShhLCBcInp4XCIsIE1hdGguZmxvb3IoMjE0NzQ4MzY0OCAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KSArIE1hdGguYWJzKE1hdGguZmxvb3IoMjE0NzQ4MzY0OCAqIE1hdGgucmFuZG9tKCkpIF4geCgpKS50b1N0cmluZygzNikpO1xuICByZXR1cm4gYVxufVxuZnVuY3Rpb24gSChhKSB7XG4gIGlmKGEubWMpIHtcbiAgICB0aHJvdyBFcnJvcihcIlRyaWVkIHRvIG1vZGlmeSBhIHJlYWQtb25seSBVcmlcIik7XG4gIH1cbn1cbnAucWIgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMuRCA9IGE7XG4gIHRoaXMuUiAmJiB0aGlzLlIucWIoYSk7XG4gIHJldHVybiB0aGlzXG59O1xuZnVuY3Rpb24gc2IoYSwgYiwgYywgZCkge1xuICB2YXIgZiA9IG5ldyBGKG51bGwsIHZvaWQgMCk7XG4gIGEgJiYgZWIoZiwgYSk7XG4gIGIgJiYgZmIoZiwgYik7XG4gIGMgJiYgZ2IoZiwgYyk7XG4gIGQgJiYgaGIoZiwgZCk7XG4gIHJldHVybiBmXG59XG5mdW5jdGlvbiBrYihhLCBiKSB7XG4gIHJldHVybiB1KGEpID8gZW5jb2RlVVJJKGEpLnJlcGxhY2UoYiwgdGIpIDogbnVsbFxufVxuZnVuY3Rpb24gdGIoYSkge1xuICBhID0gYS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm5cIiVcIiArIChhID4+IDQgJiAxNSkudG9TdHJpbmcoMTYpICsgKGEgJiAxNSkudG9TdHJpbmcoMTYpXG59XG52YXIgbGIgPSAvWyNcXC9cXD9AXS9nLCBuYiA9IC9bXFwjXFw/Ol0vZywgbWIgPSAvW1xcI1xcP10vZywgcGIgPSAvW1xcI1xcP0BdL2csIG9iID0gLyMvZztcbmZ1bmN0aW9uIGpiKGEsIGIsIGMpIHtcbiAgdGhpcy5DID0gYSB8fCBudWxsO1xuICB0aGlzLkQgPSAhIWNcbn1cbmZ1bmN0aW9uIEsoYSkge1xuICBpZighYS5pICYmIChhLmkgPSBuZXcgYmIsIGEuZiA9IDAsIGEuQykpIHtcbiAgICBmb3IodmFyIGIgPSBhLkMuc3BsaXQoXCImXCIpLCBjID0gMDtjIDwgYi5sZW5ndGg7YysrKSB7XG4gICAgICB2YXIgZCA9IGJbY10uaW5kZXhPZihcIj1cIiksIGYgPSBudWxsLCBnID0gbnVsbDtcbiAgICAgIDAgPD0gZCA/IChmID0gYltjXS5zdWJzdHJpbmcoMCwgZCksIGcgPSBiW2NdLnN1YnN0cmluZyhkICsgMSkpIDogZiA9IGJbY107XG4gICAgICBmID0gZGVjb2RlVVJJQ29tcG9uZW50KGYucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XG4gICAgICBmID0gTChhLCBmKTtcbiAgICAgIGEuYWRkKGYsIGcgPyBkZWNvZGVVUklDb21wb25lbnQoZy5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKSA6IFwiXCIpXG4gICAgfVxuICB9XG59XG5wID0gamIucHJvdG90eXBlO1xucC5pID0gbnVsbDtcbnAuZiA9IG51bGw7XG5wLmFkZCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgSyh0aGlzKTtcbiAgdGhpcy5DID0gbnVsbDtcbiAgYSA9IEwodGhpcywgYSk7XG4gIHZhciBjID0gdGhpcy5pLmdldChhKTtcbiAgYyB8fCB0aGlzLmkuc2V0KGEsIGMgPSBbXSk7XG4gIGMucHVzaChiKTtcbiAgdGhpcy5mKys7XG4gIHJldHVybiB0aGlzXG59O1xucC5yZW1vdmUgPSBmdW5jdGlvbihhKSB7XG4gIEsodGhpcyk7XG4gIGEgPSBMKHRoaXMsIGEpO1xuICByZXR1cm4gdGhpcy5pLmlhKGEpID8gKHRoaXMuQyA9IG51bGwsIHRoaXMuZiAtPSB0aGlzLmkuZ2V0KGEpLmxlbmd0aCwgdGhpcy5pLnJlbW92ZShhKSkgOiAhMVxufTtcbnAuaWEgPSBmdW5jdGlvbihhKSB7XG4gIEsodGhpcyk7XG4gIGEgPSBMKHRoaXMsIGEpO1xuICByZXR1cm4gdGhpcy5pLmlhKGEpXG59O1xucC5rYSA9IGZ1bmN0aW9uKCkge1xuICBLKHRoaXMpO1xuICBmb3IodmFyIGEgPSB0aGlzLmkuTigpLCBiID0gdGhpcy5pLmthKCksIGMgPSBbXSwgZCA9IDA7ZCA8IGIubGVuZ3RoO2QrKykge1xuICAgIGZvcih2YXIgZiA9IGFbZF0sIGcgPSAwO2cgPCBmLmxlbmd0aDtnKyspIHtcbiAgICAgIGMucHVzaChiW2RdKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY1xufTtcbnAuTiA9IGZ1bmN0aW9uKGEpIHtcbiAgSyh0aGlzKTtcbiAgdmFyIGIgPSBbXTtcbiAgaWYoYSkge1xuICAgIHRoaXMuaWEoYSkgJiYgKGIgPSBaYShiLCB0aGlzLmkuZ2V0KEwodGhpcywgYSkpKSlcbiAgfWVsc2Uge1xuICAgIGEgPSB0aGlzLmkuTigpO1xuICAgIGZvcih2YXIgYyA9IDA7YyA8IGEubGVuZ3RoO2MrKykge1xuICAgICAgYiA9IFphKGIsIGFbY10pXG4gICAgfVxuICB9XG4gIHJldHVybiBiXG59O1xucC5zZXQgPSBmdW5jdGlvbihhLCBiKSB7XG4gIEsodGhpcyk7XG4gIHRoaXMuQyA9IG51bGw7XG4gIGEgPSBMKHRoaXMsIGEpO1xuICB0aGlzLmlhKGEpICYmICh0aGlzLmYgLT0gdGhpcy5pLmdldChhKS5sZW5ndGgpO1xuICB0aGlzLmkuc2V0KGEsIFtiXSk7XG4gIHRoaXMuZisrO1xuICByZXR1cm4gdGhpc1xufTtcbnAuZ2V0ID0gZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYyA9IGEgPyB0aGlzLk4oYSkgOiBbXTtcbiAgcmV0dXJuIDAgPCBjLmxlbmd0aCA/IFN0cmluZyhjWzBdKSA6IGJcbn07XG5mdW5jdGlvbiByYihhLCBiLCBjKSB7XG4gIGEucmVtb3ZlKGIpO1xuICAwIDwgYy5sZW5ndGggJiYgKGEuQyA9IG51bGwsIGEuaS5zZXQoTChhLCBiKSwgJGEoYykpLCBhLmYgKz0gYy5sZW5ndGgpXG59XG5wLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIGlmKHRoaXMuQykge1xuICAgIHJldHVybiB0aGlzLkNcbiAgfVxuICBpZighdGhpcy5pKSB7XG4gICAgcmV0dXJuXCJcIlxuICB9XG4gIGZvcih2YXIgYSA9IFtdLCBiID0gdGhpcy5pLmthKCksIGMgPSAwO2MgPCBiLmxlbmd0aDtjKyspIHtcbiAgICBmb3IodmFyIGQgPSBiW2NdLCBmID0gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkKSksIGQgPSB0aGlzLk4oZCksIGcgPSAwO2cgPCBkLmxlbmd0aDtnKyspIHtcbiAgICAgIHZhciBoID0gZjtcbiAgICAgIFwiXCIgIT09IGRbZ10gJiYgKGggKz0gXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGRbZ10pKSk7XG4gICAgICBhLnB1c2goaClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXMuQyA9IGEuam9pbihcIiZcIilcbn07XG5wLm4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBuZXcgamI7XG4gIGEuQyA9IHRoaXMuQztcbiAgdGhpcy5pICYmIChhLmkgPSB0aGlzLmkubigpLCBhLmYgPSB0aGlzLmYpO1xuICByZXR1cm4gYVxufTtcbmZ1bmN0aW9uIEwoYSwgYikge1xuICB2YXIgYyA9IFN0cmluZyhiKTtcbiAgYS5EICYmIChjID0gYy50b0xvd2VyQ2FzZSgpKTtcbiAgcmV0dXJuIGNcbn1cbnAucWIgPSBmdW5jdGlvbihhKSB7XG4gIGEgJiYgIXRoaXMuRCAmJiAoSyh0aGlzKSwgdGhpcy5DID0gbnVsbCwgRSh0aGlzLmksIGZ1bmN0aW9uKGEsIGMpIHtcbiAgICB2YXIgZCA9IGMudG9Mb3dlckNhc2UoKTtcbiAgICBjICE9IGQgJiYgKHRoaXMucmVtb3ZlKGMpLCByYih0aGlzLCBkLCBhKSlcbiAgfSwgdGhpcykpO1xuICB0aGlzLkQgPSBhXG59O1xuZnVuY3Rpb24gdWIoKSB7XG59XG51Yi5wcm90b3R5cGUuR2EgPSBudWxsO1xudmFyIHZiO1xuZnVuY3Rpb24gd2IoKSB7XG59XG55KHdiLCB1Yik7XG5mdW5jdGlvbiB4YihhKSB7XG4gIHJldHVybihhID0geWIoYSkpID8gbmV3IEFjdGl2ZVhPYmplY3QoYSkgOiBuZXcgWE1MSHR0cFJlcXVlc3Rcbn1cbmZ1bmN0aW9uIHpiKGEpIHtcbiAgdmFyIGIgPSB7fTtcbiAgeWIoYSkgJiYgKGJbMF0gPSAhMCwgYlsxXSA9ICEwKTtcbiAgcmV0dXJuIGJcbn1cbmZ1bmN0aW9uIHliKGEpIHtcbiAgaWYoIWEuR2IgJiYgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQWN0aXZlWE9iamVjdCkge1xuICAgIGZvcih2YXIgYiA9IFtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLCBcIk1TWE1MMi5YTUxIVFRQLjMuMFwiLCBcIk1TWE1MMi5YTUxIVFRQXCIsIFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sIGMgPSAwO2MgPCBiLmxlbmd0aDtjKyspIHtcbiAgICAgIHZhciBkID0gYltjXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdChkKSwgYS5HYiA9IGRcbiAgICAgIH1jYXRjaChmKSB7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IEVycm9yKFwiQ291bGQgbm90IGNyZWF0ZSBBY3RpdmVYT2JqZWN0LiBBY3RpdmVYIG1pZ2h0IGJlIGRpc2FibGVkLCBvciBNU1hNTCBtaWdodCBub3QgYmUgaW5zdGFsbGVkXCIpO1xuICB9XG4gIHJldHVybiBhLkdiXG59XG52YiA9IG5ldyB3YjtcbmZ1bmN0aW9uIE0oKSB7XG4gIDAgIT0gQWIgJiYgKHRoaXMuR2MgPSBFcnJvcigpLnN0YWNrLCBCYlt2KHRoaXMpXSA9IHRoaXMpXG59XG52YXIgQWIgPSAwLCBCYiA9IHt9O1xuTS5wcm90b3R5cGUueWIgPSAhMTtcbk0ucHJvdG90eXBlLklhID0gZnVuY3Rpb24oKSB7XG4gIGlmKCF0aGlzLnliICYmICh0aGlzLnliID0gITAsIHRoaXMudSgpLCAwICE9IEFiKSkge1xuICAgIHZhciBhID0gdih0aGlzKTtcbiAgICBkZWxldGUgQmJbYV1cbiAgfVxufTtcbk0ucHJvdG90eXBlLnUgPSBmdW5jdGlvbigpIHtcbiAgaWYodGhpcy5OYikge1xuICAgIGZvcig7dGhpcy5OYi5sZW5ndGg7KSB7XG4gICAgICB0aGlzLk5iLnNoaWZ0KCkoKVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIE4oYSwgYikge1xuICB0aGlzLnR5cGUgPSBhO1xuICB0aGlzLmN1cnJlbnRUYXJnZXQgPSB0aGlzLnRhcmdldCA9IGJcbn1cbnAgPSBOLnByb3RvdHlwZTtcbnAudSA9IGUoKTtcbnAuSWEgPSBlKCk7XG5wLm5hID0gITE7XG5wLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMTtcbnAuV2EgPSAhMDtcbnAucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gIHRoaXMuV2EgPSAhMVxufTtcbnZhciBDYiA9IDA7XG5mdW5jdGlvbiBEYigpIHtcbn1cbnAgPSBEYi5wcm90b3R5cGU7XG5wLmtleSA9IDA7XG5wLmVhID0gITE7XG5wLkhhID0gITE7XG5wLk9hID0gZnVuY3Rpb24oYSwgYiwgYywgZCwgZiwgZykge1xuICBpZihoYShhKSkge1xuICAgIHRoaXMuSWIgPSAhMFxuICB9ZWxzZSB7XG4gICAgaWYoYSAmJiBhLmhhbmRsZUV2ZW50ICYmIGhhKGEuaGFuZGxlRXZlbnQpKSB7XG4gICAgICB0aGlzLkliID0gITFcbiAgICB9ZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7XG4gICAgfVxuICB9XG4gIHRoaXMuVyA9IGE7XG4gIHRoaXMuVWIgPSBiO1xuICB0aGlzLnNyYyA9IGM7XG4gIHRoaXMudHlwZSA9IGQ7XG4gIHRoaXMuY2FwdHVyZSA9ICEhZjtcbiAgdGhpcy5sYiA9IGc7XG4gIHRoaXMuSGEgPSAhMTtcbiAgdGhpcy5rZXkgPSArK0NiO1xuICB0aGlzLmVhID0gITFcbn07XG5wLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24oYSkge1xuICByZXR1cm4gdGhpcy5JYiA/IHRoaXMuVy5jYWxsKHRoaXMubGIgfHwgdGhpcy5zcmMsIGEpIDogdGhpcy5XLmhhbmRsZUV2ZW50LmNhbGwodGhpcy5XLCBhKVxufTtcbnZhciBFYiA9ICFBIHx8IEEgJiYgOSA8PSBNYSwgRmIgPSBBICYmICFDKFwiOVwiKTtcbiFCIHx8IEMoXCI1MjhcIik7XG5BYSAmJiBDKFwiMS45YlwiKSB8fCBBICYmIEMoXCI4XCIpIHx8IHphICYmIEMoXCI5LjVcIikgfHwgQiAmJiBDKFwiNTI4XCIpO1xuQWEgJiYgIUMoXCI4XCIpIHx8IEEgJiYgQyhcIjlcIik7XG5mdW5jdGlvbiBHYihhKSB7XG4gIEdiW1wiIFwiXShhKTtcbiAgcmV0dXJuIGFcbn1cbkdiW1wiIFwiXSA9IGVhO1xuZnVuY3Rpb24gSGIoYSwgYikge1xuICBhICYmIHRoaXMuT2EoYSwgYilcbn1cbnkoSGIsIE4pO1xucCA9IEhiLnByb3RvdHlwZTtcbnAudGFyZ2V0ID0gbnVsbDtcbnAucmVsYXRlZFRhcmdldCA9IG51bGw7XG5wLm9mZnNldFggPSAwO1xucC5vZmZzZXRZID0gMDtcbnAuY2xpZW50WCA9IDA7XG5wLmNsaWVudFkgPSAwO1xucC5zY3JlZW5YID0gMDtcbnAuc2NyZWVuWSA9IDA7XG5wLmJ1dHRvbiA9IDA7XG5wLmtleUNvZGUgPSAwO1xucC5jaGFyQ29kZSA9IDA7XG5wLmN0cmxLZXkgPSAhMTtcbnAuYWx0S2V5ID0gITE7XG5wLnNoaWZ0S2V5ID0gITE7XG5wLm1ldGFLZXkgPSAhMTtcbnAueWMgPSAhMTtcbnAuemIgPSBudWxsO1xucC5PYSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGMgPSB0aGlzLnR5cGUgPSBhLnR5cGU7XG4gIE4uY2FsbCh0aGlzLCBjKTtcbiAgdGhpcy50YXJnZXQgPSBhLnRhcmdldCB8fCBhLnNyY0VsZW1lbnQ7XG4gIHRoaXMuY3VycmVudFRhcmdldCA9IGI7XG4gIHZhciBkID0gYS5yZWxhdGVkVGFyZ2V0O1xuICBpZihkKSB7XG4gICAgaWYoQWEpIHtcbiAgICAgIHZhciBmO1xuICAgICAgYToge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIEdiKGQubm9kZU5hbWUpO1xuICAgICAgICAgIGYgPSAhMDtcbiAgICAgICAgICBicmVhayBhXG4gICAgICAgIH1jYXRjaChnKSB7XG4gICAgICAgIH1cbiAgICAgICAgZiA9ICExXG4gICAgICB9XG4gICAgICBmIHx8IChkID0gbnVsbClcbiAgICB9XG4gIH1lbHNlIHtcbiAgICBcIm1vdXNlb3ZlclwiID09IGMgPyBkID0gYS5mcm9tRWxlbWVudCA6IFwibW91c2VvdXRcIiA9PSBjICYmIChkID0gYS50b0VsZW1lbnQpXG4gIH1cbiAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gZDtcbiAgdGhpcy5vZmZzZXRYID0gQiB8fCB2b2lkIDAgIT09IGEub2Zmc2V0WCA/IGEub2Zmc2V0WCA6IGEubGF5ZXJYO1xuICB0aGlzLm9mZnNldFkgPSBCIHx8IHZvaWQgMCAhPT0gYS5vZmZzZXRZID8gYS5vZmZzZXRZIDogYS5sYXllclk7XG4gIHRoaXMuY2xpZW50WCA9IHZvaWQgMCAhPT0gYS5jbGllbnRYID8gYS5jbGllbnRYIDogYS5wYWdlWDtcbiAgdGhpcy5jbGllbnRZID0gdm9pZCAwICE9PSBhLmNsaWVudFkgPyBhLmNsaWVudFkgOiBhLnBhZ2VZO1xuICB0aGlzLnNjcmVlblggPSBhLnNjcmVlblggfHwgMDtcbiAgdGhpcy5zY3JlZW5ZID0gYS5zY3JlZW5ZIHx8IDA7XG4gIHRoaXMuYnV0dG9uID0gYS5idXR0b247XG4gIHRoaXMua2V5Q29kZSA9IGEua2V5Q29kZSB8fCAwO1xuICB0aGlzLmNoYXJDb2RlID0gYS5jaGFyQ29kZSB8fCAoXCJrZXlwcmVzc1wiID09IGMgPyBhLmtleUNvZGUgOiAwKTtcbiAgdGhpcy5jdHJsS2V5ID0gYS5jdHJsS2V5O1xuICB0aGlzLmFsdEtleSA9IGEuYWx0S2V5O1xuICB0aGlzLnNoaWZ0S2V5ID0gYS5zaGlmdEtleTtcbiAgdGhpcy5tZXRhS2V5ID0gYS5tZXRhS2V5O1xuICB0aGlzLnljID0gQ2EgPyBhLm1ldGFLZXkgOiBhLmN0cmxLZXk7XG4gIHRoaXMuc3RhdGUgPSBhLnN0YXRlO1xuICB0aGlzLnpiID0gYTtcbiAgYS5kZWZhdWx0UHJldmVudGVkICYmIHRoaXMucHJldmVudERlZmF1bHQoKTtcbiAgZGVsZXRlIHRoaXMubmFcbn07XG5wLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gIEhiLnJhLnByZXZlbnREZWZhdWx0LmNhbGwodGhpcyk7XG4gIHZhciBhID0gdGhpcy56YjtcbiAgaWYoYS5wcmV2ZW50RGVmYXVsdCkge1xuICAgIGEucHJldmVudERlZmF1bHQoKVxuICB9ZWxzZSB7XG4gICAgaWYoYS5yZXR1cm5WYWx1ZSA9ICExLCBGYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoYS5jdHJsS2V5IHx8IDExMiA8PSBhLmtleUNvZGUgJiYgMTIzID49IGEua2V5Q29kZSkge1xuICAgICAgICAgIGEua2V5Q29kZSA9IC0xXG4gICAgICAgIH1cbiAgICAgIH1jYXRjaChiKSB7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xucC51ID0gZSgpO1xudmFyIFNhID0ge30sIE8gPSB7fSwgUCA9IHt9LCBJYiA9IHt9O1xuZnVuY3Rpb24gSmIoYSwgYiwgYywgZCwgZikge1xuICBpZihzKGIpKSB7XG4gICAgZm9yKHZhciBnID0gMDtnIDwgYi5sZW5ndGg7ZysrKSB7XG4gICAgICBKYihhLCBiW2ddLCBjLCBkLCBmKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGE6IHtcbiAgICBpZighYikge1xuICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGVcIik7XG4gICAgfVxuICAgIGQgPSAhIWQ7XG4gICAgdmFyIGggPSBPO1xuICAgIGIgaW4gaCB8fCAoaFtiXSA9IHtmOjAsIHQ6MH0pO1xuICAgIGggPSBoW2JdO1xuICAgIGQgaW4gaCB8fCAoaFtkXSA9IHtmOjAsIHQ6MH0sIGguZisrKTtcbiAgICB2YXIgaCA9IGhbZF0sIGcgPSB2KGEpLCBuO1xuICAgIGgudCsrO1xuICAgIGlmKGhbZ10pIHtcbiAgICAgIG4gPSBoW2ddO1xuICAgICAgZm9yKHZhciBrID0gMDtrIDwgbi5sZW5ndGg7aysrKSB7XG4gICAgICAgIGlmKGggPSBuW2tdLCBoLlcgPT0gYyAmJiBoLmxiID09IGYpIHtcbiAgICAgICAgICBpZihoLmVhKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBuW2tdLkhhID0gITE7XG4gICAgICAgICAgYSA9IG5ba107XG4gICAgICAgICAgYnJlYWsgYVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfWVsc2Uge1xuICAgICAgbiA9IGhbZ10gPSBbXSwgaC5mKytcbiAgICB9XG4gICAgayA9IEtiKCk7XG4gICAgaCA9IG5ldyBEYjtcbiAgICBoLk9hKGMsIGssIGEsIGIsIGQsIGYpO1xuICAgIGguSGEgPSAhMTtcbiAgICBrLnNyYyA9IGE7XG4gICAgay5XID0gaDtcbiAgICBuLnB1c2goaCk7XG4gICAgUFtnXSB8fCAoUFtnXSA9IFtdKTtcbiAgICBQW2ddLnB1c2goaCk7XG4gICAgYS5hZGRFdmVudExpc3RlbmVyID8gYSAhPSBxICYmIGEud2IgfHwgYS5hZGRFdmVudExpc3RlbmVyKGIsIGssIGQpIDogYS5hdHRhY2hFdmVudChiIGluIEliID8gSWJbYl0gOiBJYltiXSA9IFwib25cIiArIGIsIGspO1xuICAgIGEgPSBoXG4gIH1cbiAgYiA9IGEua2V5O1xuICBTYVtiXSA9IGE7XG4gIHJldHVybiBiXG59XG5mdW5jdGlvbiBLYigpIHtcbiAgdmFyIGEgPSBMYiwgYiA9IEViID8gZnVuY3Rpb24oYykge1xuICAgIHJldHVybiBhLmNhbGwoYi5zcmMsIGIuVywgYylcbiAgfSA6IGZ1bmN0aW9uKGMpIHtcbiAgICBjID0gYS5jYWxsKGIuc3JjLCBiLlcsIGMpO1xuICAgIGlmKCFjKSB7XG4gICAgICByZXR1cm4gY1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGJcbn1cbmZ1bmN0aW9uIE1iKGEsIGIsIGMsIGQsIGYpIHtcbiAgaWYocyhiKSkge1xuICAgIGZvcih2YXIgZyA9IDA7ZyA8IGIubGVuZ3RoO2crKykge1xuICAgICAgTWIoYSwgYltnXSwgYywgZCwgZilcbiAgICB9XG4gIH1lbHNlIHtcbiAgICBkID0gISFkO1xuICAgIGE6IHtcbiAgICAgIGcgPSBPO1xuICAgICAgaWYoYiBpbiBnICYmIChnID0gZ1tiXSwgZCBpbiBnICYmIChnID0gZ1tkXSwgYSA9IHYoYSksIGdbYV0pKSkge1xuICAgICAgICBhID0gZ1thXTtcbiAgICAgICAgYnJlYWsgYVxuICAgICAgfVxuICAgICAgYSA9IG51bGxcbiAgICB9XG4gICAgaWYoYSkge1xuICAgICAgZm9yKGcgPSAwO2cgPCBhLmxlbmd0aDtnKyspIHtcbiAgICAgICAgaWYoYVtnXS5XID09IGMgJiYgYVtnXS5jYXB0dXJlID09IGQgJiYgYVtnXS5sYiA9PSBmKSB7XG4gICAgICAgICAgTmIoYVtnXS5rZXkpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIE5iKGEpIHtcbiAgdmFyIGIgPSBTYVthXTtcbiAgaWYoIWIgfHwgYi5lYSkge1xuICAgIHJldHVybiExXG4gIH1cbiAgdmFyIGMgPSBiLnNyYywgZCA9IGIudHlwZSwgZiA9IGIuVWIsIGcgPSBiLmNhcHR1cmU7XG4gIGMucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IGMgIT0gcSAmJiBjLndiIHx8IGMucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLCBmLCBnKSA6IGMuZGV0YWNoRXZlbnQgJiYgYy5kZXRhY2hFdmVudChkIGluIEliID8gSWJbZF0gOiBJYltkXSA9IFwib25cIiArIGQsIGYpO1xuICBjID0gdihjKTtcbiAgaWYoUFtjXSkge1xuICAgIHZhciBmID0gUFtjXSwgaCA9IFhhKGYsIGIpO1xuICAgIDAgPD0gaCAmJiBELnNwbGljZS5jYWxsKGYsIGgsIDEpO1xuICAgIDAgPT0gZi5sZW5ndGggJiYgZGVsZXRlIFBbY11cbiAgfVxuICBiLmVhID0gITA7XG4gIGlmKGIgPSBPW2RdW2ddW2NdKSB7XG4gICAgYi5NYiA9ICEwLCBPYihkLCBnLCBjLCBiKVxuICB9XG4gIGRlbGV0ZSBTYVthXTtcbiAgcmV0dXJuITBcbn1cbmZ1bmN0aW9uIE9iKGEsIGIsIGMsIGQpIHtcbiAgaWYoIWQuUWEgJiYgZC5NYikge1xuICAgIGZvcih2YXIgZiA9IDAsIGcgPSAwO2YgPCBkLmxlbmd0aDtmKyspIHtcbiAgICAgIGRbZl0uZWEgPyBkW2ZdLlViLnNyYyA9IG51bGwgOiAoZiAhPSBnICYmIChkW2ddID0gZFtmXSksIGcrKylcbiAgICB9XG4gICAgZC5sZW5ndGggPSBnO1xuICAgIGQuTWIgPSAhMTtcbiAgICAwID09IGcgJiYgKGRlbGV0ZSBPW2FdW2JdW2NdLCBPW2FdW2JdLmYtLSwgMCA9PSBPW2FdW2JdLmYgJiYgKGRlbGV0ZSBPW2FdW2JdLCBPW2FdLmYtLSksIDAgPT0gT1thXS5mICYmIGRlbGV0ZSBPW2FdKVxuICB9XG59XG5mdW5jdGlvbiBQYihhKSB7XG4gIHZhciBiID0gMDtcbiAgaWYobnVsbCAhPSBhKSB7XG4gICAgaWYoYSA9IHYoYSksIFBbYV0pIHtcbiAgICAgIGEgPSBQW2FdO1xuICAgICAgZm9yKHZhciBjID0gYS5sZW5ndGggLSAxOzAgPD0gYztjLS0pIHtcbiAgICAgICAgTmIoYVtjXS5rZXkpLCBiKytcbiAgICAgIH1cbiAgICB9XG4gIH1lbHNlIHtcbiAgICBSYShmdW5jdGlvbihhLCBjKSB7XG4gICAgICBOYihjKTtcbiAgICAgIGIrK1xuICAgIH0pXG4gIH1cbn1cbmZ1bmN0aW9uIFFiKGEsIGIsIGMsIGQsIGYpIHtcbiAgdmFyIGcgPSAxO1xuICBiID0gdihiKTtcbiAgaWYoYVtiXSkge1xuICAgIHZhciBoID0gLS1hLnQsIG4gPSBhW2JdO1xuICAgIG4uUWEgPyBuLlFhKysgOiBuLlFhID0gMTtcbiAgICB0cnkge1xuICAgICAgZm9yKHZhciBrID0gbi5sZW5ndGgsIHQgPSAwO3QgPCBrO3QrKykge1xuICAgICAgICB2YXIgbCA9IG5bdF07XG4gICAgICAgIGwgJiYgIWwuZWEgJiYgKGcgJj0gITEgIT09IFJiKGwsIGYpKVxuICAgICAgfVxuICAgIH1maW5hbGx5IHtcbiAgICAgIGEudCA9IE1hdGgubWF4KGgsIGEudCksIG4uUWEtLSwgT2IoYywgZCwgYiwgbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEJvb2xlYW4oZylcbn1cbmZ1bmN0aW9uIFJiKGEsIGIpIHtcbiAgYS5IYSAmJiBOYihhLmtleSk7XG4gIHJldHVybiBhLmhhbmRsZUV2ZW50KGIpXG59XG5mdW5jdGlvbiBMYihhLCBiKSB7XG4gIGlmKGEuZWEpIHtcbiAgICByZXR1cm4hMFxuICB9XG4gIHZhciBjID0gYS50eXBlLCBkID0gTztcbiAgaWYoIShjIGluIGQpKSB7XG4gICAgcmV0dXJuITBcbiAgfVxuICB2YXIgZCA9IGRbY10sIGYsIGc7XG4gIGlmKCFFYikge1xuICAgIGYgPSBiIHx8IGRhKFwid2luZG93LmV2ZW50XCIpO1xuICAgIHZhciBoID0gITAgaW4gZCwgbiA9ICExIGluIGQ7XG4gICAgaWYoaCkge1xuICAgICAgaWYoMCA+IGYua2V5Q29kZSB8fCB2b2lkIDAgIT0gZi5yZXR1cm5WYWx1ZSkge1xuICAgICAgICByZXR1cm4hMFxuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICB2YXIgayA9ICExO1xuICAgICAgICBpZigwID09IGYua2V5Q29kZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmLmtleUNvZGUgPSAtMTtcbiAgICAgICAgICAgIGJyZWFrIGFcbiAgICAgICAgICB9Y2F0Y2godCkge1xuICAgICAgICAgICAgayA9ICEwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGsgfHwgdm9pZCAwID09IGYucmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICBmLnJldHVyblZhbHVlID0gITBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBrID0gbmV3IEhiO1xuICAgIGsuT2EoZiwgdGhpcyk7XG4gICAgZiA9ICEwO1xuICAgIHRyeSB7XG4gICAgICBpZihoKSB7XG4gICAgICAgIGZvcih2YXIgbCA9IFtdLCByID0gay5jdXJyZW50VGFyZ2V0O3I7ciA9IHIucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGwucHVzaChyKVxuICAgICAgICB9XG4gICAgICAgIGcgPSBkWyEwXTtcbiAgICAgICAgZy50ID0gZy5mO1xuICAgICAgICBmb3IodmFyIEcgPSBsLmxlbmd0aCAtIDE7IWsubmEgJiYgMCA8PSBHICYmIGcudDtHLS0pIHtcbiAgICAgICAgICBrLmN1cnJlbnRUYXJnZXQgPSBsW0ddLCBmICY9IFFiKGcsIGxbR10sIGMsICEwLCBrKVxuICAgICAgICB9XG4gICAgICAgIGlmKG4pIHtcbiAgICAgICAgICBmb3IoZyA9IGRbITFdLCBnLnQgPSBnLmYsIEcgPSAwOyFrLm5hICYmIEcgPCBsLmxlbmd0aCAmJiBnLnQ7RysrKSB7XG4gICAgICAgICAgICBrLmN1cnJlbnRUYXJnZXQgPSBsW0ddLCBmICY9IFFiKGcsIGxbR10sIGMsICExLCBrKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfWVsc2Uge1xuICAgICAgICBmID0gUmIoYSwgaylcbiAgICAgIH1cbiAgICB9ZmluYWxseSB7XG4gICAgICBsICYmIChsLmxlbmd0aCA9IDApXG4gICAgfVxuICAgIHJldHVybiBmXG4gIH1cbiAgYyA9IG5ldyBIYihiLCB0aGlzKTtcbiAgcmV0dXJuIGYgPSBSYihhLCBjKVxufVxuO2Z1bmN0aW9uIFNiKCkge1xuICBNLmNhbGwodGhpcylcbn1cbnkoU2IsIE0pO1xucCA9IFNiLnByb3RvdHlwZTtcbnAud2IgPSAhMDtcbnAucGIgPSBudWxsO1xucC5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICBKYih0aGlzLCBhLCBiLCBjLCBkKVxufTtcbnAucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgTWIodGhpcywgYSwgYiwgYywgZClcbn07XG5wLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihhKSB7XG4gIHZhciBiID0gYS50eXBlIHx8IGEsIGMgPSBPO1xuICBpZihiIGluIGMpIHtcbiAgICBpZih1KGEpKSB7XG4gICAgICBhID0gbmV3IE4oYSwgdGhpcylcbiAgICB9ZWxzZSB7XG4gICAgICBpZihhIGluc3RhbmNlb2YgTikge1xuICAgICAgICBhLnRhcmdldCA9IGEudGFyZ2V0IHx8IHRoaXNcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgdmFyIGQgPSBhO1xuICAgICAgICBhID0gbmV3IE4oYiwgdGhpcyk7XG4gICAgICAgIFdhKGEsIGQpXG4gICAgICB9XG4gICAgfVxuICAgIHZhciBkID0gMSwgZiwgYyA9IGNbYl0sIGIgPSAhMCBpbiBjLCBnO1xuICAgIGlmKGIpIHtcbiAgICAgIGYgPSBbXTtcbiAgICAgIGZvcihnID0gdGhpcztnO2cgPSBnLnBiKSB7XG4gICAgICAgIGYucHVzaChnKVxuICAgICAgfVxuICAgICAgZyA9IGNbITBdO1xuICAgICAgZy50ID0gZy5mO1xuICAgICAgZm9yKHZhciBoID0gZi5sZW5ndGggLSAxOyFhLm5hICYmIDAgPD0gaCAmJiBnLnQ7aC0tKSB7XG4gICAgICAgIGEuY3VycmVudFRhcmdldCA9IGZbaF0sIGQgJj0gUWIoZywgZltoXSwgYS50eXBlLCAhMCwgYSkgJiYgITEgIT0gYS5XYVxuICAgICAgfVxuICAgIH1cbiAgICBpZighMSBpbiBjKSB7XG4gICAgICBpZihnID0gY1shMV0sIGcudCA9IGcuZiwgYikge1xuICAgICAgICBmb3IoaCA9IDA7IWEubmEgJiYgaCA8IGYubGVuZ3RoICYmIGcudDtoKyspIHtcbiAgICAgICAgICBhLmN1cnJlbnRUYXJnZXQgPSBmW2hdLCBkICY9IFFiKGcsIGZbaF0sIGEudHlwZSwgITEsIGEpICYmICExICE9IGEuV2FcbiAgICAgICAgfVxuICAgICAgfWVsc2Uge1xuICAgICAgICBmb3IoZiA9IHRoaXM7IWEubmEgJiYgZiAmJiBnLnQ7ZiA9IGYucGIpIHtcbiAgICAgICAgICBhLmN1cnJlbnRUYXJnZXQgPSBmLCBkICY9IFFiKGcsIGYsIGEudHlwZSwgITEsIGEpICYmICExICE9IGEuV2FcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhID0gQm9vbGVhbihkKVxuICB9ZWxzZSB7XG4gICAgYSA9ICEwXG4gIH1cbiAgcmV0dXJuIGFcbn07XG5wLnUgPSBmdW5jdGlvbigpIHtcbiAgU2IucmEudS5jYWxsKHRoaXMpO1xuICBQYih0aGlzKTtcbiAgdGhpcy5wYiA9IG51bGxcbn07XG5mdW5jdGlvbiBUYihhLCBiKSB7XG4gIE0uY2FsbCh0aGlzKTtcbiAgdGhpcy5kYSA9IGEgfHwgMTtcbiAgdGhpcy5FYSA9IGIgfHwgcTtcbiAgdGhpcy5lYiA9IHcodGhpcy5FYywgdGhpcyk7XG4gIHRoaXMub2IgPSB4KClcbn1cbnkoVGIsIFNiKTtcbnAgPSBUYi5wcm90b3R5cGU7XG5wLmVuYWJsZWQgPSAhMTtcbnAuciA9IG51bGw7XG5wLnNldEludGVydmFsID0gZnVuY3Rpb24oYSkge1xuICB0aGlzLmRhID0gYTtcbiAgdGhpcy5yICYmIHRoaXMuZW5hYmxlZCA/ICh0aGlzLnN0b3AoKSwgdGhpcy5zdGFydCgpKSA6IHRoaXMuciAmJiB0aGlzLnN0b3AoKVxufTtcbnAuRWMgPSBmdW5jdGlvbigpIHtcbiAgaWYodGhpcy5lbmFibGVkKSB7XG4gICAgdmFyIGEgPSB4KCkgLSB0aGlzLm9iO1xuICAgIDAgPCBhICYmIGEgPCAwLjggKiB0aGlzLmRhID8gdGhpcy5yID0gdGhpcy5FYS5zZXRUaW1lb3V0KHRoaXMuZWIsIHRoaXMuZGEgLSBhKSA6ICh0aGlzLmRpc3BhdGNoRXZlbnQoVWIpLCB0aGlzLmVuYWJsZWQgJiYgKHRoaXMuciA9IHRoaXMuRWEuc2V0VGltZW91dCh0aGlzLmViLCB0aGlzLmRhKSwgdGhpcy5vYiA9IHgoKSkpXG4gIH1cbn07XG5wLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW5hYmxlZCA9ICEwO1xuICB0aGlzLnIgfHwgKHRoaXMuciA9IHRoaXMuRWEuc2V0VGltZW91dCh0aGlzLmViLCB0aGlzLmRhKSwgdGhpcy5vYiA9IHgoKSlcbn07XG5wLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbmFibGVkID0gITE7XG4gIHRoaXMuciAmJiAodGhpcy5FYS5jbGVhclRpbWVvdXQodGhpcy5yKSwgdGhpcy5yID0gbnVsbClcbn07XG5wLnUgPSBmdW5jdGlvbigpIHtcbiAgVGIucmEudS5jYWxsKHRoaXMpO1xuICB0aGlzLnN0b3AoKTtcbiAgZGVsZXRlIHRoaXMuRWFcbn07XG52YXIgVWIgPSBcInRpY2tcIjtcbmZ1bmN0aW9uIFZiKGEpIHtcbiAgTS5jYWxsKHRoaXMpO1xuICB0aGlzLmUgPSBhO1xuICB0aGlzLmogPSBbXVxufVxueShWYiwgTSk7XG52YXIgV2IgPSBbXTtcbmZ1bmN0aW9uIFhiKGEsIGIsIGMsIGQpIHtcbiAgcyhjKSB8fCAoV2JbMF0gPSBjLCBjID0gV2IpO1xuICBmb3IodmFyIGYgPSAwO2YgPCBjLmxlbmd0aDtmKyspIHtcbiAgICB2YXIgZyA9IEpiKGIsIGNbZl0sIGQgfHwgYSwgITEsIGEuZSB8fCBhKTtcbiAgICBhLmoucHVzaChnKVxuICB9XG59XG5WYi5wcm90b3R5cGUudSA9IGZ1bmN0aW9uKCkge1xuICBWYi5yYS51LmNhbGwodGhpcyk7XG4gIFlhKHRoaXMuaiwgTmIpO1xuICB0aGlzLmoubGVuZ3RoID0gMFxufTtcblZiLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uKCkge1xuICB0aHJvdyBFcnJvcihcIkV2ZW50SGFuZGxlci5oYW5kbGVFdmVudCBub3QgaW1wbGVtZW50ZWRcIik7XG59O1xuZnVuY3Rpb24gWWIoYSwgYiwgYykge1xuICBNLmNhbGwodGhpcyk7XG4gIHRoaXMubmMgPSBhO1xuICB0aGlzLmRhID0gYjtcbiAgdGhpcy5lID0gYztcbiAgdGhpcy5oYyA9IHcodGhpcy50YywgdGhpcylcbn1cbnkoWWIsIE0pO1xucCA9IFliLnByb3RvdHlwZTtcbnAuWGEgPSAhMTtcbnAuVGIgPSAwO1xucC5yID0gbnVsbDtcbnAuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnIgJiYgKHEuY2xlYXJUaW1lb3V0KHRoaXMuciksIHRoaXMuciA9IG51bGwsIHRoaXMuWGEgPSAhMSlcbn07XG5wLnUgPSBmdW5jdGlvbigpIHtcbiAgWWIucmEudS5jYWxsKHRoaXMpO1xuICB0aGlzLnN0b3AoKVxufTtcbnAudGMgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yID0gbnVsbDtcbiAgdGhpcy5YYSAmJiAhdGhpcy5UYiAmJiAodGhpcy5YYSA9ICExLCBaYih0aGlzKSlcbn07XG5mdW5jdGlvbiBaYihhKSB7XG4gIHZhciBiO1xuICBiID0gYS5oYztcbiAgdmFyIGMgPSBhLmRhO1xuICBpZighaGEoYikpIHtcbiAgICBpZihiICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYi5oYW5kbGVFdmVudCkge1xuICAgICAgYiA9IHcoYi5oYW5kbGVFdmVudCwgYilcbiAgICB9ZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7XG4gICAgfVxuICB9XG4gIGIgPSAyMTQ3NDgzNjQ3IDwgYyA/IC0xIDogcS5zZXRUaW1lb3V0KGIsIGMgfHwgMCk7XG4gIGEuciA9IGI7XG4gIGEubmMuY2FsbChhLmUpXG59XG47ZnVuY3Rpb24gUShhLCBiLCBjLCBkLCBmKSB7XG4gIHRoaXMuYiA9IGE7XG4gIHRoaXMuYSA9IGI7XG4gIHRoaXMuWiA9IGM7XG4gIHRoaXMuQiA9IGQ7XG4gIHRoaXMuQ2EgPSBmIHx8IDE7XG4gIHRoaXMuRGEgPSAkYjtcbiAgdGhpcy5qYiA9IG5ldyBWYih0aGlzKTtcbiAgdGhpcy5TYSA9IG5ldyBUYjtcbiAgdGhpcy5TYS5zZXRJbnRlcnZhbChhYylcbn1cbnAgPSBRLnByb3RvdHlwZTtcbnAudiA9IG51bGw7XG5wLkogPSAhMTtcbnAudWEgPSBudWxsO1xucC5zYiA9IG51bGw7XG5wLnBhID0gbnVsbDtcbnAuc2EgPSBudWxsO1xucC5UID0gbnVsbDtcbnAudyA9IG51bGw7XG5wLlggPSBudWxsO1xucC5sID0gbnVsbDtcbnAuRmEgPSAwO1xucC5LID0gbnVsbDtcbnAudGEgPSBudWxsO1xucC5wID0gbnVsbDtcbnAuaCA9IC0xO1xucC5YYiA9ICEwO1xucC5hYSA9ICExO1xucC5vYSA9IDA7XG5wLlRhID0gbnVsbDtcbnZhciAkYiA9IDQ1RTMsIGFjID0gMjUwO1xuZnVuY3Rpb24gYmMoYSwgYikge1xuICBzd2l0Y2goYSkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVyblwiTm9uLTIwMCByZXR1cm4gY29kZSAoXCIgKyBiICsgXCIpXCI7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuXCJYTUxIVFRQIGZhaWx1cmUgKG5vIGRhdGEpXCI7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuXCJIdHRwQ29ubmVjdGlvbiB0aW1lb3V0XCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVyblwiVW5rbm93biBlcnJvclwiXG4gIH1cbn1cbnZhciBjYyA9IHt9LCBkYyA9IHt9O1xuZnVuY3Rpb24gZWMoKSB7XG4gIHJldHVybiFBIHx8IEEgJiYgMTAgPD0gTWFcbn1cbnAgPSBRLnByb3RvdHlwZTtcbnAuWSA9IG0oXCJ2XCIpO1xucC5zZXRUaW1lb3V0ID0gbShcIkRhXCIpO1xucC4kYiA9IG0oXCJvYVwiKTtcbmZ1bmN0aW9uIGZjKGEsIGIsIGMpIHtcbiAgYS5zYSA9IDE7XG4gIGEuVCA9IEooYi5uKCkpO1xuICBhLlggPSBjO1xuICBhLnhiID0gITA7XG4gIGdjKGEsIG51bGwpXG59XG5mdW5jdGlvbiBoYyhhLCBiLCBjLCBkLCBmKSB7XG4gIGEuc2EgPSAxO1xuICBhLlQgPSBKKGIubigpKTtcbiAgYS5YID0gbnVsbDtcbiAgYS54YiA9IGM7XG4gIGYgJiYgKGEuWGIgPSAhMSk7XG4gIGdjKGEsIGQpXG59XG5mdW5jdGlvbiBnYyhhLCBiKSB7XG4gIGEucGEgPSB4KCk7XG4gIGljKGEpO1xuICBhLncgPSBhLlQubigpO1xuICBxYihhLncsIFwidFwiLCBhLkNhKTtcbiAgYS5GYSA9IDA7XG4gIGEubCA9IGEuYi5oYihhLmIuWWEoKSA/IGIgOiBudWxsKTtcbiAgMCA8IGEub2EgJiYgKGEuVGEgPSBuZXcgWWIodyhhLmRjLCBhLCBhLmwpLCBhLm9hKSk7XG4gIFhiKGEuamIsIGEubCwgXCJyZWFkeXN0YXRlY2hhbmdlXCIsIGEuQWMpO1xuICB2YXIgYztcbiAgaWYoYS52KSB7XG4gICAgYyA9IGEudjtcbiAgICB2YXIgZCA9IHt9LCBmO1xuICAgIGZvcihmIGluIGMpIHtcbiAgICAgIGRbZl0gPSBjW2ZdXG4gICAgfVxuICAgIGMgPSBkXG4gIH1lbHNlIHtcbiAgICBjID0ge31cbiAgfVxuICBhLlggPyAoYS50YSA9IFwiUE9TVFwiLCBjW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgYS5sLnNlbmQoYS53LCBhLnRhLCBhLlgsIGMpKSA6IChhLnRhID0gXCJHRVRcIiwgYS5YYiAmJiAhQiAmJiAoYy5Db25uZWN0aW9uID0gXCJjbG9zZVwiKSwgYS5sLnNlbmQoYS53LCBhLnRhLCBudWxsLCBjKSk7XG4gIGEuYi5HKGpjKTtcbiAgaWYoZCA9IGEuWCkge1xuICAgIGZvcihjID0gXCJcIiwgZCA9IGQuc3BsaXQoXCImXCIpLCBmID0gMDtmIDwgZC5sZW5ndGg7ZisrKSB7XG4gICAgICB2YXIgZyA9IGRbZl0uc3BsaXQoXCI9XCIpO1xuICAgICAgaWYoMSA8IGcubGVuZ3RoKSB7XG4gICAgICAgIHZhciBoID0gZ1swXSwgZyA9IGdbMV0sIG4gPSBoLnNwbGl0KFwiX1wiKTtcbiAgICAgICAgYyA9IDIgPD0gbi5sZW5ndGggJiYgXCJ0eXBlXCIgPT0gblsxXSA/IGMgKyAoaCArIFwiPVwiICsgZyArIFwiJlwiKSA6IGMgKyAoaCArIFwiPXJlZGFjdGVkJlwiKVxuICAgICAgfVxuICAgIH1cbiAgfWVsc2Uge1xuICAgIGMgPSBudWxsXG4gIH1cbiAgYS5hLmluZm8oXCJYTUxIVFRQIFJFUSAoXCIgKyBhLkIgKyBcIikgW2F0dGVtcHQgXCIgKyBhLkNhICsgXCJdOiBcIiArIGEudGEgKyBcIlxcblwiICsgYS53ICsgXCJcXG5cIiArIGMpXG59XG5wLkFjID0gZnVuY3Rpb24oYSkge1xuICBhID0gYS50YXJnZXQ7XG4gIHZhciBiID0gdGhpcy5UYTtcbiAgYiAmJiAzID09IFIoYSkgPyAodGhpcy5hLmRlYnVnKFwiVGhyb3R0bGluZyByZWFkeXN0YXRlY2hhbmdlLlwiKSwgYi5yIHx8IGIuVGIgPyBiLlhhID0gITAgOiBaYihiKSkgOiB0aGlzLmRjKGEpXG59O1xucC5kYyA9IGZ1bmN0aW9uKGEpIHtcbiAgdHJ5IHtcbiAgICBpZihhID09IHRoaXMubCkge1xuICAgICAgYToge1xuICAgICAgICB2YXIgYiA9IFIodGhpcy5sKSwgYyA9IHRoaXMubC5sYSwgZCA9IGtjKHRoaXMubCk7XG4gICAgICAgIGlmKCFlYygpIHx8IEIgJiYgIUMoXCI0MjArXCIpKSB7XG4gICAgICAgICAgaWYoNCA+IGIpIHtcbiAgICAgICAgICAgIGJyZWFrIGFcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICBpZigzID4gYiB8fCAzID09IGIgJiYgIXphICYmICFsYyh0aGlzLmwpKSB7XG4gICAgICAgICAgICBicmVhayBhXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWEgfHwgKDQgIT0gYiB8fCBjID09IG1jKSB8fCAoYyA9PSBuYyB8fCAwID49IGQgPyB0aGlzLmIuRyhvYykgOiB0aGlzLmIuRyhwYykpO1xuICAgICAgICBxYyh0aGlzKTtcbiAgICAgICAgdmFyIGYgPSBrYyh0aGlzLmwpO1xuICAgICAgICB0aGlzLmggPSBmO1xuICAgICAgICB2YXIgZyA9IGxjKHRoaXMubCk7XG4gICAgICAgIGcgfHwgdGhpcy5hLmRlYnVnKFwiTm8gcmVzcG9uc2UgdGV4dCBmb3IgdXJpIFwiICsgdGhpcy53ICsgXCIgc3RhdHVzIFwiICsgZik7XG4gICAgICAgIHRoaXMuSiA9IDIwMCA9PSBmO1xuICAgICAgICB0aGlzLmEuaW5mbyhcIlhNTEhUVFAgUkVTUCAoXCIgKyB0aGlzLkIgKyBcIikgWyBhdHRlbXB0IFwiICsgdGhpcy5DYSArIFwiXTogXCIgKyB0aGlzLnRhICsgXCJcXG5cIiArIHRoaXMudyArIFwiXFxuXCIgKyBiICsgXCIgXCIgKyBmKTtcbiAgICAgICAgdGhpcy5KID8gKDQgPT0gYiAmJiBTKHRoaXMpLCB0aGlzLnhiID8gKHJjKHRoaXMsIGIsIGcpLCB6YSAmJiAzID09IGIgJiYgKFhiKHRoaXMuamIsIHRoaXMuU2EsIFViLCB0aGlzLnpjKSwgdGhpcy5TYS5zdGFydCgpKSkgOiAoc2ModGhpcy5hLCB0aGlzLkIsIGcsIG51bGwpLCB0Yyh0aGlzLCBnKSksIHRoaXMuSiAmJiAhdGhpcy5hYSAmJiAoNCA9PSBiID8gdGhpcy5iLm1hKHRoaXMpIDogKHRoaXMuSiA9ICExLCBpYyh0aGlzKSkpKSA6ICg0MDAgPT0gZiAmJiAwIDwgZy5pbmRleE9mKFwiVW5rbm93biBTSURcIikgPyAodGhpcy5wID0gMywgVCh1YyksIHRoaXMuYS4kKFwiWE1MSFRUUCBVbmtub3duIFNJRCAoXCIgKyB0aGlzLkIgKyBcIilcIikpIDogKHRoaXMucCA9IDAsIFQodmMpLCB0aGlzLmEuJChcIlhNTEhUVFAgQmFkIHN0YXR1cyBcIiArIGYgKyBcIiAoXCIgKyB0aGlzLkIgKyBcIilcIikpLCBTKHRoaXMpLCB3Yyh0aGlzKSlcbiAgICAgIH1cbiAgICB9ZWxzZSB7XG4gICAgICB0aGlzLmEuJChcIkNhbGxlZCBiYWNrIHdpdGggYW4gdW5leHBlY3RlZCB4bWxodHRwXCIpXG4gICAgfVxuICB9Y2F0Y2goaCkge1xuICAgIHRoaXMuYS5kZWJ1ZyhcIkZhaWxlZCBjYWxsIHRvIE9uWG1sSHR0cFJlYWR5U3RhdGVDaGFuZ2VkX1wiKSwgdGhpcy5sICYmIGxjKHRoaXMubCkgPyB4Yyh0aGlzLmEsIGgsIFwiUmVzcG9uc2VUZXh0OiBcIiArIGxjKHRoaXMubCkpIDogeGModGhpcy5hLCBoLCBcIk5vIHJlc3BvbnNlIHRleHRcIilcbiAgfWZpbmFsbHkge1xuICB9XG59O1xuZnVuY3Rpb24gcmMoYSwgYiwgYykge1xuICBmb3IodmFyIGQgPSAhMDshYS5hYSAmJiBhLkZhIDwgYy5sZW5ndGg7KSB7XG4gICAgdmFyIGYgPSB5YyhhLCBjKTtcbiAgICBpZihmID09IGRjKSB7XG4gICAgICA0ID09IGIgJiYgKGEucCA9IDQsIFQoemMpLCBkID0gITEpO1xuICAgICAgc2MoYS5hLCBhLkIsIG51bGwsIFwiW0luY29tcGxldGUgUmVzcG9uc2VdXCIpO1xuICAgICAgYnJlYWtcbiAgICB9ZWxzZSB7XG4gICAgICBpZihmID09IGNjKSB7XG4gICAgICAgIGEucCA9IDQ7XG4gICAgICAgIFQoQWMpO1xuICAgICAgICBzYyhhLmEsIGEuQiwgYywgXCJbSW52YWxpZCBDaHVua11cIik7XG4gICAgICAgIGQgPSAhMTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgc2MoYS5hLCBhLkIsIGYsIG51bGwpLCB0YyhhLCBmKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICA0ID09IGIgJiYgMCA9PSBjLmxlbmd0aCAmJiAoYS5wID0gMSwgVChCYyksIGQgPSAhMSk7XG4gIGEuSiA9IGEuSiAmJiBkO1xuICBkIHx8IChzYyhhLmEsIGEuQiwgYywgXCJbSW52YWxpZCBDaHVua2VkIFJlc3BvbnNlXVwiKSwgUyhhKSwgd2MoYSkpXG59XG5wLnpjID0gZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gUih0aGlzLmwpLCBiID0gbGModGhpcy5sKTtcbiAgdGhpcy5GYSA8IGIubGVuZ3RoICYmIChxYyh0aGlzKSwgcmModGhpcywgYSwgYiksIHRoaXMuSiAmJiA0ICE9IGEgJiYgaWModGhpcykpXG59O1xuZnVuY3Rpb24geWMoYSwgYikge1xuICB2YXIgYyA9IGEuRmEsIGQgPSBiLmluZGV4T2YoXCJcXG5cIiwgYyk7XG4gIGlmKC0xID09IGQpIHtcbiAgICByZXR1cm4gZGNcbiAgfVxuICBjID0gTnVtYmVyKGIuc3Vic3RyaW5nKGMsIGQpKTtcbiAgaWYoaXNOYU4oYykpIHtcbiAgICByZXR1cm4gY2NcbiAgfVxuICBkICs9IDE7XG4gIGlmKGQgKyBjID4gYi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZGNcbiAgfVxuICB2YXIgZiA9IGIuc3Vic3RyKGQsIGMpO1xuICBhLkZhID0gZCArIGM7XG4gIHJldHVybiBmXG59XG5mdW5jdGlvbiBDYyhhLCBiKSB7XG4gIGEucGEgPSB4KCk7XG4gIGljKGEpO1xuICB2YXIgYyA9IGIgPyB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgOiBcIlwiO1xuICBhLncgPSBhLlQubigpO1xuICBJKGEudywgXCJET01BSU5cIiwgYyk7XG4gIEkoYS53LCBcInRcIiwgYS5DYSk7XG4gIHRyeSB7XG4gICAgYS5LID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJodG1sZmlsZVwiKVxuICB9Y2F0Y2goZCkge1xuICAgIGEuYS5JKFwiQWN0aXZlWCBibG9ja2VkXCIpO1xuICAgIFMoYSk7XG4gICAgYS5wID0gNztcbiAgICBUKERjKTtcbiAgICB3YyhhKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgZiA9IFwiPGh0bWw+PGJvZHk+XCI7XG4gIGIgJiYgKGYgKz0gJzxzY3JpcHQ+ZG9jdW1lbnQuZG9tYWluPVwiJyArIGMgKyAnXCJcXHgzYy9zY3JpcHQ+Jyk7XG4gIGYgKz0gXCI8L2JvZHk+PC9odG1sPlwiO1xuICBhLksub3BlbigpO1xuICBhLksud3JpdGUoZik7XG4gIGEuSy5jbG9zZSgpO1xuICBhLksucGFyZW50V2luZG93Lm0gPSB3KGEud2MsIGEpO1xuICBhLksucGFyZW50V2luZG93LmQgPSB3KGEuU2IsIGEsICEwKTtcbiAgYS5LLnBhcmVudFdpbmRvdy5ycGNDbG9zZSA9IHcoYS5TYiwgYSwgITEpO1xuICBjID0gYS5LLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGEuSy5wYXJlbnRXaW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjKTtcbiAgYy5pbm5lckhUTUwgPSAnPGlmcmFtZSBzcmM9XCInICsgYS53ICsgJ1wiPjwvaWZyYW1lPic7XG4gIGEuYS5pbmZvKFwiVFJJREVOVCBSRVEgKFwiICsgYS5CICsgXCIpIFsgYXR0ZW1wdCBcIiArIGEuQ2EgKyBcIl06IEdFVFxcblwiICsgYS53KTtcbiAgYS5iLkcoamMpXG59XG5wLndjID0gZnVuY3Rpb24oYSkge1xuICBVKHcodGhpcy52YywgdGhpcywgYSksIDApXG59O1xucC52YyA9IGZ1bmN0aW9uKGEpIHtcbiAgaWYoIXRoaXMuYWEpIHtcbiAgICB2YXIgYiA9IHRoaXMuYTtcbiAgICBiLmluZm8oXCJUUklERU5UIFRFWFQgKFwiICsgdGhpcy5CICsgXCIpOiBcIiArIEVjKGIsIGEpKTtcbiAgICBxYyh0aGlzKTtcbiAgICB0Yyh0aGlzLCBhKTtcbiAgICBpYyh0aGlzKVxuICB9XG59O1xucC5TYiA9IGZ1bmN0aW9uKGEpIHtcbiAgVSh3KHRoaXMudWMsIHRoaXMsIGEpLCAwKVxufTtcbnAudWMgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMuYWEgfHwgKHRoaXMuYS5pbmZvKFwiVFJJREVOVCBURVhUIChcIiArIHRoaXMuQiArIFwiKTogXCIgKyBhID8gXCJzdWNjZXNzXCIgOiBcImZhaWx1cmVcIiksIFModGhpcyksIHRoaXMuSiA9IGEsIHRoaXMuYi5tYSh0aGlzKSwgdGhpcy5iLkcoRmMpKVxufTtcbnAubGMgPSBmdW5jdGlvbigpIHtcbiAgcWModGhpcyk7XG4gIHRoaXMuYi5tYSh0aGlzKVxufTtcbnAuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYWEgPSAhMDtcbiAgUyh0aGlzKVxufTtcbmZ1bmN0aW9uIGljKGEpIHtcbiAgYS5zYiA9IHgoKSArIGEuRGE7XG4gIEdjKGEsIGEuRGEpXG59XG5mdW5jdGlvbiBHYyhhLCBiKSB7XG4gIGlmKG51bGwgIT0gYS51YSkge1xuICAgIHRocm93IEVycm9yKFwiV2F0Y2hEb2cgdGltZXIgbm90IG51bGxcIik7XG4gIH1cbiAgYS51YSA9IFUodyhhLnhjLCBhKSwgYilcbn1cbmZ1bmN0aW9uIHFjKGEpIHtcbiAgYS51YSAmJiAocS5jbGVhclRpbWVvdXQoYS51YSksIGEudWEgPSBudWxsKVxufVxucC54YyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnVhID0gbnVsbDtcbiAgdmFyIGEgPSB4KCk7XG4gIDAgPD0gYSAtIHRoaXMuc2IgPyAodGhpcy5KICYmIHRoaXMuYS5JKFwiUmVjZWl2ZWQgd2F0Y2hkb2cgdGltZW91dCBldmVuIHRob3VnaCByZXF1ZXN0IGxvYWRlZCBzdWNjZXNzZnVsbHlcIiksIHRoaXMuYS5pbmZvKFwiVElNRU9VVDogXCIgKyB0aGlzLncpLCAyICE9IHRoaXMuc2EgJiYgdGhpcy5iLkcob2MpLCBTKHRoaXMpLCB0aGlzLnAgPSAyLCBUKEhjKSwgd2ModGhpcykpIDogKHRoaXMuYS4kKFwiV2F0Y2hEb2cgdGltZXIgY2FsbGVkIHRvbyBlYXJseVwiKSwgR2ModGhpcywgdGhpcy5zYiAtIGEpKVxufTtcbmZ1bmN0aW9uIHdjKGEpIHtcbiAgYS5iLkhiKCkgfHwgYS5hYSB8fCBhLmIubWEoYSlcbn1cbmZ1bmN0aW9uIFMoYSkge1xuICBxYyhhKTtcbiAgdmFyIGIgPSBhLlRhO1xuICBiICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYi5JYSAmJiBiLklhKCk7XG4gIGEuVGEgPSBudWxsO1xuICBhLlNhLnN0b3AoKTtcbiAgYiA9IGEuamI7XG4gIFlhKGIuaiwgTmIpO1xuICBiLmoubGVuZ3RoID0gMDtcbiAgYS5sICYmIChiID0gYS5sLCBhLmwgPSBudWxsLCBiLmFib3J0KCksIGIuSWEoKSk7XG4gIGEuSyAmJiAoYS5LID0gbnVsbClcbn1cbnAuRWIgPSBhYShcInBcIik7XG5mdW5jdGlvbiB0YyhhLCBiKSB7XG4gIHRyeSB7XG4gICAgYS5iLlBiKGEsIGIpLCBhLmIuRyhGYylcbiAgfWNhdGNoKGMpIHtcbiAgICB4YyhhLmEsIGMsIFwiRXJyb3IgaW4gaHR0cHJlcXVlc3QgY2FsbGJhY2tcIilcbiAgfVxufVxuO2Z1bmN0aW9uIEljKGEpIHtcbiAgYSA9IFN0cmluZyhhKTtcbiAgaWYoL15cXHMqJC8udGVzdChhKSA/IDAgOiAvXltcXF0sOnt9XFxzXFx1MjAyOFxcdTIwMjldKiQvLnRlc3QoYS5yZXBsYWNlKC9cXFxcW1wiXFxcXFxcL2JmbnJ0dV0vZywgXCJAXCIpLnJlcGxhY2UoL1wiW15cIlxcXFxcXG5cXHJcXHUyMDI4XFx1MjAyOVxceDAwLVxceDA4XFx4MGEtXFx4MWZdKlwifHRydWV8ZmFsc2V8bnVsbHwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPy9nLCBcIl1cIikucmVwbGFjZSgvKD86Xnw6fCwpKD86W1xcc1xcdTIwMjhcXHUyMDI5XSpcXFspKy9nLCBcIlwiKSkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGV2YWwoXCIoXCIgKyBhICsgXCIpXCIpXG4gICAgfWNhdGNoKGIpIHtcbiAgICB9XG4gIH1cbiAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpTT04gc3RyaW5nOiBcIiArIGEpO1xufVxuZnVuY3Rpb24gSmMoYSkge1xuICByZXR1cm4gZXZhbChcIihcIiArIGEgKyBcIilcIilcbn1cbmZ1bmN0aW9uIEtjKGEpIHtcbiAgdmFyIGIgPSBbXTtcbiAgTGMobmV3IE1jKHZvaWQgMCksIGEsIGIpO1xuICByZXR1cm4gYi5qb2luKFwiXCIpXG59XG5mdW5jdGlvbiBNYyhhKSB7XG4gIHRoaXMuVmEgPSBhXG59XG5mdW5jdGlvbiBMYyhhLCBiLCBjKSB7XG4gIHN3aXRjaCh0eXBlb2YgYikge1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIE5jKGIsIGMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgYy5wdXNoKGlzRmluaXRlKGIpICYmICFpc05hTihiKSA/IGIgOiBcIm51bGxcIik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgYy5wdXNoKGIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgYy5wdXNoKFwibnVsbFwiKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIGlmKG51bGwgPT0gYikge1xuICAgICAgICBjLnB1c2goXCJudWxsXCIpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYocyhiKSkge1xuICAgICAgICB2YXIgZCA9IGIubGVuZ3RoO1xuICAgICAgICBjLnB1c2goXCJbXCIpO1xuICAgICAgICBmb3IodmFyIGYgPSBcIlwiLCBnID0gMDtnIDwgZDtnKyspIHtcbiAgICAgICAgICBjLnB1c2goZiksIGYgPSBiW2ddLCBMYyhhLCBhLlZhID8gYS5WYS5jYWxsKGIsIFN0cmluZyhnKSwgZikgOiBmLCBjKSwgZiA9IFwiLFwiXG4gICAgICAgIH1cbiAgICAgICAgYy5wdXNoKFwiXVwiKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGMucHVzaChcIntcIik7XG4gICAgICBkID0gXCJcIjtcbiAgICAgIGZvcihnIGluIGIpIHtcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGcpICYmIChmID0gYltnXSwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmICYmIChjLnB1c2goZCksIE5jKGcsIGMpLCBjLnB1c2goXCI6XCIpLCBMYyhhLCBhLlZhID8gYS5WYS5jYWxsKGIsIGcsIGYpIDogZiwgYyksIGQgPSBcIixcIikpXG4gICAgICB9XG4gICAgICBjLnB1c2goXCJ9XCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiICsgdHlwZW9mIGIpO1xuICB9XG59XG52YXIgT2MgPSB7J1wiJzonXFxcXFwiJywgXCJcXFxcXCI6XCJcXFxcXFxcXFwiLCBcIi9cIjpcIlxcXFwvXCIsIFwiXFxiXCI6XCJcXFxcYlwiLCBcIlxcZlwiOlwiXFxcXGZcIiwgXCJcXG5cIjpcIlxcXFxuXCIsIFwiXFxyXCI6XCJcXFxcclwiLCBcIlxcdFwiOlwiXFxcXHRcIiwgXCJcXHgwQlwiOlwiXFxcXHUwMDBiXCJ9LCBQYyA9IC9cXHVmZmZmLy50ZXN0KFwiXFx1ZmZmZlwiKSA/IC9bXFxcXFxcXCJcXHgwMC1cXHgxZlxceDdmLVxcdWZmZmZdL2cgOiAvW1xcXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHhmZl0vZztcbmZ1bmN0aW9uIE5jKGEsIGIpIHtcbiAgYi5wdXNoKCdcIicsIGEucmVwbGFjZShQYywgZnVuY3Rpb24oYSkge1xuICAgIGlmKGEgaW4gT2MpIHtcbiAgICAgIHJldHVybiBPY1thXVxuICAgIH1cbiAgICB2YXIgYiA9IGEuY2hhckNvZGVBdCgwKSwgZiA9IFwiXFxcXHVcIjtcbiAgICAxNiA+IGIgPyBmICs9IFwiMDAwXCIgOiAyNTYgPiBiID8gZiArPSBcIjAwXCIgOiA0MDk2ID4gYiAmJiAoZiArPSBcIjBcIik7XG4gICAgcmV0dXJuIE9jW2FdID0gZiArIGIudG9TdHJpbmcoMTYpXG4gIH0pLCAnXCInKVxufVxuO2Z1bmN0aW9uIFFjKGEpIHtcbiAgcmV0dXJuIFJjKGEgfHwgYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIsIFtdKVxufVxuZnVuY3Rpb24gUmMoYSwgYikge1xuICB2YXIgYyA9IFtdO1xuICBpZigwIDw9IFhhKGIsIGEpKSB7XG4gICAgYy5wdXNoKFwiWy4uLmNpcmN1bGFyIHJlZmVyZW5jZS4uLl1cIilcbiAgfWVsc2Uge1xuICAgIGlmKGEgJiYgNTAgPiBiLmxlbmd0aCkge1xuICAgICAgYy5wdXNoKFNjKGEpICsgXCIoXCIpO1xuICAgICAgZm9yKHZhciBkID0gYS5hcmd1bWVudHMsIGYgPSAwO2YgPCBkLmxlbmd0aDtmKyspIHtcbiAgICAgICAgMCA8IGYgJiYgYy5wdXNoKFwiLCBcIik7XG4gICAgICAgIHZhciBnO1xuICAgICAgICBnID0gZFtmXTtcbiAgICAgICAgc3dpdGNoKHR5cGVvZiBnKSB7XG4gICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgZyA9IGcgPyBcIm9iamVjdFwiIDogXCJudWxsXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBnID0gU3RyaW5nKGcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIGcgPSBnID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIGcgPSAoZyA9IFNjKGcpKSA/IGcgOiBcIltmbl1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBnID0gdHlwZW9mIGdcbiAgICAgICAgfVxuICAgICAgICA0MCA8IGcubGVuZ3RoICYmIChnID0gZy5zdWJzdHIoMCwgNDApICsgXCIuLi5cIik7XG4gICAgICAgIGMucHVzaChnKVxuICAgICAgfVxuICAgICAgYi5wdXNoKGEpO1xuICAgICAgYy5wdXNoKFwiKVxcblwiKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGMucHVzaChSYyhhLmNhbGxlciwgYikpXG4gICAgICB9Y2F0Y2goaCkge1xuICAgICAgICBjLnB1c2goXCJbZXhjZXB0aW9uIHRyeWluZyB0byBnZXQgY2FsbGVyXVxcblwiKVxuICAgICAgfVxuICAgIH1lbHNlIHtcbiAgICAgIGEgPyBjLnB1c2goXCJbLi4ubG9uZyBzdGFjay4uLl1cIikgOiBjLnB1c2goXCJbZW5kXVwiKVxuICAgIH1cbiAgfVxuICByZXR1cm4gYy5qb2luKFwiXCIpXG59XG5mdW5jdGlvbiBTYyhhKSB7XG4gIGlmKFRjW2FdKSB7XG4gICAgcmV0dXJuIFRjW2FdXG4gIH1cbiAgYSA9IFN0cmluZyhhKTtcbiAgaWYoIVRjW2FdKSB7XG4gICAgdmFyIGIgPSAvZnVuY3Rpb24gKFteXFwoXSspLy5leGVjKGEpO1xuICAgIFRjW2FdID0gYiA/IGJbMV0gOiBcIltBbm9ueW1vdXNdXCJcbiAgfVxuICByZXR1cm4gVGNbYV1cbn1cbnZhciBUYyA9IHt9O1xuZnVuY3Rpb24gVWMoYSwgYiwgYywgZCwgZikge1xuICB0aGlzLnJlc2V0KGEsIGIsIGMsIGQsIGYpXG59XG5VYy5wcm90b3R5cGUuQ2MgPSAwO1xuVWMucHJvdG90eXBlLkJiID0gbnVsbDtcblVjLnByb3RvdHlwZS5BYiA9IG51bGw7XG52YXIgVmMgPSAwO1xuVWMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oYSwgYiwgYywgZCwgZikge1xuICB0aGlzLkNjID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZiA/IGYgOiBWYysrO1xuICB0aGlzLlFjID0gZCB8fCB4KCk7XG4gIHRoaXMuemEgPSBhO1xuICB0aGlzLm9jID0gYjtcbiAgdGhpcy5JYyA9IGM7XG4gIGRlbGV0ZSB0aGlzLkJiO1xuICBkZWxldGUgdGhpcy5BYlxufTtcblVjLnByb3RvdHlwZS5ZYiA9IG0oXCJ6YVwiKTtcbmZ1bmN0aW9uIFYoYSkge1xuICB0aGlzLnBjID0gYVxufVxuVi5wcm90b3R5cGUuUmEgPSBudWxsO1xuVi5wcm90b3R5cGUuemEgPSBudWxsO1xuVi5wcm90b3R5cGUuZmIgPSBudWxsO1xuVi5wcm90b3R5cGUuRmIgPSBudWxsO1xuZnVuY3Rpb24gV2MoYSwgYikge1xuICB0aGlzLm5hbWUgPSBhO1xuICB0aGlzLnZhbHVlID0gYlxufVxuV2MucHJvdG90eXBlLnRvU3RyaW5nID0gYWEoXCJuYW1lXCIpO1xudmFyIFhjID0gbmV3IFdjKFwiU0VWRVJFXCIsIDFFMyksIFljID0gbmV3IFdjKFwiV0FSTklOR1wiLCA5MDApLCBaYyA9IG5ldyBXYyhcIklORk9cIiwgODAwKSwgJGMgPSBuZXcgV2MoXCJDT05GSUdcIiwgNzAwKSwgYWQgPSBuZXcgV2MoXCJGSU5FXCIsIDUwMCk7XG5wID0gVi5wcm90b3R5cGU7XG5wLmdldFBhcmVudCA9IGFhKFwiUmFcIik7XG5wLlliID0gbShcInphXCIpO1xuZnVuY3Rpb24gYmQoYSkge1xuICBpZihhLnphKSB7XG4gICAgcmV0dXJuIGEuemFcbiAgfVxuICBpZihhLlJhKSB7XG4gICAgcmV0dXJuIGJkKGEuUmEpXG4gIH1cbiAgUGEoXCJSb290IGxvZ2dlciBoYXMgbm8gbGV2ZWwgc2V0LlwiKTtcbiAgcmV0dXJuIG51bGxcbn1cbnAubG9nID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICBpZihhLnZhbHVlID49IGJkKHRoaXMpLnZhbHVlKSB7XG4gICAgZm9yKGEgPSB0aGlzLmtjKGEsIGIsIGMpLCBiID0gXCJsb2c6XCIgKyBhLm9jLCBxLmNvbnNvbGUgJiYgKHEuY29uc29sZS50aW1lU3RhbXAgPyBxLmNvbnNvbGUudGltZVN0YW1wKGIpIDogcS5jb25zb2xlLm1hcmtUaW1lbGluZSAmJiBxLmNvbnNvbGUubWFya1RpbWVsaW5lKGIpKSwgcS5tc1dyaXRlUHJvZmlsZXJNYXJrICYmIHEubXNXcml0ZVByb2ZpbGVyTWFyayhiKSwgYiA9IHRoaXM7YjspIHtcbiAgICAgIGMgPSBiO1xuICAgICAgdmFyIGQgPSBhO1xuICAgICAgaWYoYy5GYikge1xuICAgICAgICBmb3IodmFyIGYgPSAwLCBnID0gdm9pZCAwO2cgPSBjLkZiW2ZdO2YrKykge1xuICAgICAgICAgIGcoZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYiA9IGIuZ2V0UGFyZW50KClcbiAgICB9XG4gIH1cbn07XG5wLmtjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICB2YXIgZCA9IG5ldyBVYyhhLCBTdHJpbmcoYiksIHRoaXMucGMpO1xuICBpZihjKSB7XG4gICAgZC5CYiA9IGM7XG4gICAgdmFyIGY7XG4gICAgdmFyIGcgPSBhcmd1bWVudHMuY2FsbGVlLmNhbGxlcjtcbiAgICB0cnkge1xuICAgICAgdmFyIGg7XG4gICAgICB2YXIgbiA9IGRhKFwid2luZG93LmxvY2F0aW9uLmhyZWZcIik7XG4gICAgICBpZih1KGMpKSB7XG4gICAgICAgIGggPSB7bWVzc2FnZTpjLCBuYW1lOlwiVW5rbm93biBlcnJvclwiLCBsaW5lTnVtYmVyOlwiTm90IGF2YWlsYWJsZVwiLCBmaWxlTmFtZTpuLCBzdGFjazpcIk5vdCBhdmFpbGFibGVcIn1cbiAgICAgIH1lbHNlIHtcbiAgICAgICAgdmFyIGssIHQsIGwgPSAhMTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBrID0gYy5saW5lTnVtYmVyIHx8IGMuSGMgfHwgXCJOb3QgYXZhaWxhYmxlXCJcbiAgICAgICAgfWNhdGNoKHIpIHtcbiAgICAgICAgICBrID0gXCJOb3QgYXZhaWxhYmxlXCIsIGwgPSAhMFxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdCA9IGMuZmlsZU5hbWUgfHwgYy5maWxlbmFtZSB8fCBjLnNvdXJjZVVSTCB8fCBxLiRnb29nRGVidWdGbmFtZSB8fCBuXG4gICAgICAgIH1jYXRjaChHKSB7XG4gICAgICAgICAgdCA9IFwiTm90IGF2YWlsYWJsZVwiLCBsID0gITBcbiAgICAgICAgfVxuICAgICAgICBoID0gIWwgJiYgYy5saW5lTnVtYmVyICYmIGMuZmlsZU5hbWUgJiYgYy5zdGFjayA/IGMgOiB7bWVzc2FnZTpjLm1lc3NhZ2UsIG5hbWU6Yy5uYW1lLCBsaW5lTnVtYmVyOmssIGZpbGVOYW1lOnQsIHN0YWNrOmMuc3RhY2sgfHwgXCJOb3QgYXZhaWxhYmxlXCJ9XG4gICAgICB9XG4gICAgICBmID0gXCJNZXNzYWdlOiBcIiArIG5hKGgubWVzc2FnZSkgKyAnXFxuVXJsOiA8YSBocmVmPVwidmlldy1zb3VyY2U6JyArIGguZmlsZU5hbWUgKyAnXCIgdGFyZ2V0PVwiX25ld1wiPicgKyBoLmZpbGVOYW1lICsgXCI8L2E+XFxuTGluZTogXCIgKyBoLmxpbmVOdW1iZXIgKyBcIlxcblxcbkJyb3dzZXIgc3RhY2s6XFxuXCIgKyBuYShoLnN0YWNrICsgXCItPiBcIikgKyBcIltlbmRdXFxuXFxuSlMgc3RhY2sgdHJhdmVyc2FsOlxcblwiICsgbmEoUWMoZykgKyBcIi0+IFwiKVxuICAgIH1jYXRjaChTZCkge1xuICAgICAgZiA9IFwiRXhjZXB0aW9uIHRyeWluZyB0byBleHBvc2UgZXhjZXB0aW9uISBZb3Ugd2luLCB3ZSBsb3NlLiBcIiArIFNkXG4gICAgfVxuICAgIGQuQWIgPSBmXG4gIH1cbiAgcmV0dXJuIGRcbn07XG5wLkkgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHRoaXMubG9nKFhjLCBhLCBiKVxufTtcbnAuJCA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdGhpcy5sb2coWWMsIGEsIGIpXG59O1xucC5pbmZvID0gZnVuY3Rpb24oYSwgYikge1xuICB0aGlzLmxvZyhaYywgYSwgYilcbn07XG5mdW5jdGlvbiBXKGEsIGIpIHtcbiAgYS5sb2coYWQsIGIsIHZvaWQgMClcbn1cbnZhciBjZCA9IHt9LCBkZCA9IG51bGw7XG5mdW5jdGlvbiBlZChhKSB7XG4gIGRkIHx8IChkZCA9IG5ldyBWKFwiXCIpLCBjZFtcIlwiXSA9IGRkLCBkZC5ZYigkYykpO1xuICB2YXIgYjtcbiAgaWYoIShiID0gY2RbYV0pKSB7XG4gICAgYiA9IG5ldyBWKGEpO1xuICAgIHZhciBjID0gYS5sYXN0SW5kZXhPZihcIi5cIiksIGQgPSBhLnN1YnN0cihjICsgMSksIGMgPSBlZChhLnN1YnN0cigwLCBjKSk7XG4gICAgYy5mYiB8fCAoYy5mYiA9IHt9KTtcbiAgICBjLmZiW2RdID0gYjtcbiAgICBiLlJhID0gYztcbiAgICBjZFthXSA9IGJcbiAgfVxuICByZXR1cm4gYlxufVxuO2Z1bmN0aW9uIFgoKSB7XG4gIHRoaXMucSA9IGVkKFwiZ29vZy5uZXQuQnJvd3NlckNoYW5uZWxcIilcbn1cbmZ1bmN0aW9uIHNjKGEsIGIsIGMsIGQpIHtcbiAgYS5pbmZvKFwiWE1MSFRUUCBURVhUIChcIiArIGIgKyBcIik6IFwiICsgRWMoYSwgYykgKyAoZCA/IFwiIFwiICsgZCA6IFwiXCIpKVxufVxuWC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMuaW5mbyhhKVxufTtcbmZ1bmN0aW9uIHhjKGEsIGIsIGMpIHtcbiAgYS5JKChjIHx8IFwiRXhjZXB0aW9uXCIpICsgYilcbn1cblgucHJvdG90eXBlLmluZm8gPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMucS5pbmZvKGEpXG59O1xuWC5wcm90b3R5cGUuJCA9IGZ1bmN0aW9uKGEpIHtcbiAgdGhpcy5xLiQoYSlcbn07XG5YLnByb3RvdHlwZS5JID0gZnVuY3Rpb24oYSkge1xuICB0aGlzLnEuSShhKVxufTtcbmZ1bmN0aW9uIEVjKGEsIGIpIHtcbiAgaWYoIWIgfHwgYiA9PSBmZCkge1xuICAgIHJldHVybiBiXG4gIH1cbiAgdHJ5IHtcbiAgICB2YXIgYyA9IEpjKGIpO1xuICAgIGlmKGMpIHtcbiAgICAgIGZvcih2YXIgZCA9IDA7ZCA8IGMubGVuZ3RoO2QrKykge1xuICAgICAgICBpZihzKGNbZF0pKSB7XG4gICAgICAgICAgdmFyIGYgPSBjW2RdO1xuICAgICAgICAgIGlmKCEoMiA+IGYubGVuZ3RoKSkge1xuICAgICAgICAgICAgdmFyIGcgPSBmWzFdO1xuICAgICAgICAgICAgaWYocyhnKSAmJiAhKDEgPiBnLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgdmFyIGggPSBnWzBdO1xuICAgICAgICAgICAgICBpZihcIm5vb3BcIiAhPSBoICYmIFwic3RvcFwiICE9IGgpIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIG4gPSAxO24gPCBnLmxlbmd0aDtuKyspIHtcbiAgICAgICAgICAgICAgICAgIGdbbl0gPSBcIlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBLYyhjKVxuICB9Y2F0Y2goaykge1xuICAgIHJldHVybiBhLmRlYnVnKFwiRXhjZXB0aW9uIHBhcnNpbmcgZXhwZWN0ZWQgSlMgYXJyYXkgLSBwcm9iYWJseSB3YXMgbm90IEpTXCIpLCBiXG4gIH1cbn1cbjtmdW5jdGlvbiBnZChhLCBiKSB7XG4gIHRoaXMuT2MgPSBuZXcgTWMoYSk7XG4gIHRoaXMuUCA9IGIgPyBKYyA6IEljXG59XG5nZC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihhKSB7XG4gIHJldHVybiB0aGlzLlAoYSlcbn07XG52YXIgbWMgPSA3LCBuYyA9IDg7XG5mdW5jdGlvbiBoZChhKSB7XG4gIE0uY2FsbCh0aGlzKTtcbiAgdGhpcy5oZWFkZXJzID0gbmV3IGJiO1xuICB0aGlzLnZhID0gYSB8fCBudWxsXG59XG55KGhkLCBTYik7XG5oZC5wcm90b3R5cGUucSA9IGVkKFwiZ29vZy5uZXQuWGhySW9cIik7XG52YXIgaWQgPSAvXmh0dHBzPyQvaTtcbnAgPSBoZC5wcm90b3R5cGU7XG5wLlMgPSAhMTtcbnAuZyA9IG51bGw7XG5wLmJiID0gbnVsbDtcbnAuUGEgPSBcIlwiO1xucC5KYiA9IFwiXCI7XG5wLmxhID0gMDtcbnAucCA9IFwiXCI7XG5wLmliID0gITE7XG5wLk5hID0gITE7XG5wLm1iID0gITE7XG5wLmNhID0gITE7XG5wLiRhID0gMDtcbnAuZmEgPSBudWxsO1xucC5XYiA9IFwiXCI7XG5wLmNjID0gITE7XG5wLnNlbmQgPSBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gIGlmKHRoaXMuZykge1xuICAgIHRocm93IEVycm9yKFwiW2dvb2cubmV0LlhocklvXSBPYmplY3QgaXMgYWN0aXZlIHdpdGggYW5vdGhlciByZXF1ZXN0PVwiICsgdGhpcy5QYSArIFwiOyBuZXdVcmk9XCIgKyBhKTtcbiAgfVxuICBiID0gYiA/IGIudG9VcHBlckNhc2UoKSA6IFwiR0VUXCI7XG4gIHRoaXMuUGEgPSBhO1xuICB0aGlzLnAgPSBcIlwiO1xuICB0aGlzLmxhID0gMDtcbiAgdGhpcy5KYiA9IGI7XG4gIHRoaXMuaWIgPSAhMTtcbiAgdGhpcy5TID0gITA7XG4gIHRoaXMuZyA9IHRoaXMudmEgPyB4Yih0aGlzLnZhKSA6IHhiKHZiKTtcbiAgdGhpcy5iYiA9IHRoaXMudmEgPyB0aGlzLnZhLkdhIHx8ICh0aGlzLnZhLkdhID0gemIodGhpcy52YSkpIDogdmIuR2EgfHwgKHZiLkdhID0gemIodmIpKTtcbiAgdGhpcy5nLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHcodGhpcy5PYiwgdGhpcyk7XG4gIHRyeSB7XG4gICAgVyh0aGlzLnEsIFkodGhpcywgXCJPcGVuaW5nIFhoclwiKSksIHRoaXMubWIgPSAhMCwgdGhpcy5nLm9wZW4oYiwgYSwgITApLCB0aGlzLm1iID0gITFcbiAgfWNhdGNoKGYpIHtcbiAgICBXKHRoaXMucSwgWSh0aGlzLCBcIkVycm9yIG9wZW5pbmcgWGhyOiBcIiArIGYubWVzc2FnZSkpO1xuICAgIGpkKHRoaXMsIGYpO1xuICAgIHJldHVyblxuICB9XG4gIGEgPSBjIHx8IFwiXCI7XG4gIHZhciBnID0gdGhpcy5oZWFkZXJzLm4oKTtcbiAgZCAmJiBFKGQsIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBnLnNldChiLCBhKVxuICB9KTtcbiAgZCA9IHEuRm9ybURhdGEgJiYgYSBpbnN0YW5jZW9mIHEuRm9ybURhdGE7XG4gIFwiUE9TVFwiICE9IGIgfHwgKGcuaWEoXCJDb250ZW50LVR5cGVcIikgfHwgZCkgfHwgZy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtcbiAgRShnLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgdGhpcy5nLnNldFJlcXVlc3RIZWFkZXIoYiwgYSlcbiAgfSwgdGhpcyk7XG4gIHRoaXMuV2IgJiYgKHRoaXMuZy5yZXNwb25zZVR5cGUgPSB0aGlzLldiKTtcbiAgXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB0aGlzLmcgJiYgKHRoaXMuZy53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLmNjKTtcbiAgdHJ5IHtcbiAgICB0aGlzLmZhICYmIChxLmNsZWFyVGltZW91dCh0aGlzLmZhKSwgdGhpcy5mYSA9IG51bGwpLCAwIDwgdGhpcy4kYSAmJiAoVyh0aGlzLnEsIFkodGhpcywgXCJXaWxsIGFib3J0IGFmdGVyIFwiICsgdGhpcy4kYSArIFwibXMgaWYgaW5jb21wbGV0ZVwiKSksIHRoaXMuZmEgPSBxLnNldFRpbWVvdXQodyh0aGlzLkRhLCB0aGlzKSwgdGhpcy4kYSkpLCBXKHRoaXMucSwgWSh0aGlzLCBcIlNlbmRpbmcgcmVxdWVzdFwiKSksIHRoaXMuTmEgPSAhMCwgdGhpcy5nLnNlbmQoYSksIHRoaXMuTmEgPSAhMVxuICB9Y2F0Y2goaCkge1xuICAgIFcodGhpcy5xLCBZKHRoaXMsIFwiU2VuZCBlcnJvcjogXCIgKyBoLm1lc3NhZ2UpKSwgamQodGhpcywgaClcbiAgfVxufTtcbnAuRGEgPSBmdW5jdGlvbigpIHtcbiAgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgY2EgJiYgdGhpcy5nICYmICh0aGlzLnAgPSBcIlRpbWVkIG91dCBhZnRlciBcIiArIHRoaXMuJGEgKyBcIm1zLCBhYm9ydGluZ1wiLCB0aGlzLmxhID0gbmMsIFcodGhpcy5xLCBZKHRoaXMsIHRoaXMucCkpLCB0aGlzLmRpc3BhdGNoRXZlbnQoXCJ0aW1lb3V0XCIpLCB0aGlzLmFib3J0KG5jKSlcbn07XG5mdW5jdGlvbiBqZChhLCBiKSB7XG4gIGEuUyA9ICExO1xuICBhLmcgJiYgKGEuY2EgPSAhMCwgYS5nLmFib3J0KCksIGEuY2EgPSAhMSk7XG4gIGEucCA9IGI7XG4gIGEubGEgPSA1O1xuICBrZChhKTtcbiAgbGQoYSlcbn1cbmZ1bmN0aW9uIGtkKGEpIHtcbiAgYS5pYiB8fCAoYS5pYiA9ICEwLCBhLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgYS5kaXNwYXRjaEV2ZW50KFwiZXJyb3JcIikpXG59XG5wLmFib3J0ID0gZnVuY3Rpb24oYSkge1xuICB0aGlzLmcgJiYgdGhpcy5TICYmIChXKHRoaXMucSwgWSh0aGlzLCBcIkFib3J0aW5nXCIpKSwgdGhpcy5TID0gITEsIHRoaXMuY2EgPSAhMCwgdGhpcy5nLmFib3J0KCksIHRoaXMuY2EgPSAhMSwgdGhpcy5sYSA9IGEgfHwgbWMsIHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLCB0aGlzLmRpc3BhdGNoRXZlbnQoXCJhYm9ydFwiKSwgbGQodGhpcykpXG59O1xucC51ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZyAmJiAodGhpcy5TICYmICh0aGlzLlMgPSAhMSwgdGhpcy5jYSA9ICEwLCB0aGlzLmcuYWJvcnQoKSwgdGhpcy5jYSA9ICExKSwgbGQodGhpcywgITApKTtcbiAgaGQucmEudS5jYWxsKHRoaXMpXG59O1xucC5PYiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm1iIHx8IHRoaXMuTmEgfHwgdGhpcy5jYSA/IG1kKHRoaXMpIDogdGhpcy5zYygpXG59O1xucC5zYyA9IGZ1bmN0aW9uKCkge1xuICBtZCh0aGlzKVxufTtcbmZ1bmN0aW9uIG1kKGEpIHtcbiAgaWYoYS5TICYmIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGNhKSB7XG4gICAgaWYoYS5iYlsxXSAmJiA0ID09IFIoYSkgJiYgMiA9PSBrYyhhKSkge1xuICAgICAgVyhhLnEsIFkoYSwgXCJMb2NhbCByZXF1ZXN0IGVycm9yIGRldGVjdGVkIGFuZCBpZ25vcmVkXCIpKVxuICAgIH1lbHNlIHtcbiAgICAgIGlmKGEuTmEgJiYgNCA9PSBSKGEpKSB7XG4gICAgICAgIHEuc2V0VGltZW91dCh3KGEuT2IsIGEpLCAwKVxuICAgICAgfWVsc2Uge1xuICAgICAgICBpZihhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpLCA0ID09IFIoYSkpIHtcbiAgICAgICAgICBXKGEucSwgWShhLCBcIlJlcXVlc3QgY29tcGxldGVcIikpO1xuICAgICAgICAgIGEuUyA9ICExO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgYiA9IGtjKGEpLCBjLCBkO1xuICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICBzd2l0Y2goYikge1xuICAgICAgICAgICAgICAgIGNhc2UgMjAwOlxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBjYXNlIDIwMTpcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDI6XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGNhc2UgMjA0OlxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBjYXNlIDIwNjpcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgY2FzZSAzMDQ6XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGNhc2UgMTIyMzpcbiAgICAgICAgICAgICAgICAgIGQgPSAhMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGQgPSAhMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZighKGMgPSBkKSkge1xuICAgICAgICAgICAgICB2YXIgZjtcbiAgICAgICAgICAgICAgaWYoZiA9IDAgPT09IGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZyA9IFN0cmluZyhhLlBhKS5tYXRjaChRYSlbMV0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICBpZighZyAmJiBzZWxmLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaCA9IHNlbGYubG9jYXRpb24ucHJvdG9jb2wsIGcgPSBoLnN1YnN0cigwLCBoLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGYgPSAhaWQudGVzdChnID8gZy50b0xvd2VyQ2FzZSgpIDogXCJcIilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjID0gZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoYykge1xuICAgICAgICAgICAgICBhLmRpc3BhdGNoRXZlbnQoXCJjb21wbGV0ZVwiKSwgYS5kaXNwYXRjaEV2ZW50KFwic3VjY2Vzc1wiKVxuICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICBhLmxhID0gNjtcbiAgICAgICAgICAgICAgdmFyIG47XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbiA9IDIgPCBSKGEpID8gYS5nLnN0YXR1c1RleHQgOiBcIlwiXG4gICAgICAgICAgICAgIH1jYXRjaChrKSB7XG4gICAgICAgICAgICAgICAgVyhhLnEsIFwiQ2FuIG5vdCBnZXQgc3RhdHVzOiBcIiArIGsubWVzc2FnZSksIG4gPSBcIlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYS5wID0gbiArIFwiIFtcIiArIGtjKGEpICsgXCJdXCI7XG4gICAgICAgICAgICAgIGtkKGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfWZpbmFsbHkge1xuICAgICAgICAgICAgbGQoYSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxkKGEsIGIpIHtcbiAgaWYoYS5nKSB7XG4gICAgdmFyIGMgPSBhLmcsIGQgPSBhLmJiWzBdID8gZWEgOiBudWxsO1xuICAgIGEuZyA9IG51bGw7XG4gICAgYS5iYiA9IG51bGw7XG4gICAgYS5mYSAmJiAocS5jbGVhclRpbWVvdXQoYS5mYSksIGEuZmEgPSBudWxsKTtcbiAgICBiIHx8IGEuZGlzcGF0Y2hFdmVudChcInJlYWR5XCIpO1xuICAgIHRyeSB7XG4gICAgICBjLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGRcbiAgICB9Y2F0Y2goZikge1xuICAgICAgYS5xLkkoXCJQcm9ibGVtIGVuY291bnRlcmVkIHJlc2V0dGluZyBvbnJlYWR5c3RhdGVjaGFuZ2U6IFwiICsgZi5tZXNzYWdlKVxuICAgIH1cbiAgfVxufVxucC5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4hIXRoaXMuZ1xufTtcbmZ1bmN0aW9uIFIoYSkge1xuICByZXR1cm4gYS5nID8gYS5nLnJlYWR5U3RhdGUgOiAwXG59XG5mdW5jdGlvbiBrYyhhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIDIgPCBSKGEpID8gYS5nLnN0YXR1cyA6IC0xXG4gIH1jYXRjaChiKSB7XG4gICAgcmV0dXJuIGEucS4kKFwiQ2FuIG5vdCBnZXQgc3RhdHVzOiBcIiArIGIubWVzc2FnZSksIC0xXG4gIH1cbn1cbmZ1bmN0aW9uIGxjKGEpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYS5nID8gYS5nLnJlc3BvbnNlVGV4dCA6IFwiXCJcbiAgfWNhdGNoKGIpIHtcbiAgICByZXR1cm4gVyhhLnEsIFwiQ2FuIG5vdCBnZXQgcmVzcG9uc2VUZXh0OiBcIiArIGIubWVzc2FnZSksIFwiXCJcbiAgfVxufVxucC5FYiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdSh0aGlzLnApID8gdGhpcy5wIDogU3RyaW5nKHRoaXMucClcbn07XG5mdW5jdGlvbiBZKGEsIGIpIHtcbiAgcmV0dXJuIGIgKyBcIiBbXCIgKyBhLkpiICsgXCIgXCIgKyBhLlBhICsgXCIgXCIgKyBrYyhhKSArIFwiXVwiXG59XG47ZnVuY3Rpb24gbmQoKSB7XG4gIHRoaXMuVmIgPSB4KClcbn1cbm5ldyBuZDtcbm5kLnByb3RvdHlwZS5zZXQgPSBtKFwiVmJcIik7XG5uZC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXQoeCgpKVxufTtcbm5kLnByb3RvdHlwZS5nZXQgPSBhYShcIlZiXCIpO1xuZnVuY3Rpb24gb2QoYSwgYiwgYywgZCwgZikge1xuICAobmV3IFgpLmRlYnVnKFwiVGVzdExvYWRJbWFnZVdpdGhSZXRyaWVzOiBcIiArIGYpO1xuICBpZigwID09IGQpIHtcbiAgICBjKCExKVxuICB9ZWxzZSB7XG4gICAgdmFyIGcgPSBmIHx8IDA7XG4gICAgZC0tO1xuICAgIHBkKGEsIGIsIGZ1bmN0aW9uKGYpIHtcbiAgICAgIGYgPyBjKCEwKSA6IHEuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgb2QoYSwgYiwgYywgZCwgZylcbiAgICAgIH0sIGcpXG4gICAgfSlcbiAgfVxufVxuZnVuY3Rpb24gcGQoYSwgYiwgYykge1xuICBmdW5jdGlvbiBkKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmLmRlYnVnKFwiVGVzdExvYWRJbWFnZTogXCIgKyBiKSwgZy5vbmxvYWQgPSBudWxsLCBnLm9uZXJyb3IgPSBudWxsLCBnLm9uYWJvcnQgPSBudWxsLCBnLm9udGltZW91dCA9IG51bGwsIHEuY2xlYXJUaW1lb3V0KGgpLCBjKGEpXG4gICAgICB9Y2F0Y2goZCkge1xuICAgICAgICB4YyhmLCBkKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgZiA9IG5ldyBYO1xuICBmLmRlYnVnKFwiVGVzdExvYWRJbWFnZTogbG9hZGluZyBcIiArIGEpO1xuICB2YXIgZyA9IG5ldyBJbWFnZSwgaCA9IG51bGw7XG4gIGcub25sb2FkID0gZCghMCwgXCJsb2FkZWRcIik7XG4gIGcub25lcnJvciA9IGQoITEsIFwiZXJyb3JcIik7XG4gIGcub25hYm9ydCA9IGQoITEsIFwiYWJvcnRcIik7XG4gIGcub250aW1lb3V0ID0gZCghMSwgXCJ0aW1lb3V0XCIpO1xuICBoID0gcS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGlmKGcub250aW1lb3V0KSB7XG4gICAgICBnLm9udGltZW91dCgpXG4gICAgfVxuICB9LCBiKTtcbiAgZy5zcmMgPSBhXG59XG47ZnVuY3Rpb24gcWQoYSwgYikge1xuICB0aGlzLmIgPSBhO1xuICB0aGlzLmEgPSBiO1xuICB0aGlzLlAgPSBuZXcgZ2QobnVsbCwgITApXG59XG5wID0gcWQucHJvdG90eXBlO1xucC52ID0gbnVsbDtcbnAuQSA9IG51bGw7XG5wLlVhID0gITE7XG5wLmFjID0gbnVsbDtcbnAuS2EgPSBudWxsO1xucC5uYiA9IG51bGw7XG5wLkggPSBudWxsO1xucC5jID0gbnVsbDtcbnAuaCA9IC0xO1xucC5MID0gbnVsbDtcbnAud2EgPSBudWxsO1xucC5ZID0gbShcInZcIik7XG5wLlpiID0gbShcIlBcIik7XG5wLmdiID0gZnVuY3Rpb24oYSkge1xuICB0aGlzLkggPSBhO1xuICBhID0gcmQodGhpcy5iLCB0aGlzLkgpO1xuICBUKHNkKTtcbiAgdGhpcy5hYyA9IHgoKTtcbiAgdmFyIGIgPSB0aGlzLmIuQ2I7XG4gIG51bGwgIT0gYiA/ICh0aGlzLkwgPSB0aGlzLmIuY29ycmVjdEhvc3RQcmVmaXgoYlswXSksICh0aGlzLndhID0gYlsxXSkgPyAodGhpcy5jID0gMSwgdGQodGhpcykpIDogKHRoaXMuYyA9IDIsIHVkKHRoaXMpKSkgOiAocWIoYSwgXCJNT0RFXCIsIFwiaW5pdFwiKSwgdGhpcy5BID0gbmV3IFEodGhpcywgdGhpcy5hLCB2b2lkIDAsIHZvaWQgMCwgdm9pZCAwKSwgdGhpcy5BLlkodGhpcy52KSwgaGModGhpcy5BLCBhLCAhMSwgbnVsbCwgITApLCB0aGlzLmMgPSAwKVxufTtcbmZ1bmN0aW9uIHRkKGEpIHtcbiAgdmFyIGIgPSB2ZChhLmIsIGEud2EsIFwiL21haWwvaW1hZ2VzL2NsZWFyZG90LmdpZlwiKTtcbiAgSihiKTtcbiAgb2QoYi50b1N0cmluZygpLCA1RTMsIHcoYS5pYywgYSksIDMsIDJFMyk7XG4gIGEuRyhqYylcbn1cbnAuaWMgPSBmdW5jdGlvbihhKSB7XG4gIGlmKGEpIHtcbiAgICB0aGlzLmMgPSAyLCB1ZCh0aGlzKVxuICB9ZWxzZSB7XG4gICAgVCh3ZCk7XG4gICAgdmFyIGIgPSB0aGlzLmI7XG4gICAgYi5hLmRlYnVnKFwiVGVzdCBDb25uZWN0aW9uIEJsb2NrZWRcIik7XG4gICAgYi5oID0gYi5VLmg7XG4gICAgWihiLCA5KVxuICB9XG4gIGEgJiYgdGhpcy5HKHBjKVxufTtcbmZ1bmN0aW9uIHVkKGEpIHtcbiAgYS5hLmRlYnVnKFwiVGVzdENvbm5lY3Rpb246IHN0YXJ0aW5nIHN0YWdlIDJcIik7XG4gIGEuQSA9IG5ldyBRKGEsIGEuYSwgdm9pZCAwLCB2b2lkIDAsIHZvaWQgMCk7XG4gIGEuQS5ZKGEudik7XG4gIHZhciBiID0geGQoYS5iLCBhLkwsIGEuSCk7XG4gIFQoeWQpO1xuICBpZihlYygpKSB7XG4gICAgcWIoYiwgXCJUWVBFXCIsIFwieG1saHR0cFwiKSwgaGMoYS5BLCBiLCAhMSwgYS5MLCAhMSlcbiAgfWVsc2Uge1xuICAgIHFiKGIsIFwiVFlQRVwiLCBcImh0bWxcIik7XG4gICAgdmFyIGMgPSBhLkE7XG4gICAgYSA9IEJvb2xlYW4oYS5MKTtcbiAgICBjLnNhID0gMztcbiAgICBjLlQgPSBKKGIubigpKTtcbiAgICBDYyhjLCBhKVxuICB9XG59XG5wLmhiID0gZnVuY3Rpb24oYSkge1xuICByZXR1cm4gdGhpcy5iLmhiKGEpXG59O1xucC5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLkEgJiYgKHRoaXMuQS5jYW5jZWwoKSwgdGhpcy5BID0gbnVsbCk7XG4gIHRoaXMuaCA9IC0xXG59O1xucC5IYiA9IGJhKCExKTtcbnAuUGIgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHRoaXMuaCA9IGEuaDtcbiAgaWYoMCA9PSB0aGlzLmMpIHtcbiAgICBpZih0aGlzLmEuZGVidWcoXCJUZXN0Q29ubmVjdGlvbjogR290IGRhdGEgZm9yIHN0YWdlIDFcIiksIGIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjID0gdGhpcy5QLnBhcnNlKGIpXG4gICAgICB9Y2F0Y2goZCkge1xuICAgICAgICB4Yyh0aGlzLmEsIGQpO1xuICAgICAgICB6ZCh0aGlzLmIsIHRoaXMpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuTCA9IHRoaXMuYi5jb3JyZWN0SG9zdFByZWZpeChjWzBdKTtcbiAgICAgIHRoaXMud2EgPSBjWzFdXG4gICAgfWVsc2Uge1xuICAgICAgdGhpcy5hLmRlYnVnKFwiVGVzdENvbm5lY3Rpb246IE51bGwgcmVzcG9uc2VUZXh0XCIpLCB6ZCh0aGlzLmIsIHRoaXMpXG4gICAgfVxuICB9ZWxzZSB7XG4gICAgaWYoMiA9PSB0aGlzLmMpIHtcbiAgICAgIGlmKHRoaXMuVWEpIHtcbiAgICAgICAgVChBZCksIHRoaXMubmIgPSB4KClcbiAgICAgIH1lbHNlIHtcbiAgICAgICAgaWYoXCIxMTExMVwiID09IGIpIHtcbiAgICAgICAgICBpZihUKEJkKSwgdGhpcy5VYSA9ICEwLCB0aGlzLkthID0geCgpLCBjID0gdGhpcy5LYSAtIHRoaXMuYWMsIGVjKCkgfHwgNTAwID4gYykge1xuICAgICAgICAgICAgdGhpcy5oID0gMjAwLCB0aGlzLkEuY2FuY2VsKCksIHRoaXMuYS5kZWJ1ZyhcIlRlc3QgY29ubmVjdGlvbiBzdWNjZWVkZWQ7IHVzaW5nIHN0cmVhbWluZyBjb25uZWN0aW9uXCIpLCBUKENkKSwgRGQodGhpcy5iLCB0aGlzLCAhMClcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICBUKEVkKSwgdGhpcy5LYSA9IHRoaXMubmIgPSB4KCksIHRoaXMuVWEgPSAhMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xucC5tYSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmggPSB0aGlzLkEuaDtcbiAgaWYoIXRoaXMuQS5KKSB7XG4gICAgdGhpcy5hLmRlYnVnKFwiVGVzdENvbm5lY3Rpb246IHJlcXVlc3QgZmFpbGVkLCBpbiBzdGF0ZSBcIiArIHRoaXMuYyksIDAgPT0gdGhpcy5jID8gVChGZCkgOiAyID09IHRoaXMuYyAmJiBUKEdkKSwgemQodGhpcy5iLCB0aGlzKVxuICB9ZWxzZSB7XG4gICAgaWYoMCA9PSB0aGlzLmMpIHtcbiAgICAgIHRoaXMuYS5kZWJ1ZyhcIlRlc3RDb25uZWN0aW9uOiByZXF1ZXN0IGNvbXBsZXRlIGZvciBpbml0aWFsIGNoZWNrXCIpLCB0aGlzLndhID8gKHRoaXMuYyA9IDEsIHRkKHRoaXMpKSA6ICh0aGlzLmMgPSAyLCB1ZCh0aGlzKSlcbiAgICB9ZWxzZSB7XG4gICAgICBpZigyID09IHRoaXMuYykge1xuICAgICAgICB0aGlzLmEuZGVidWcoXCJUZXN0Q29ubmVjdGlvbjogcmVxdWVzdCBjb21wbGV0ZSBmb3Igc3RhZ2UgMlwiKTtcbiAgICAgICAgdmFyIGEgPSAhMTtcbiAgICAgICAgKGEgPSBlYygpID8gdGhpcy5VYSA6IDIwMCA+IHRoaXMubmIgLSB0aGlzLkthID8gITEgOiAhMCkgPyAodGhpcy5hLmRlYnVnKFwiVGVzdCBjb25uZWN0aW9uIHN1Y2NlZWRlZDsgdXNpbmcgc3RyZWFtaW5nIGNvbm5lY3Rpb25cIiksIFQoQ2QpLCBEZCh0aGlzLmIsIHRoaXMsICEwKSkgOiAodGhpcy5hLmRlYnVnKFwiVGVzdCBjb25uZWN0aW9uIGZhaWxlZDsgbm90IHVzaW5nIHN0cmVhbWluZ1wiKSwgVChIZCksIERkKHRoaXMuYiwgdGhpcywgITEpKVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbnAuWWEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYi5ZYSgpXG59O1xucC5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5iLmlzQWN0aXZlKClcbn07XG5wLkcgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMuYi5HKGEpXG59O1xuZnVuY3Rpb24gSWQoYSwgYikge1xuICB0aGlzLnZiID0gYSB8fCBudWxsO1xuICB0aGlzLmMgPSBKZDtcbiAgdGhpcy5zID0gW107XG4gIHRoaXMuUSA9IFtdO1xuICB0aGlzLmEgPSBuZXcgWDtcbiAgdGhpcy5QID0gbmV3IGdkKG51bGwsICEwKTtcbiAgdGhpcy5DYiA9IGIgfHwgbnVsbFxufVxuZnVuY3Rpb24gS2QoYSwgYikge1xuICB0aGlzLkxiID0gYTtcbiAgdGhpcy5tYXAgPSBiO1xuICB0aGlzLkZjID0gbnVsbFxufVxucCA9IElkLnByb3RvdHlwZTtcbnAudiA9IG51bGw7XG5wLnhhID0gbnVsbDtcbnAubyA9IG51bGw7XG5wLmsgPSBudWxsO1xucC5IID0gbnVsbDtcbnAuTGEgPSBudWxsO1xucC51YiA9IG51bGw7XG5wLkwgPSBudWxsO1xucC5mYyA9ICEwO1xucC5BYSA9IDA7XG5wLnFjID0gMDtcbnAuSmEgPSAhMTtcbnAuZSA9IG51bGw7XG5wLkYgPSBudWxsO1xucC5NID0gbnVsbDtcbnAuYmEgPSBudWxsO1xucC5VID0gbnVsbDtcbnAucmIgPSBudWxsO1xucC5lYyA9ICEwO1xucC55YSA9IC0xO1xucC5LYiA9IC0xO1xucC5oID0gLTE7XG5wLlYgPSAwO1xucC5nYSA9IDA7XG5wLmdjID0gNUUzO1xucC5CYyA9IDFFNDtcbnAua2IgPSAyO1xucC5EYiA9IDJFNDtcbnAub2EgPSAwO1xucC5aYSA9ICExO1xucC5oYSA9IDg7XG52YXIgSmQgPSAxLCBMZCA9IG5ldyBTYjtcbmZ1bmN0aW9uIE1kKGEsIGIpIHtcbiAgTi5jYWxsKHRoaXMsIFwic3RhdGV2ZW50XCIsIGEpO1xuICB0aGlzLlBjID0gYlxufVxueShNZCwgTik7XG5mdW5jdGlvbiBOZChhLCBiLCBjLCBkKSB7XG4gIE4uY2FsbCh0aGlzLCBcInRpbWluZ2V2ZW50XCIsIGEpO1xuICB0aGlzLnNpemUgPSBiO1xuICB0aGlzLk5jID0gYztcbiAgdGhpcy5NYyA9IGRcbn1cbnkoTmQsIE4pO1xudmFyIGpjID0gMSwgcGMgPSAyLCBvYyA9IDMsIEZjID0gNDtcbmZ1bmN0aW9uIE9kKGEsIGIpIHtcbiAgTi5jYWxsKHRoaXMsIFwic2VydmVycmVhY2hhYmlsaXR5XCIsIGEpO1xuICB0aGlzLkxjID0gYlxufVxueShPZCwgTik7XG52YXIgc2QgPSAzLCB3ZCA9IDQsIHlkID0gNSwgQmQgPSA2LCBBZCA9IDcsIEVkID0gOCwgRmQgPSA5LCBHZCA9IDEwLCBIZCA9IDExLCBDZCA9IDEyLCB1YyA9IDEzLCB2YyA9IDE0LCB6YyA9IDE1LCBBYyA9IDE2LCBCYyA9IDE3LCBIYyA9IDE4LCBEYyA9IDIyLCBmZCA9IFwieTJmJVwiO1xucCA9IElkLnByb3RvdHlwZTtcbnAuZ2IgPSBmdW5jdGlvbihhLCBiLCBjLCBkLCBmKSB7XG4gIHRoaXMuYS5kZWJ1ZyhcImNvbm5lY3QoKVwiKTtcbiAgVCgwKTtcbiAgdGhpcy5IID0gYjtcbiAgdGhpcy54YSA9IGMgfHwge307XG4gIGQgJiYgdm9pZCAwICE9PSBmICYmICh0aGlzLnhhLk9TSUQgPSBkLCB0aGlzLnhhLk9BSUQgPSBmKTtcbiAgdGhpcy5hLmRlYnVnKFwiY29ubmVjdFRlc3RfKClcIik7XG4gIFBkKHRoaXMpICYmICh0aGlzLlUgPSBuZXcgcWQodGhpcywgdGhpcy5hKSwgdGhpcy5VLlkodGhpcy52KSwgdGhpcy5VLlpiKHRoaXMuUCksIHRoaXMuVS5nYihhKSlcbn07XG5wLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5hLmRlYnVnKFwiZGlzY29ubmVjdCgpXCIpO1xuICBRZCh0aGlzKTtcbiAgaWYoMyA9PSB0aGlzLmMpIHtcbiAgICB2YXIgYSA9IHRoaXMuQWErKywgYiA9IHRoaXMuTGEubigpO1xuICAgIEkoYiwgXCJTSURcIiwgdGhpcy5aKTtcbiAgICBJKGIsIFwiUklEXCIsIGEpO1xuICAgIEkoYiwgXCJUWVBFXCIsIFwidGVybWluYXRlXCIpO1xuICAgIFJkKHRoaXMsIGIpO1xuICAgIGEgPSBuZXcgUSh0aGlzLCB0aGlzLmEsIHRoaXMuWiwgYSwgdm9pZCAwKTtcbiAgICBhLnNhID0gMjtcbiAgICBhLlQgPSBKKGIubigpKTtcbiAgICBiID0gbmV3IEltYWdlO1xuICAgIGIuc3JjID0gYS5UO1xuICAgIGIub25sb2FkID0gYi5vbmVycm9yID0gdyhhLmxjLCBhKTtcbiAgICBhLnBhID0geCgpO1xuICAgIGljKGEpXG4gIH1cbiAgVGQodGhpcylcbn07XG5mdW5jdGlvbiBRZChhKSB7XG4gIGEuVSAmJiAoYS5VLmFib3J0KCksIGEuVSA9IG51bGwpO1xuICBhLmsgJiYgKGEuay5jYW5jZWwoKSwgYS5rID0gbnVsbCk7XG4gIGEuTSAmJiAocS5jbGVhclRpbWVvdXQoYS5NKSwgYS5NID0gbnVsbCk7XG4gIFVkKGEpO1xuICBhLm8gJiYgKGEuby5jYW5jZWwoKSwgYS5vID0gbnVsbCk7XG4gIGEuRiAmJiAocS5jbGVhclRpbWVvdXQoYS5GKSwgYS5GID0gbnVsbClcbn1cbnAuWSA9IG0oXCJ2XCIpO1xucC4kYiA9IG0oXCJvYVwiKTtcbnAuSGIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDAgPT0gdGhpcy5jXG59O1xucC5aYiA9IG0oXCJQXCIpO1xuZnVuY3Rpb24gVmQoYSkge1xuICBhLm8gfHwgYS5GIHx8IChhLkYgPSBVKHcoYS5SYiwgYSksIDApLCBhLlYgPSAwKVxufVxucC5SYiA9IGZ1bmN0aW9uKGEpIHtcbiAgdGhpcy5GID0gbnVsbDtcbiAgdGhpcy5hLmRlYnVnKFwic3RhcnRGb3J3YXJkQ2hhbm5lbF9cIik7XG4gIGlmKFBkKHRoaXMpKSB7XG4gICAgaWYodGhpcy5jID09IEpkKSB7XG4gICAgICBpZihhKSB7XG4gICAgICAgIHRoaXMuYS5JKFwiTm90IHN1cHBvc2VkIHRvIHJldHJ5IHRoZSBvcGVuXCIpXG4gICAgICB9ZWxzZSB7XG4gICAgICAgIHRoaXMuYS5kZWJ1ZyhcIm9wZW5fKClcIik7XG4gICAgICAgIHRoaXMuQWEgPSBNYXRoLmZsb29yKDFFNSAqIE1hdGgucmFuZG9tKCkpO1xuICAgICAgICBhID0gdGhpcy5BYSsrO1xuICAgICAgICB2YXIgYiA9IG5ldyBRKHRoaXMsIHRoaXMuYSwgXCJcIiwgYSwgdm9pZCAwKTtcbiAgICAgICAgYi5ZKHRoaXMudik7XG4gICAgICAgIHZhciBjID0gV2QodGhpcyksIGQgPSB0aGlzLkxhLm4oKTtcbiAgICAgICAgSShkLCBcIlJJRFwiLCBhKTtcbiAgICAgICAgdGhpcy52YiAmJiBJKGQsIFwiQ1ZFUlwiLCB0aGlzLnZiKTtcbiAgICAgICAgUmQodGhpcywgZCk7XG4gICAgICAgIGZjKGIsIGQsIGMpO1xuICAgICAgICB0aGlzLm8gPSBiO1xuICAgICAgICB0aGlzLmMgPSAyXG4gICAgICB9XG4gICAgfWVsc2Uge1xuICAgICAgMyA9PSB0aGlzLmMgJiYgKGEgPyBYZCh0aGlzLCBhKSA6IDAgPT0gdGhpcy5zLmxlbmd0aCA/IHRoaXMuYS5kZWJ1ZyhcInN0YXJ0Rm9yd2FyZENoYW5uZWxfIHJldHVybmVkOiBub3RoaW5nIHRvIHNlbmRcIikgOiB0aGlzLm8gPyB0aGlzLmEuSShcInN0YXJ0Rm9yd2FyZENoYW5uZWxfIHJldHVybmVkOiBjb25uZWN0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3NcIikgOiAoWGQodGhpcyksIHRoaXMuYS5kZWJ1ZyhcInN0YXJ0Rm9yd2FyZENoYW5uZWxfIGZpbmlzaGVkLCBzZW50IHJlcXVlc3RcIikpKVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIFhkKGEsIGIpIHtcbiAgdmFyIGMsIGQ7XG4gIGIgPyA2IDwgYS5oYSA/IChhLnMgPSBhLlEuY29uY2F0KGEucyksIGEuUS5sZW5ndGggPSAwLCBjID0gYS5BYSAtIDEsIGQgPSBXZChhKSkgOiAoYyA9IGIuQiwgZCA9IGIuWCkgOiAoYyA9IGEuQWErKywgZCA9IFdkKGEpKTtcbiAgdmFyIGYgPSBhLkxhLm4oKTtcbiAgSShmLCBcIlNJRFwiLCBhLlopO1xuICBJKGYsIFwiUklEXCIsIGMpO1xuICBJKGYsIFwiQUlEXCIsIGEueWEpO1xuICBSZChhLCBmKTtcbiAgYyA9IG5ldyBRKGEsIGEuYSwgYS5aLCBjLCBhLlYgKyAxKTtcbiAgYy5ZKGEudik7XG4gIGMuc2V0VGltZW91dChNYXRoLnJvdW5kKDAuNSAqIGEuRGIpICsgTWF0aC5yb3VuZCgwLjUgKiBhLkRiICogTWF0aC5yYW5kb20oKSkpO1xuICBhLm8gPSBjO1xuICBmYyhjLCBmLCBkKVxufVxuZnVuY3Rpb24gUmQoYSwgYikge1xuICBpZihhLmUpIHtcbiAgICB2YXIgYyA9IGEuZS5nZXRBZGRpdGlvbmFsUGFyYW1zKGEpO1xuICAgIGMgJiYgRShjLCBmdW5jdGlvbihhLCBjKSB7XG4gICAgICBJKGIsIGMsIGEpXG4gICAgfSlcbiAgfVxufVxuZnVuY3Rpb24gV2QoYSkge1xuICB2YXIgYiA9IE1hdGgubWluKGEucy5sZW5ndGgsIDFFMyksIGMgPSBbXCJjb3VudD1cIiArIGJdLCBkO1xuICA2IDwgYS5oYSAmJiAwIDwgYiA/IChkID0gYS5zWzBdLkxiLCBjLnB1c2goXCJvZnM9XCIgKyBkKSkgOiBkID0gMDtcbiAgZm9yKHZhciBmID0gMDtmIDwgYjtmKyspIHtcbiAgICB2YXIgZyA9IGEuc1tmXS5MYiwgaCA9IGEuc1tmXS5tYXAsIGcgPSA2ID49IGEuaGEgPyBmIDogZyAtIGQ7XG4gICAgdHJ5IHtcbiAgICAgIEUoaCwgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICBjLnB1c2goXCJyZXFcIiArIGcgKyBcIl9cIiArIGIgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhKSlcbiAgICAgIH0pXG4gICAgfWNhdGNoKG4pIHtcbiAgICAgIGMucHVzaChcInJlcVwiICsgZyArIFwiX3R5cGU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoXCJfYmFkbWFwXCIpKSwgYS5lICYmIGEuZS5iYWRNYXBFcnJvcihhLCBoKVxuICAgIH1cbiAgfVxuICBhLlEgPSBhLlEuY29uY2F0KGEucy5zcGxpY2UoMCwgYikpO1xuICByZXR1cm4gYy5qb2luKFwiJlwiKVxufVxuZnVuY3Rpb24gWWQoYSkge1xuICBhLmsgfHwgYS5NIHx8IChhLnRiID0gMSwgYS5NID0gVSh3KGEuUWIsIGEpLCAwKSwgYS5nYSA9IDApXG59XG5mdW5jdGlvbiBaZChhKSB7XG4gIGlmKGEuayB8fCBhLk0pIHtcbiAgICByZXR1cm4gYS5hLkkoXCJSZXF1ZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3NcIiksICExXG4gIH1cbiAgaWYoMyA8PSBhLmdhKSB7XG4gICAgcmV0dXJuITFcbiAgfVxuICBhLmEuZGVidWcoXCJHb2luZyB0byByZXRyeSBHRVRcIik7XG4gIGEudGIrKztcbiAgYS5NID0gVSh3KGEuUWIsIGEpLCAkZChhLCBhLmdhKSk7XG4gIGEuZ2ErKztcbiAgcmV0dXJuITBcbn1cbnAuUWIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5NID0gbnVsbDtcbiAgaWYoUGQodGhpcykpIHtcbiAgICB0aGlzLmEuZGVidWcoXCJDcmVhdGluZyBuZXcgSHR0cFJlcXVlc3RcIik7XG4gICAgdGhpcy5rID0gbmV3IFEodGhpcywgdGhpcy5hLCB0aGlzLlosIFwicnBjXCIsIHRoaXMudGIpO1xuICAgIHRoaXMuay5ZKHRoaXMudik7XG4gICAgdGhpcy5rLiRiKHRoaXMub2EpO1xuICAgIHZhciBhID0gdGhpcy51Yi5uKCk7XG4gICAgSShhLCBcIlJJRFwiLCBcInJwY1wiKTtcbiAgICBJKGEsIFwiU0lEXCIsIHRoaXMuWik7XG4gICAgSShhLCBcIkNJXCIsIHRoaXMucmIgPyBcIjBcIiA6IFwiMVwiKTtcbiAgICBJKGEsIFwiQUlEXCIsIHRoaXMueWEpO1xuICAgIFJkKHRoaXMsIGEpO1xuICAgIGlmKGVjKCkpIHtcbiAgICAgIEkoYSwgXCJUWVBFXCIsIFwieG1saHR0cFwiKSwgaGModGhpcy5rLCBhLCAhMCwgdGhpcy5MLCAhMSlcbiAgICB9ZWxzZSB7XG4gICAgICBJKGEsIFwiVFlQRVwiLCBcImh0bWxcIik7XG4gICAgICB2YXIgYiA9IHRoaXMuaywgYyA9IEJvb2xlYW4odGhpcy5MKTtcbiAgICAgIGIuc2EgPSAzO1xuICAgICAgYi5UID0gSihhLm4oKSk7XG4gICAgICBDYyhiLCBjKVxuICAgIH1cbiAgICB0aGlzLmEuZGVidWcoXCJOZXcgUmVxdWVzdCBjcmVhdGVkXCIpXG4gIH1cbn07XG5mdW5jdGlvbiBQZChhKSB7XG4gIGlmKGEuZSkge1xuICAgIHZhciBiID0gYS5lLm9rVG9NYWtlUmVxdWVzdChhKTtcbiAgICBpZigwICE9IGIpIHtcbiAgICAgIHJldHVybiBhLmEuZGVidWcoXCJIYW5kbGVyIHJldHVybmVkIGVycm9yIGNvZGUgZnJvbSBva1RvTWFrZVJlcXVlc3RcIiksIFooYSwgYiksICExXG4gICAgfVxuICB9XG4gIHJldHVybiEwXG59XG5mdW5jdGlvbiBEZChhLCBiLCBjKSB7XG4gIGEuYS5kZWJ1ZyhcIlRlc3QgQ29ubmVjdGlvbiBGaW5pc2hlZFwiKTtcbiAgYS5yYiA9IGEuZWMgJiYgYztcbiAgYS5oID0gYi5oO1xuICBhLmEuZGVidWcoXCJjb25uZWN0Q2hhbm5lbF8oKVwiKTtcbiAgYS5qYyhKZCwgMCk7XG4gIGEuTGEgPSByZChhLCBhLkgpO1xuICBWZChhKVxufVxuZnVuY3Rpb24gemQoYSwgYikge1xuICBhLmEuZGVidWcoXCJUZXN0IENvbm5lY3Rpb24gRmFpbGVkXCIpO1xuICBhLmggPSBiLmg7XG4gIFooYSwgMilcbn1cbnAuUGIgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmKDAgIT0gdGhpcy5jICYmICh0aGlzLmsgPT0gYSB8fCB0aGlzLm8gPT0gYSkpIHtcbiAgICBpZih0aGlzLmggPSBhLmgsIHRoaXMubyA9PSBhICYmIDMgPT0gdGhpcy5jKSB7XG4gICAgICBpZig3IDwgdGhpcy5oYSkge1xuICAgICAgICB2YXIgYztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjID0gdGhpcy5QLnBhcnNlKGIpXG4gICAgICAgIH1jYXRjaChkKSB7XG4gICAgICAgICAgYyA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBpZihzKGMpICYmIDMgPT0gYy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZiA9IGM7XG4gICAgICAgICAgaWYoMCA9PSBmWzBdKSB7XG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgIGlmKHRoaXMuYS5kZWJ1ZyhcIlNlcnZlciBjbGFpbXMgb3VyIGJhY2tjaGFubmVsIGlzIG1pc3NpbmcuXCIpLCB0aGlzLk0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmEuZGVidWcoXCJCdXQgd2UgYXJlIGN1cnJlbnRseSBzdGFydGluZyB0aGUgcmVxdWVzdC5cIilcbiAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaykge1xuICAgICAgICAgICAgICAgICAgaWYodGhpcy5rLnBhICsgM0UzIDwgdGhpcy5vLnBhKSB7XG4gICAgICAgICAgICAgICAgICAgIFVkKHRoaXMpLCB0aGlzLmsuY2FuY2VsKCksIHRoaXMuayA9IG51bGxcbiAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYS4kKFwiV2UgZG8gbm90IGhhdmUgYSBCYWNrQ2hhbm5lbCBlc3RhYmxpc2hlZFwiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBaZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBUKDE5KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgdGhpcy5LYiA9IGZbMV0sIGMgPSB0aGlzLktiIC0gdGhpcy55YSwgMCA8IGMgJiYgKGYgPSBmWzJdLCB0aGlzLmEuZGVidWcoZiArIFwiIGJ5dGVzIChpbiBcIiArIGMgKyBcIiBhcnJheXMpIGFyZSBvdXRzdGFuZGluZyBvbiB0aGUgQmFja0NoYW5uZWxcIiksIDM3NTAwID4gZiAmJiAodGhpcy5yYiAmJiAwID09IHRoaXMuZ2EpICYmICF0aGlzLmJhICYmICh0aGlzLmJhID0gVSh3KHRoaXMucmMsIHRoaXMpLCA2RTMpKSlcbiAgICAgICAgICB9XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICB0aGlzLmEuZGVidWcoXCJCYWQgUE9TVCByZXNwb25zZSBkYXRhIHJldHVybmVkXCIpLCBaKHRoaXMsIDExKVxuICAgICAgICB9XG4gICAgICB9ZWxzZSB7XG4gICAgICAgIGIgIT0gZmQgJiYgKHRoaXMuYS5kZWJ1ZyhcIkJhZCBkYXRhIHJldHVybmVkIC0gbWlzc2luZy9pbnZhbGQgbWFnaWMgY29va2llXCIpLCBaKHRoaXMsIDExKSlcbiAgICAgIH1cbiAgICB9ZWxzZSB7XG4gICAgICBpZih0aGlzLmsgPT0gYSAmJiBVZCh0aGlzKSwgIS9eW1xcc1xceGEwXSokLy50ZXN0KGIpKSB7XG4gICAgICAgIGMgPSB0aGlzLlAucGFyc2UoYik7XG4gICAgICAgIGZvcih2YXIgZiA9IHRoaXMuZSAmJiB0aGlzLmUuY2hhbm5lbEhhbmRsZU11bHRpcGxlQXJyYXlzID8gW10gOiBudWxsLCBnID0gMDtnIDwgYy5sZW5ndGg7ZysrKSB7XG4gICAgICAgICAgdmFyIGggPSBjW2ddO1xuICAgICAgICAgIHRoaXMueWEgPSBoWzBdO1xuICAgICAgICAgIGggPSBoWzFdO1xuICAgICAgICAgIDIgPT0gdGhpcy5jID8gXCJjXCIgPT0gaFswXSA/ICh0aGlzLlogPSBoWzFdLCB0aGlzLkwgPSB0aGlzLmNvcnJlY3RIb3N0UHJlZml4KGhbMl0pLCBoID0gaFszXSwgdGhpcy5oYSA9IG51bGwgIT0gaCA/IGggOiA2LCB0aGlzLmMgPSAzLCB0aGlzLmUgJiYgdGhpcy5lLmNoYW5uZWxPcGVuZWQodGhpcyksIHRoaXMudWIgPSB4ZCh0aGlzLCB0aGlzLkwsIHRoaXMuSCksIFlkKHRoaXMpKSA6IFwic3RvcFwiID09IGhbMF0gJiYgWih0aGlzLCA3KSA6IDMgPT0gdGhpcy5jICYmIChcInN0b3BcIiA9PSBoWzBdID8gKGYgJiYgZi5sZW5ndGggJiYgKHRoaXMuZS5jaGFubmVsSGFuZGxlTXVsdGlwbGVBcnJheXModGhpcywgZiksIGYubGVuZ3RoID0gMCksIFoodGhpcywgNykpIDogXCJub29wXCIgIT0gaFswXSAmJiAoZiA/IGYucHVzaChoKSA6IHRoaXMuZSAmJiB0aGlzLmUuY2hhbm5lbEhhbmRsZUFycmF5KHRoaXMsIGgpKSwgdGhpcy5nYSA9IDApXG4gICAgICAgIH1cbiAgICAgICAgZiAmJiBmLmxlbmd0aCAmJiB0aGlzLmUuY2hhbm5lbEhhbmRsZU11bHRpcGxlQXJyYXlzKHRoaXMsIGYpXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xucC5jb3JyZWN0SG9zdFByZWZpeCA9IGZ1bmN0aW9uKGEpIHtcbiAgcmV0dXJuIHRoaXMuZmMgPyB0aGlzLmUgPyB0aGlzLmUuY29ycmVjdEhvc3RQcmVmaXgoYSkgOiBhIDogbnVsbFxufTtcbnAucmMgPSBmdW5jdGlvbigpIHtcbiAgbnVsbCAhPSB0aGlzLmJhICYmICh0aGlzLmJhID0gbnVsbCwgdGhpcy5rLmNhbmNlbCgpLCB0aGlzLmsgPSBudWxsLCBaZCh0aGlzKSwgVCgyMCkpXG59O1xuZnVuY3Rpb24gVWQoYSkge1xuICBudWxsICE9IGEuYmEgJiYgKHEuY2xlYXJUaW1lb3V0KGEuYmEpLCBhLmJhID0gbnVsbClcbn1cbnAubWEgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMuYS5kZWJ1ZyhcIlJlcXVlc3QgY29tcGxldGVcIik7XG4gIHZhciBiO1xuICBpZih0aGlzLmsgPT0gYSkge1xuICAgIFVkKHRoaXMpLCB0aGlzLmsgPSBudWxsLCBiID0gMlxuICB9ZWxzZSB7XG4gICAgaWYodGhpcy5vID09IGEpIHtcbiAgICAgIHRoaXMubyA9IG51bGwsIGIgPSAxXG4gICAgfWVsc2Uge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIHRoaXMuaCA9IGEuaDtcbiAgaWYoMCAhPSB0aGlzLmMpIHtcbiAgICBpZihhLkopIHtcbiAgICAgIDEgPT0gYiA/IChiID0geCgpIC0gYS5wYSwgTGQuZGlzcGF0Y2hFdmVudChuZXcgTmQoTGQsIGEuWCA/IGEuWC5sZW5ndGggOiAwLCBiLCB0aGlzLlYpKSwgVmQodGhpcyksIHRoaXMuUS5sZW5ndGggPSAwKSA6IFlkKHRoaXMpXG4gICAgfWVsc2Uge1xuICAgICAgdmFyIGMgPSBhLkViKCk7XG4gICAgICBpZigzID09IGMgfHwgNyA9PSBjIHx8IDAgPT0gYyAmJiAwIDwgdGhpcy5oKSB7XG4gICAgICAgIHRoaXMuYS5kZWJ1ZyhcIk5vdCByZXRyeWluZyBkdWUgdG8gZXJyb3IgdHlwZVwiKVxuICAgICAgfWVsc2Uge1xuICAgICAgICB0aGlzLmEuZGVidWcoXCJNYXliZSByZXRyeWluZywgbGFzdCBlcnJvcjogXCIgKyBiYyhjLCB0aGlzLmgpKTtcbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIGlmKGQgPSAxID09IGIpIHtcbiAgICAgICAgICB0aGlzLm8gfHwgdGhpcy5GID8gKHRoaXMuYS5JKFwiUmVxdWVzdCBhbHJlYWR5IGluIHByb2dyZXNzXCIpLCBkID0gITEpIDogdGhpcy5jID09IEpkIHx8IHRoaXMuViA+PSAodGhpcy5KYSA/IDAgOiB0aGlzLmtiKSA/IGQgPSAhMSA6ICh0aGlzLmEuZGVidWcoXCJHb2luZyB0byByZXRyeSBQT1NUXCIpLCB0aGlzLkYgPSBVKHcodGhpcy5SYiwgdGhpcywgYSksICRkKHRoaXMsIHRoaXMuVikpLCB0aGlzLlYrKywgZCA9ICEwKVxuICAgICAgICB9XG4gICAgICAgIGlmKGQgfHwgMiA9PSBiICYmIFpkKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hLmRlYnVnKFwiRXhjZWVkZWQgbWF4IG51bWJlciBvZiByZXRyaWVzXCIpXG4gICAgICB9XG4gICAgICB0aGlzLmEuZGVidWcoXCJFcnJvcjogSFRUUCByZXF1ZXN0IGZhaWxlZFwiKTtcbiAgICAgIHN3aXRjaChjKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBaKHRoaXMsIDUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgWih0aGlzLCAxMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBaKHRoaXMsIDYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgWih0aGlzLCAxMik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgWih0aGlzLCAyKVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uICRkKGEsIGIpIHtcbiAgdmFyIGMgPSBhLmdjICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYS5CYyk7XG4gIGEuaXNBY3RpdmUoKSB8fCAoYS5hLmRlYnVnKFwiSW5hY3RpdmUgY2hhbm5lbFwiKSwgYyAqPSAyKTtcbiAgcmV0dXJuIGMgKiBiXG59XG5wLmpjID0gZnVuY3Rpb24oYSkge1xuICBpZighKDAgPD0gWGEoYXJndW1lbnRzLCB0aGlzLmMpKSkge1xuICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBjaGFubmVsIHN0YXRlOiBcIiArIHRoaXMuYyk7XG4gIH1cbn07XG5mdW5jdGlvbiBaKGEsIGIpIHtcbiAgYS5hLmluZm8oXCJFcnJvciBjb2RlIFwiICsgYik7XG4gIGlmKDIgPT0gYiB8fCA5ID09IGIpIHtcbiAgICB2YXIgYyA9IG51bGw7XG4gICAgYS5lICYmIChjID0gYS5lLmdldE5ldHdvcmtUZXN0SW1hZ2VVcmkoYSkpO1xuICAgIHZhciBkID0gdyhhLkRjLCBhKTtcbiAgICBjIHx8IChjID0gbmV3IEYoXCIvL3d3dy5nb29nbGUuY29tL2ltYWdlcy9jbGVhcmRvdC5naWZcIiksIEooYykpO1xuICAgIHBkKGMudG9TdHJpbmcoKSwgMUU0LCBkKVxuICB9ZWxzZSB7XG4gICAgVCgyKVxuICB9XG4gIGFlKGEsIGIpXG59XG5wLkRjID0gZnVuY3Rpb24oYSkge1xuICBhID8gKHRoaXMuYS5pbmZvKFwiU3VjY2Vzc2Z1bGx5IHBpbmdlZCBnb29nbGUuY29tXCIpLCBUKDIpKSA6ICh0aGlzLmEuaW5mbyhcIkZhaWxlZCB0byBwaW5nIGdvb2dsZS5jb21cIiksIFQoMSksIGFlKHRoaXMsIDgpKVxufTtcbmZ1bmN0aW9uIGFlKGEsIGIpIHtcbiAgYS5hLmRlYnVnKFwiSHR0cENoYW5uZWw6IGVycm9yIC0gXCIgKyBiKTtcbiAgYS5jID0gMDtcbiAgYS5lICYmIGEuZS5jaGFubmVsRXJyb3IoYSwgYik7XG4gIFRkKGEpO1xuICBRZChhKVxufVxuZnVuY3Rpb24gVGQoYSkge1xuICBhLmMgPSAwO1xuICBhLmggPSAtMTtcbiAgaWYoYS5lKSB7XG4gICAgaWYoMCA9PSBhLlEubGVuZ3RoICYmIDAgPT0gYS5zLmxlbmd0aCkge1xuICAgICAgYS5lLmNoYW5uZWxDbG9zZWQoYSlcbiAgICB9ZWxzZSB7XG4gICAgICBhLmEuZGVidWcoXCJOdW1iZXIgb2YgdW5kZWxpdmVyZWQgbWFwcywgcGVuZGluZzogXCIgKyBhLlEubGVuZ3RoICsgXCIsIG91dGdvaW5nOiBcIiArIGEucy5sZW5ndGgpO1xuICAgICAgdmFyIGIgPSAkYShhLlEpLCBjID0gJGEoYS5zKTtcbiAgICAgIGEuUS5sZW5ndGggPSAwO1xuICAgICAgYS5zLmxlbmd0aCA9IDA7XG4gICAgICBhLmUuY2hhbm5lbENsb3NlZChhLCBiLCBjKVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcmQoYSwgYikge1xuICB2YXIgYyA9IHZkKGEsIG51bGwsIGIpO1xuICBhLmEuZGVidWcoXCJHZXRGb3J3YXJkQ2hhbm5lbFVyaTogXCIgKyBjKTtcbiAgcmV0dXJuIGNcbn1cbmZ1bmN0aW9uIHhkKGEsIGIsIGMpIHtcbiAgYiA9IHZkKGEsIGEuWWEoKSA/IGIgOiBudWxsLCBjKTtcbiAgYS5hLmRlYnVnKFwiR2V0QmFja0NoYW5uZWxVcmk6IFwiICsgYik7XG4gIHJldHVybiBiXG59XG5mdW5jdGlvbiB2ZChhLCBiLCBjKSB7XG4gIHZhciBkID0gYyBpbnN0YW5jZW9mIEYgPyBjLm4oKSA6IG5ldyBGKGMsIHZvaWQgMCk7XG4gIGlmKFwiXCIgIT0gZC5qYSkge1xuICAgIGIgJiYgZmIoZCwgYiArIFwiLlwiICsgZC5qYSksIGdiKGQsIGQuQmEpXG4gIH1lbHNlIHtcbiAgICB2YXIgZiA9IHdpbmRvdy5sb2NhdGlvbiwgZCA9IHNiKGYucHJvdG9jb2wsIGIgPyBiICsgXCIuXCIgKyBmLmhvc3RuYW1lIDogZi5ob3N0bmFtZSwgZi5wb3J0LCBjKVxuICB9XG4gIGEueGEgJiYgRShhLnhhLCBmdW5jdGlvbihhLCBiKSB7XG4gICAgSShkLCBiLCBhKVxuICB9KTtcbiAgSShkLCBcIlZFUlwiLCBhLmhhKTtcbiAgUmQoYSwgZCk7XG4gIHJldHVybiBkXG59XG5wLmhiID0gZnVuY3Rpb24oYSkge1xuICBpZihhICYmICF0aGlzLlphKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBjcmVhdGUgc2Vjb25kYXJ5IGRvbWFpbiBjYXBhYmxlIFhocklvIG9iamVjdC5cIik7XG4gIH1cbiAgYSA9IG5ldyBoZDtcbiAgYS5jYyA9IHRoaXMuWmE7XG4gIHJldHVybiBhXG59O1xucC5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4hIXRoaXMuZSAmJiB0aGlzLmUuaXNBY3RpdmUodGhpcylcbn07XG5mdW5jdGlvbiBVKGEsIGIpIHtcbiAgaWYoIWhhKGEpKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJGbiBtdXN0IG5vdCBiZSBudWxsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgcmV0dXJuIHEuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBhKClcbiAgfSwgYilcbn1cbnAuRyA9IGZ1bmN0aW9uKGEpIHtcbiAgTGQuZGlzcGF0Y2hFdmVudChuZXcgT2QoTGQsIGEpKVxufTtcbmZ1bmN0aW9uIFQoYSkge1xuICBMZC5kaXNwYXRjaEV2ZW50KG5ldyBNZChMZCwgYSkpXG59XG5wLllhID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLlphIHx8ICFlYygpXG59O1xuZnVuY3Rpb24gYmUoKSB7XG59XG5wID0gYmUucHJvdG90eXBlO1xucC5jaGFubmVsSGFuZGxlTXVsdGlwbGVBcnJheXMgPSBudWxsO1xucC5va1RvTWFrZVJlcXVlc3QgPSBiYSgwKTtcbnAuY2hhbm5lbE9wZW5lZCA9IGUoKTtcbnAuY2hhbm5lbEhhbmRsZUFycmF5ID0gZSgpO1xucC5jaGFubmVsRXJyb3IgPSBlKCk7XG5wLmNoYW5uZWxDbG9zZWQgPSBlKCk7XG5wLmdldEFkZGl0aW9uYWxQYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJue31cbn07XG5wLmdldE5ldHdvcmtUZXN0SW1hZ2VVcmkgPSBiYShudWxsKTtcbnAuaXNBY3RpdmUgPSBiYSghMCk7XG5wLmJhZE1hcEVycm9yID0gZSgpO1xucC5jb3JyZWN0SG9zdFByZWZpeCA9IGZ1bmN0aW9uKGEpIHtcbiAgcmV0dXJuIGFcbn07XG52YXIgJCwgY2UsIGRlID0gW10uc2xpY2U7XG5jZSA9IHswOlwiT2tcIiwgNDpcIlVzZXIgaXMgbG9nZ2luZyBvdXRcIiwgNjpcIlVua25vd24gc2Vzc2lvbiBJRFwiLCA3OlwiU3RvcHBlZCBieSBzZXJ2ZXJcIiwgODpcIkdlbmVyYWwgbmV0d29yayBlcnJvclwiLCAyOlwiUmVxdWVzdCBmYWlsZWRcIiwgOTpcIkJsb2NrZWQgYnkgYSBuZXR3b3JrIGFkbWluaXN0cmF0b3JcIiwgNTpcIk5vIGRhdGEgZnJvbSBzZXJ2ZXJcIiwgMTA6XCJHb3QgYmFkIGRhdGEgZnJvbSB0aGUgc2VydmVyXCIsIDExOlwiR290IGEgYmFkIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlclwifTtcbiQgPSBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBjLCBkLCBmLCBnLCBoLCBuLCBrLCB0LCBsLCByO1xuICB0ID0gdGhpcztcbiAgYSB8fCAoYSA9IFwiY2hhbm5lbFwiKTtcbiAgYS5tYXRjaCgvOlxcL1xcLy8pICYmIGEucmVwbGFjZSgvXndzLywgXCJodHRwXCIpO1xuICBiIHx8IChiID0ge30pO1xuICBzKGIgfHwgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGIpICYmIChiID0ge30pO1xuICBuID0gYi5yZWNvbm5lY3RUaW1lIHx8IDNFMztcbiAgciA9IGZ1bmN0aW9uKGEpIHtcbiAgICB0LnJlYWR5U3RhdGUgPSB0LnJlYWR5U3RhdGUgPSBhXG4gIH07XG4gIHIodGhpcy5DTE9TRUQpO1xuICBsID0gbnVsbDtcbiAgZyA9IGIuS2M7XG4gIGMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSwgYjtcbiAgICBiID0gYXJndW1lbnRzWzBdO1xuICAgIGEgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBkZS5jYWxsKGFyZ3VtZW50cywgMSkgOiBbXTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdFtiXSA/IHRbYl0uYXBwbHkodCwgYSkgOiB2b2lkIDBcbiAgICB9Y2F0Y2goYykge1xuICAgICAgdGhyb3cgYSA9IGMsIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBjb25zb2xlICYmIG51bGwgIT09IGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcihhLnN0YWNrKSwgYTtcbiAgICB9XG4gIH07XG4gIGQgPSBuZXcgYmU7XG4gIGQuY2hhbm5lbE9wZW5lZCA9IGZ1bmN0aW9uKCkge1xuICAgIGcgPSBsO1xuICAgIHIoJC5PUEVOKTtcbiAgICByZXR1cm4gYyhcIm9ub3BlblwiKVxuICB9O1xuICBmID0gbnVsbDtcbiAgZC5jaGFubmVsRXJyb3IgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIGQ7XG4gICAgZCA9IGNlW2JdO1xuICAgIGYgPSBiO1xuICAgIHIoJC5jYik7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjKFwib25lcnJvclwiLCBkLCBiKVxuICAgIH1jYXRjaChnKSB7XG4gICAgfVxuICB9O1xuICBrID0gbnVsbDtcbiAgZC5jaGFubmVsQ2xvc2VkID0gZnVuY3Rpb24oYSwgZCwgZykge1xuICAgIGlmKHQucmVhZHlTdGF0ZSAhPT0gJC5DTE9TRUQpIHtcbiAgICAgIGwgPSBudWxsO1xuICAgICAgYSA9IGYgPyBjZVtmXSA6IFwiQ2xvc2VkXCI7XG4gICAgICByKCQuQ0xPU0VEKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGMoXCJvbmNsb3NlXCIsIGEsIGQsIGcpXG4gICAgICB9Y2F0Y2goZWUpIHtcbiAgICAgIH1cbiAgICAgIGIucmVjb25uZWN0ICYmICg3ICE9PSBmICYmIDAgIT09IGYpICYmIChkID0gNiA9PT0gZiA/IDAgOiBuLCBjbGVhclRpbWVvdXQoayksIGsgPSBzZXRUaW1lb3V0KGgsIGQpKTtcbiAgICAgIHJldHVybiBmID0gbnVsbFxuICAgIH1cbiAgfTtcbiAgZC5jaGFubmVsSGFuZGxlQXJyYXkgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGMoXCJvbm1lc3NhZ2VcIiwgYilcbiAgfTtcbiAgaCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKGwpIHtcbiAgICAgIHRocm93IEVycm9yKFwiUmVjb25uZWN0KCkgY2FsbGVkIGZyb20gaW52YWxpZCBzdGF0ZVwiKTtcbiAgICB9XG4gICAgcigkLkNPTk5FQ1RJTkcpO1xuICAgIGMoXCJvbmNvbm5lY3RpbmdcIik7XG4gICAgY2xlYXJUaW1lb3V0KGspO1xuICAgIGwgPSBuZXcgSWQoYi5hcHBWZXJzaW9uLCBudWxsICE9IGcgPyBnLkNiIDogdm9pZCAwKTtcbiAgICBiLmNyb3NzRG9tYWluWGhyICYmIChsLlphID0gITApO1xuICAgIGwuZSA9IGQ7XG4gICAgZiA9IG51bGw7XG4gICAgaWYoYi5mYWlsRmFzdCkge1xuICAgICAgdmFyIGggPSBsO1xuICAgICAgaC5KYSA9ICEwO1xuICAgICAgaC5hLmluZm8oXCJzZXRGYWlsRmFzdDogdHJ1ZVwiKTtcbiAgICAgIChoLm8gfHwgaC5GKSAmJiBoLlYgPiAoaC5KYSA/IDAgOiBoLmtiKSAmJiAoaC5hLmluZm8oXCJSZXRyeSBjb3VudCBcIiArIGguViArIFwiID4gbmV3IG1heFJldHJpZXMgXCIgKyAoaC5KYSA/IDAgOiBoLmtiKSArIFwiLiBGYWlsIGltbWVkaWF0ZWx5IVwiKSwgaC5vID8gKGguby5jYW5jZWwoKSwgaC5tYShoLm8pKSA6IChxLmNsZWFyVGltZW91dChoLkYpLCBoLkYgPSBudWxsLCBaKGgsIDIpKSlcbiAgICB9XG4gICAgcmV0dXJuIGwuZ2IoXCJcIiArIGEgKyBcIi90ZXN0XCIsIFwiXCIgKyBhICsgXCIvYmluZFwiLCBiLmV4dHJhUGFyYW1zLCBudWxsICE9IGcgPyBnLlogOiB2b2lkIDAsIG51bGwgIT0gZyA/IGcueWEgOiB2b2lkIDApXG4gIH07XG4gIHRoaXMub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmKHQucmVhZHlTdGF0ZSAhPT0gdC5DTE9TRUQpIHtcbiAgICAgIHRocm93IEVycm9yKFwiQWxyZWFkeSBvcGVuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaCgpXG4gIH07XG4gIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQoayk7XG4gICAgZiA9IDA7XG4gICAgaWYodC5yZWFkeVN0YXRlICE9PSAkLkNMT1NFRCkge1xuICAgICAgcmV0dXJuIHIoJC5jYiksIGwuZGlzY29ubmVjdCgpXG4gICAgfVxuICB9O1xuICB0aGlzLnNlbmRNYXAgPSBmdW5jdGlvbihhKSB7XG4gICAgdmFyIGI7XG4gICAgaWYoKGIgPSB0LnJlYWR5U3RhdGUpID09PSAkLmNiIHx8IGIgPT09ICQuQ0xPU0VEKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCBzZW5kIHRvIGEgY2xvc2VkIGNvbm5lY3Rpb25cIik7XG4gICAgfVxuICAgIGIgPSBsO1xuICAgIGlmKDAgPT0gYi5jKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgb3BlcmF0aW9uOiBzZW5kaW5nIG1hcCB3aGVuIHN0YXRlIGlzIGNsb3NlZFwiKTtcbiAgICB9XG4gICAgMUUzID09IGIucy5sZW5ndGggJiYgYi5hLkkoXCJBbHJlYWR5IGhhdmUgMTAwMCBxdWV1ZWQgbWFwcyB1cG9uIHF1ZXVlaW5nIFwiICsgS2MoYSkpO1xuICAgIGIucy5wdXNoKG5ldyBLZChiLnFjKyssIGEpKTtcbiAgICAyICE9IGIuYyAmJiAzICE9IGIuYyB8fCBWZChiKVxuICB9O1xuICB0aGlzLnNlbmQgPSBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZE1hcCh7SlNPTjpLYyhhKX0pXG4gIH07XG4gIGgoKTtcbiAgcmV0dXJuIHRoaXNcbn07XG4kLnByb3RvdHlwZS5DT05ORUNUSU5HID0gJC5DT05ORUNUSU5HID0gJC5DT05ORUNUSU5HID0gMDtcbiQucHJvdG90eXBlLk9QRU4gPSAkLk9QRU4gPSAkLk9QRU4gPSAxO1xuJC5wcm90b3R5cGUuQ0xPU0lORyA9ICQuQ0xPU0lORyA9ICQuY2IgPSAyO1xuJC5wcm90b3R5cGUuQ0xPU0VEID0gJC5DTE9TRUQgPSAkLkNMT1NFRCA9IDM7XG4oXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGV4cG9ydHMgJiYgbnVsbCAhPT0gZXhwb3J0cyA/IGV4cG9ydHMgOiB3aW5kb3cpLkJDU29ja2V0ID0gJDtcblxufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuKGZ1bmN0aW9uKCl7dmFyIHI9e2V4cG9ydHM6e319LGU9ci5leHBvcnRzO2UubmFtZT1cInRleHRcIixlLnVyaT1cImh0dHA6Ly9zaGFyZWpzLm9yZy90eXBlcy90ZXh0djFcIixlLmNyZWF0ZT1mdW5jdGlvbihyKXtpZihudWxsIT1yJiZcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBFcnJvcihcIkluaXRpYWwgZGF0YSBtdXN0IGJlIGEgc3RyaW5nXCIpO3JldHVybiByfHxcIlwifTt2YXIgdD1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihyKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocil9LG49ZnVuY3Rpb24ocil7aWYoIXQocikpdGhyb3cgRXJyb3IoXCJPcCBtdXN0IGJlIGFuIGFycmF5IG9mIGNvbXBvbmVudHNcIik7Zm9yKHZhciBlPW51bGwsbj0wO3IubGVuZ3RoPm47bisrKXt2YXIgbz1yW25dO3N3aXRjaCh0eXBlb2Ygbyl7Y2FzZVwib2JqZWN0XCI6aWYoIShcIm51bWJlclwiPT10eXBlb2Ygby5kJiZvLmQ+MCkpdGhyb3cgRXJyb3IoXCJPYmplY3QgY29tcG9uZW50cyBtdXN0IGJlIGRlbGV0ZXMgb2Ygc2l6ZSA+IDBcIik7YnJlYWs7Y2FzZVwic3RyaW5nXCI6aWYoIShvLmxlbmd0aD4wKSl0aHJvdyBFcnJvcihcIkluc2VydHMgY2Fubm90IGJlIGVtcHR5XCIpO2JyZWFrO2Nhc2VcIm51bWJlclwiOmlmKCEobz4wKSl0aHJvdyBFcnJvcihcIlNraXAgY29tcG9uZW50cyBtdXN0IGJlID4wXCIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXRocm93IEVycm9yKFwiQWRqYWNlbnQgc2tpcCBjb21wb25lbnRzIHNob3VsZCBiZSBjb21iaW5lZFwiKX1lPW99aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpdGhyb3cgRXJyb3IoXCJPcCBoYXMgYSB0cmFpbGluZyBza2lwXCIpfSxvPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZSYmMCE9PWUuZD8wPT09ci5sZW5ndGg/ci5wdXNoKGUpOnR5cGVvZiBlPT10eXBlb2YgcltyLmxlbmd0aC0xXT9cIm9iamVjdFwiPT10eXBlb2YgZT9yW3IubGVuZ3RoLTFdLmQrPWUuZDpyW3IubGVuZ3RoLTFdKz1lOnIucHVzaChlKTp2b2lkIDB9fSxzPWZ1bmN0aW9uKHIpe3ZhciBlPTAsdD0wLG49ZnVuY3Rpb24obixvKXtpZihlPT09ci5sZW5ndGgpcmV0dXJuLTE9PT1uP251bGw6bjt2YXIgcyxpPXJbZV07cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGk/LTE9PT1ufHxuPj1pLXQ/KHM9aS10LCsrZSx0PTAscyk6KHQrPW4sbik6XCJzdHJpbmdcIj09dHlwZW9mIGk/LTE9PT1ufHxcImlcIj09PW98fG4+PWkubGVuZ3RoLXQ/KHM9aS5zbGljZSh0KSwrK2UsdD0wLHMpOihzPWkuc2xpY2UodCx0K24pLHQrPW4scyk6LTE9PT1ufHxcImRcIj09PW98fG4+PWkuZC10PyhzPXtkOmkuZC10fSwrK2UsdD0wLHMpOih0Kz1uLHtkOm59KX0sbz1mdW5jdGlvbigpe3JldHVybiByW2VdfTtyZXR1cm5bbixvXX0saT1mdW5jdGlvbihyKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2Ygcj9yOnIubGVuZ3RofHxyLmR9LGE9ZnVuY3Rpb24ocil7cmV0dXJuIHIubGVuZ3RoPjAmJlwibnVtYmVyXCI9PXR5cGVvZiByW3IubGVuZ3RoLTFdJiZyLnBvcCgpLHJ9O2Uubm9ybWFsaXplPWZ1bmN0aW9uKHIpe2Zvcih2YXIgZT1bXSx0PW8oZSksbj0wO3IubGVuZ3RoPm47bisrKXQocltuXSk7cmV0dXJuIGEoZSl9LGUuYXBwbHk9ZnVuY3Rpb24ocixlKXtpZihcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBFcnJvcihcIlNuYXBzaG90IHNob3VsZCBiZSBhIHN0cmluZ1wiKTtuKGUpO2Zvcih2YXIgdD1bXSxvPTA7ZS5sZW5ndGg+bztvKyspe3ZhciBzPWVbb107c3dpdGNoKHR5cGVvZiBzKXtjYXNlXCJudW1iZXJcIjppZihzPnIubGVuZ3RoKXRocm93IEVycm9yKFwiVGhlIG9wIGlzIHRvbyBsb25nIGZvciB0aGlzIGRvY3VtZW50XCIpO3QucHVzaChyLnNsaWNlKDAscykpLHI9ci5zbGljZShzKTticmVhaztjYXNlXCJzdHJpbmdcIjp0LnB1c2gocyk7YnJlYWs7Y2FzZVwib2JqZWN0XCI6cj1yLnNsaWNlKHMuZCl9fXJldHVybiB0LmpvaW4oXCJcIikrcn0sZS50cmFuc2Zvcm09ZnVuY3Rpb24ocixlLHQpe2lmKFwibGVmdFwiIT10JiZcInJpZ2h0XCIhPXQpdGhyb3cgRXJyb3IoXCJzaWRlIChcIit0K1wiKSBtdXN0IGJlICdsZWZ0JyBvciAncmlnaHQnXCIpO24ociksbihlKTtmb3IodmFyIGM9W10sZj1vKGMpLHU9cyhyKSxoPXVbMF0scD11WzFdLGI9MDtlLmxlbmd0aD5iO2IrKyl7dmFyIGwsZyxtPWVbYl07c3dpdGNoKHR5cGVvZiBtKXtjYXNlXCJudW1iZXJcIjpmb3IobD1tO2w+MDspZz1oKGwsXCJpXCIpLGYoZyksXCJzdHJpbmdcIiE9dHlwZW9mIGcmJihsLT1pKGcpKTticmVhaztjYXNlXCJzdHJpbmdcIjpcImxlZnRcIj09PXQmJlwic3RyaW5nXCI9PXR5cGVvZiBwKCkmJmYoaCgtMSkpLGYobS5sZW5ndGgpO2JyZWFrO2Nhc2VcIm9iamVjdFwiOmZvcihsPW0uZDtsPjA7KXN3aXRjaChnPWgobCxcImlcIiksdHlwZW9mIGcpe2Nhc2VcIm51bWJlclwiOmwtPWc7YnJlYWs7Y2FzZVwic3RyaW5nXCI6ZihnKTticmVhaztjYXNlXCJvYmplY3RcIjpsLT1nLmR9fX1mb3IoO209aCgtMSk7KWYobSk7cmV0dXJuIGEoYyl9LGUuY29tcG9zZT1mdW5jdGlvbihyLGUpe24ociksbihlKTtmb3IodmFyIHQ9W10sYz1vKHQpLGY9cyhyKVswXSx1PTA7ZS5sZW5ndGg+dTt1Kyspe3ZhciBoLHAsYj1lW3VdO3N3aXRjaCh0eXBlb2YgYil7Y2FzZVwibnVtYmVyXCI6Zm9yKGg9YjtoPjA7KXA9ZihoLFwiZFwiKSxjKHApLFwib2JqZWN0XCIhPXR5cGVvZiBwJiYoaC09aShwKSk7YnJlYWs7Y2FzZVwic3RyaW5nXCI6YyhiKTticmVhaztjYXNlXCJvYmplY3RcIjpmb3IoaD1iLmQ7aD4wOylzd2l0Y2gocD1mKGgsXCJkXCIpLHR5cGVvZiBwKXtjYXNlXCJudW1iZXJcIjpjKHtkOnB9KSxoLT1wO2JyZWFrO2Nhc2VcInN0cmluZ1wiOmgtPXAubGVuZ3RoO2JyZWFrO2Nhc2VcIm9iamVjdFwiOmMocCl9fX1mb3IoO2I9ZigtMSk7KWMoYik7cmV0dXJuIGEodCl9O3ZhciBjPWZ1bmN0aW9uKHIsZSl7Zm9yKHZhciB0PTAsbj0wO2UubGVuZ3RoPm47bisrKXt2YXIgbz1lW25dO2lmKHQ+PXIpYnJlYWs7c3dpdGNoKHR5cGVvZiBvKXtjYXNlXCJudW1iZXJcIjppZih0K28+PXIpcmV0dXJuIHI7dCs9bzticmVhaztjYXNlXCJzdHJpbmdcIjp0Kz1vLmxlbmd0aCxyKz1vLmxlbmd0aDticmVhaztjYXNlXCJvYmplY3RcIjpyLT1NYXRoLm1pbihvLmQsci10KX19cmV0dXJuIHJ9O2UudHJhbnNmb3JtQ3Vyc29yPWZ1bmN0aW9uKHIsZSx0KXt2YXIgbj0wO2lmKHQpe2Zvcih2YXIgbz0wO2UubGVuZ3RoPm87bysrKXt2YXIgcz1lW29dO3N3aXRjaCh0eXBlb2Ygcyl7Y2FzZVwibnVtYmVyXCI6bis9czticmVhaztjYXNlXCJzdHJpbmdcIjpuKz1zLmxlbmd0aH19cmV0dXJuW24sbl19cmV0dXJuW2MoclswXSxlKSxjKHJbMV0sZSldfTt2YXIgZj13aW5kb3cub3R0eXBlcz13aW5kb3cub3R0eXBlc3x8e30sdT1yLmV4cG9ydHM7Zlt1Lm5hbWVdPXUsdS51cmkmJihmW3UudXJpXT11KX0pKCk7Ly8gVGV4dCBkb2N1bWVudCBBUEkgZm9yIHRoZSAndGV4dCcgdHlwZS5cblxuLy8gVGhlIEFQSSBpbXBsZW1lbnRzIHRoZSBzdGFuZGFyZCB0ZXh0IEFQSSBtZXRob2RzLiBJbiBwYXJ0aWN1bGFyOlxuLy9cbi8vIC0gZ2V0TGVuZ3RoKCkgcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBkb2N1bWVudCBpbiBjaGFyYWN0ZXJzXG4vLyAtIGdldFRleHQoKSByZXR1cm5zIGEgc3RyaW5nIG9mIHRoZSBkb2N1bWVudFxuLy8gLSBpbnNlcnQocG9zLCB0ZXh0LCBbY2FsbGJhY2tdKSBpbnNlcnRzIHRleHQgYXQgcG9zaXRpb24gcG9zIGluIHRoZSBkb2N1bWVudFxuLy8gLSByZW1vdmUocG9zLCBsZW5ndGgsIFtjYWxsYmFja10pIHJlbW92ZXMgbGVuZ3RoIGNoYXJhY3RlcnMgYXQgcG9zaXRpb24gcG9zXG4vL1xuLy8gRXZlbnRzIGFyZSBpbXBsZW1lbnRlZCBieSBqdXN0IGFkZGluZyB0aGUgYXBwcm9wcmlhdGUgbWV0aG9kcyB0byB5b3VyXG4vLyBjb250ZXh0IG9iamVjdC5cbi8vIG9uSW5zZXJ0KHBvcywgdGV4dCk6IENhbGxlZCB3aGVuIHRleHQgaXMgaW5zZXJ0ZWQuXG4vLyBvblJlbW92ZShwb3MsIGxlbmd0aCk6IENhbGxlZCB3aGVuIHRleHQgaXMgcmVtb3ZlZC5cblxudmFyIF90eXBlcyA9ICh0eXBlb2YgYnJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSA/XG4gIGJyZXF1aXJlKCdvdHR5cGVzJykgOiB3aW5kb3cub3R0eXBlcztcblxuX3R5cGVzWydodHRwOi8vc2hhcmVqcy5vcmcvdHlwZXMvdGV4dHYxJ10uYXBpID0ge1xuICBwcm92aWRlczoge3RleHQ6IHRydWV9LFxuXG4gIC8vIFJldHVybnMgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmdcbiAgZ2V0TGVuZ3RoOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZ2V0U25hcHNob3QoKS5sZW5ndGg7IH0sXG5cblxuICAvLyBSZXR1cm5zIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGRvY3VtZW50XG4gIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmdldFNuYXBzaG90KCk7IH0sXG5cbiAgZ2V0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS53YXJuKFwiYGdldFRleHQoKWAgaXMgZGVwcmVjYXRlZDsgdXNlIGBnZXQoKWAgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCk7XG4gIH0sXG5cbiAgLy8gSW5zZXJ0IHRoZSBzcGVjaWZpZWQgdGV4dCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50XG4gIGluc2VydDogZnVuY3Rpb24ocG9zLCB0ZXh0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnN1Ym1pdE9wKFtwb3MsIHRleHRdLCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihwb3MsIGxlbmd0aCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5zdWJtaXRPcChbcG9zLCB7ZDpsZW5ndGh9XSwgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8vIFdoZW4geW91IHVzZSB0aGlzIEFQSSwgeW91IHNob3VsZCBpbXBsZW1lbnQgdGhlc2UgdHdvIG1ldGhvZHNcbiAgLy8gaW4geW91ciBlZGl0aW5nIGNvbnRleHQuXG4gIC8vb25JbnNlcnQ6IGZ1bmN0aW9uKHBvcywgdGV4dCkge30sXG4gIC8vb25SZW1vdmU6IGZ1bmN0aW9uKHBvcywgcmVtb3ZlZExlbmd0aCkge30sXG5cbiAgX29uT3A6IGZ1bmN0aW9uKG9wKSB7XG4gICAgdmFyIHBvcyA9IDA7XG4gICAgdmFyIHNwb3MgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBvcFtpXTtcbiAgICAgIHN3aXRjaCAodHlwZW9mIGNvbXBvbmVudCkge1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgIHBvcyArPSBjb21wb25lbnQ7XG4gICAgICAgICAgc3BvcyArPSBjb21wb25lbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgaWYgKHRoaXMub25JbnNlcnQpIHRoaXMub25JbnNlcnQocG9zLCBjb21wb25lbnQpO1xuICAgICAgICAgIHBvcyArPSBjb21wb25lbnQubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgIGlmICh0aGlzLm9uUmVtb3ZlKSB0aGlzLm9uUmVtb3ZlKHBvcywgY29tcG9uZW50LmQpO1xuICAgICAgICAgIHNwb3MgKz0gY29tcG9uZW50LmQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuKGZ1bmN0aW9uKCl7dmFyIGU9e2V4cG9ydHM6e319LGk9ZS5leHBvcnRzO2kuX2Jvb3RzdHJhcFRyYW5zZm9ybT1mdW5jdGlvbihlLGksbixyKXt2YXIgdCxsO3JldHVybiB0PWZ1bmN0aW9uKGUsbixyLHQpe3JldHVybiBpKHIsZSxuLFwibGVmdFwiKSxpKHQsbixlLFwicmlnaHRcIil9LGUudHJhbnNmb3JtWD1lLnRyYW5zZm9ybVg9bD1mdW5jdGlvbihlLGkpe3ZhciBvLHAsZCxmLHMsYSx1LGMsaCx2LGcsbSx5LHcsTyxiLGssRSx4O2ZvcihuKGUpLG4oaSkscz1bXSx2PTAsdz1pLmxlbmd0aDt3PnY7disrKXtmb3IoaD1pW3ZdLGY9W10sbz0wO2UubGVuZ3RoPm87KXtpZihhPVtdLHQoZVtvXSxoLGYsYSksbysrLDEhPT1hLmxlbmd0aCl7aWYoMD09PWEubGVuZ3RoKXtmb3IoRT1lLnNsaWNlKG8pLGc9MCxPPUUubGVuZ3RoO08+ZztnKyspcD1FW2ddLHIoZixwKTtoPW51bGw7YnJlYWt9Zm9yKHg9bChlLnNsaWNlKG8pLGEpLGQ9eFswXSxjPXhbMV0sbT0wLGI9ZC5sZW5ndGg7Yj5tO20rKylwPWRbbV0scihmLHApO2Zvcih5PTAsaz1jLmxlbmd0aDtrPnk7eSsrKXU9Y1t5XSxyKHMsdSk7aD1udWxsO2JyZWFrfWg9YVswXX1udWxsIT1oJiZyKHMsaCksZT1mfXJldHVybltlLHNdfSxlLnRyYW5zZm9ybT1lLnRyYW5zZm9ybT1mdW5jdGlvbihlLG4scil7aWYoXCJsZWZ0XCIhPT1yJiZcInJpZ2h0XCIhPT1yKXRocm93IEVycm9yKFwidHlwZSBtdXN0IGJlICdsZWZ0JyBvciAncmlnaHQnXCIpO3JldHVybiAwPT09bi5sZW5ndGg/ZToxPT09ZS5sZW5ndGgmJjE9PT1uLmxlbmd0aD9pKFtdLGVbMF0sblswXSxyKTpcImxlZnRcIj09PXI/bChlLG4pWzBdOmwobixlKVsxXX19O3ZhciBuLHIsdCxsLG8scCxkLGY7cD17bmFtZTpcInRleHQtb2xkXCIsdXJpOlwiaHR0cDovL3NoYXJlanMub3JnL3R5cGVzL3RleHR2MFwiLGNyZWF0ZTpmdW5jdGlvbigpe3JldHVyblwiXCJ9fSxvPWZ1bmN0aW9uKGUsaSxuKXtyZXR1cm4gZS5zbGljZSgwLGkpK24rZS5zbGljZShpKX0scj1mdW5jdGlvbihlKXt2YXIgaSxuO2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlLnApdGhyb3cgRXJyb3IoXCJjb21wb25lbnQgbWlzc2luZyBwb3NpdGlvbiBmaWVsZFwiKTtpZihuPXR5cGVvZiBlLmksaT10eXBlb2YgZS5kLCEoXCJzdHJpbmdcIj09PW5eXCJzdHJpbmdcIj09PWkpKXRocm93IEVycm9yKFwiY29tcG9uZW50IG5lZWRzIGFuIGkgb3IgZCBmaWVsZFwiKTtpZighKGUucD49MCkpdGhyb3cgRXJyb3IoXCJwb3NpdGlvbiBjYW5ub3QgYmUgbmVnYXRpdmVcIil9LHQ9ZnVuY3Rpb24oZSl7dmFyIGksbix0O2ZvcihuPTAsdD1lLmxlbmd0aDt0Pm47bisrKWk9ZVtuXSxyKGkpO3JldHVybiEwfSxwLmFwcGx5PWZ1bmN0aW9uKGUsaSl7dmFyIG4scixsLHA7Zm9yKHQoaSksbD0wLHA9aS5sZW5ndGg7cD5sO2wrKylpZihuPWlbbF0sbnVsbCE9bi5pKWU9byhlLG4ucCxuLmkpO2Vsc2V7aWYocj1lLnNsaWNlKG4ucCxuLnArbi5kLmxlbmd0aCksbi5kIT09cil0aHJvdyBFcnJvcihcIkRlbGV0ZSBjb21wb25lbnQgJ1wiK24uZCtcIicgZG9lcyBub3QgbWF0Y2ggZGVsZXRlZCB0ZXh0ICdcIityK1wiJ1wiKTtlPWUuc2xpY2UoMCxuLnApK2Uuc2xpY2Uobi5wK24uZC5sZW5ndGgpfXJldHVybiBlfSxwLl9hcHBlbmQ9bj1mdW5jdGlvbihlLGkpe3ZhciBuLHIsdDtpZihcIlwiIT09aS5pJiZcIlwiIT09aS5kKXJldHVybiAwPT09ZS5sZW5ndGg/ZS5wdXNoKGkpOihuPWVbZS5sZW5ndGgtMV0sbnVsbCE9bi5pJiZudWxsIT1pLmkmJm4ucDw9KHI9aS5wKSYmbi5wK24uaS5sZW5ndGg+PXI/ZVtlLmxlbmd0aC0xXT17aTpvKG4uaSxpLnAtbi5wLGkuaSkscDpuLnB9Om51bGwhPW4uZCYmbnVsbCE9aS5kJiZpLnA8PSh0PW4ucCkmJmkucCtpLmQubGVuZ3RoPj10P2VbZS5sZW5ndGgtMV09e2Q6byhpLmQsbi5wLWkucCxuLmQpLHA6aS5wfTplLnB1c2goaSkpfSxwLmNvbXBvc2U9ZnVuY3Rpb24oZSxpKXt2YXIgcixsLG8scDtmb3IodChlKSx0KGkpLGw9ZS5zbGljZSgpLG89MCxwPWkubGVuZ3RoO3A+bztvKyspcj1pW29dLG4obCxyKTtyZXR1cm4gbH0scC5jb21wcmVzcz1mdW5jdGlvbihlKXtyZXR1cm4gcC5jb21wb3NlKFtdLGUpfSxwLm5vcm1hbGl6ZT1mdW5jdGlvbihlKXt2YXIgaSxyLHQsbCxvO2ZvcihyPVtdLChudWxsIT1lLml8fG51bGwhPWUucCkmJihlPVtlXSksdD0wLGw9ZS5sZW5ndGg7bD50O3QrKylpPWVbdF0sbnVsbD09KG89aS5wKSYmKGkucD0wKSxuKHIsaSk7cmV0dXJuIHJ9LGY9ZnVuY3Rpb24oZSxpLG4pe3JldHVybiBudWxsIT1pLmk/ZT5pLnB8fGkucD09PWUmJm4/ZStpLmkubGVuZ3RoOmU6aS5wPj1lP2U6aS5wK2kuZC5sZW5ndGg+PWU/aS5wOmUtaS5kLmxlbmd0aH0scC50cmFuc2Zvcm1DdXJzb3I9ZnVuY3Rpb24oZSxpLG4pe3ZhciByLHQsbCxvO2Zvcih0PVwicmlnaHRcIj09PW4sbD0wLG89aS5sZW5ndGg7bz5sO2wrKylyPWlbbF0sZT1mKGUscix0KTtyZXR1cm4gZX0scC5fdGM9ZD1mdW5jdGlvbihlLGkscixsKXt2YXIgbyxwLGQscyxhLHU7aWYodChbaV0pLHQoW3JdKSxudWxsIT1pLmkpbihlLHtpOmkuaSxwOmYoaS5wLHIsXCJyaWdodFwiPT09bCl9KTtlbHNlIGlmKG51bGwhPXIuaSl1PWkuZCxpLnA8ci5wJiYobihlLHtkOnUuc2xpY2UoMCxyLnAtaS5wKSxwOmkucH0pLHU9dS5zbGljZShyLnAtaS5wKSksXCJcIiE9PXUmJm4oZSx7ZDp1LHA6aS5wK3IuaS5sZW5ndGh9KTtlbHNlIGlmKGkucD49ci5wK3IuZC5sZW5ndGgpbihlLHtkOmkuZCxwOmkucC1yLmQubGVuZ3RofSk7ZWxzZSBpZihpLnAraS5kLmxlbmd0aDw9ci5wKW4oZSxpKTtlbHNle2lmKHM9e2Q6XCJcIixwOmkucH0saS5wPHIucCYmKHMuZD1pLmQuc2xpY2UoMCxyLnAtaS5wKSksaS5wK2kuZC5sZW5ndGg+ci5wK3IuZC5sZW5ndGgmJihzLmQrPWkuZC5zbGljZShyLnArci5kLmxlbmd0aC1pLnApKSxkPU1hdGgubWF4KGkucCxyLnApLHA9TWF0aC5taW4oaS5wK2kuZC5sZW5ndGgsci5wK3IuZC5sZW5ndGgpLG89aS5kLnNsaWNlKGQtaS5wLHAtaS5wKSxhPXIuZC5zbGljZShkLXIucCxwLXIucCksbyE9PWEpdGhyb3cgRXJyb3IoXCJEZWxldGUgb3BzIGRlbGV0ZSBkaWZmZXJlbnQgdGV4dCBpbiB0aGUgc2FtZSByZWdpb24gb2YgdGhlIGRvY3VtZW50XCIpO1wiXCIhPT1zLmQmJihzLnA9ZihzLnAsciksbihlLHMpKX1yZXR1cm4gZX0sbD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZS5pP3tkOmUuaSxwOmUucH06e2k6ZS5kLHA6ZS5wfX0scC5pbnZlcnQ9ZnVuY3Rpb24oZSl7dmFyIGksbixyLHQsbztmb3IodD1lLnNsaWNlKCkucmV2ZXJzZSgpLG89W10sbj0wLHI9dC5sZW5ndGg7cj5uO24rKylpPXRbbl0sby5wdXNoKGwoaSkpO3JldHVybiBvfSxcInVuZGVmaW5lZFwiPT10eXBlb2YgYnJlcXVpcmU/aS5fYm9vdHN0cmFwVHJhbnNmb3JtKHAscC50cmFuc2Zvcm1Db21wb25lbnQscC5jaGVja1ZhbGlkT3AscC5hcHBlbmQpOmJyZXF1aXJlKFwiLi9oZWxwZXJzXCIpLl9ib290c3RyYXBUcmFuc2Zvcm0ocCxwLnRyYW5zZm9ybUNvbXBvbmVudCxwLmNoZWNrVmFsaWRPcCxwLmFwcGVuZCksZS5leHBvcnRzPXA7dmFyIHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9LGE9ZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpfSxwPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBicmVxdWlyZT9icmVxdWlyZShcIi4vdGV4dC1vbGRcIik6d2luZG93Lm90dHlwZXMudGV4dCx1PXtuYW1lOlwianNvbjBcIix1cmk6XCJodHRwOi8vc2hhcmVqcy5vcmcvdHlwZXMvSlNPTnYwXCJ9O3UuY3JlYXRlPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP251bGw6ZX0sdS5pbnZlcnRDb21wb25lbnQ9ZnVuY3Rpb24oZSl7dmFyIGk9e3A6ZS5wfTtyZXR1cm4gdm9pZCAwIT09ZS5zaSYmKGkuc2Q9ZS5zaSksdm9pZCAwIT09ZS5zZCYmKGkuc2k9ZS5zZCksdm9pZCAwIT09ZS5vaSYmKGkub2Q9ZS5vaSksdm9pZCAwIT09ZS5vZCYmKGkub2k9ZS5vZCksdm9pZCAwIT09ZS5saSYmKGkubGQ9ZS5saSksdm9pZCAwIT09ZS5sZCYmKGkubGk9ZS5sZCksdm9pZCAwIT09ZS5uYSYmKGkubmE9LWUubmEpLHZvaWQgMCE9PWUubG0mJihpLmxtPWUucFtlLnAubGVuZ3RoLTFdLGkucD1lLnAuc2xpY2UoMCxlLnAubGVuZ3RoLTEpLmNvbmNhdChbZS5sbV0pKSxpfSx1LmludmVydD1mdW5jdGlvbihlKXtmb3IodmFyIGk9ZS5zbGljZSgpLnJldmVyc2UoKSxuPVtdLHI9MDtpLmxlbmd0aD5yO3IrKyluLnB1c2godS5pbnZlcnRDb21wb25lbnQoaVtyXSkpO3JldHVybiBufSx1LmNoZWNrVmFsaWRPcD1mdW5jdGlvbihlKXtmb3IodmFyIGk9MDtlLmxlbmd0aD5pO2krKylpZighcyhlW2ldLnApKXRocm93IEVycm9yKFwiTWlzc2luZyBwYXRoXCIpfSx1LmNoZWNrTGlzdD1mdW5jdGlvbihlKXtpZighcyhlKSl0aHJvdyBFcnJvcihcIlJlZmVyZW5jZWQgZWxlbWVudCBub3QgYSBsaXN0XCIpfSx1LmNoZWNrT2JqPWZ1bmN0aW9uKGUpe2lmKGUuY29uc3RydWN0b3IhPT1PYmplY3QpdGhyb3cgRXJyb3IoXCJSZWZlcmVuY2VkIGVsZW1lbnQgbm90IGFuIG9iamVjdCAoaXQgd2FzIFwiK0pTT04uc3RyaW5naWZ5KGUpK1wiKVwiKX0sdS5hcHBseT1mdW5jdGlvbihlLGkpe3UuY2hlY2tWYWxpZE9wKGkpLGk9YShpKTtmb3IodmFyIG49e2RhdGE6ZX0scj0wO2kubGVuZ3RoPnI7cisrKXtmb3IodmFyIHQ9aVtyXSxsPW51bGwsbz1udWxsLHA9bixkPVwiZGF0YVwiLGY9MDt0LnAubGVuZ3RoPmY7ZisrKXt2YXIgcz10LnBbZl07aWYobD1wLG89ZCxwPXBbZF0sZD1zLG51bGw9PWwpdGhyb3cgRXJyb3IoXCJQYXRoIGludmFsaWRcIil9aWYodm9pZCAwIT09dC5uYSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHBbZF0pdGhyb3cgRXJyb3IoXCJSZWZlcmVuY2VkIGVsZW1lbnQgbm90IGEgbnVtYmVyXCIpO3BbZF0rPXQubmF9ZWxzZSBpZih2b2lkIDAhPT10LnNpKXtpZihcInN0cmluZ1wiIT10eXBlb2YgcCl0aHJvdyBFcnJvcihcIlJlZmVyZW5jZWQgZWxlbWVudCBub3QgYSBzdHJpbmcgKGl0IHdhcyBcIitKU09OLnN0cmluZ2lmeShwKStcIilcIik7bFtvXT1wLnNsaWNlKDAsZCkrdC5zaStwLnNsaWNlKGQpfWVsc2UgaWYodm9pZCAwIT09dC5zZCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHApdGhyb3cgRXJyb3IoXCJSZWZlcmVuY2VkIGVsZW1lbnQgbm90IGEgc3RyaW5nXCIpO2lmKHAuc2xpY2UoZCxkK3Quc2QubGVuZ3RoKSE9PXQuc2QpdGhyb3cgRXJyb3IoXCJEZWxldGVkIHN0cmluZyBkb2VzIG5vdCBtYXRjaFwiKTtsW29dPXAuc2xpY2UoMCxkKStwLnNsaWNlKGQrdC5zZC5sZW5ndGgpfWVsc2UgaWYodm9pZCAwIT09dC5saSYmdm9pZCAwIT09dC5sZCl1LmNoZWNrTGlzdChwKSxwW2RdPXQubGk7ZWxzZSBpZih2b2lkIDAhPT10LmxpKXUuY2hlY2tMaXN0KHApLHAuc3BsaWNlKGQsMCx0LmxpKTtlbHNlIGlmKHZvaWQgMCE9PXQubGQpdS5jaGVja0xpc3QocCkscC5zcGxpY2UoZCwxKTtlbHNlIGlmKHZvaWQgMCE9PXQubG0pe2lmKHUuY2hlY2tMaXN0KHApLHQubG0hPWQpe3ZhciBjPXBbZF07cC5zcGxpY2UoZCwxKSxwLnNwbGljZSh0LmxtLDAsYyl9fWVsc2UgaWYodm9pZCAwIT09dC5vaSl1LmNoZWNrT2JqKHApLHBbZF09dC5vaTtlbHNle2lmKHZvaWQgMD09PXQub2QpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIC8gbWlzc2luZyBpbnN0cnVjdGlvbiBpbiBvcFwiKTt1LmNoZWNrT2JqKHApLGRlbGV0ZSBwW2RdfX1yZXR1cm4gbi5kYXRhfSx1LmluY3JlbWVudGFsQXBwbHk9ZnVuY3Rpb24oZSxpLG4pe2Zvcih2YXIgcj0wO2kubGVuZ3RoPnI7cisrKXt2YXIgdD1baVtyXV07ZT11LmFwcGx5KGUsdCksbih0LGUpfXJldHVybiBlfTt2YXIgYz11LnBhdGhNYXRjaGVzPWZ1bmN0aW9uKGUsaSxuKXtpZihlLmxlbmd0aCE9aS5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7ZS5sZW5ndGg+cjtyKyspaWYoZVtyXSE9PWlbcl0mJighbnx8ciE9PWUubGVuZ3RoLTEpKXJldHVybiExO3JldHVybiEwfSxoPWZ1bmN0aW9uKGUpe3ZhciBpPXtwOmUucFtlLnAubGVuZ3RoLTFdfTtyZXR1cm4gbnVsbCE9ZS5zaT9pLmk9ZS5zaTppLmQ9ZS5zZCxpfTt1LmFwcGVuZD1mdW5jdGlvbihlLGkpe2k9YShpKTt2YXIgbjtpZigwIT1lLmxlbmd0aCYmYyhpLnAsKG49ZVtlLmxlbmd0aC0xXSkucCkpbnVsbCE9bi5uYSYmbnVsbCE9aS5uYT9lW2UubGVuZ3RoLTFdPXtwOm4ucCxuYTpuLm5hK2kubmF9OnZvaWQgMCE9PW4ubGkmJnZvaWQgMD09PWkubGkmJmkubGQ9PT1uLmxpP3ZvaWQgMCE9PW4ubGQ/ZGVsZXRlIG4ubGk6ZS5wb3AoKTp2b2lkIDAhPT1uLm9kJiZ2b2lkIDA9PT1uLm9pJiZ2b2lkIDAhPT1pLm9pJiZ2b2lkIDA9PT1pLm9kP24ub2k9aS5vaTp2b2lkIDAhPT1uLm9pJiZ2b2lkIDAhPT1pLm9kP3ZvaWQgMCE9PWkub2k/bi5vaT1pLm9pOnZvaWQgMCE9PW4ub2Q/ZGVsZXRlIG4ub2k6ZS5wb3AoKTp2b2lkIDAhPT1pLmxtJiZpLnBbaS5wLmxlbmd0aC0xXT09PWkubG18fGUucHVzaChpKTtlbHNlIGlmKDAhPWUubGVuZ3RoJiZjKGkucCxuLnAsITApKWlmKG51bGw9PWkuc2kmJm51bGw9PWkuc2R8fG51bGw9PW4uc2kmJm51bGw9PW4uc2QpZS5wdXNoKGkpO2Vsc2V7dmFyIHI9W2gobildO2lmKHAuX2FwcGVuZChyLGgoaSkpLDEhPT1yLmxlbmd0aCllLnB1c2goaSk7ZWxzZXt2YXIgdD1yWzBdO24ucFtuLnAubGVuZ3RoLTFdPXQucCxudWxsIT10Lmk/bi5zaT10Lmk6bi5zZD10LmR9fWVsc2UgZS5wdXNoKGkpfSx1LmNvbXBvc2U9ZnVuY3Rpb24oZSxpKXt1LmNoZWNrVmFsaWRPcChlKSx1LmNoZWNrVmFsaWRPcChpKTtmb3IodmFyIG49YShlKSxyPTA7aS5sZW5ndGg+cjtyKyspdS5hcHBlbmQobixpW3JdKTtyZXR1cm4gbn0sdS5ub3JtYWxpemU9ZnVuY3Rpb24oZSl7dmFyIGk9W107ZT1zKGUpP2U6W2VdO2Zvcih2YXIgbj0wO2UubGVuZ3RoPm47bisrKXt2YXIgcj1lW25dO251bGw9PXIucCYmKHIucD1bXSksdS5hcHBlbmQoaSxyKX1yZXR1cm4gaX0sdS5jYW5PcEFmZmVjdE9wPWZ1bmN0aW9uKGUsaSl7aWYoMD09PWUubGVuZ3RoKXJldHVybiEwO2lmKDA9PT1pLmxlbmd0aClyZXR1cm4hMTtpPWkuc2xpY2UoMCxpLmxlbmd0aC0xKSxlPWUuc2xpY2UoMCxlLmxlbmd0aC0xKTtmb3IodmFyIG49MDtlLmxlbmd0aD5uO24rKyl7dmFyIHI9ZVtuXTtpZihuPj1pLmxlbmd0aHx8ciE9aVtuXSlyZXR1cm4hMX1yZXR1cm4hMH0sdS50cmFuc2Zvcm1Db21wb25lbnQ9ZnVuY3Rpb24oZSxpLG4scil7aT1hKGkpLHZvaWQgMCE9PWkubmEmJmkucC5wdXNoKDApLHZvaWQgMCE9PW4ubmEmJm4ucC5wdXNoKDApO3ZhciB0O3UuY2FuT3BBZmZlY3RPcChuLnAsaS5wKSYmKHQ9bi5wLmxlbmd0aC0xKTt2YXIgbDt1LmNhbk9wQWZmZWN0T3AoaS5wLG4ucCkmJihsPWkucC5sZW5ndGgtMSk7dmFyIG89aS5wLmxlbmd0aCxkPW4ucC5sZW5ndGg7aWYodm9pZCAwIT09aS5uYSYmaS5wLnBvcCgpLHZvaWQgMCE9PW4ubmEmJm4ucC5wb3AoKSxuLm5hKXtpZihudWxsIT1sJiZkPj1vJiZuLnBbbF09PWkucFtsXSlpZih2b2lkIDAhPT1pLmxkKXt2YXIgZj1hKG4pO2YucD1mLnAuc2xpY2UobyksaS5sZD11LmFwcGx5KGEoaS5sZCksW2ZdKX1lbHNlIGlmKHZvaWQgMCE9PWkub2Qpe3ZhciBmPWEobik7Zi5wPWYucC5zbGljZShvKSxpLm9kPXUuYXBwbHkoYShpLm9kKSxbZl0pfXJldHVybiB1LmFwcGVuZChlLGkpLGV9aWYobnVsbCE9bCYmZD5vJiZpLnBbbF09PW4ucFtsXSlpZih2b2lkIDAhPT1pLmxkKXt2YXIgZj1hKG4pO2YucD1mLnAuc2xpY2UobyksaS5sZD11LmFwcGx5KGEoaS5sZCksW2ZdKX1lbHNlIGlmKHZvaWQgMCE9PWkub2Qpe3ZhciBmPWEobik7Zi5wPWYucC5zbGljZShvKSxpLm9kPXUuYXBwbHkoYShpLm9kKSxbZl0pfWlmKG51bGwhPXQpe3ZhciBzPW89PWQ7aWYodm9pZCAwIT09bi5uYSk7ZWxzZSBpZih2b2lkIDAhPT1uLnNpfHx2b2lkIDAhPT1uLnNkKXtpZih2b2lkIDAhPT1pLnNpfHx2b2lkIDAhPT1pLnNkKXtpZighcyl0aHJvdyBFcnJvcihcIm11c3QgYmUgYSBzdHJpbmc/XCIpO3ZhciBjPWgoaSksdj1oKG4pLGc9W107cC5fdGMoZyxjLHYscik7Zm9yKHZhciBtPTA7Zy5sZW5ndGg+bTttKyspe3ZhciB5PWdbbV0sdz17cDppLnAuc2xpY2UoMCx0KX07dy5wLnB1c2goeS5wKSxudWxsIT15LmkmJih3LnNpPXkuaSksbnVsbCE9eS5kJiYody5zZD15LmQpLHUuYXBwZW5kKGUsdyl9cmV0dXJuIGV9fWVsc2UgaWYodm9pZCAwIT09bi5saSYmdm9pZCAwIT09bi5sZCl7aWYobi5wW3RdPT09aS5wW3RdKXtpZighcylyZXR1cm4gZTtpZih2b2lkIDAhPT1pLmxkKXtpZih2b2lkIDA9PT1pLmxpfHxcImxlZnRcIiE9PXIpcmV0dXJuIGU7aS5sZD1hKG4ubGkpfX19ZWxzZSBpZih2b2lkIDAhPT1uLmxpKXZvaWQgMCE9PWkubGkmJnZvaWQgMD09PWkubGQmJnMmJmkucFt0XT09PW4ucFt0XT9cInJpZ2h0XCI9PT1yJiZpLnBbdF0rKzpuLnBbdF08PWkucFt0XSYmaS5wW3RdKyssdm9pZCAwIT09aS5sbSYmcyYmbi5wW3RdPD1pLmxtJiZpLmxtKys7ZWxzZSBpZih2b2lkIDAhPT1uLmxkKXtpZih2b2lkIDAhPT1pLmxtJiZzKXtpZihuLnBbdF09PT1pLnBbdF0pcmV0dXJuIGU7dmFyIE89bi5wW3RdLGI9aS5wW3RdLGs9aS5sbTsoaz5PfHxPPT09ayYmaz5iKSYmaS5sbS0tfWlmKG4ucFt0XTxpLnBbdF0paS5wW3RdLS07ZWxzZSBpZihuLnBbdF09PT1pLnBbdF0pe2lmKG8+ZClyZXR1cm4gZTtpZih2b2lkIDAhPT1pLmxkKXtpZih2b2lkIDA9PT1pLmxpKXJldHVybiBlO2RlbGV0ZSBpLmxkfX19ZWxzZSBpZih2b2lkIDAhPT1uLmxtKWlmKHZvaWQgMCE9PWkubG0mJm89PT1kKXt2YXIgYj1pLnBbdF0saz1pLmxtLEU9bi5wW3RdLHg9bi5sbTtpZihFIT09eClpZihiPT09RSl7aWYoXCJsZWZ0XCIhPT1yKXJldHVybiBlO2kucFt0XT14LGI9PT1rJiYoaS5sbT14KX1lbHNlIGI+RSYmaS5wW3RdLS0sYj54P2kucFt0XSsrOmI9PT14JiZFPngmJihpLnBbdF0rKyxiPT09ayYmaS5sbSsrKSxrPkU/aS5sbS0tOms9PT1FJiZrPmImJmkubG0tLSxrPng/aS5sbSsrOms9PT14JiYoeD5FJiZrPmJ8fEU+eCYmYj5rP1wicmlnaHRcIj09PXImJmkubG0rKzprPmI/aS5sbSsrOms9PT1FJiZpLmxtLS0pfWVsc2UgaWYodm9pZCAwIT09aS5saSYmdm9pZCAwPT09aS5sZCYmcyl7dmFyIGI9bi5wW3RdLGs9bi5sbTtPPWkucFt0XSxPPmImJmkucFt0XS0tLE8+ayYmaS5wW3RdKyt9ZWxzZXt2YXIgYj1uLnBbdF0saz1uLmxtO089aS5wW3RdLE89PT1iP2kucFt0XT1rOihPPmImJmkucFt0XS0tLE8+az9pLnBbdF0rKzpPPT09ayYmYj5rJiZpLnBbdF0rKyl9ZWxzZSBpZih2b2lkIDAhPT1uLm9pJiZ2b2lkIDAhPT1uLm9kKXtpZihpLnBbdF09PT1uLnBbdF0pe2lmKHZvaWQgMD09PWkub2l8fCFzKXJldHVybiBlO2lmKFwicmlnaHRcIj09PXIpcmV0dXJuIGU7aS5vZD1uLm9pfX1lbHNlIGlmKHZvaWQgMCE9PW4ub2kpe2lmKHZvaWQgMCE9PWkub2kmJmkucFt0XT09PW4ucFt0XSl7aWYoXCJsZWZ0XCIhPT1yKXJldHVybiBlO3UuYXBwZW5kKGUse3A6aS5wLG9kOm4ub2l9KX19ZWxzZSBpZih2b2lkIDAhPT1uLm9kJiZpLnBbdF09PW4ucFt0XSl7aWYoIXMpcmV0dXJuIGU7aWYodm9pZCAwPT09aS5vaSlyZXR1cm4gZTtkZWxldGUgaS5vZH19cmV0dXJuIHUuYXBwZW5kKGUsaSksZX0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGJyZXF1aXJlP2JyZXF1aXJlKFwiLi9oZWxwZXJzXCIpLl9ib290c3RyYXBUcmFuc2Zvcm0odSx1LnRyYW5zZm9ybUNvbXBvbmVudCx1LmNoZWNrVmFsaWRPcCx1LmFwcGVuZCk6aS5fYm9vdHN0cmFwVHJhbnNmb3JtKHUsdS50cmFuc2Zvcm1Db21wb25lbnQsdS5jaGVja1ZhbGlkT3AsdS5hcHBlbmQpLGUuZXhwb3J0cz11O3ZhciB2PXdpbmRvdy5vdHR5cGVzPXdpbmRvdy5vdHR5cGVzfHx7fSxnPWUuZXhwb3J0czt2W2cubmFtZV09ZyxnLnVyaSYmKHZbZy51cmldPWcpfSkoKTsvLyBKU09OIGRvY3VtZW50IEFQSSBmb3IgdGhlICdqc29uMCcgdHlwZS5cblxuKGZ1bmN0aW9uKCkge1xuICB2YXIgX19zbGljZSA9IFtdLnNsaWNlO1xuICB2YXIgX3R5cGVzID0gdHlwZW9mIGJyZXF1aXJlICE9PSAndW5kZWZpbmVkJyA/IGJyZXF1aXJlKCdvdHR5cGVzJykgOiB3aW5kb3cub3R0eXBlcztcbiAgdmFyIF90eXBlID0gX3R5cGVzWydodHRwOi8vc2hhcmVqcy5vcmcvdHlwZXMvSlNPTnYwJ107XG5cbiAgLy8gSGVscGVyc1xuXG4gIGZ1bmN0aW9uIGRlcGF0aChwYXRoKSB7XG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAxICYmIHBhdGhbMF0uY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICByZXR1cm4gcGF0aFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJhdmVyc2Uoc25hcHNob3QsIHBhdGgpIHtcbiAgICB2YXIga2V5ID0gJ2RhdGEnO1xuICAgIHZhciBlbGVtID0geyBkYXRhOiBzbmFwc2hvdCB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBlbGVtID0gZWxlbVtrZXldO1xuICAgICAga2V5ID0gcGF0aFtpXTtcbiAgICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcGF0aCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBlbGVtOiBlbGVtLFxuICAgICAga2V5OiBrZXlcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGF0aEVxdWFscyhwMSwgcDIpIHtcbiAgICBpZiAocDEubGVuZ3RoICE9PSBwMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwMS5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHAxW2ldICE9PSBwMltpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbnNQYXRoKHAxLCBwMikge1xuICAgIGlmIChwMS5sZW5ndGggPCBwMi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcGF0aEVxdWFscyggcDEuc2xpY2UoMCxwMi5sZW5ndGgpLCBwMik7XG4gIH1cblxuICAvLyBkb2VzIG5vdGhpbmcsIHVzZWQgYXMgYSBkZWZhdWx0IGNhbGxiYWNrXG4gIGZ1bmN0aW9uIG51bGxGdW5jdGlvbigpIHt9XG5cbiAgLy8gZ2l2ZW4gYSBwYXRoIHJlcHJlc2VudGVkIGFzIGFuIGFycmF5IG9yIGEgbnVtYmVyLCBub3JtYWxpemUgdG8gYW4gYXJyYXlcbiAgLy8gd2hvbGUgbnVtYmVycyBhcmUgY29udmVydGVkIHRvIGludGVnZXJzLlxuICBmdW5jdGlvbiBub3JtYWxpemVQYXRoKHBhdGgpIHtcbiAgICBpZiAocGF0aCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZihwYXRoKSA9PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gW3BhdGhdO1xuICAgIH1cbiAgICAvLyBpZiAodHlwZW9mKHBhdGgpID09IFwic3RyaW5nXCIpIHtcbiAgICAvLyAgIHBhdGggPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICAvLyAgIHZhciBvdXQgPSBbXTtcbiAgICAvLyAgIGZvciAodmFyIGk9MDsgaTxwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gICAgIHZhciBwYXJ0ID0gcGF0aFtpXTtcbiAgICAvLyAgICAgaWYgKFN0cmluZyhwYXJzZUludChwYXJ0LCAxMCkpID09IHBhcnQpIHtcbiAgICAvLyAgICAgICBvdXQucHVzaChwYXJzZUludChwYXJ0LCAxMCkpO1xuICAgIC8vICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgIG91dC5wdXNoKHBhcnQpO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9XG4gICAgLy8gICByZXR1cm4gb3V0O1xuICAgIC8vIH1cbiAgfVxuXG4gIC8vIGhlbHBlciBmb3IgY3JlYXRpbmcgZnVuY3Rpb25zIHdpdGggdGhlIG1ldGhvZCBzaWduYXR1cmUgZnVuYyhbcGF0aF0sYXJnMSxhcmcyLC4uLixbY2JdKVxuICAvLyBwb3B1bGF0ZXMgYW4gYXJyYXkgb2YgYXJndW1lbnRzIHdpdGggYSBkZWZhdWx0IHBhdGggYW5kIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZUFyZ3Mob2JqLCBhcmdzLCBmdW5jLCBicmVxdWlyZWRBcmdzQ291bnQpe1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcbiAgICB2YXIgcGF0aF9wcmVmaXggPSBvYmoucGF0aCB8fCBbXTtcblxuICAgIGlmIChmdW5jLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGgtMV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFyZ3MucHVzaChudWxsRnVuY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA8IChicmVxdWlyZWRBcmdzQ291bnQgfHwgZnVuYy5sZW5ndGgpKSB7XG4gICAgICBhcmdzLnVuc2hpZnQocGF0aF9wcmVmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmdzWzBdID0gcGF0aF9wcmVmaXguY29uY2F0KG5vcm1hbGl6ZVBhdGgoYXJnc1swXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jLmFwcGx5KG9iaixhcmdzKTtcbiAgfVxuXG5cbiAgLy8gU3ViRG9jXG4gIC8vIHRoaXMgb2JqZWN0IGlzIHJldHVybmVkIGZyb20gY29udGV4dC5jcmVhdGVDb250ZXh0QXQoKVxuXG4gIHZhciBTdWJEb2MgPSBmdW5jdGlvbihjb250ZXh0LCBwYXRoKSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLnBhdGggPSBwYXRoIHx8IFtdO1xuICB9O1xuXG4gIFN1YkRvYy5wcm90b3R5cGUuX3VwZGF0ZVBhdGggPSBmdW5jdGlvbihvcCl7XG4gICAgY29uc29sZS5sb2coXCJVUERBVEVQQVRIXCIsIG9wKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG9wW2ldO1xuICAgICAgaWYoYy5sbSAhPT0gdW5kZWZpbmVkICYmIGNvbnRhaW5zUGF0aCh0aGlzLnBhdGgsYy5wKSl7XG4gICAgICAgIHZhciBuZXdfcGF0aF9wcmVmaXggPSBjLnAuc2xpY2UoMCxjLnAubGVuZ3RoLTEpO1xuICAgICAgICBuZXdfcGF0aF9wcmVmaXgucHVzaChjLmxtKTtcbiAgICAgICAgdGhpcy5wYXRoID0gbmV3X3BhdGhfcHJlZml4LmNvbmNhdCh0aGlzLnBhdGguc2xpY2UobmV3X3BhdGhfcHJlZml4Lmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTdWJEb2MucHJvdG90eXBlLmNyZWF0ZUNvbnRleHRBdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXRoID0gMSA8PSBhcmd1bWVudHMubGVuZ3RoID8gX19zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkgOiBbXTtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmNyZWF0ZUNvbnRleHRBdCh0aGlzLnBhdGguY29uY2F0KGRlcGF0aChwYXRoKSkpO1xuICB9O1xuXG4gIFN1YkRvYy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCl7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmdldChwYXRoKTtcbiAgICB9KTtcbiAgfTtcblxuICBTdWJEb2MucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHBhdGgsIHZhbHVlLCBjYikge1xuICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgdmFsdWUsIGNiKXtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2V0KHBhdGgsIHZhbHVlLCBjYik7XG4gICAgfSk7XG4gIH07XG5cbiAgU3ViRG9jLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihwYXRoLCB2YWx1ZSwgY2IpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgsIHZhbHVlLCBjYil7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lmluc2VydChwYXRoLCB2YWx1ZSwgY2IpO1xuICAgIH0pO1xuICB9O1xuXG4gIFN1YkRvYy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24ocGF0aCwgbGVuLCBjYikge1xuICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgbGVuLCBjYikge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5yZW1vdmUocGF0aCwgbGVuLCBjYik7XG4gICAgfSwgMik7XG4gIH07XG5cbiAgU3ViRG9jLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24ocGF0aCwgdmFsdWUsIGNiKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUFyZ3ModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihwYXRoLCB2YWx1ZSwgY2IpIHtcbiAgICAgICAgdmFyIF9yZWYgPSB0cmF2ZXJzZSh0aGlzLmNvbnRleHQuZ2V0U25hcHNob3QoKSwgcGF0aCk7XG4gICAgICAgIHZhciBsZW4gPSBfcmVmLmVsZW1bX3JlZi5rZXldLmxlbmd0aDtcbiAgICAgICAgcGF0aC5wdXNoKGxlbik7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lmluc2VydChwYXRoLCB2YWx1ZSwgY2IpO1xuICAgIH0pO1xuICB9O1xuXG4gIFN1YkRvYy5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uKHBhdGgsIGZyb20sIHRvLCBjYikge1xuICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgZnJvbSwgdG8sIGNiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInNkIE1PVkVcIik7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Lm1vdmUocGF0aCwgZnJvbSwgdG8sIGNiKTtcbiAgICB9KTtcbiAgfTtcblxuICBTdWJEb2MucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHBhdGgsIGFtb3VudCwgY2IpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgsIGFtb3VudCwgY2IpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuYWRkKHBhdGgsIGFtb3VudCwgY2IpO1xuICAgIH0pO1xuICB9O1xuXG4gIFN1YkRvYy5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldmVudCwgY2IpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LmFkZExpc3RlbmVyKHRoaXMucGF0aCwgZXZlbnQsIGNiKTtcbiAgfTtcblxuICBTdWJEb2MucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24obCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQucmVtb3ZlTGlzdGVuZXIobCk7XG4gIH07XG5cbiAgU3ViRG9jLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZUFyZ3ModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmdldExlbmd0aChwYXRoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBERVBSRUNBVEVEXG4gIFN1YkRvYy5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZ2V0VGV4dChwYXRoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBERVBSRUNBVEVEXG4gIFN1YkRvYy5wcm90b3R5cGUuZGVsZXRlVGV4dCA9IGZ1bmN0aW9uKHBhdGgsIHBvcywgbGVuZ3RoLCBjYikge1xuICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgcG9zLCBsZW5ndGgsIGNiKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmRlbGV0ZVRleHQocGF0aCwgbGVuZ3RoLCBwb3MsIGNiKTtcbiAgICB9KTtcbiAgfTtcblxuICBTdWJEb2MucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRleHQuX3JlbW92ZVN1YkRvYyh0aGlzKTtcbiAgfTtcblxuXG4gIC8vIEpTT04gQVBJIG1ldGhvZHNcbiAgLy8gdGhlc2UgbWV0aG9kcyBhcmUgbWl4ZWQgaW4gdG8gdGhlIGNvbnRleHQgcmV0dXJuIGZyb20gZG9jLmNyZWF0ZUNvbnRleHQoKVxuXG4gIF90eXBlLmFwaSA9IHtcblxuICAgIHByb3ZpZGVzOiB7XG4gICAgICBqc29uOiB0cnVlXG4gICAgfSxcblxuICAgIF9maXhDb21wb25lbnRQYXRoczogZnVuY3Rpb24oYykge1xuICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGMubmEgIT09IHVuZGVmaW5lZCB8fCBjLnNpICE9PSB1bmRlZmluZWQgfHwgYy5zZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvX3JlbW92ZSA9IFtdO1xuICAgICAgdmFyIF9yZWYgPSB0aGlzLl9saXN0ZW5lcnM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3JlZi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbCA9IF9yZWZbaV07XG4gICAgICAgIHZhciBkdW1teSA9IHtcbiAgICAgICAgICBwOiBsLnBhdGgsXG4gICAgICAgICAgbmE6IDBcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHhmb3JtZWQgPSBfdHlwZS50cmFuc2Zvcm1Db21wb25lbnQoW10sIGR1bW15LCBjLCAnbGVmdCcpO1xuICAgICAgICBpZiAoeGZvcm1lZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0b19yZW1vdmUucHVzaChpKTtcbiAgICAgICAgfSBlbHNlIGlmICh4Zm9ybWVkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGwucGF0aCA9IHhmb3JtZWRbMF0ucDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgYXNzdW1wdGlvbiBpbiBqc29uLWFwaTogeGZvcm1pbmcgYW4gJ25hJyBvcCB3aWxsIGFsd2F5cyByZXN1bHQgaW4gMCBvciAxIGNvbXBvbmVudHMuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRvX3JlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIgLSBhO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBfcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b19yZW1vdmUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaSA9IHRvX3JlbW92ZVtqXTtcbiAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGksIDEpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgIH0sXG5cbiAgICBfZml4UGF0aHM6IGZ1bmN0aW9uKG9wKSB7XG4gICAgICB2YXIgX3Jlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBvcFtpXTtcbiAgICAgICAgX3Jlc3VsdHMucHVzaCh0aGlzLl9maXhDb21wb25lbnRQYXRocyhjKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgfSxcblxuICAgIF9zdWJtaXQ6IGZ1bmN0aW9uKG9wLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5fZml4UGF0aHMob3ApO1xuICAgICAgcmV0dXJuIHRoaXMuc3VibWl0T3Aob3AsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgX2FkZFN1YkRvYzogZnVuY3Rpb24oc3ViZG9jKXtcbiAgICAgIHRoaXMuX3N1YmRvY3MgfHwgKHRoaXMuX3N1YmRvY3MgPSBbXSk7XG4gICAgICB0aGlzLl9zdWJkb2NzLnB1c2goc3ViZG9jKTtcbiAgICB9LFxuXG4gICAgX3JlbW92ZVN1YkRvYzogZnVuY3Rpb24oc3ViZG9jKXtcbiAgICAgIHRoaXMuX3N1YmRvY3MgfHwgKHRoaXMuX3N1YmRvY3MgPSBbXSk7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5fc3ViZG9jcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmKHRoaXMuX3N1YmRvY3NbaV0gPT09IHN1YmRvYykgdGhpcy5fc3ViZG9jcy5zcGxpY2UoaSwxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfdXBkYXRlU3ViZG9jUGF0aHM6IGZ1bmN0aW9uKG9wKXtcbiAgICAgIHRoaXMuX3N1YmRvY3MgfHwgKHRoaXMuX3N1YmRvY3MgPSBbXSk7XG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5fc3ViZG9jcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuX3N1YmRvY3NbaV0uX3VwZGF0ZVBhdGgob3ApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjcmVhdGVDb250ZXh0QXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhdGggPSAxIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSA6IFtdO1xuICAgICAgdmFyIHN1YmRvYyA9ICBuZXcgU3ViRG9jKHRoaXMsIGRlcGF0aChwYXRoKSk7XG4gICAgICB0aGlzLl9hZGRTdWJEb2Moc3ViZG9jKTtcbiAgICAgIHJldHVybiBzdWJkb2M7XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24ocGF0aCkge1xuICAgICAgaWYgKCFwYXRoKSByZXR1cm4gdGhpcy5nZXRTbmFwc2hvdCgpOyAgXG4gICAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihwYXRoKXtcbiAgICAgICAgdmFyIF9yZWYgPSB0cmF2ZXJzZSh0aGlzLmdldFNuYXBzaG90KCksIHBhdGgpO1xuICAgICAgICByZXR1cm4gX3JlZi5lbGVtW19yZWYua2V5XTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzZXQ6IGZ1bmN0aW9uKHBhdGgsIHZhbHVlLCBjYikge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZUFyZ3ModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihwYXRoLCB2YWx1ZSwgY2IpIHtcbiAgICAgICAgdmFyIF9yZWYgPSB0cmF2ZXJzZSh0aGlzLmdldFNuYXBzaG90KCksIHBhdGgpO1xuICAgICAgICB2YXIgZWxlbSA9IF9yZWYuZWxlbTtcbiAgICAgICAgdmFyIGtleSA9IF9yZWYua2V5O1xuICAgICAgICB2YXIgb3AgPSB7XG4gICAgICAgICAgcDogcGF0aFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbGVtLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgIG9wLmxpID0gdmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBlbGVtW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvcC5sZCA9IGVsZW1ba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgb3Aub2kgPSB2YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZW9mIGVsZW1ba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9wLm9kID0gZWxlbVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwYXRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3VibWl0KFtvcF0sIGNiKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKHBhdGgsIGxlbiwgY2IpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgbGVuLCBjYikge1xuICAgICAgICBpZiAoIWNiICYmIGxlbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgY2IgPSBsZW47XG4gICAgICAgICAgbGVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBsZW4gYXJndW1lbnQsIHRoZW4gd2UgYXJlIHJlbW92aW5nIGEgc2luZ2xlIGl0ZW0gZnJvbSBlaXRoZXIgYSBsaXN0IG9yIGEgaGFzaFxuICAgICAgICB2YXIgX3JlZiwgZWxlbSwgb3AsIGtleTtcbiAgICAgICAgaWYgKGxlbiA9PT0gbnVsbCB8fCBsZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIF9yZWYgPSB0cmF2ZXJzZSh0aGlzLmdldFNuYXBzaG90KCksIHBhdGgpO1xuICAgICAgICAgIGVsZW0gPSBfcmVmLmVsZW07XG4gICAgICAgICAga2V5ID0gX3JlZi5rZXk7XG4gICAgICAgICAgb3AgPSB7XG4gICAgICAgICAgICBwOiBwYXRoXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZWxlbVtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBlbGVtZW50IGF0IHRoYXQgcGF0aCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlbGVtLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgb3AubGQgPSBlbGVtW2tleV07XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG9wLm9kID0gZWxlbVtrZXldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwYXRoJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJtaXQoW29wXSwgY2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwb3M7XG4gICAgICAgICAgcG9zID0gcGF0aC5wb3AoKTtcbiAgICAgICAgICBfcmVmID0gdHJhdmVyc2UodGhpcy5nZXRTbmFwc2hvdCgpLCBwYXRoKTtcbiAgICAgICAgICBlbGVtID0gX3JlZi5lbGVtO1xuICAgICAgICAgIGtleSA9IF9yZWYua2V5O1xuICAgICAgICAgIGlmICh0eXBlb2YgZWxlbVtrZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgb3AgPSB7XG4gICAgICAgICAgICAgIHA6IHBhdGguY29uY2F0KHBvcyksXG4gICAgICAgICAgICAgIHNkOiBfcmVmLmVsZW1bX3JlZi5rZXldLnNsaWNlKHBvcywgcG9zICsgbGVuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJtaXQoW29wXSwgY2IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbVtrZXldLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgdmFyIG9wcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaT1wb3M7IGk8cG9zK2xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIG9wcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwOiBwYXRoLmNvbmNhdChwb3MpLFxuICAgICAgICAgICAgICAgIGxkOiBlbGVtW2tleV1baV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3VibWl0KG9wcywgY2IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VsZW1lbnQgYXQgcGF0aCBkb2VzIG5vdCBzdXBwb3J0IHJhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAyKTtcbiAgICB9LFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbihwYXRoLCB2YWx1ZSwgY2IpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgdmFsdWUsIGNiKSB7XG4gICAgICAgIHZhciBwb3MgPSBwYXRoLnBvcCgpO1xuICAgICAgICB2YXIgX3JlZiA9IHRyYXZlcnNlKHRoaXMuZ2V0U25hcHNob3QoKSwgcGF0aCk7XG4gICAgICAgIHZhciBlbGVtID0gX3JlZi5lbGVtO1xuICAgICAgICB2YXIga2V5ID0gX3JlZi5rZXk7XG4gICAgICAgIHZhciBvcCA9IHtcbiAgICAgICAgICBwOiBwYXRoLmNvbmNhdChwb3MpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGVsZW1ba2V5XS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgICBvcC5saSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtW2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgb3Auc2kgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3VibWl0KFtvcF0sIGNiKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtb3ZlOiBmdW5jdGlvbihwYXRoLCBmcm9tLCB0bywgY2IpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgZnJvbSwgdG8sIGNiKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIG9wID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHA6IHBhdGguY29uY2F0KGZyb20pLFxuICAgICAgICAgICAgbG06IHRvXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJtaXQob3AsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgc2VsZi5fdXBkYXRlU3ViZG9jUGF0aHMob3ApO1xuICAgICAgICAgIGlmKGNiKSBjYi5hcHBseShjYiwgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24ocGF0aCwgdmFsdWUsIGNiKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgsIHZhbHVlLCBjYikge1xuICAgICAgICB2YXIgX3JlZiA9IHRyYXZlcnNlKHRoaXMuZ2V0U25hcHNob3QoKSwgcGF0aCk7XG4gICAgICAgIHZhciBsZW4gPSBfcmVmLmVsZW1bX3JlZi5rZXldLmxlbmd0aDtcbiAgICAgICAgcGF0aC5wdXNoKGxlbik7XG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydChwYXRoLCB2YWx1ZSwgY2IpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFkZDogZnVuY3Rpb24ocGF0aCwgYW1vdW50LCBjYikge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZUFyZ3ModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihwYXRoLCB2YWx1ZSwgY2IpIHtcbiAgICAgICAgdmFyIG9wID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHA6IHBhdGgsXG4gICAgICAgICAgICBuYTogYW1vdW50XG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VibWl0KG9wLCBjYik7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0TGVuZ3RoOiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldChwYXRoKS5sZW5ndGg7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRUZXh0OiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplQXJncyh0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZC4gVXNlIGBnZXQoKWAgaW5zdGVhZFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHBhdGgpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGRlbGV0ZVRleHQ6IGZ1bmN0aW9uKHBhdGgsIGxlbmd0aCwgcG9zLCBjYikge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZUFyZ3ModGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbihwYXRoLCBsZW5ndGgsIHBvcywgY2IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZC4gVXNlIGByZW1vdmUocGF0aCwgbGVuZ3RoLCBjYilgIGluc3RlYWRcIik7XG4gICAgICAgIHZhciBfcmVmID0gdHJhdmVyc2UodGhpcy5nZXRTbmFwc2hvdCgpLCBwYXRoKTtcbiAgICAgICAgdmFyIG9wID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHA6IHBhdGguY29uY2F0KHBvcyksXG4gICAgICAgICAgICBzZDogX3JlZi5lbGVtW19yZWYua2V5XS5zbGljZShwb3MsIHBvcyArIGxlbmd0aClcbiAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1Ym1pdChvcCwgY2IpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFkZExpc3RlbmVyOiBmdW5jdGlvbihwYXRoLCBldmVudCwgY2IpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVBcmdzKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24ocGF0aCwgdmFsdWUsIGNiKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBjYjogY2JcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzIHx8ICh0aGlzLl9saXN0ZW5lcnMgPSBbXSk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGkgPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBfb25PcDogZnVuY3Rpb24ob3ApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBvcFtpXTtcbiAgICAgICAgdGhpcy5fZml4Q29tcG9uZW50UGF0aHMoYyk7XG5cbiAgICAgICAgaWYoYy5sbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlU3ViZG9jUGF0aHMoW2NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXRjaF9wYXRoID0gYy5uYSA9PT0gdW5kZWZpbmVkID8gYy5wLnNsaWNlKDAsIGMucC5sZW5ndGggLSAxKSA6IGMucDtcblxuICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7IGwrKykge1xuICAgICAgICAgIHZhciBsaXN0ZW5lciA9IHRoaXMuX2xpc3RlbmVyc1tsXTtcbiAgICAgICAgICB2YXIgY2IgPSBsaXN0ZW5lci5jYjtcblxuICAgICAgICAgIGlmIChwYXRoRXF1YWxzKGxpc3RlbmVyLnBhdGgsIG1hdGNoX3BhdGgpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxpc3RlbmVyLmV2ZW50KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2luc2VydCc6XG4gICAgICAgICAgICAgICAgaWYgKGMubGkgIT09IHVuZGVmaW5lZCAmJiBjLmxkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNiKGMucFtjLnAubGVuZ3RoIC0gMV0sIGMubGkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYy5vaSAhPT0gdW5kZWZpbmVkICYmIGMub2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgY2IoYy5wW2MucC5sZW5ndGggLSAxXSwgYy5vaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjLnNpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNiKGMucFtjLnAubGVuZ3RoIC0gMV0sIGMuc2kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICBpZiAoYy5saSA9PT0gdW5kZWZpbmVkICYmIGMubGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgY2IoYy5wW2MucC5sZW5ndGggLSAxXSwgYy5sZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjLm9pID09PSB1bmRlZmluZWQgJiYgYy5vZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBjYihjLnBbYy5wLmxlbmd0aCAtIDFdLCBjLm9kKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMuc2QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgY2IoYy5wW2MucC5sZW5ndGggLSAxXSwgYy5zZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdyZXBsYWNlJzpcbiAgICAgICAgICAgICAgICBpZiAoYy5saSAhPT0gdW5kZWZpbmVkICYmIGMubGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgY2IoYy5wW2MucC5sZW5ndGggLSAxXSwgYy5sZCwgYy5saSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjLm9pICE9PSB1bmRlZmluZWQgJiYgYy5vZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBjYihjLnBbYy5wLmxlbmd0aCAtIDFdLCBjLm9kLCBjLm9pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIGlmIChjLmxtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNiKGMucFtjLnAubGVuZ3RoIC0gMV0sIGMubG0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICBpZiAoYy5uYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBjYihjLm5hKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChfdHlwZS5jYW5PcEFmZmVjdE9wKGxpc3RlbmVyLnBhdGgsIG1hdGNoX3BhdGgpXG4gICAgICAgICAgICAgICYmIGxpc3RlbmVyLmV2ZW50ID09PSAnY2hpbGQgb3AnKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRfcGF0aCA9IGMucC5zbGljZShsaXN0ZW5lci5wYXRoLmxlbmd0aCk7XG4gICAgICAgICAgICBjYihjaGlsZF9wYXRoLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4vLyBUaGlzIGZpbGUgaXMgaW5jbHVkZWQgYXQgdGhlIHRvcCBvZiB0aGUgY29tcGlsZWQgY2xpZW50IEpTLlxuXG4vLyBBbGwgdGhlIG1vZHVsZXMgd2lsbCBqdXN0IGFkZCBzdHVmZiB0byBleHBvcnRzLCBhbmQgaXQnbGwgYWxsIGdldCBleHBvcnRlZC5cbnZhciBleHBvcnRzID0gd2luZG93LnNoYXJlanMgPSB7dmVyc2lvbjogJzAuNy4wLWFscGhhOCd9O1xuXG4vLyBUaGlzIGlzIGEgc2ltcGxlIHJld3JpdGUgb2YgbWljcm9ldmVudC5qcy4gSSd2ZSBjaGFuZ2VkIHRoZVxuLy8gZnVuY3Rpb24gbmFtZXMgdG8gYmUgY29uc2lzdGVudCB3aXRoIG5vZGUuanMgRXZlbnRFbWl0dGVyLlxuLy9cbi8vIG1pY3JvZXZlbnQuanMgaXMgY29weXJpZ2h0IEplcm9tZSBFdGllbm5lLCBhbmQgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2plcm9tZWV0aWVubmUvbWljcm9ldmVudC5qc1xuXG52YXIgTWljcm9FdmVudCA9IGZ1bmN0aW9uKCkge307XG5cbk1pY3JvRXZlbnQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIChldmVudHNbZXZlbnRdID0gZXZlbnRzW2V2ZW50XSB8fCBbXSkucHVzaChmbik7XG59O1xuXG5NaWNyb0V2ZW50LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzW2V2ZW50XSA9IGV2ZW50c1tldmVudF0gfHwgW107XG5cbiAgLy8gU2FkbHksIG5vIElFOCBzdXBwb3J0IGZvciBpbmRleE9mLlxuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGlzdGVuZXJzLmxlbmd0aCkge1xuICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGZuKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGkrKztcbiAgfVxuXG4gIC8vIENvbXBhY3QgdGhlIGxpc3Qgd2hlbiBubyBldmVudCBoYW5kbGVyIGlzIGFjdHVhbGx5IHJ1bm5pbmcuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZXZlbnRzW2V2ZW50XSA9IFtdO1xuICAgIHZhciBmbjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gT25seSBhZGQgYmFjayBldmVudCBoYW5kbGVycyB3aGljaCBleGlzdC5cbiAgICAgIGlmICgoZm4gPSBsaXN0ZW5lcnNbaV0pKSBldmVudHNbZXZlbnRdLnB1c2goZm4pO1xuICAgIH1cbiAgfSwgMCk7XG59O1xuXG5NaWNyb0V2ZW50LnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW2V2ZW50XSkge1xuICAgIGlmIChldmVudCA9PSAnZXJyb3InKSB7XG4gICAgICBpZiAoY29uc29sZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzW2V2ZW50XTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGlzdGVuZXJzW2ldKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG59O1xuXG5NaWNyb0V2ZW50LnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gIHZhciBsaXN0ZW5lciwgX3RoaXMgPSB0aGlzO1xuICB0aGlzLm9uKGV2ZW50LCBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgIF90aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgZm4uYXBwbHkoX3RoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xufTtcblxuTWljcm9FdmVudC5taXhpbiA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcHJvdG8gPSBvYmoucHJvdG90eXBlIHx8IG9iajtcbiAgcHJvdG8ub24gPSBNaWNyb0V2ZW50LnByb3RvdHlwZS5vbjtcbiAgcHJvdG8ucmVtb3ZlTGlzdGVuZXIgPSBNaWNyb0V2ZW50LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbiAgcHJvdG8uZW1pdCA9IE1pY3JvRXZlbnQucHJvdG90eXBlLmVtaXQ7XG4gIHByb3RvLm9uY2UgPSBNaWNyb0V2ZW50LnByb3RvdHlwZS5vbmNlO1xuICByZXR1cm4gb2JqO1xufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIpIG1vZHVsZS5leHBvcnRzID0gTWljcm9FdmVudDtcblxudmFyIHR5cGVzLCBNaWNyb0V2ZW50O1xuXG5pZiAodHlwZW9mIGJyZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHR5cGVzID0gYnJlcXVpcmUoJ290dHlwZXMnKTtcbiAgTWljcm9FdmVudCA9IGJyZXF1aXJlKCcuL21pY3JvZXZlbnQnKTtcbn0gZWxzZSB7XG4gIHR5cGVzID0gd2luZG93Lm90dHlwZXM7XG59XG5cbi8qXG4gKiBBIERvYyBpcyBhIGNsaWVudCdzIHZpZXcgb24gYSBzaGFyZWpzIGRvY3VtZW50LlxuICpcbiAqIERvY3VtZW50cyBzaG91bGQgbm90IGJlIGNyZWF0ZWQgZGlyZWN0bHkuIENyZWF0ZSB0aGVtIGJ5IGNhbGxpbmcgdGhlXG4gKiBkb2N1bWVudCBnZXR0aW5nIGZ1bmN0aW9ucyBpbiBjb25uZWN0aW9uLlxuICpcbiAqIERvY3VtZW50cyBhcmUgZXZlbnQgZW1pdHRlcnMuIFVzZSBkb2Mub24oZXZlbnRuYW1lLCBmbikgdG8gc3Vic2NyaWJlLlxuICpcbiAqIERvY3VtZW50cyBjdXJyZW50bHkgZ2V0IG1peGVkIGluIHdpdGggdGhlaXIgdHlwZSdzIEFQSSBtZXRob2RzLiBTbywgeW91IGNhblxuICogLmluc2VydCgnZm9vJywgMCkgaW50byBhIHRleHQgZG9jdW1lbnQgYW5kIHN0dWZmIGxpa2UgdGhhdC5cbiAqXG4gKiBFdmVudHM6XG4gKiAtIGJlZm9yZSBvcCAob3AsIGxvY2FsU2l0ZSk6IEZpcmVkIGJlZm9yZSBhbiBvcGVyYXRpb24gaXMgYXBwbGllZCB0byB0aGVcbiAqICAgZG9jdW1lbnQuXG4gKiAtIG9wIChvcCwgbG9jYWxTaXRlKTogRmlyZWQgcmlnaHQgYWZ0ZXIgYW4gb3BlcmF0aW9uIChvciBwYXJ0IG9mIGFuXG4gKiAgIG9wZXJhdGlvbikgaGFzIGJlZW4gYXBwbGllZCB0byB0aGUgZG9jdW1lbnQuIFN1Ym1pdHRpbmcgYW5vdGhlciBvcCBoZXJlIGlzXG4gKiAgIGludmFsaWQgLSB3YWl0IHVudGlsICdhZnRlciBvcCcgaWYgeW91IHdhbnQgdG8gc3VibWl0IG1vcmUgb3BlcmF0aW9ucy4gIC1cbiAqICAgY2hhbmdlZCAob3ApXG4gKiAtIGFmdGVyIG9wIChvcCwgbG9jYWxTaXRlKTogRmlyZWQgYWZ0ZXIgYW4gb3BlcmF0aW9uIGhhcyBiZWVuIGFwcGxpZWQuIFlvdVxuICogICBjYW4gc3VibWl0IG1vcmUgb3BzIGhlcmUuXG4gKiAtIHN1YnNjcmliZWQgKGVycm9yKTogVGhlIGRvY3VtZW50IHdhcyBzdWJzY3JpYmVkXG4gKiAtIHVuc3Vic2NyaWJlZCAoZXJyb3IpOiBUaGUgZG9jdW1lbnQgd2FzIHVuc3Vic2NyaWJlZFxuICogLSBjcmVhdGVkOiBUaGUgZG9jdW1lbnQgd2FzIGNyZWF0ZWQuIFRoYXQgbWVhbnMgaXRzIHR5cGUgd2FzIHNldCBhbmQgaXQgaGFzXG4gKiAgIHNvbWUgaW5pdGlhbCBkYXRhLlxuICogLSBlcnJvclxuICovXG52YXIgRG9jID0gZXhwb3J0cy5Eb2MgPSBmdW5jdGlvbihjb25uZWN0aW9uLCBjb2xsZWN0aW9uLCBuYW1lKSB7XG4gIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG5cbiAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgdGhpcy5uYW1lID0gbmFtZTtcblxuICB0aGlzLnZlcnNpb24gPSB0aGlzLnR5cGUgPSBudWxsO1xuXG4gIC8vICoqKiogU3RhdGUgaW4gZG9jdW1lbnQ6XG4gXG4gIC8vIEFjdGlvbi4gVGhpcyBpcyBlaXRoZXIgbnVsbCwgb3Igb25lIG9mIHRoZSBhY3Rpb25zIChzdWJzY3JpYmUsXG4gIC8vIHVuc3Vic2NyaWJlLCBmZXRjaCwgc3VibWl0KS4gT25seSBvbmUgYWN0aW9uIGNhbiBiZSBoYXBwZW5pbmcgYXQgYSB0aW1lIHRvXG4gIC8vIHByZXZlbnQgbWUgZnJvbSBnb2luZyBtYWQuXG4gIC8vXG4gIC8vIFBvc3NpYmxlIHZhbHVlczpcbiAgLy8gLSBzdWJzY3JpYmVcbiAgLy8gLSB1bnN1YnNjcmliZVxuICAvLyAtIGZldGNoXG4gIC8vIC0gc3VibWl0XG4gIHRoaXMuYWN0aW9uID0gbnVsbDtcbiBcbiAgLy8gVGhlIGRhdGEgdGhlIGRvY3VtZW50IG9iamVjdCBzdG9yZXMgY2FuIGJlIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIHRocmVlIHN0YXRlczpcbiAgLy8gICAtIE5vIGRhdGEuIChudWxsKSBXZSBob25lc3RseSBkb24ndCBrbm93IHdoYXRzIGdvaW5nIG9uLlxuICAvLyAgIC0gRmxvYXRpbmcgKCdmbG9hdGluZycpOiB3ZSBoYXZlIGEgbG9jYWxseSBjcmVhdGVkIGRvY3VtZW50IHRoYXQgaGFzbid0XG4gIC8vICAgICBiZWVuIGNyZWF0ZWQgb24gdGhlIHNlcnZlciB5ZXQpXG4gIC8vICAgLSBMaXZlICgncmVhZHknKSAod2UgaGF2ZSBkYXRhIHRoYXRzIGN1cnJlbnQgb24gdGhlIHNlcnZlciBhdCBzb21lIHZlcnNpb24pLlxuICB0aGlzLnN0YXRlID0gbnVsbDtcblxuICAvLyBPdXIgc3Vic2NyaXB0aW9uIHN0YXR1cy4gRWl0aGVyIHdlJ3JlIHN1YnNjcmliZWQgb24gdGhlIHNlcnZlciwgb3Igd2UgYXJlbid0LlxuICB0aGlzLnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgLy8gRWl0aGVyIHdlIHdhbnQgdG8gYmUgc3Vic2NyaWJlZCAodHJ1ZSksIHdlIHdhbnQgYSBuZXcgc25hcHNob3QgZnJvbSB0aGVcbiAgLy8gc2VydmVyICgnZmV0Y2gnKSwgb3Igd2UgZG9uJ3QgY2FyZSAoZmFsc2UpLiAgVGhpcyBpcyBhbHNvIHVzZWQgd2hlbiB3ZVxuICAvLyBkaXNjb25uZWN0ICYgcmVjb25uZWN0IHRvIGRlY2lkZSB3aGF0IHRvIGRvLlxuICB0aGlzLndhbnRTdWJzY3JpYmUgPSBmYWxzZTtcbiAgLy8gVGhpcyBsaXN0IGlzIHVzZWQgZm9yIHN1YnNjcmliZSBhbmQgdW5zdWJzY3JpYmUsIHNpbmNlIHdlJ2xsIG9ubHkgd2FudCB0b1xuICAvLyBkbyBvbmUgdGhpbmcgYXQgYSB0aW1lLlxuICB0aGlzLl9zdWJzY3JpYmVDYWxsYmFja3MgPSBbXTtcblxuXG4gIC8vICoqKiBlbmQgc3RhdGUgc3R1ZmYuXG5cbiAgLy8gVGhpcyBkb2Vzbid0IHByb3ZpZGUgYW55IHN0YW5kYXJkIEFQSSBhY2Nlc3MgcmlnaHQgbm93LlxuICB0aGlzLnByb3ZpZGVzID0ge307XG5cbiAgLy8gVGhlIGVkaXRpbmcgY29udGV4dHMuIFRoZXNlIGFyZSB1c3VhbGx5IGluc3RhbmNlcyBvZiB0aGUgdHlwZSBBUEkgd2hlbiB0aGVcbiAgLy8gZG9jdW1lbnQgaXMgcmVhZHkgZm9yIGVkaXRzLlxuICB0aGlzLmVkaXRpbmdDb250ZXh0cyA9IFtdO1xuICBcbiAgLy8gVGhlIG9wIHRoYXQgaXMgY3VycmVudGx5IHJvdW5kdHJpcHBpbmcgdG8gdGhlIHNlcnZlciwgb3IgbnVsbC5cbiAgLy9cbiAgLy8gV2hlbiB0aGUgY29ubmVjdGlvbiByZWNvbm5lY3RzLCB0aGUgaW5mbGlnaHQgb3AgaXMgcmVzdWJtaXR0ZWQuXG4gIC8vXG4gIC8vIFRoaXMgaGFzIHRoZSBzYW1lIGZvcm1hdCBhcyBhbiBlbnRyeSBpbiBwZW5kaW5nRGF0YSwgd2hpY2ggaXM6XG4gIC8vIHtbY3JlYXRlOnsuLi59XSwgW2RlbDp0cnVlXSwgW29wOi4uLl0sIGNhbGxiYWNrczpbLi4uXSwgc3JjOiwgc2VxOn1cbiAgdGhpcy5pbmZsaWdodERhdGEgPSBudWxsO1xuXG4gIC8vIEFsbCBvcHMgdGhhdCBhcmUgd2FpdGluZyBmb3IgdGhlIHNlcnZlciB0byBhY2tub3dsZWRnZSBAaW5mbGlnaHREYXRhXG4gIC8vIFRoaXMgdXNlZCB0byBqdXN0IGJlIGEgc2luZ2xlIG9wZXJhdGlvbiwgYnV0IGNyZWF0ZXMgJiBkZWxldGVzIGNhbid0IGJlIGNvbXBvc2VkIHdpdGhcbiAgLy8gcmVndWxhciBvcGVyYXRpb25zLlxuICAvL1xuICAvLyBUaGlzIGlzIGEgbGlzdCBvZiB7W2NyZWF0ZTp7Li4ufV0sIFtkZWw6dHJ1ZV0sIFtvcDouLi5dLCBjYWxsYmFja3M6Wy4uLl19XG4gIHRoaXMucGVuZGluZ0RhdGEgPSBbXTtcbn07XG5cbk1pY3JvRXZlbnQubWl4aW4oRG9jKTtcblxuRG9jLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIGRvYyA9IHRoaXM7XG4gIHRoaXMudW5zdWJzY3JpYmUoZnVuY3Rpb24oKSB7XG4gICAgLy8gRG9uJ3QgY2FyZSBpZiB0aGVyZSdzIGFuIGVycm9yIHVuc3Vic2NyaWJpbmcuXG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVGhlcmUnbGwgcHJvYmFibHkgYmUgbm90aGluZyBoZXJlIHNlZWluZyBhcyBob3cgd2UganVzdCB1bnN1YnNjcmliZWQuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvYy5fc3Vic2NyaWJlQ2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRvYy5fc3Vic2NyaWJlQ2FsbGJhY2tzW2ldKCdEb2N1bWVudCBkZXN0cm95ZWQnKTtcbiAgICAgIH1cbiAgICAgIGRvYy5fc3Vic2NyaWJlQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgfSwgMCk7XG5cbiAgICBkb2MuY29ubmVjdGlvbi5fZGVzdHJveURvYyhkb2MpO1xuICAgIGRvYy5yZW1vdmVDb250ZXh0cygpO1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfSk7XG59O1xuXG5cbi8vICoqKioqKiBNYW5pcHVsYXRpbmcgdGhlIGRvY3VtZW50IHNuYXBzaG90LCB2ZXJzaW9uIGFuZCB0eXBlLlxuXG4vLyBTZXQgdGhlIGRvY3VtZW50J3MgdHlwZSwgYW5kIGFzc29jaWF0ZWQgcHJvcGVydGllcy4gTW9zdCBvZiB0aGUgbG9naWMgaW5cbi8vIHRoaXMgZnVuY3Rpb24gZXhpc3RzIHRvIHVwZGF0ZSB0aGUgZG9jdW1lbnQgYmFzZWQgb24gYW55IGFkZGVkICYgcmVtb3ZlZCBBUElcbi8vIG1ldGhvZHMuXG5Eb2MucHJvdG90eXBlLl9zZXRUeXBlID0gZnVuY3Rpb24obmV3VHlwZSkge1xuICBpZiAodHlwZW9mIG5ld1R5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF0eXBlc1tuZXdUeXBlXSkgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB0eXBlIFwiICsgbmV3VHlwZSk7XG4gICAgbmV3VHlwZSA9IHR5cGVzW25ld1R5cGVdO1xuICB9XG4gIHRoaXMucmVtb3ZlQ29udGV4dHMoKTtcblxuICAvLyBTZXQgdGhlIG5ldyB0eXBlXG4gIHRoaXMudHlwZSA9IG5ld1R5cGU7XG5cbiAgLy8gSWYgd2UgcmVtb3ZlZCB0aGUgdHlwZSBmcm9tIHRoZSBvYmplY3QsIGFsc28gcmVtb3ZlIGl0cyBzbmFwc2hvdC5cbiAgaWYgKCFuZXdUeXBlKSB7XG4gICAgdGhpcy5wcm92aWRlcyA9IHt9O1xuICB9IGVsc2UgaWYgKG5ld1R5cGUuYXBpKSB7XG4gICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyB0eXBlJ3MgQVBJLlxuICAgIHRoaXMucHJvdmlkZXMgPSBuZXdUeXBlLmFwaS5wcm92aWRlcztcbiAgfVxufTtcblxuLy8gSW5qZXN0IHNuYXBzaG90IGRhdGEuIFRoaXMgZGF0YSBtdXN0IGluY2x1ZGUgYSB2ZXJzaW9uLCBzbmFwc2hvdCBhbmQgdHlwZS5cbi8vIFRoaXMgaXMgdXNlZCBib3RoIHRvIGluamVzdCBkYXRhIHRoYXQgd2FzIGV4cG9ydGVkIHdpdGggYSB3ZWJwYWdlIGFuZCBkYXRhXG4vLyB0aGF0IHdhcyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIgZHVyaW5nIGEgZmV0Y2guXG5Eb2MucHJvdG90eXBlLmluamVzdERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGlmICh0aGlzLnN0YXRlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4oJ0lnbm9yaW5nIGF0dGVtcHQgdG8gaW5qZXN0IGRhdGEgaW4gc3RhdGUnLCB0aGlzLnN0YXRlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnYgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdmVyc2lvbiBpbiBpbmplc3RlZCBkYXRhJyk7XG5cblxuICB0aGlzLnZlcnNpb24gPSBkYXRhLnY7XG4gIC8vIGRhdGEuZGF0YSBpcyB3aGF0IHRoZSBzZXJ2ZXIgd2lsbCBhY3R1YWxseSBzZW5kLiBkYXRhLnNuYXBzaG90IGlzIHRoZSBvbGRcbiAgLy8gZmllbGQgbmFtZSAtIHN1cHBvcnRlZCBub3cgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICB0aGlzLnNuYXBzaG90ID0gZGF0YS5kYXRhIHx8IGRhdGEuc25hcHNob3Q7XG4gIHRoaXMuX3NldFR5cGUoZGF0YS50eXBlKTtcblxuICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgdGhpcy5lbWl0KCdyZWFkeScpO1xufTtcblxuLy8gR2V0IGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgZG9jdW1lbnQgc25hcHNob3QuXG5Eb2MucHJvdG90eXBlLmdldFNuYXBzaG90ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNuYXBzaG90O1xufTtcblxuLy8gVGhlIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGF0IGEgdGltZSB3aGVuIHRoZSBkb2N1bWVudCBoYXMgYSBzbmFwc2hvdCBhbmRcbi8vIHlvdSBjYW4gc3RhcnQgYXBwbHlpbmcgb3BlcmF0aW9ucy4gVGhpcyBtYXkgYmUgaW1tZWRpYXRlbHkuXG5Eb2MucHJvdG90eXBlLndoZW5SZWFkeSA9IGZ1bmN0aW9uKGZuKSB7XG4gIGlmICh0aGlzLnN0YXRlID09PSAncmVhZHknKSB7XG4gICAgZm4oKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9uKCdyZWFkeScsIGZuKTtcbiAgfVxufTtcblxuRG9jLnByb3RvdHlwZS5oYXNQZW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmluZmxpZ2h0RGF0YSAhPSBudWxsIHx8ICEhdGhpcy5wZW5kaW5nRGF0YS5sZW5ndGg7XG59O1xuXG5cbi8vICoqKiogSGVscGVycyBmb3IgbmV0d29yayBtZXNzYWdlc1xuXG4vLyBTZW5kIGEgbWVzc2FnZSB0byB0aGUgY29ubmVjdGlvbiBmcm9tIHRoaXMgZG9jdW1lbnQuXG5Eb2MucHJvdG90eXBlLl9zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBtZXNzYWdlLmMgPSB0aGlzLmNvbGxlY3Rpb247XG4gIG1lc3NhZ2UuZCA9IHRoaXMubmFtZTtcbiAgdGhpcy5jb25uZWN0aW9uLnNlbmQobWVzc2FnZSk7XG59O1xuXG4vLyBUaGlzIGZ1bmN0aW9uIGV4aXN0cyBzbyBjb25uZWN0aW9uIGNhbiBjYWxsIGl0IGRpcmVjdGx5IGZvciBidWxrIHN1YnNjcmliZXMuXG4vLyBJdCBjb3VsZCBqdXN0IG1ha2UgYSB0ZW1wb3Jhcnkgb2JqZWN0IGxpdGVyYWwsIHRoYXRzIHByZXR0eSBzbG93LlxuRG9jLnByb3RvdHlwZS5faGFuZGxlU3Vic2NyaWJlID0gZnVuY3Rpb24oZXJyLCBkYXRhKSB7XG4gIGlmIChlcnIgJiYgZXJyICE9PSAnQWxyZWFkeSBzdWJzY3JpYmVkJykge1xuICAgIGlmIChjb25zb2xlKSBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IHN1YnNjcmliZTogXCIgKyBlcnIpO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIC8vIFRoZXJlJ3MgcHJvYmFibHkgYSByZWFzb24gd2UgY291bGRuJ3Qgc3Vic2NyaWJlLiBEb24ndCByZXRyeS5cbiAgICB0aGlzLl9zZXRXYW50U3Vic2NyaWJlKGZhbHNlLCBudWxsLCBlcnIpXG4gIH0gZWxzZSB7XG4gICAgaWYgKGRhdGEpIHRoaXMuaW5qZXN0RGF0YShkYXRhKTtcbiAgICB0aGlzLnN1YnNjcmliZWQgPSB0cnVlO1xuICAgIHRoaXMuZW1pdCgnc3Vic2NyaWJlJyk7XG4gICAgdGhpcy5fZmluaXNoU3ViKHRydWUpO1xuICB9XG5cbiAgdGhpcy5fY2xlYXJBY3Rpb24oJ3N1YnNjcmliZScpO1xufTtcblxuLy8gVGhpcyBpcyBjYWxsZWQgYnkgdGhlIGNvbm5lY3Rpb24gd2hlbiBpdCByZWNlaXZlcyBhIG1lc3NhZ2UgZm9yIHRoZSBkb2N1bWVudC5cbkRvYy5wcm90b3R5cGUuX29uTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykge1xuICBpZiAoIShtc2cuYyA9PT0gdGhpcy5jb2xsZWN0aW9uICYmIG1zZy5kID09PSB0aGlzLm5hbWUpKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIC0gaXRzIGEgc2FuaXR5IGNoZWNrIGZvciBidWdzIGluIHRoZSBjb25uZWN0aW9uIGNvZGUuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiR290IG1lc3NhZ2UgZm9yIHdyb25nIGRvY3VtZW50LlwiKTtcbiAgfVxuXG4gIC8vIG1zZy5hID0gdGhlIGFjdGlvbi5cbiAgc3dpdGNoIChtc2cuYSkge1xuICAgIGNhc2UgJ2ZldGNoJzpcbiAgICAgIC8vIFdlJ3JlIGRvbmUgZmV0Y2hpbmcuIFRoaXMgbWVzc2FnZSBoYXMgbm8gb3RoZXIgaW5mb3JtYXRpb24uXG4gICAgICBpZiAobXNnLmRhdGEpIHRoaXMuaW5qZXN0RGF0YShtc2cuZGF0YSk7XG4gICAgICB0aGlzLl9maW5pc2hTdWIoJ2ZldGNoJywgbXNnLmVycm9yKTtcbiAgICAgIGlmICh0aGlzLndhbnRTdWJzY3JpYmUgPT09ICdmZXRjaCcpIHRoaXMud2FudFN1YnNjcmliZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fY2xlYXJBY3Rpb24oJ2ZldGNoJyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3N1Yic6XG4gICAgICAvLyBTdWJzY3JpYmUgcmVwbHkuXG4gICAgICB0aGlzLl9oYW5kbGVTdWJzY3JpYmUobXNnLmVycm9yLCBtc2cuZGF0YSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3Vuc3ViJzpcbiAgICAgIC8vIFVuc3Vic2NyaWJlIHJlcGx5XG4gICAgICB0aGlzLnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW1pdCgndW5zdWJzY3JpYmUnKTtcblxuICAgICAgdGhpcy5fZmluaXNoU3ViKGZhbHNlLCBtc2cuZXJyb3IpO1xuICAgICAgdGhpcy5fY2xlYXJBY3Rpb24oJ3Vuc3Vic2NyaWJlJyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2Fjayc6XG4gICAgICAvLyBBY2tub3dsZWRnZSBhIGxvY2FsbHkgc3VibWl0dGVkIG9wZXJhdGlvbi5cbiAgICAgIC8vXG4gICAgICAvLyBVc3VhbGx5IHdlIGRvIG5vdGhpbmcgaGVyZSAtIGFsbCB0aGUgaW50ZXJlc3RpbmcgbG9naWMgaGFwcGVucyB3aGVuIHdlXG4gICAgICAvLyBnZXQgc2VudCBvdXIgb3AgYmFjayBpbiB0aGUgb3Agc3RyZWFtICh3aGljaCBoYXBwZW5zIGV2ZW4gaWYgd2UgYXJlbid0XG4gICAgICAvLyBzdWJzY3JpYmVkKS4gSG93ZXZlciwgaWYgdGhlIG9wIGRvZXNuJ3QgZ2V0IGFjY2VwdGVkLCB3ZSBzdGlsbCBuZWVkIHRvXG4gICAgICAvLyBjbGVhciBzb21lIHN0YXRlLlxuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBtZXNzYWdlIGVycm9yIGlzICdPcCBhbHJlYWR5IHN1Ym1pdHRlZCcsIHRoYXQgbWVhbnMgd2UndmVcbiAgICAgIC8vIHJlc2VudCBhbiBvcCB0aGF0IHRoZSBzZXJ2ZXIgYWxyZWFkeSBnb3QuIEl0IHdpbGwgYWxzbyBiZSBjb25maXJtZWRcbiAgICAgIC8vIG5vcm1hbGx5LlxuICAgICAgaWYgKG1zZy5lcnJvciAmJiBtc2cuZXJyb3IgIT09ICdPcCBhbHJlYWR5IHN1Ym1pdHRlZCcpIHtcbiAgICAgICAgLy8gVGhlIHNlcnZlciBoYXMgcmVqZWN0ZWQgYW4gb3AgZnJvbSB0aGUgY2xpZW50IGZvciBzb21lIHJlYXNvbi5cbiAgICAgICAgLy8gV2UnbGwgc2VuZCB0aGUgZXJyb3IgbWVzc2FnZSB0byB0aGUgdXNlciBhbmQgdHJ5IHRvIHJvbGwgYmFjayB0aGUgY2hhbmdlLlxuICAgICAgICBpZiAodGhpcy5pbmZsaWdodERhdGEpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ09wZXJhdGlvbiB3YXMgcmVqZWN0ZWQgKCcgKyBtc2cuZXJyb3IgKyAnKS4gVHJ5aW5nIHRvIHJvbGxiYWNrIGNoYW5nZSBsb2NhbGx5LicpO1xuICAgICAgICAgIHRoaXMuX3RyeVJvbGxiYWNrKHRoaXMuaW5mbGlnaHREYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJIG1hbmFnZWQgdG8gZ2V0IGludG8gdGhpcyBzdGF0ZSBvbmNlLiBJJ20gbm90IHN1cmUgaG93IGl0IGhhcHBlbmVkLlxuICAgICAgICAgIC8vIFRoZSBvcCB3YXMgbWF5YmUgZG91YmxlLWFja25vd2xlZGdlZD9cbiAgICAgICAgICBpZiAoY29uc29sZSkgY29uc29sZS53YXJuKCdTZWNvbmQgYWNrbm93bGVkZ2VtZW50IG1lc3NhZ2UgKGVycm9yKSByZWNlaXZlZCcsIG1zZywgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgdGhpcy5fY2xlYXJJbmZsaWdodE9wKG1zZy5lcnJvcik7XG4gICAgICB9XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ29wJzpcbiAgICAgIGlmICh0aGlzLmluZmxpZ2h0RGF0YSAmJlxuICAgICAgICAgIG1zZy5zcmMgPT09IHRoaXMuaW5mbGlnaHREYXRhLnNyYyAmJlxuICAgICAgICAgIG1zZy5zZXEgPT09IHRoaXMuaW5mbGlnaHREYXRhLnNlcSkge1xuICAgICAgICAvLyBUaGlzIG9uZSBpcyBtaW5lLiBBY2NlcHQgaXQgYXMgYWNrbm93bGVkZ2VkLlxuICAgICAgICB0aGlzLl9vcEFja25vd2xlZGdlZChtc2cpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG1zZy52ICE9PSB0aGlzLnZlcnNpb24pIHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIGhhcHBlbiBuYXR1cmFsbHkgaW4gdGhlIGZvbGxvd2luZyAob3Igc2ltaWxhcikgY2FzZXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIENsaWVudCBpcyBub3Qgc3Vic2NyaWJlZCB0byBkb2N1bWVudC5cbiAgICAgICAgLy8gLT4gY2xpZW50IHN1Ym1pdHMgYW4gb3BlcmF0aW9uICh2PTEwKVxuICAgICAgICAvLyAtPiBjbGllbnQgc3Vic2NyaWJlcyB0byBhIHF1ZXJ5IHdoaWNoIG1hdGNoZXMgdGhpcyBkb2N1bWVudC4gU2F5cyB3ZVxuICAgICAgICAvLyAgICBoYXZlIHY9MTAgb2YgdGhlIGRvYy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gPC0gc2VydmVyIGFja25vd2xlZGdlcyB0aGUgb3BlcmF0aW9uICh2PTExKS4gU2VydmVyIGFja25vd2xlZGdlcyB0aGVcbiAgICAgICAgLy8gICAgb3BlcmF0aW9uIGJlY2F1c2UgdGhlIGRvYyBpc24ndCBzdWJzY3JpYmVkXG4gICAgICAgIC8vIDwtIHNlcnZlciBwcm9jZXNzZXMgdGhlIHF1ZXJ5LCB3aGljaCBzYXlzIHRoZSBjbGllbnQgb25seSBoYXMgdj0xMC5cbiAgICAgICAgLy8gICAgU2VydmVyIHN1YnNjcmliZXMgYXQgdj0xMCBub3Qgdj0xMSwgc28gd2UgZ2V0IGFub3RoZXIgY29weSBvZiB0aGVcbiAgICAgICAgLy8gICAgdj0xMCBvcGVyYXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSwgd2UgY2FuIHNhZmVseSBpZ25vcmUgdGhlIG9sZCAoZHVwbGljYXRlKSBvcGVyYXRpb24uXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pbmZsaWdodERhdGEpIHhmKHRoaXMuaW5mbGlnaHREYXRhLCBtc2cpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucGVuZGluZ0RhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgeGYodGhpcy5wZW5kaW5nRGF0YVtpXSwgbXNnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52ZXJzaW9uKys7XG4gICAgICB0aGlzLl9vdEFwcGx5KG1zZywgZmFsc2UpO1xuICAgICAgdGhpcy5fYWZ0ZXJPdEFwcGx5KG1zZywgZmFsc2UpO1xuICAgICAgLy9jb25zb2xlLmxvZygnYXBwbGllZCcsIEpTT04uc3RyaW5naWZ5KG1zZykpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdtZXRhJzpcbiAgICAgIGlmIChjb25zb2xlKSBjb25zb2xlLndhcm4oJ1VuaGFuZGxlZCBtZXRhIG9wOicsIG1zZyk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoY29uc29sZSkgY29uc29sZS53YXJuKCdVbmhhbmRsZWQgZG9jdW1lbnQgbWVzc2FnZTonLCBtc2cpO1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbi8vIENhbGxlZCB3aGVuZXZlciAoeW91IGd1ZXNzZWQgaXQhKSB0aGUgY29ubmVjdGlvbiBzdGF0ZSBjaGFuZ2VzLiBUaGlzIHdpbGxcbi8vIGhhcHBlbiB3aGVuIHdlIGdldCBkaXNjb25uZWN0ZWQgJiByZWNvbm5lY3QuXG5Eb2MucHJvdG90eXBlLl9vbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQgPSBmdW5jdGlvbihzdGF0ZSwgcmVhc29uKSB7XG4gIGlmIChzdGF0ZSA9PT0gJ2Nvbm5lY3RpbmcnKSB7XG4gICAgaWYgKHRoaXMuaW5mbGlnaHREYXRhKSB7XG4gICAgICB0aGlzLl9zZW5kT3BEYXRhKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmx1c2goKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgLy8gV2UgZ28gaW50byB0aGUgY29ubmVjdGVkIHN0YXRlIG9uY2Ugd2UgaGF2ZSBhIHNlc3Npb25JRC4gV2UgY2FuJ3Qgc2VuZFxuICAgIC8vIG5ldyBvcHMgdW50aWwgdGhlbiwgc28gd2UgbmVlZCB0byBmbHVzaCBhZ2Fpbi5cbiAgICB0aGlzLmZsdXNoKCk7XG4gIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgdGhpcy5hY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuc3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnN1YnNjcmliZWQpIHRoaXMuZW1pdCgndW5zdWJzY3JpYmVkJyk7XG4gIH1cbn07XG5cblxuXG5cbi8vICoqKioqKiBEZWFsaW5nIHdpdGggYWN0aW9uc1xuXG5Eb2MucHJvdG90eXBlLl9jbGVhckFjdGlvbiA9IGZ1bmN0aW9uKGV4cGVjdGVkQWN0aW9uKSB7XG4gIGlmICh0aGlzLmFjdGlvbiAhPT0gZXhwZWN0ZWRBY3Rpb24pIHtcbiAgICBjb25zb2xlLndhcm4oJ1VuZXhwZWN0ZWQgYWN0aW9uICcgKyB0aGlzLmFjdGlvbiArICcgZXhwZWN0ZWQ6ICcgKyBleHBlY3RlZEFjdGlvbik7XG4gIH1cbiAgdGhpcy5hY3Rpb24gPSBudWxsO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG5cblxuLy8gU2VuZCB0aGUgbmV4dCBwZW5kaW5nIG9wIHRvIHRoZSBzZXJ2ZXIsIGlmIHdlIGNhbi5cbi8vXG4vLyBPbmx5IG9uZSBvcGVyYXRpb24gY2FuIGJlIGluLWZsaWdodCBhdCBhIHRpbWUuIElmIGFuIG9wZXJhdGlvbiBpcyBhbHJlYWR5IG9uXG4vLyBpdHMgd2F5LCBvciB3ZSdyZSBub3QgY3VycmVudGx5IGNvbm5lY3RlZCwgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLlxuRG9jLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuY29ubmVjdGlvbi5jYW5TZW5kIHx8IHRoaXMuYWN0aW9uKSByZXR1cm47XG5cbiAgdmFyIG9wRGF0YTtcbiAgLy8gUHVtcCBhbmQgZHVtcCBhbnkgbm8tb3BzIGZyb20gdGhlIGZyb250IG9mIHRoZSBwZW5kaW5nIG9wIGxpc3QuXG4gIHdoaWxlICh0aGlzLnBlbmRpbmdEYXRhLmxlbmd0aCAmJiBpc05vT3Aob3BEYXRhID0gdGhpcy5wZW5kaW5nRGF0YVswXSkpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gb3BEYXRhLmNhbGxiYWNrcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgY2FsbGJhY2tzW2ldKG9wRGF0YS5lcnJvcik7XG4gICAgfVxuICAgIHRoaXMucGVuZGluZ0RhdGEuc2hpZnQoKTtcbiAgfVxuXG4gIC8vIEZpcnN0IGNvbnNpZGVyIGNoYW5naW5nIHN0YXRlXG4gIGlmICh0aGlzLnN1YnNjcmliZWQgJiYgIXRoaXMud2FudFN1YnNjcmliZSkge1xuICAgIHRoaXMuYWN0aW9uID0gJ3Vuc3Vic2NyaWJlJztcbiAgICB0aGlzLl9zZW5kKHthOid1bnN1Yid9KTtcbiAgfSBlbHNlIGlmICghdGhpcy5zdWJzY3JpYmVkICYmIHRoaXMud2FudFN1YnNjcmliZSA9PT0gJ2ZldGNoJykge1xuICAgIHRoaXMuYWN0aW9uID0gJ2ZldGNoJztcbiAgICB0aGlzLl9zZW5kKHRoaXMuc3RhdGUgPT09ICdyZWFkeScgPyB7YTonZmV0Y2gnLCB2OnRoaXMudmVyc2lvbn0gOiB7YTonZmV0Y2gnfSk7XG4gIH0gZWxzZSBpZiAoIXRoaXMuc3Vic2NyaWJlZCAmJiB0aGlzLndhbnRTdWJzY3JpYmUpIHtcbiAgICB0aGlzLmFjdGlvbiA9ICdzdWJzY3JpYmUnO1xuICAgIC8vIFNwZWNpYWwgc2VuZCBtZXRob2QgbmVlZGVkIGZvciBidWxrIHN1YnNjcmliZXMgb24gcmVjb25uZWN0LlxuICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kU3Vic2NyaWJlKHRoaXMuY29sbGVjdGlvbiwgdGhpcy5uYW1lLCB0aGlzLnN0YXRlID09PSAncmVhZHknID8gdGhpcy52ZXJzaW9uIDogbnVsbCk7XG4gIH0gZWxzZSBpZiAoIXRoaXMucGF1c2VkICYmIHRoaXMucGVuZGluZ0RhdGEubGVuZ3RoICYmIHRoaXMuY29ubmVjdGlvbi5zdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAvLyBUcnkgYW5kIHNlbmQgYW55IHBlbmRpbmcgb3BzLiBXZSBjYW4ndCBzZW5kIG9wcyB3aGlsZSBpbiBcbiAgICB0aGlzLmluZmxpZ2h0RGF0YSA9IHRoaXMucGVuZGluZ0RhdGEuc2hpZnQoKTtcblxuICAgIC8vIERlbGF5IGZvciBkZWJ1Z2dpbmcuXG4gICAgLy92YXIgdGhhdCA9IHRoaXM7XG4gICAgLy9zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aGF0Ll9zZW5kT3BEYXRhKCk7IH0sIDEwMDApO1xuXG4gICAgLy8gVGhpcyBhbHNvIHNldHMgYWN0aW9uIHRvICdzdWJtaXQnLlxuICAgIHRoaXMuX3NlbmRPcERhdGEoKTtcbiAgfVxufTtcblxuXG4vLyAqKioqKiogU3Vic2NyaWJpbmcsIHVuc3Vic2NyaWJpbmcgYW5kIGZldGNoaW5nXG5cbi8vIFRoZXNlIGZ1bmN0aW9ucyBpYXJlIGNvcGllZCBpbnRvIHRoZSBxdWVyeSBjbGFzcyBhcyB3ZWxsLCBzbyBiZSBjYXJlZnVsIG1ha2luZ1xuLy8gY2hhbmdlcyBoZXJlLlxuXG4vLyBWYWx1ZSBpcyB0cnVlLCBmYWxzZSBvciAnZmV0Y2gnLlxuRG9jLnByb3RvdHlwZS5fc2V0V2FudFN1YnNjcmliZSA9IGZ1bmN0aW9uKHZhbHVlLCBjYWxsYmFjaywgZXJyKSB7XG4gIGlmICh0aGlzLnN1YnNjcmliZWQgPT09IHRoaXMud2FudFN1YnNjcmliZSAmJlxuICAgICAgKHRoaXMuc3Vic2NyaWJlZCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdmZXRjaCcgJiYgdGhpcy5zdWJzY3JpYmVkKSkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGlmICghdGhpcy53YW50U3Vic2NyaWJlICE9PSAhdmFsdWUpIHtcbiAgICAvLyBDYWxsIGFsbCB0aGUgY3VycmVudCBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgY2FsbGJhY2tzLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc3Vic2NyaWJlQ2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBTaG91bGQgSSByZXR1cm4gYW4gZXJyb3IgaGVyZT8gV2hhdCBoYXBwZW5lZCBpcyB0aGUgdXNlciB1bnN1YmNyaWJlZFxuICAgICAgLy8gd2l0aCBhIGNhbGxiYWNrIHRoZW4gcmVzdWJzY3JpYmVkIHN0cmFpZ2h0IGFmdGVyLiBEb2VzIHRoYXQgbWVhbiB0aGVcbiAgICAgIC8vIHVuc3Vic2NyaWJlIGZhaWxlZD9cbiAgICAgIHRoaXMuX3N1YnNjcmliZUNhbGxiYWNrc1tpXShlcnIpO1xuICAgIH1cbiAgICB0aGlzLl9zdWJzY3JpYmVDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8vIElmIHdlIHdhbnQgdG8gc3Vic2NyaWJlLCBkb24ndCB3ZWFrZW4gaXQgdG8gYSBmZXRjaC5cbiAgaWYgKHZhbHVlICE9PSAnZmV0Y2gnIHx8IHRoaXMud2FudFN1YnNjcmliZSAhPT0gdHJ1ZSlcbiAgICB0aGlzLndhbnRTdWJzY3JpYmUgPSB2YWx1ZTtcblxuICBpZiAoY2FsbGJhY2spIHRoaXMuX3N1YnNjcmliZUNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLy8gT3BlbiB0aGUgZG9jdW1lbnQuIFRoZXJlIGlzIG5vIGNhbGxiYWNrIGFuZCBubyBlcnJvciBoYW5kbGluZyBpZiB5b3UncmVcbi8vIGFscmVhZHkgY29ubmVjdGVkLlxuLy9cbi8vIE9ubHkgY2FsbCB0aGlzIG9uY2UgcGVyIGRvY3VtZW50LlxuRG9jLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB0aGlzLl9zZXRXYW50U3Vic2NyaWJlKHRydWUsIGNhbGxiYWNrKTtcbn07XG5cbi8vIFVuc3Vic2NyaWJlLiBUaGUgZGF0YSB3aWxsIHN0YXkgYXJvdW5kIGluIGxvY2FsIG1lbW9yeSwgYnV0IHdlJ2xsIHN0b3Bcbi8vIHJlY2VpdmluZyB1cGRhdGVzLlxuRG9jLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHRoaXMuX3NldFdhbnRTdWJzY3JpYmUoZmFsc2UsIGNhbGxiYWNrKTtcbn07XG5cbi8vIENhbGwgdG8gcmVxdWVzdCBmcmVzaCBkYXRhIGZyb20gdGhlIHNlcnZlci5cbkRvYy5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB0aGlzLl9zZXRXYW50U3Vic2NyaWJlKCdmZXRjaCcsIGNhbGxiYWNrKTtcbn07XG5cbi8vIENhbGxlZCB3aGVuIG91ciBzdWJzY3JpYmUsIGZldGNoIG9yIHVuc3Vic2NyaWJlIG1lc3NhZ2VzIGFyZSBhY2tub3dsZWRnZWQuXG5Eb2MucHJvdG90eXBlLl9maW5pc2hTdWIgPSBmdW5jdGlvbih2YWx1ZSwgZXJyb3IpIHtcbiAgaWYgKHZhbHVlID09PSB0aGlzLndhbnRTdWJzY3JpYmUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3N1YnNjcmliZUNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc3Vic2NyaWJlQ2FsbGJhY2tzW2ldKGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5fc3Vic2NyaWJlQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gIH1cbn07XG5cblxuLy8gT3BlcmF0aW9uc1xuXG5cbi8vICoqKioqKioqKioqKiBEZWFsaW5nIHdpdGggb3BlcmF0aW9ucy5cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNldCBvcERhdGEgdG8gY29udGFpbiBhIG5vLW9wLlxudmFyIHNldE5vT3AgPSBmdW5jdGlvbihvcERhdGEpIHtcbiAgZGVsZXRlIG9wRGF0YS5vcDtcbiAgZGVsZXRlIG9wRGF0YS5jcmVhdGU7XG4gIGRlbGV0ZSBvcERhdGEuZGVsO1xufTtcblxudmFyIGlzTm9PcCA9IGZ1bmN0aW9uKG9wRGF0YSkge1xuICByZXR1cm4gIW9wRGF0YS5vcCAmJiAhb3BEYXRhLmNyZWF0ZSAmJiAhb3BEYXRhLmRlbDtcbn1cblxuLy8gVHJ5IHRvIGNvbXBvc2UgZGF0YTIgaW50byBkYXRhMS4gUmV0dXJucyB0cnV0aHkgaWYgaXQgc3VjY2VlZHMsIG90aGVyd2lzZSBmYWxzeS5cbnZhciB0cnlDb21wb3NlID0gZnVuY3Rpb24odHlwZSwgZGF0YTEsIGRhdGEyKSB7XG4gIGlmIChkYXRhMS5jcmVhdGUgJiYgZGF0YTIuZGVsKSB7XG4gICAgc2V0Tm9PcChkYXRhMSk7XG4gIH0gZWxzZSBpZiAoZGF0YTEuY3JlYXRlICYmIGRhdGEyLm9wKSB7XG4gICAgLy8gQ29tcG9zZSB0aGUgZGF0YSBpbnRvIHRoZSBjcmVhdGUgZGF0YS5cbiAgICB2YXIgZGF0YSA9IChkYXRhMS5jcmVhdGUuZGF0YSA9PT0gdW5kZWZpbmVkKSA/IHR5cGUuY3JlYXRlKCkgOiBkYXRhMS5jcmVhdGUuZGF0YTtcbiAgICBkYXRhMS5jcmVhdGUuZGF0YSA9IHR5cGUuYXBwbHkoZGF0YSwgZGF0YTIub3ApO1xuICB9IGVsc2UgaWYgKGlzTm9PcChkYXRhMSkpIHtcbiAgICBkYXRhMS5jcmVhdGUgPSBkYXRhMi5jcmVhdGU7XG4gICAgZGF0YTEuZGVsID0gZGF0YTIuZGVsO1xuICAgIGRhdGExLm9wID0gZGF0YTIub3A7XG4gIH0gZWxzZSBpZiAoZGF0YTEub3AgJiYgZGF0YTIub3AgJiYgdHlwZS5jb21wb3NlKSB7XG4gICAgZGF0YTEub3AgPSB0eXBlLmNvbXBvc2UoZGF0YTEub3AsIGRhdGEyLm9wKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyBUcmFuc2Zvcm0gc2VydmVyIG9wIGRhdGEgYnkgYSBjbGllbnQgb3AsIGFuZCB2aWNlIHZlcnNhLiBPcHMgYXJlIGVkaXRlZCBpbiBwbGFjZS5cbnZhciB4ZiA9IGZ1bmN0aW9uKGNsaWVudCwgc2VydmVyKSB7XG4gIC8vIEluIHRoaXMgY2FzZSwgd2UncmUgaW4gZm9yIHNvbWUgZnVuLiBUaGVyZSBhcmUgc29tZSBsb2NhbCBvcGVyYXRpb25zXG4gIC8vIHdoaWNoIGFyZSB0b3RhbGx5IGludmFsaWQgLSBlaXRoZXIgdGhlIGNsaWVudCBjb250aW51ZWQgZWRpdGluZyBhXG4gIC8vIGRvY3VtZW50IHRoYXQgc29tZW9uZSBlbHNlIGRlbGV0ZWQgb3IgYSBkb2N1bWVudCB3YXMgY3JlYXRlZCBib3RoIG9uIHRoZVxuICAvLyBjbGllbnQgYW5kIG9uIHRoZSBzZXJ2ZXIuIEluIGVpdGhlciBjYXNlLCB0aGUgbG9jYWwgZG9jdW1lbnQgaXMgd2F5XG4gIC8vIGludmFsaWQgYW5kIHRoZSBjbGllbnQncyBvcHMgYXJlIHVzZWxlc3MuXG4gIC8vXG4gIC8vIFRoZSBjbGllbnQgYmVjb21lcyBhIG5vLW9wLCBhbmQgd2Uga2VlcCB0aGUgc2VydmVyIG9wIGVudGlyZWx5LlxuICBpZiAoc2VydmVyLmNyZWF0ZSB8fCBzZXJ2ZXIuZGVsKSByZXR1cm4gc2V0Tm9PcChjbGllbnQpO1xuICBpZiAoY2xpZW50LmNyZWF0ZSkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0YXRlLiBUaGlzIGlzIGEgYnVnLicpO1xuXG4gIC8vIFRoZSBjbGllbnQgaGFzIGRlbGV0ZWQgdGhlIGRvY3VtZW50IHdoaWxlIHRoZSBzZXJ2ZXIgZWRpdGVkIGl0LiBLaWxsIHRoZVxuICAvLyBzZXJ2ZXIncyBvcC5cbiAgaWYgKGNsaWVudC5kZWwpIHJldHVybiBzZXROb09wKHNlcnZlcik7XG5cbiAgLy8gV2Ugb25seSBnZXQgaGVyZSBpZiBlaXRoZXIgdGhlIHNlcnZlciBvciBjbGllbnQgb3BzIGFyZSBuby1vcC4gQ2Fycnkgb24sXG4gIC8vIG5vdGhpbmcgdG8gc2VlIGhlcmUuXG4gIGlmICghc2VydmVyLm9wIHx8ICFjbGllbnQub3ApIHJldHVybjtcblxuICAvLyBUaGV5IGJvdGggZWRpdGVkIHRoZSBkb2N1bWVudC4gVGhpcyBpcyB0aGUgbm9ybWFsIGNhc2UgZm9yIHRoaXMgZnVuY3Rpb24gLVxuICAvLyBhcyBpbiwgbW9zdCBvZiB0aGUgdGltZSB3ZSdsbCBlbmQgdXAgZG93biBoZXJlLlxuICAvL1xuICAvLyBZb3Ugc2hvdWxkIGJlIHdvbmRlcmluZyB3aHkgSSdtIHVzaW5nIGNsaWVudC50eXBlIGluc3RlYWQgb2YgdGhpcy50eXBlLlxuICAvLyBUaGUgcmVhc29uIGlzLCBpZiB3ZSBnZXQgb3BzIGF0IGFuIG9sZCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudCwgdGhpcy50eXBlXG4gIC8vIG1pZ2h0IGJlIHVuZGVmaW5lZCBvciBhIHRvdGFsbHkgZGlmZmVyZW50IHR5cGUuIEJ5IHBpbm5pbmcgdGhlIHR5cGUgdG8gdGhlXG4gIC8vIG9wIGRhdGEsIHdlIG1ha2Ugc3VyZSB0aGUgcmlnaHQgdHlwZSBoYXMgaXRzIHRyYW5zZm9ybSBmdW5jdGlvbiBjYWxsZWQuXG4gIGlmIChjbGllbnQudHlwZS50cmFuc2Zvcm1YKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNsaWVudC50eXBlLnRyYW5zZm9ybVgoY2xpZW50Lm9wLCBzZXJ2ZXIub3ApO1xuICAgIGNsaWVudC5vcCA9IHJlc3VsdFswXTtcbiAgICBzZXJ2ZXIub3AgPSByZXN1bHRbMV07XG4gIH0gZWxzZSB7XG4gICAgLy9jb25zb2xlLmxvZygneGYnLCBKU09OLnN0cmluZ2lmeShjbGllbnQub3ApLCBKU09OLnN0cmluZ2lmeShzZXJ2ZXIub3ApKTtcbiAgICB2YXIgX2MgPSBjbGllbnQudHlwZS50cmFuc2Zvcm0oY2xpZW50Lm9wLCBzZXJ2ZXIub3AsICdsZWZ0Jyk7XG4gICAgdmFyIF9zID0gY2xpZW50LnR5cGUudHJhbnNmb3JtKHNlcnZlci5vcCwgY2xpZW50Lm9wLCAncmlnaHQnKTtcbiAgICBjbGllbnQub3AgPSBfYzsgc2VydmVyLm9wID0gX3M7XG4gICAgLy9jb25zb2xlLmxvZygnLT4nLCBKU09OLnN0cmluZ2lmeShjbGllbnQub3ApLCBKU09OLnN0cmluZ2lmeShzZXJ2ZXIub3ApKTtcbiAgfVxufTtcblxuLy8gSW50ZXJuYWwgbWV0aG9kIHRvIGFjdHVhbGx5IGFwcGx5IHRoZSBnaXZlbiBvcCBkYXRhIHRvIG91ciBsb2NhbCBtb2RlbC5cbi8vXG4vLyBfYWZ0ZXJPdEFwcGx5KCkgc2hvdWxkIGFsd2F5cyBiZSBjYWxsZWQgc3luY2hyb25vdXNseSBhZnRlcndhcmRzLlxuRG9jLnByb3RvdHlwZS5fb3RBcHBseSA9IGZ1bmN0aW9uKG9wRGF0YSwgY29udGV4dCkge1xuICAvLyBMb2NrIHRoZSBkb2N1bWVudC4gTm9ib2R5IGlzIGFsbG93ZWQgdG8gY2FsbCBzdWJtaXRPcCgpIHVudGlsIF9hZnRlck90QXBwbHkgaXMgY2FsbGVkLlxuICB0aGlzLmxvY2tlZCA9IHRydWU7XG5cbiAgaWYgKG9wRGF0YS5jcmVhdGUpIHtcbiAgICAvLyBJZiB0aGUgdHlwZSBpcyBjdXJyZW50bHkgc2V0LCBpdCBtZWFucyB3ZSB0cmllZCBjcmVhdGluZyB0aGUgZG9jdW1lbnRcbiAgICAvLyBhbmQgc29tZW9uZSBlbHNlIHdvbi4gY2xpZW50IGNyZWF0ZSB4IHNlcnZlciBjcmVhdGUgPSBzZXJ2ZXIgY3JlYXRlLlxuICAgIHZhciBjcmVhdGUgPSBvcERhdGEuY3JlYXRlO1xuICAgIHRoaXMuX3NldFR5cGUoY3JlYXRlLnR5cGUpO1xuICAgIHRoaXMuc25hcHNob3QgPSB0aGlzLnR5cGUuY3JlYXRlKGNyZWF0ZS5kYXRhKTtcblxuICAgIC8vIFRoaXMgaXMgYSBiaXQgaGVhdnl3ZWlnaHQsIGJ1dCBJIHdhbnQgdGhlIGNyZWF0ZWQgZXZlbnQgdG8gZmlyZSBvdXRzaWRlIG9mIHRoZSBsb2NrLlxuICAgIHRoaXMub25jZSgndW5sb2NrJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVtaXQoJ2NyZWF0ZScsIGNvbnRleHQpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wRGF0YS5kZWwpIHtcbiAgICAvLyBUaGUgdHlwZSBzaG91bGQgYWx3YXlzIGV4aXN0IGluIHRoaXMgY2FzZS4gZGVsIHggXyA9IGRlbFxuICAgIHZhciBvbGRTbmFwc2hvdCA9IHRoaXMuc25hcHNob3Q7XG4gICAgdGhpcy5fc2V0VHlwZShudWxsKTtcbiAgICB0aGlzLm9uY2UoJ3VubG9jaycsIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KCdkZWwnLCBjb250ZXh0LCBvbGRTbmFwc2hvdCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3BEYXRhLm9wKSB7XG4gICAgaWYgKCF0aGlzLnR5cGUpIHRocm93IG5ldyBFcnJvcignRG9jdW1lbnQgZG9lcyBub3QgZXhpc3QnKTtcblxuICAgIHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG4gICAgdmFyIG9wID0gb3BEYXRhLm9wO1xuICAgIFxuICAgIC8vIFRoZSBjb250ZXh0IG5lZWRzIHRvIGJlIHRvbGQgd2UncmUgYWJvdXQgdG8gZWRpdCwganVzdCBpbiBjYXNlIGl0IG5lZWRzXG4gICAgLy8gdG8gc3RvcmUgYW55IGV4dHJhIGRhdGEuICh0ZXh0LXRwMiBoYXMgdGhpcyBjb25zdHJhaW50LilcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZWRpdGluZ0NvbnRleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHRoaXMuZWRpdGluZ0NvbnRleHRzW2ldO1xuICAgICAgaWYgKGMgIT0gY29udGV4dCAmJiBjLl9iZWZvcmVPcCkgYy5fYmVmb3JlT3Aob3BEYXRhLm9wKTtcbiAgICB9XG5cbiAgICB0aGlzLmVtaXQoJ2JlZm9yZSBvcCcsIG9wLCBjb250ZXh0KTtcblxuICAgIC8vIFRoaXMgZXhpc3RzIHNvIGNsaWVudHMgY2FuIHB1bGwgYW55IG5lY2Vzc2FyeSBkYXRhIG91dCBvZiB0aGUgc25hcHNob3RcbiAgICAvLyBiZWZvcmUgaXQgZ2V0cyBjaGFuZ2VkLiAgUHJldmlvdXNseSB3ZSBrZXB0IHRoZSBvbGQgc25hcHNob3Qgb2JqZWN0IGFuZFxuICAgIC8vIHBhc3NlZCBpdCB0byB0aGUgb3AgZXZlbnQgaGFuZGxlci4gSG93ZXZlciwgYXBwbHkgbm8gbG9uZ2VyIGd1YXJhbnRlZXNcbiAgICAvLyB0aGUgb2xkIG9iamVjdCBpcyBzdGlsbCB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEJlY2F1c2UgdGhpcyBjb3VsZCBiZSB0b3RhbGx5IHVubmVjZXNzYXJ5IHdvcmssIGl0cyBiZWhpbmQgYSBmbGFnLiBzZXRcbiAgICAvLyBkb2MuaW5jcmVtZW50YWwgdG8gZW5hYmxlLlxuICAgIGlmICh0aGlzLmluY3JlbWVudGFsICYmIHR5cGUuaW5jcmVtZW50YWxBcHBseSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHR5cGUuaW5jcmVtZW50YWxBcHBseSh0aGlzLnNuYXBzaG90LCBvcCwgZnVuY3Rpb24obywgc25hcHNob3QpIHtcbiAgICAgICAgX3RoaXMuc25hcHNob3QgPSBzbmFwc2hvdDtcbiAgICAgICAgX3RoaXMuZW1pdCgnb3AnLCBvLCBjb250ZXh0KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBjYXNlLCBzaW1wbHkgYXBwbHlpbmcgdGhlIG9wZXJhdGlvbiB0byB0aGUgbG9jYWwgc25hcHNob3QuXG4gICAgICB0aGlzLnNuYXBzaG90ID0gdHlwZS5hcHBseSh0aGlzLnNuYXBzaG90LCBvcCk7XG4gICAgICB0aGlzLmVtaXQoJ29wJywgb3AsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuICAvLyBJdHMgcG9zc2libGUgZm9yIG5vbmUgb2YgdGhlIGFib3ZlIGNhc2VzIHRvIG1hdGNoLCBpbiB3aGljaCBjYXNlIHRoZSBvcCBpc1xuICAvLyBhIG5vLW9wLiBUaGlzIHdpbGwgaGFwcGVuIHdoZW4gYSBkb2N1bWVudCBoYXMgYmVlbiBkZWxldGVkIGxvY2FsbHkgYW5kXG4gIC8vIHJlbW90ZSBvcHMgZWRpdCB0aGUgZG9jdW1lbnQuXG59O1xuXG4vLyBUaGlzIHNob3VsZCBiZSBjYWxsZWQgcmlnaHQgYWZ0ZXIgX290QXBwbHkuXG5Eb2MucHJvdG90eXBlLl9hZnRlck90QXBwbHkgPSBmdW5jdGlvbihvcERhdGEsIGNvbnRleHQpIHtcbiAgdGhpcy5sb2NrZWQgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCd1bmxvY2snKTtcbiAgaWYgKG9wRGF0YS5vcCkge1xuICAgIHZhciBjb250ZXh0cyA9IHRoaXMuZWRpdGluZ0NvbnRleHRzO1xuICAgIC8vIE5vdGlmeSBhbGwgdGhlIGNvbnRleHRzIGFib3V0IHRoZSBvcCAod2VsbCwgYWxsIHRoZSBjb250ZXh0cyBleGNlcHRcbiAgICAvLyB0aGUgb25lIHdoaWNoIGluaXRpYXRlZCB0aGUgc3VibWl0IGluIHRoZSBmaXJzdCBwbGFjZSkuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZXh0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjb250ZXh0c1tpXTtcbiAgICAgIGlmIChjICE9IGNvbnRleHQgJiYgYy5fb25PcCkgYy5fb25PcChvcERhdGEub3ApO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29udGV4dHMucmVtb3ZlKSBjb250ZXh0cy5zcGxpY2UoaS0tLCAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbWl0KCdhZnRlciBvcCcsIG9wRGF0YS5vcCwgY29udGV4dCk7XG4gIH1cbn07XG5cblxuXG4vLyAqKioqKiBTZW5kaW5nIG9wZXJhdGlvbnNcblxuXG4vLyBBY3R1YWxseSBzZW5kIG9wIGRhdGEgdG8gdGhlIHNlcnZlci5cbkRvYy5wcm90b3R5cGUuX3NlbmRPcERhdGEgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGQgPSB0aGlzLmluZmxpZ2h0RGF0YTtcblxuICBpZiAodGhpcy5hY3Rpb24pIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzdGF0ZSAnICsgdGhpcy5hY3Rpb24gKyAnIGZvciBzZW5kT3BEYXRhJyk7XG4gIHRoaXMuYWN0aW9uID0gJ3N1Ym1pdCc7XG5cbiAgdmFyIG1zZyA9IHthOidvcCcsIHY6dGhpcy52ZXJzaW9ufTtcbiAgaWYgKGQuc3JjKSB7XG4gICAgbXNnLnNyYyA9IGQuc3JjO1xuICAgIG1zZy5zZXEgPSBkLnNlcTtcbiAgfVxuXG4gIC8vIFRoZSBzZXJ2ZXIgYXV0b2RldGVjdHMgdGhpcy5cbiAgLy9pZiAodGhpcy5zdGF0ZSA9PT0gJ3Vuc3Vic2NyaWJlZCcpIG1zZy5mID0gdHJ1ZTsgLy8gZmV0Y2ggaW50ZXJtZWRpYXRlIG9wc1xuXG4gIGlmIChkLm9wKSBtc2cub3AgPSBkLm9wO1xuICBpZiAoZC5jcmVhdGUpIG1zZy5jcmVhdGUgPSBkLmNyZWF0ZTtcbiAgaWYgKGQuZGVsKSBtc2cuZGVsID0gZC5kZWw7XG5cbiAgbXNnLmMgPSB0aGlzLmNvbGxlY3Rpb247XG4gIG1zZy5kID0gdGhpcy5uYW1lO1xuXG4gIHRoaXMuY29ubmVjdGlvbi5zZW5kT3AobXNnKTtcbiAgIFxuICAvLyBUaGUgZmlyc3QgdGltZSB3ZSBzZW5kIGFuIG9wLCBpdHMgaWQgYW5kIHNlcXVlbmNlIG51bWJlciBpcyBpbXBsaWNpdC5cbiAgaWYgKCFkLnNyYykge1xuICAgIGQuc3JjID0gdGhpcy5jb25uZWN0aW9uLmlkO1xuICAgIGQuc2VxID0gdGhpcy5jb25uZWN0aW9uLnNlcSsrO1xuICB9XG59O1xuXG5cbi8vIEludGVybmFsIG1ldGhvZCBjYWxsZWQgdG8gZG8gdGhlIGFjdHVhbCB3b3JrIGZvciBzdWJtaXRPcCgpLCBjcmVhdGUoKSBhbmQgZGVsKCkuXG4vL1xuLy8gY29udGV4dCBpcyBvcHRpb25hbC5cbkRvYy5wcm90b3R5cGUuX3N1Ym1pdE9wRGF0YSA9IGZ1bmN0aW9uKG9wRGF0YSwgY29udGV4dCwgY2FsbGJhY2spIHtcbiAgLy9jb25zb2xlLmxvZygnc3VibWl0JywgSlNPTi5zdHJpbmdpZnkob3BEYXRhKSwgJ3Y9JywgdGhpcy52ZXJzaW9uKTtcblxuICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGNvbnRleHQ7XG4gICAgY29udGV4dCA9IHRydWU7IC8vIFRoZSBkZWZhdWx0IGNvbnRleHQgaXMgdHJ1ZS5cbiAgfVxuICBpZiAoY29udGV4dCA9PSBudWxsKSBjb250ZXh0ID0gdHJ1ZTtcblxuICB2YXIgZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7XG4gICAgZWxzZSBpZiAoY29uc29sZSkgY29uc29sZS53YXJuKCdGYWlsZWQgYXR0ZW1wdCB0byBzdWJtaXRPcDonLCBlcnIpO1xuICB9O1xuXG4gIGlmICh0aGlzLmxvY2tlZCkge1xuICAgIHJldHVybiBlcnJvcihcIkNhbm5vdCBjYWxsIHN1Ym1pdE9wIGZyb20gaW5zaWRlIGFuICdvcCcgZXZlbnQgaGFuZGxlclwiKTtcbiAgfVxuXG4gIC8vIFRoZSBvcERhdGEgY29udGFpbnMgZWl0aGVyIG9wLCBjcmVhdGUsIGRlbGV0ZSwgb3Igbm9uZSBvZiB0aGUgYWJvdmUgKGEgbm8tb3ApLlxuXG4gIGlmIChvcERhdGEub3ApIHtcbiAgICBpZiAoIXRoaXMudHlwZSkgcmV0dXJuIGVycm9yKCdEb2N1bWVudCBoYXMgbm90IGJlZW4gY3JlYXRlZCcpO1xuXG4gICAgLy8gVHJ5IHRvIG5vcm1hbGl6ZSB0aGUgb3AuIFRoaXMgcmVtb3ZlcyB0cmFpbGluZyBza2lwOjAncyBhbmQgdGhpbmdzIGxpa2UgdGhhdC5cbiAgICBpZiAodGhpcy50eXBlLm5vcm1hbGl6ZSkgb3BEYXRhLm9wID0gdGhpcy50eXBlLm5vcm1hbGl6ZShvcERhdGEub3ApO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdmbG9hdGluZyc7XG4gIH1cblxuICAvLyBBY3R1YWxseSBhcHBseSB0aGUgb3BlcmF0aW9uIGxvY2FsbHkuXG4gIHRoaXMuX290QXBwbHkob3BEYXRhLCBjb250ZXh0KTtcblxuICAvLyBJZiB0aGUgdHlwZSBzdXBwb3J0cyBjb21wb3NlcywgdHJ5IHRvIGNvbXBvc2UgdGhlIG9wZXJhdGlvbiBvbnRvIHRoZSBlbmRcbiAgLy8gb2YgdGhlIGxhc3QgcGVuZGluZyBvcGVyYXRpb24uXG4gIHZhciBlbnRyeSA9IHRoaXMucGVuZGluZ0RhdGFbdGhpcy5wZW5kaW5nRGF0YS5sZW5ndGggLSAxXTtcblxuICBpZiAodGhpcy5wZW5kaW5nRGF0YS5sZW5ndGggJiZcbiAgICAgIChlbnRyeSA9IHRoaXMucGVuZGluZ0RhdGFbdGhpcy5wZW5kaW5nRGF0YS5sZW5ndGggLSAxXSxcbiAgICAgICB0cnlDb21wb3NlKHRoaXMudHlwZSwgZW50cnksIG9wRGF0YSkpKSB7XG4gIH0gZWxzZSB7XG4gICAgZW50cnkgPSBvcERhdGE7XG4gICAgb3BEYXRhLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgb3BEYXRhLmNhbGxiYWNrcyA9IFtdO1xuICAgIHRoaXMucGVuZGluZ0RhdGEucHVzaChvcERhdGEpO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSBlbnRyeS5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cbiAgdGhpcy5fYWZ0ZXJPdEFwcGx5KG9wRGF0YSwgY29udGV4dCk7XG5cbiAgLy8gVGhlIGNhbGwgdG8gZmx1c2ggaXMgaW4gYSB0aW1lb3V0IHNvIGlmIHN1Ym1pdE9wKCkgaXMgY2FsbGVkIG11bHRpcGxlXG4gIC8vIHRpbWVzIGluIGEgY2xvc3VyZSBhbGwgdGhlIG9wcyBhcmUgY29tYmluZWQgYmVmb3JlIGJlaW5nIHNlbnQgdG8gdGhlXG4gIC8vIHNlcnZlci4gSXQgZG9lc24ndCBtYXR0ZXIgaWYgZmx1c2ggaXMgY2FsbGVkIGEgYnVuY2ggb2YgdGltZXMuXG4gIHZhciBfdGhpcyA9IHRoaXM7XG4gIHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkgeyBfdGhpcy5mbHVzaCgpOyB9KSwgMCk7XG59O1xuXG5cbi8vICoqKiBDbGllbnQgT1QgZW50cnlwb2ludHMuXG5cbi8vIFN1Ym1pdCBhbiBvcGVyYXRpb24gdG8gdGhlIGRvY3VtZW50LiBUaGUgb3AgbXVzdCBiZSB2YWxpZCBnaXZlbiB0aGUgY3VycmVudCBPVCB0eXBlLlxuRG9jLnByb3RvdHlwZS5zdWJtaXRPcCA9IGZ1bmN0aW9uKG9wLCBjb250ZXh0LCBjYWxsYmFjaykge1xuICB0aGlzLl9zdWJtaXRPcERhdGEoe29wOiBvcH0sIGNvbnRleHQsIGNhbGxiYWNrKTtcbn07XG5cbi8vIENyZWF0ZSB0aGUgZG9jdW1lbnQsIHdoaWNoIGluIFNoYXJlSlMgc2VtYW50aWNzIG1lYW5zIHRvIHNldCBpdHMgdHlwZS4gRXZlcnlcbi8vIG9iamVjdCBpbXBsaWNpdGx5IGV4aXN0cyBpbiB0aGUgZGF0YWJhc2UgYnV0IGhhcyBubyBkYXRhIGFuZCBubyB0eXBlLiBDcmVhdGVcbi8vIHNldHMgdGhlIHR5cGUgb2YgdGhlIG9iamVjdCBhbmQgY2FuIG9wdGlvbmFsbHkgc2V0IHNvbWUgaW5pdGlhbCBkYXRhIG9uIHRoZVxuLy8gb2JqZWN0LCBkZXBlbmRpbmcgb24gdGhlIHR5cGUuXG5Eb2MucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKHR5cGUsIGRhdGEsIGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFNldHRpbmcgdGhlIGNvbnRleHQgdG8gYmUgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGluIHRoaXMgY2FzZSBzbyBfc3VibWl0T3BEYXRhXG4gICAgLy8gY2FuIGhhbmRsZSB0aGUgZGVmYXVsdCB2YWx1ZSB0aGluZy5cbiAgICBjb250ZXh0ID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmICh0aGlzLnR5cGUpIHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCdEb2N1bWVudCBhbHJlYWR5IGV4aXN0cycpO1xuICAgIHJldHVybiBcbiAgfVxuXG4gIHRoaXMuX3N1Ym1pdE9wRGF0YSh7Y3JlYXRlOiB7dHlwZTp0eXBlLCBkYXRhOmRhdGF9fSwgY29udGV4dCwgY2FsbGJhY2spO1xufTtcblxuLy8gRGVsZXRlIHRoZSBkb2N1bWVudC4gVGhpcyBjcmVhdGVzIGFuZCBzdWJtaXRzIGEgZGVsZXRlIG9wZXJhdGlvbiB0byB0aGVcbi8vIHNlcnZlci4gRGVsZXRpbmcgcmVzZXRzIHRoZSBvYmplY3QncyB0eXBlIHRvIG51bGwgYW5kIGRlbGV0ZXMgaXRzIGRhdGEuIFRoZVxuLy8gZG9jdW1lbnQgc3RpbGwgZXhpc3RzLCBhbmQgc3RpbGwgaGFzIHRoZSB2ZXJzaW9uIGl0IHVzZWQgdG8gaGF2ZSBiZWZvcmUgeW91XG4vLyBkZWxldGVkIGl0ICh3ZWxsLCBvbGQgdmVyc2lvbiArMSkuXG5Eb2MucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gIGlmICghdGhpcy50eXBlKSB7XG4gICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygnRG9jdW1lbnQgZG9lcyBub3QgZXhpc3QnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLl9zdWJtaXRPcERhdGEoe2RlbDogdHJ1ZX0sIGNvbnRleHQsIGNhbGxiYWNrKTtcbn07XG5cblxuLy8gUGF1c2luZyBzdG9wcyB0aGUgZG9jdW1lbnQgZnJvbSBzZW5kaW5nIGFueSBvcGVyYXRpb25zIHRvIHRoZSBzZXJ2ZXIuXG5Eb2MucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGF1c2VkID0gdHJ1ZTtcbn07XG5cbkRvYy5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGF1c2VkID0gZmFsc2U7XG4gIHRoaXMuZmx1c2goKTtcbn07XG5cblxuLy8gKioqIFJlY2VpdmluZyBvcGVyYXRpb25zXG5cblxuLy8gVGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBzZXJ2ZXIgcmVqZWN0cyBvdXIgb3BlcmF0aW9ucyBmb3Igc29tZSByZWFzb24uXG4vLyBUaGVyZSdzIG5vdCBtdWNoIHdlIGNhbiBkbyBoZXJlIGlmIHRoZSBPVCB0eXBlIGlzIG5vbmludmVydGFibGUsIGJ1dCB0aGF0XG4vLyBzaG91bGRuJ3QgaGFwcGVuIHRvbyBtdWNoIGluIHJlYWwgbGlmZSBiZWNhdXNlIHJlYWRvbmx5IGRvY3VtZW50cyBzaG91bGQgYmVcbi8vIGZsYWdnZWQgYXMgc3VjaC4gKEkgc2hvdWxkIHByb2JhYmx5IGZpZ3VyZSBvdXQgYSBmbGFnIGZvciB0aGF0KS5cbi8vXG4vLyBUaGlzIGRvZXMgTk9UIGdldCBjYWxsZWQgaWYgb3VyIG9wIGZhaWxzIHRvIHJlYWNoIHRoZSBzZXJ2ZXIgZm9yIHNvbWUgcmVhc29uXG4vLyAtIHdlIG9wdGltaXN0aWNhbGx5IGFzc3VtZSBpdCdsbCBtYWtlIGl0IHRoZXJlIGV2ZW50dWFsbHkuXG5Eb2MucHJvdG90eXBlLl90cnlSb2xsYmFjayA9IGZ1bmN0aW9uKG9wRGF0YSkge1xuICAvLyBUaGlzIGlzIHByb2JhYmx5IGhvcnJpYmx5IGJyb2tlbi5cbiAgaWYgKG9wRGF0YS5jcmVhdGUpIHtcbiAgICB0aGlzLl9zZXRUeXBlKG51bGwpO1xuXG4gICAgLy8gSSBkb24ndCB0aGluayBpdHMgcG9zc2libGUgdG8gZ2V0IGhlcmUgaWYgd2UgYXJlbid0IGluIGEgZmxvYXRpbmcgc3RhdGUuXG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdmbG9hdGluZycpXG4gICAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgICBlbHNlXG4gICAgICBjb25zb2xlLndhcm4oJ1JvbGxiYWNrIGEgY3JlYXRlIGZyb20gc3RhdGUgJyArIHRoaXMuc3RhdGUpO1xuXG4gIH0gZWxzZSBpZiAob3BEYXRhLm9wICYmIG9wRGF0YS50eXBlLmludmVydCkge1xuICAgIG9wRGF0YS5vcCA9IG9wRGF0YS50eXBlLmludmVydChvcERhdGEub3ApO1xuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSB1bmRvIG9wZXJhdGlvbiBieSBhbnkgcGVuZGluZyBvcHMuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBlbmRpbmdEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB4Zih0aGlzLnBlbmRpbmdEYXRhW2ldLCBvcERhdGEpO1xuICAgIH1cblxuICAgIC8vIC4uLiBhbmQgYXBwbHkgaXQgbG9jYWxseSwgcmV2ZXJ0aW5nIHRoZSBjaGFuZ2VzLlxuICAgIC8vIFxuICAgIC8vIFRoaXMgb3BlcmF0aW9uIGlzIGFwcGxpZWQgdG8gbG9vayBsaWtlIGl0IGNvbWVzIGZyb20gYSByZW1vdGUgY29udGV4dC5cbiAgICAvLyBJJ20gc3RpbGwgbm90IDEwMCUgc3VyZSBhYm91dCB0aGlzIGZ1bmN0aW9uYWxpdHksIGJlY2F1c2UgaXRzIHJlYWxseSBhXG4gICAgLy8gbG9jYWwgb3AuIEJhc2ljYWxseSwgdGhlIHByb2JsZW0gaXMgdGhhdCBpZiB0aGUgY2xpZW50J3Mgb3AgaXMgcmVqZWN0ZWRcbiAgICAvLyBieSB0aGUgc2VydmVyLCB0aGUgZWRpdG9yIHdpbmRvdyBzaG91bGQgdXBkYXRlIHRvIHJlZmxlY3QgdGhlIHVuZG8uXG4gICAgdGhpcy5fb3RBcHBseShvcERhdGEsIGZhbHNlKTtcbiAgICB0aGlzLl9hZnRlck90QXBwbHkob3BEYXRhLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAob3BEYXRhLm9wIHx8IG9wRGF0YS5kZWwpIHtcbiAgICAvLyBUaGlzIGlzIHdoZXJlIGFuIHVuZG8gc3RhY2sgd291bGQgY29tZSBpbiBoYW5keS5cbiAgICB0aGlzLl9zZXRUeXBlKG51bGwpO1xuICAgIHRoaXMudmVyc2lvbiA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIFwiT3AgYXBwbHkgZmFpbGVkIGFuZCB0aGUgb3BlcmF0aW9uIGNvdWxkIG5vdCBiZSByZXZlcnRlZFwiKTtcblxuICAgIC8vIFRyaWdnZXIgYSBmZXRjaC4gSW4gb3VyIGludmFsaWQgc3RhdGUsIHdlIGNhbid0IHJlYWxseSBkbyBhbnl0aGluZy5cbiAgICB0aGlzLmZldGNoKCk7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG5Eb2MucHJvdG90eXBlLl9jbGVhckluZmxpZ2h0T3AgPSBmdW5jdGlvbihlcnJvcikge1xuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5pbmZsaWdodERhdGEuY2FsbGJhY2tzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGNhbGxiYWNrc1tpXShlcnJvciB8fCB0aGlzLmluZmxpZ2h0RGF0YS5lcnJvcik7XG4gIH1cblxuICB0aGlzLmluZmxpZ2h0RGF0YSA9IG51bGw7XG4gIHRoaXMuX2NsZWFyQWN0aW9uKCdzdWJtaXQnKTtcblxuICBpZiAoIXRoaXMucGVuZGluZ0RhdGEubGVuZ3RoKSB7XG4gICAgLy8gVGhpcyBpc24ndCBhIHZlcnkgZ29vZCBuYW1lLlxuICAgIHRoaXMuZW1pdCgnbm90aGluZyBwZW5kaW5nJyk7XG4gIH1cbn07XG5cbi8vIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIHNlcnZlciBhY2tub3dsZWRnZXMgYW4gb3BlcmF0aW9uIGZyb20gdGhlIGNsaWVudC5cbkRvYy5wcm90b3R5cGUuX29wQWNrbm93bGVkZ2VkID0gZnVuY3Rpb24obXNnKSB7XG4gIC8vIE91ciBpbmZsaWdodCBvcCBoYXMgYmVlbiBhY2tub3dsZWRnZWQsIHNvIHdlIGNhbiB0aHJvdyBhd2F5IHRoZSBpbmZsaWdodCBkYXRhLlxuICAvLyAoV2Ugd2VyZSBvbmx5IGhvbGRpbmcgb24gdG8gaXQgaW5jYXNlIHdlIG5lZWRlZCB0byByZXNlbmQgdGhlIG9wLilcbiAgaWYgKCF0aGlzLnN0YXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcEFja25vd2xlZGdlZCBjYWxsZWQgZnJvbSBhIG51bGwgc3RhdGUuIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbi4nKTtcbiAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAnZmxvYXRpbmcnKSB7XG4gICAgaWYgKCF0aGlzLmluZmxpZ2h0RGF0YS5jcmVhdGUpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFja25vd2xlZGdlIGFuIG9wLicpO1xuXG4gICAgLy8gT3VyIGNyZWF0ZSBoYXMgYmVlbiBhY2tub3dsZWRnZWQuIFRoaXMgaXMgdGhlIHNhbWUgYXMgaW5qZXN0aW5nIHNvbWUgZGF0YS5cbiAgICB0aGlzLnZlcnNpb24gPSBtc2cudjtcbiAgICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IF90aGlzLmVtaXQoJ3JlYWR5Jyk7IH0sIDApO1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIGFscmVhZHkgaGF2ZSBhIHNuYXBzaG90LiBUaGUgc25hcHNob3Qgc2hvdWxkIGJlIGF0IHRoZSBhY2tub3dsZWRnZWRcbiAgICAvLyB2ZXJzaW9uLCBiZWNhdXNlIHRoZSBzZXJ2ZXIgaGFzIHNlbnQgdXMgYWxsIHRoZSBvcHMgdGhhdCBoYXZlIGhhcHBlbmVkXG4gICAgLy8gYmVmb3JlIGFja25vd2xlZGdpbmcgb3VyIG9wLlxuXG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIC0gc29tZXRoaW5nIGlzIG91dCBvZiBvcmRlci5cbiAgICBpZiAobXNnLnYgIT09IHRoaXMudmVyc2lvbilcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJzaW9uIGZyb20gc2VydmVyLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiB5b3Ugc3VibWl0IG9wcyBpbiBhIHN1Ym1pdE9wIGNhbGxiYWNrLicpO1xuICB9XG4gIFxuICAvLyBUaGUgb3Agd2FzIGNvbW1pdHRlZCBzdWNjZXNzZnVsbHkuIEluY3JlbWVudCB0aGUgdmVyc2lvbiBudW1iZXJcbiAgdGhpcy52ZXJzaW9uKys7XG5cbiAgdGhpcy5fY2xlYXJJbmZsaWdodE9wKCk7XG59O1xuXG5cbi8vIEFQSSBDb250ZXh0c1xuXG4vLyBUaGlzIGNyZWF0ZXMgYW5kIHJldHVybnMgYW4gZWRpdGluZyBjb250ZXh0IHVzaW5nIHRoZSBjdXJyZW50IE9UIHR5cGUuXG5Eb2MucHJvdG90eXBlLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSB0aGlzLnR5cGU7XG4gIGlmICghdHlwZSkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHR5cGUnKTtcblxuICAvLyBJIGNvdWxkIHVzZSB0aGUgcHJvdG90eXBlIGNoYWluIHRvIGRvIHRoaXMgaW5zdGVhZCwgYnV0IE9iamVjdC5jcmVhdGVcbiAgLy8gaXNuJ3QgZGVmaW5lZCBvbiBvbGQgYnJvd3NlcnMuIFRoaXMgd2lsbCBiZSBmaW5lLlxuICB2YXIgZG9jID0gdGhpcztcbiAgdmFyIGNvbnRleHQgPSB7XG4gICAgZ2V0U25hcHNob3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRvYy5zbmFwc2hvdDtcbiAgICB9LFxuICAgIHN1Ym1pdE9wOiBmdW5jdGlvbihvcCwgY2FsbGJhY2spIHtcbiAgICAgIGRvYy5zdWJtaXRPcChvcCwgY29udGV4dCwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5kZXRhY2gpIHtcbiAgICAgICAgdGhpcy5kZXRhY2goKTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRldGFjaC5cbiAgICAgICAgZGVsZXRlIHRoaXMuZGV0YWNoO1xuICAgICAgfVxuICAgICAgLy8gSXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGFjdHVhbCBlZGl0aW5nQ29udGV4dHMgbGlzdCBuZXh0IHRpbWVcbiAgICAgIC8vIHdlIHJlY2VpdmUgYW4gb3Agb24gdGhlIGRvY3VtZW50IChhbmQgdGhlIGxpc3QgaXMgaXRlcmF0ZWQgdGhyb3VnaCkuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBpcyBwb3RlbnRpYWxseSBkb2RneSwgYWxsb3dpbmcgYSBtZW1vcnkgbGVhayBpZiB5b3UgY3JlYXRlICZcbiAgICAgIC8vIGRlc3Ryb3kgYSB3aG9sZSBidW5jaCBvZiBjb250ZXh0cyB3aXRob3V0IHJlY2VpdmluZyBvciBzZW5kaW5nIGFueSBvcHNcbiAgICAgIC8vIHRvIHRoZSBkb2N1bWVudC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9vbk9wO1xuICAgICAgdGhpcy5yZW1vdmUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBUaGlzIGlzIGRhbmdlcm91cywgYnV0IHJlYWxseSByZWFsbHkgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIEkgaG9wZSBwZW9wbGVcbiAgICAvLyBkb24ndCBkZXBlbmQgb24gaXQuXG4gICAgX2RvYzogdGhpcyxcbiAgfTtcblxuICBpZiAodHlwZS5hcGkpIHtcbiAgICAvLyBDb3B5IGV2ZXJ5dGhpbmcgZWxzZSBmcm9tIHRoZSB0eXBlJ3MgQVBJIGludG8gdGhlIGVkaXRpbmcgY29udGV4dC5cbiAgICBmb3IgKHZhciBrIGluIHR5cGUuYXBpKSB7XG4gICAgICBjb250ZXh0W2tdID0gdHlwZS5hcGlba107XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHQucHJvdmlkZXMgPSB7fTtcbiAgfVxuXG4gIHRoaXMuZWRpdGluZ0NvbnRleHRzLnB1c2goY29udGV4dCk7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5Eb2MucHJvdG90eXBlLnJlbW92ZUNvbnRleHRzID0gZnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5lZGl0aW5nQ29udGV4dHMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLmVkaXRpbmdDb250ZXh0c1tpXS5kZXN0cm95KCk7XG4gIH1cbiAgdGhpcy5lZGl0aW5nQ29udGV4dHMubGVuZ3RoID0gMDtcbn07XG5cbi8vIEEgQ29ubmVjdGlvbiB3cmFwcyBhIHBlcnNpc3RhbnQgQkMgY29ubmVjdGlvbiB0byBhIHNoYXJlanMgc2VydmVyLlxuLy9cbi8vIFRoaXMgY2xhc3MgaW1wbGVtZW50cyB0aGUgY2xpZW50IHNpZGUgb2YgdGhlIHByb3RvY29sIGRlZmluZWQgaGVyZTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3NlcGhnL1NoYXJlSlMvd2lraS9XaXJlLVByb3RvY29sXG4vL1xuLy8gVGhlIGVxdWl2YWxlbnQgc2VydmVyIGNvZGUgaXMgaW4gc3JjL3NlcnZlci9zZXNzaW9uLlxuLy9cbi8vIFRoaXMgZmlsZSBpcyBhIGJpdCBvZiBhIG1lc3MuIEknbSBkcmVhZGZ1bGx5IHNvcnJ5IGFib3V0IHRoYXQuIEl0IHBhc3NlcyBhbGwgdGhlIHRlc3RzLFxuLy8gc28gSSBoYXZlIGhvcGUgdGhhdCBpdHMgKmNvcnJlY3QqIGV2ZW4gaWYgaXRzIG5vdCBjbGVhbi5cbi8vXG4vLyBUbyBtYWtlIGEgY29ubmVjdGlvbiwgdXNlOlxuLy8gIG5ldyBzaGFyZWpzLkNvbm5lY3Rpb24oc29ja2V0KVxuLy9cbi8vIFRoZSBzb2NrZXQgc2hvdWxkIGxvb2sgbGlrZSBhIHdlYnNvY2tldCBjb25uZWN0aW9uLiBJdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4vLyAgc2VuZChtc2cpOiBTZW5kIHRoZSBnaXZlbiBtZXNzYWdlLiBtc2cgbWF5IGJlIGFuIG9iamVjdCAtIGlmIHNvLCB5b3UgbWlnaHQgbmVlZCB0byBKU09OLnN0cmluZ2lmeSBpdC5cbi8vICBjbG9zZSgpOiBEaXNjb25uZWN0IHRoZSBzZXNzaW9uXG4vL1xuLy8gIG9ubWVzc2FnZSA9IGZ1bmN0aW9uKG1zZyl7fTogRXZlbnQgaGFuZGxlciB3aGljaCBpcyBjYWxsZWQgd2hlbmV2ZXIgYSBtZXNzYWdlIGlzIHJlY2VpdmVkLiBUaGUgbWVzc2FnZVxuLy8gICAgIHBhc3NlZCBpbiBzaG91bGQgYWxyZWFkeSBiZSBhbiBvYmplY3QuIChJdCBtYXkgbmVlZCB0byBiZSBKU09OLnBhcnNlZClcbi8vICBvbmNsb3NlXG4vLyAgb25lcnJvclxuLy8gIG9ub3BlblxuLy8gIG9uY29ubmVjdGluZ1xuLy9cbi8vIFRoZSBzb2NrZXQgc2hvdWxkIHByb2JhYmx5IGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0LiBJZiBzbywgaXQgc2hvdWxkIGVtaXQgdGhlIGFwcHJvcHJpYXRlIGV2ZW50cyBhcyBpdFxuLy8gZGlzY29ubmVjdHMgJiByZWNvbm5lY3RzLiAob25jbG9zZSgpLCBvbmNvbm5lY3RpbmcoKSwgb25vcGVuKCkpLlxuXG52YXIgdHlwZXMsIERvYztcbmlmICh0eXBlb2YgYnJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHR5cGVzID0gYnJlcXVpcmUoJ290dHlwZXMnKTtcbiAgRG9jID0gYnJlcXVpcmUoJy4vZG9jJykuRG9jO1xuICBRdWVyeSA9IGJyZXF1aXJlKCcuL3F1ZXJ5JykuUXVlcnk7XG59IGVsc2Uge1xuICB0eXBlcyA9IHdpbmRvdy5vdHR5cGVzO1xuICBEb2MgPSBleHBvcnRzLkRvYztcbn1cblxudmFyIENvbm5lY3Rpb24gPSBleHBvcnRzLkNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoc29ja2V0KSB7XG4gIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuXG4gIC8vIE1hcCBvZiBjb2xsZWN0aW9uIC0+IGRvY05hbWUgLT4gZG9jIG9iamVjdCBmb3IgY3JlYXRlZCBkb2N1bWVudHMuXG4gIC8vIChjcmVhdGVkIGRvY3VtZW50cyBNVVNUIEJFIFVOSVFVRSlcbiAgdGhpcy5jb2xsZWN0aW9ucyA9IHt9O1xuXG4gIC8vIEVhY2ggcXVlcnkgaXMgY3JlYXRlZCB3aXRoIGFuIGlkIHRoYXQgdGhlIHNlcnZlciB1c2VzIHdoZW4gaXQgc2VuZHMgdXNcbiAgLy8gaW5mbyBhYm91dCB0aGUgcXVlcnkgKHVwZGF0ZXMsIGV0YykuXG4gIC8vdGhpcy5uZXh0UXVlcnlJZCA9IChNYXRoLnJhbmRvbSgpICogMTAwMCkgfDA7XG4gIHRoaXMubmV4dFF1ZXJ5SWQgPSAxO1xuXG4gIC8vIE1hcCBmcm9tIHF1ZXJ5IElEIC0+IHF1ZXJ5IG9iamVjdC5cbiAgdGhpcy5xdWVyaWVzID0ge307XG5cbiAgLy8gQ29ubmVjdGlvbiBzdGF0ZS5cbiAgLy8gXG4gIC8vIFN0YXRlczpcbiAgLy8gLSAnY29ubmVjdGluZyc6IFRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGVzdGFibGlzaGVkLCBidXQgd2UgZG9uJ3QgaGF2ZSBvdXIgY2xpZW50IElEIHlldFxuICAvLyAtICdjb25uZWN0ZWQnOiBXZSBoYXZlIGNvbm5lY3RlZCBhbmQgcmVjaWV2ZWQgb3VyIGNsaWVudCBJRC4gUmVhZHkgZm9yIGRhdGEuXG4gIC8vIC0gJ2Rpc2Nvbm5lY3RlZCc6IFRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZCwgYnV0IGl0IHdpbGwgcmVjb25uZWN0IGF1dG9tYXRpY2FsbHkuXG4gIC8vIC0gJ3N0b3BwZWQnOiBUaGUgY29ubmVjdGlvbiBpcyBjbG9zZWQsIGFuZCBzaG91bGQgbm90IHJlY29ubmVjdC5cbiAgdGhpcy5zdGF0ZSA9IChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMCB8fCBzb2NrZXQucmVhZHlTdGF0ZSA9PT0gMSkgPyAnY29ubmVjdGluZycgOiAnZGlzY29ubmVjdGVkJztcblxuICAvLyBUaGlzIGlzIGEgaGVscGVyIHZhcmlhYmxlIHRoZSBkb2N1bWVudCB1c2VzIHRvIHNlZSB3aGV0aGVyIHdlJ3JlIGN1cnJlbnRseVxuICAvLyBpbiBhICdsaXZlJyBzdGF0ZS4gSXQgaXMgdHJ1ZSBpZiB0aGUgc3RhdGUgaXMgJ2Nvbm5lY3RpbmcnIG9yICdjb25uZWN0ZWQnLlxuICB0aGlzLmNhblNlbmQgPSB0aGlzLnN0YXRlID09PSAnY29ubmVjdGluZyc7XG5cbiAgLy8gUmVzZXQgc29tZSBtb3JlIHN0YXRlIHZhcmlhYmxlcy5cbiAgdGhpcy5yZXNldCgpO1xuXG4gIHRoaXMuZGVidWcgPSBmYWxzZTtcbiAgLy8gSSdsbCBzdG9yZSB0aGUgbW9zdCByZWNlbnQgMTAwIG1lc3NhZ2VzIHNvIHdoZW4gZXJyb3JzIG9jY3VyIHdlIGNhbiBzZWUgd2hhdCBoYXBwZW5lZC5cbiAgdGhpcy5tZXNzYWdlQnVmZmVyID0gW107XG5cbiAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzO1xuXG4gIHZhciBoYW5kbGVNZXNzYWdlID0gZnVuY3Rpb24obXNnKSB7XG4gICAgLy8gU3dpdGNoIG9uIHRoZSBtZXNzYWdlIGFjdGlvbi4gTW9zdCBtZXNzYWdlcyBhcmUgZm9yIGRvY3VtZW50cyBhbmQgYXJlXG4gICAgLy8gaGFuZGxlZCBpbiB0aGUgZG9jIGNsYXNzLlxuICAgIHN3aXRjaCAobXNnLmEpIHtcbiAgICAgIGNhc2UgJ2luaXQnOlxuICAgICAgICAvLyBDbGllbnQgaW5pdGlhbGl6YXRpb24gcGFja2V0LiBUaGlzIGJ1bmRsZSBvZiBqb3kgY29udGFpbnMgb3VyIGNsaWVudFxuICAgICAgICAvLyBJRC5cbiAgICAgICAgaWYgKG1zZy5wcm90b2NvbCAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHByb3RvY29sIHZlcnNpb24nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtc2cuaWQgIT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjbGllbnQgaWQnKTtcblxuICAgICAgICBjb25uZWN0aW9uLmlkID0gbXNnLmlkO1xuICAgICAgICBjb25uZWN0aW9uLl9zZXRTdGF0ZSgnY29ubmVjdGVkJyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdxZmV0Y2gnOlxuICAgICAgY2FzZSAncXN1Yic6XG4gICAgICBjYXNlICdxJzpcbiAgICAgIGNhc2UgJ3F1bnN1Yic6XG4gICAgICAgIC8vIFF1ZXJ5IG1lc3NhZ2UuIFBhc3MgdGhpcyB0byB0aGUgYXBwcm9wcmlhdGUgcXVlcnkgb2JqZWN0LlxuICAgICAgICB2YXIgcXVlcnkgPSBjb25uZWN0aW9uLnF1ZXJpZXNbbXNnLmlkXTtcbiAgICAgICAgaWYgKHF1ZXJ5KSBxdWVyeS5fb25NZXNzYWdlKG1zZyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdicyc6XG4gICAgICAgIC8vIEJ1bGsgc3Vic2NyaWJlIHJlc3BvbnNlLiBUaGUgcmVzcG9uc2VzIGZvciBlYWNoIGRvY3VtZW50IGFyZSBjb250YWluZWQgd2l0aGluLlxuICAgICAgICB2YXIgcmVzdWx0ID0gbXNnLnM7XG4gICAgICAgIGZvciAodmFyIGNOYW1lIGluIHJlc3VsdCkge1xuICAgICAgICAgIGZvciAodmFyIGRvY05hbWUgaW4gcmVzdWx0W2NOYW1lXSkge1xuICAgICAgICAgICAgdmFyIGRvYyA9IGNvbm5lY3Rpb24uZ2V0KGNOYW1lLCBkb2NOYW1lKTtcbiAgICAgICAgICAgIGlmICghZG9jKSB7XG4gICAgICAgICAgICAgIGlmIChjb25zb2xlKSBjb25zb2xlLmVycm9yKCdNZXNzYWdlIGZvciB1bmtub3duIGRvYy4gSWdub3JpbmcuJywgbXNnKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtc2cgPSByZXN1bHRbY05hbWVdW2RvY05hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgIGRvYy5faGFuZGxlU3Vic2NyaWJlKG1zZy5lcnJvciwgbXNnLmRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhlIG1zZyB3aWxsIGJlIHRydWUgaWYgd2Ugc2ltcGx5IHJlc3Vic2NyaWJlZC5cbiAgICAgICAgICAgICAgZG9jLl9oYW5kbGVTdWJzY3JpYmUobnVsbCwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBEb2N1bWVudCBtZXNzYWdlLiBQdWxsIG91dCB0aGUgcmVmZXJlbmNlZCBkb2N1bWVudCBhbmQgZm9yd2FyZCB0aGVcbiAgICAgICAgLy8gbWVzc2FnZS5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb24sIGRvY05hbWUsIGRvYztcbiAgICAgICAgaWYgKG1zZy5kKSB7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGNvbm5lY3Rpb24uX2xhc3RSZWNlaXZlZENvbGxlY3Rpb24gPSBtc2cuYztcbiAgICAgICAgICBkb2NOYW1lID0gY29ubmVjdGlvbi5fbGFzdFJlY2VpdmVkRG9jID0gbXNnLmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IG1zZy5jID0gY29ubmVjdGlvbi5fbGFzdFJlY2VpdmVkQ29sbGVjdGlvbjtcbiAgICAgICAgICBkb2NOYW1lID0gbXNnLmQgPSBjb25uZWN0aW9uLl9sYXN0UmVjZWl2ZWREb2M7XG4gICAgICAgIH1cblxuICAgICAgICBkb2MgPSBjb25uZWN0aW9uLmdldChjb2xsZWN0aW9uLCBkb2NOYW1lKTtcbiAgICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgICBpZiAoY29uc29sZSkgY29uc29sZS5lcnJvcignTWVzc2FnZSBmb3IgdW5rbm93biBkb2MuIElnbm9yaW5nLicsIG1zZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZG9jLl9vbk1lc3NhZ2UobXNnKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQXR0YWNoIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBzb2NrZXQuXG4gIHNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHtcbiAgICBpZiAoY29ubmVjdGlvbi5kZWJ1ZykgY29uc29sZS5sb2coJ1JFQ1YnLCBKU09OLnN0cmluZ2lmeShtc2cpKTtcbiAgICBjb25uZWN0aW9uLm1lc3NhZ2VCdWZmZXIucHVzaCh7dDoobmV3IERhdGUoKSkudG9UaW1lU3RyaW5nKCksIHJlY3Y6SlNPTi5zdHJpbmdpZnkobXNnKX0pO1xuICAgIHdoaWxlIChjb25uZWN0aW9uLm1lc3NhZ2VCdWZmZXIubGVuZ3RoID4gMTAwKSB7XG4gICAgICBjb25uZWN0aW9uLm1lc3NhZ2VCdWZmZXIuc2hpZnQoKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaGFuZGxlTWVzc2FnZShtc2cpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbm5lY3Rpb24uZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgIC8vIFdlIGNvdWxkIGFsc28gcmVzdGFydCB0aGUgY29ubmVjdGlvbiBoZXJlLCBhbHRob3VnaCB0aGF0IG1pZ2h0IHJlc3VsdFxuICAgICAgLy8gaW4gaW5maW5pdGUgcmVjb25uZWN0aW9uIGJ1Z3MuXG4gICAgfVxuICB9XG5cbiAgc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbm5lY3Rpb24uX3NldFN0YXRlKCdjb25uZWN0aW5nJyk7XG4gIH07XG5cbiAgc29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gICAgLy8gVGhpcyBpc24ndCB0aGUgc2FtZSBhcyBhIHJlZ3VsYXIgZXJyb3IsIGJlY2F1c2UgaXQgd2lsbCBoYXBwZW4gbm9ybWFsbHlcbiAgICAvLyBmcm9tIHRpbWUgdG8gdGltZS4gWW91ciBjb25uZWN0aW9uIHNob3VsZCBwcm9iYWJseSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gcmVjb25uZWN0IGFueXdheSwgYnV0IHRoYXQgc2hvdWxkIGJlIHRyaWdnZXJlZCBvZmYgb25jbG9zZSBub3Qgb25lcnJvci5cbiAgICAvLyAob25jbG9zZSBoYXBwZW5zIHdoZW4gb25lcnJvciBnZXRzIGNhbGxlZCBhbnl3YXkpLlxuICAgIGNvbm5lY3Rpb24uZW1pdCgnY29ubmVjdGlvbiBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgY29ubmVjdGlvbi5fc2V0U3RhdGUoJ2Rpc2Nvbm5lY3RlZCcsIHJlYXNvbik7XG4gICAgaWYgKHJlYXNvbiA9PT0gJ0Nsb3NlZCcgfHwgcmVhc29uID09PSAnU3RvcHBlZCBieSBzZXJ2ZXInKSB7XG4gICAgICBjb25uZWN0aW9uLl9zZXRTdGF0ZSgnc3RvcHBlZCcsIHJlYXNvbik7XG4gICAgfVxuICB9O1xufVxuXG4vKiBXaHkgZG9lcyB0aGlzIGZ1bmN0aW9uIGV4aXN0PyBJcyBpdCBpbXBvcnRhbnQ/XG5Db25uZWN0aW9uLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbihlKSB7XG4gIHRoaXMuX3NldFN0YXRlKCdzdG9wcGVkJywgZSk7XG4gIHJldHVybiB0aGlzLmRpc2Nvbm5lY3QoZSk7XG59O1xuKi9cblxuQ29ubmVjdGlvbi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pZCA9IHRoaXMubGFzdEVycm9yID1cbiAgICB0aGlzLl9sYXN0UmVjZWl2ZWRDb2xsZWN0aW9uID0gdGhpcy5fbGFzdFJlY2VpdmVkRG9jID1cbiAgICB0aGlzLl9sYXN0U2VudENvbGxlY3Rpb24gPSB0aGlzLl9sYXN0U2VudERvYyA9IG51bGw7XG5cbiAgdGhpcy5zZXEgPSAxO1xufTtcblxuLy8gU2V0IHRoZSBjb25uZWN0aW9uJ3Mgc3RhdGUuIFRoZSBjb25uZWN0aW9uIGlzIGJhc2ljYWxseSBhIHN0YXRlIG1hY2hpbmUuXG5Db25uZWN0aW9uLnByb3RvdHlwZS5fc2V0U3RhdGUgPSBmdW5jdGlvbihuZXdTdGF0ZSwgZGF0YSkge1xuICBpZiAodGhpcy5zdGF0ZSA9PT0gbmV3U3RhdGUpIHJldHVybjtcblxuICAvLyBJIG1hZGUgYSBzdGF0ZSBkaWFncmFtLiBUaGUgb25seSBpbnZhbGlkIHRyYW5zaXRpb25zIGFyZSBnZXR0aW5nIHRvXG4gIC8vICdjb25uZWN0aW5nJyBmcm9tIGFueXdoZXJlIG90aGVyIHRoYW4gJ2Rpc2Nvbm5lY3RlZCcgYW5kIGdldHRpbmcgdG9cbiAgLy8gJ2Nvbm5lY3RlZCcgZnJvbSBhbnl3aGVyZSBvdGhlciB0aGFuICdjb25uZWN0aW5nJy5cbiAgaWYgKChuZXdTdGF0ZSA9PT0gJ2Nvbm5lY3RpbmcnICYmICh0aGlzLnN0YXRlICE9PSAnZGlzY29ubmVjdGVkJyAmJiB0aGlzLnN0YXRlICE9PSAnc3RvcHBlZCcpKVxuICAgICAgfHwgKG5ld1N0YXRlID09PSAnY29ubmVjdGVkJyAmJiB0aGlzLnN0YXRlICE9PSAnY29ubmVjdGluZycpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHRyYW5zaXRpb24gZGlyZWN0bHkgZnJvbSBcIiArIHRoaXMuc3RhdGUgKyBcIiB0byBcIiArIG5ld1N0YXRlKTtcbiAgfVxuXG4gIHRoaXMuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgdGhpcy5jYW5TZW5kID0gbmV3U3RhdGUgPT09ICdjb25uZWN0aW5nJyB8fCBuZXdTdGF0ZSA9PT0gJ2Nvbm5lY3RlZCc7XG5cbiAgaWYgKG5ld1N0YXRlID09PSAnZGlzY29ubmVjdGVkJykgdGhpcy5yZXNldCgpO1xuXG4gIHRoaXMuZW1pdChuZXdTdGF0ZSwgZGF0YSk7XG5cbiAgLy8gJiBFbWl0IHRoZSBldmVudCB0byBhbGwgZG9jdW1lbnRzICYgcXVlcmllcy4gSXQgbWlnaHQgbWFrZSBzZW5zZSBmb3JcbiAgLy8gZG9jdW1lbnRzIHRvIGp1c3QgcmVnaXN0ZXIgZm9yIHRoaXMgc3R1ZmYgdXNpbmcgZXZlbnRzLCBidXQgdGhhdCBjb3VwbGVzXG4gIC8vIGNvbm5lY3Rpb25zIGFuZCBkb2N1bWVudHMgYSBiaXQgbXVjaC4gSXRzIG5vdCBhIGJpZyBkZWFsIGVpdGhlciB3YXkuXG4gIHRoaXMub3BRdWV1ZSA9IFtdO1xuICB0aGlzLnN1YnNjcmliZURhdGEgPSB7fTtcbiAgZm9yICh2YXIgYyBpbiB0aGlzLmNvbGxlY3Rpb25zKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb25zW2NdO1xuICAgIGZvciAodmFyIGRvY05hbWUgaW4gY29sbGVjdGlvbikge1xuICAgICAgY29sbGVjdGlvbltkb2NOYW1lXS5fb25Db25uZWN0aW9uU3RhdGVDaGFuZ2VkKG5ld1N0YXRlLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuXG4gIC8vIEl0cyBpbXBvcnRhbnQgdGhhdCBvcGVyYXRpb25zIGFyZSByZXNlbnQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IHdlcmVcbiAgLy8gb3JpZ2luYWxseSBzZW50LiBJZiB3ZSBkb24ndCBzb3J0LCBhbiBvcCB3aXRoIGEgaGlnaCBzZXF1ZW5jZSBudW1iZXIgd2lsbFxuICAvLyBjb252aW5jZSB0aGUgc2VydmVyIG5vdCB0byBhY2NlcHQgYW55IG9wcyB3aXRoIGVhcmxpZXIgc2VxdWVuY2UgbnVtYmVycy5cbiAgdGhpcy5vcFF1ZXVlLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS5zZXEgLSBiLnNlcTsgfSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vcFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5zZW5kKHRoaXMub3BRdWV1ZVtpXSk7XG4gIH1cblxuICAvLyBPbmx5IHNlbmQgYnVsayBzdWJzY3JpYmUgaWYgbm90IGVtcHR5LiBJdHMgd2VpcmQgdXNpbmcgYSBmb3IgbG9vcCBmb3JcbiAgLy8gdGhpcywgYnV0IGl0IHdvcmtzIHByZXR0eSB3ZWxsLlxuICBmb3IgKHZhciBfX3VudXNlZCBpbiB0aGlzLnN1YnNjcmliZURhdGEpIHsgXG4gICAgdGhpcy5zZW5kKHthOidicycsIHM6dGhpcy5zdWJzY3JpYmVEYXRhfSk7XG4gICAgYnJlYWs7XG4gIH1cblxuICB0aGlzLm9wUXVldWUgPSBudWxsO1xuICB0aGlzLnN1YnNjcmliZURhdGEgPSBudWxsO1xuICBcbiAgLy8gTm8gYnVsayBzdWJzY3JpYmUgZm9yIHF1ZXJpZXMgeWV0LlxuICBmb3IgKHZhciBpZCBpbiB0aGlzLnF1ZXJpZXMpIHtcbiAgICB0aGlzLnF1ZXJpZXNbaWRdLl9vbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQobmV3U3RhdGUsIGRhdGEpO1xuICB9XG59O1xuXG4vLyBTbywgdGhlcmUncyBhbiBhd2Z1bCBlcnJvciBjYXNlIHdoZXJlIHRoZSBjbGllbnQgc2VuZHMgdHdvIHJlcXVlc3RzICh3aGljaFxuLy8gZmFpbCksIHRoZW4gcmVjb25uZWN0cy4gVGhlIGRvY3VtZW50cyBjb3VsZCBoYXZlIF9vbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWRcbi8vIGNhbGxlZCBpbiB0aGUgd3Jvbmcgb3JkZXIgYW5kIHRoZSBvcGVyYXRpb25zIHRoZW4gZ2V0IHNlbnQgd2l0aCByZXZlcnNlZFxuLy8gc2VxdWVuY2UgbnVtYmVycy4gVGhpcyBjYXVzZXMgdGhlIHNlcnZlciB0byBpbmNvcnJlY3RseSByZWplY3QgdGhlIHNlY29uZFxuLy8gc2VudCBvcC4gU28gd2UgbmVlZCB0byBxdWV1ZSB0aGUgb3BlcmF0aW9ucyB3aGlsZSB3ZSdyZSByZWNvbm5lY3RpbmcgYW5kXG4vLyByZXNlbmQgdGhlbSBpbiB0aGUgY29ycmVjdCBvcmRlci5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRPcCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgaWYgKHRoaXMub3BRdWV1ZSkge1xuICAgIHRoaXMub3BRdWV1ZS5wdXNoKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2VuZChkYXRhKTtcbiAgfVxufTtcblxuLy8gVGhpcyBpcyBjYWxsZWQgYnkgdGhlIGRvY3VtZW50IGNsYXNzIHdoZW4gdGhlIGRvY3VtZW50IHdhbnRzIHRvIHN1YnNjcmliZS5cbi8vIFdlIGNvdWxkIGp1c3Qgc2VuZCBhIHN1YnNjcmliZSBtZXNzYWdlLCBidXQgZHVyaW5nIHJlY29ubmVjdCB0aGF0IGNhdXNlcyBhXG4vLyBiYWppbGxpb24gbWVzc2FnZXMgb3ZlciBicm93c2VyY2hhbm5lbC4gRHVyaW5nIHJlY29ubmVjdCB3ZSdsbCBhZ2dyZWdhdGUsXG4vLyBzaW1pbGFyIHRvIHNlbmRPcC5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRTdWJzY3JpYmUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBuYW1lLCB2KSB7XG4gIGlmICh0aGlzLnN1YnNjcmliZURhdGEpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuc3Vic2NyaWJlRGF0YTtcbiAgICBpZiAoIWRhdGFbY29sbGVjdGlvbl0pIGRhdGFbY29sbGVjdGlvbl0gPSB7fTtcblxuICAgIGRhdGFbY29sbGVjdGlvbl1bbmFtZV0gPSB2IHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1zZyA9IHthOidzdWInLCBjOmNvbGxlY3Rpb24sIGQ6bmFtZX07XG4gICAgaWYgKHYgIT0gbnVsbCkgbXNnLnYgPSB2O1xuICAgIHRoaXMuc2VuZChtc2cpO1xuICB9XG59O1xuXG4vLyBTZW5kIGEgbWVzc2FnZSB0byB0aGUgY29ubmVjdGlvbi5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihtc2cpIHtcbiAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiU0VORFwiLCBKU09OLnN0cmluZ2lmeShtc2cpKTtcbiAgdGhpcy5tZXNzYWdlQnVmZmVyLnB1c2goe3Q6RGF0ZS5ub3coKSwgc2VuZDpKU09OLnN0cmluZ2lmeShtc2cpfSk7XG4gIHdoaWxlICh0aGlzLm1lc3NhZ2VCdWZmZXIubGVuZ3RoID4gMTAwKSB7XG4gICAgdGhpcy5tZXNzYWdlQnVmZmVyLnNoaWZ0KCk7XG4gIH1cblxuICBpZiAobXNnLmQpIHsgLy8gVGhlIGRvY3VtZW50IHRoZSBtZXNzYWdlIHJlZmVycyB0by4gTm90IHNldCBmb3IgcXVlcmllcy5cbiAgICB2YXIgY29sbGVjdGlvbiA9IG1zZy5jO1xuICAgIHZhciBkb2NOYW1lID0gbXNnLmQ7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT09IHRoaXMuX2xhc3RTZW50Q29sbGVjdGlvbiAmJiBkb2NOYW1lID09PSB0aGlzLl9sYXN0U2VudERvYykge1xuICAgICAgZGVsZXRlIG1zZy5jO1xuICAgICAgZGVsZXRlIG1zZy5kO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sYXN0U2VudENvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgdGhpcy5fbGFzdFNlbnREb2MgPSBkb2NOYW1lO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuc29ja2V0LnNlbmQobXNnKTtcbn07XG5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbigpIHtcbiAgLy8gVGhpcyB3aWxsIGNhbGwgQHNvY2tldC5vbmNsb3NlKCksIHdoaWNoIGluIHR1cm4gd2lsbCBlbWl0IHRoZSAnZGlzY29ubmVjdGVkJyBldmVudC5cbiAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbn07XG5cblxuLy8gKioqKiogRG9jdW1lbnQgbWFuYWdlbWVudFxuXG5Db25uZWN0aW9uLnByb3RvdHlwZS5nZXRFeGlzdGluZyA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIG5hbWUpIHtcbiAgaWYgKHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl0pIHJldHVybiB0aGlzLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dW25hbWVdO1xufTtcblxuQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0T3JDcmVhdGUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBuYW1lLCBkYXRhKSB7XG4gIGNvbnNvbGUudHJhY2UoJ2dldE9yQ3JlYXRlIGlzIGRlcHJlY2F0ZWQuIFVzZSBnZXQoKSBpbnN0ZWFkJyk7XG4gIHJldHVybiB0aGlzLmdldChjb2xsZWN0aW9uLCBuYW1lLCBkYXRhKTtcbn07XG5cbi8vIENyZWF0ZSBhIGRvY3VtZW50IGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFJldHVybnMgdGhlIGRvY3VtZW50IHN5bmNocm9ub3VzbHkuXG5Db25uZWN0aW9uLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBuYW1lLCBkYXRhKSB7XG4gIHZhciBkb2MgPSB0aGlzLmdldEV4aXN0aW5nKGNvbGxlY3Rpb24sIG5hbWUpO1xuXG4gIGlmICghZG9jKSB7XG4gICAgLy8gQ3JlYXRlIGl0LlxuICAgIGRvYyA9IG5ldyBEb2ModGhpcywgY29sbGVjdGlvbiwgbmFtZSk7XG5cbiAgICB2YXIgY29sbGVjdGlvbk9iamVjdCA9IHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl0gPVxuICAgICAgKHRoaXMuY29sbGVjdGlvbnNbY29sbGVjdGlvbl0gfHwge30pO1xuICAgIGNvbGxlY3Rpb25PYmplY3RbbmFtZV0gPSBkb2M7XG4gIH1cblxuICAvLyBFdmVuIGlmIHRoZSBkb2N1bWVudCBpc24ndCBuZXcsIGl0cyBwb3NzaWJsZSB0aGUgZG9jdW1lbnQgd2FzIGNyZWF0ZWRcbiAgLy8gbWFudWFsbHkgYW5kIHRoZW4gdHJpZWQgdG8gYmUgcmUtY3JlYXRlZCB3aXRoIGRhdGEgKHN1cHBvc2UgYSBxdWVyeVxuICAvLyByZXR1cm5zIHdpdGggZGF0YSBmb3IgdGhlIGRvY3VtZW50KS4gV2Ugc2hvdWxkIGh5ZHJhdGUgdGhlIGRvY3VtZW50XG4gIC8vIGltbWVkaWF0ZWx5IGlmIHdlIGNhbiBiZWNhdXNlIHRoZSBxdWVyeSBjYWxsYmFjayB3aWxsIGV4cGVjdCB0aGUgZG9jdW1lbnRcbiAgLy8gdG8gaGF2ZSBkYXRhLlxuICBpZiAoZGF0YSAmJiBkYXRhLmRhdGEgIT09IHVuZGVmaW5lZCAmJiAhZG9jLnN0YXRlKSB7XG4gICAgZG9jLmluamVzdERhdGEoZGF0YSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufTtcblxuLy8gQ2FsbCBkb2MuZGVzdHJveSgpXG5Db25uZWN0aW9uLnByb3RvdHlwZS5fZGVzdHJveURvYyA9IGZ1bmN0aW9uKGRvYykge1xuICB2YXIgY29sbGVjdGlvbk9iamVjdCA9IHRoaXMuY29sbGVjdGlvbnNbZG9jLmNvbGxlY3Rpb25dO1xuICBpZiAoIWNvbGxlY3Rpb25PYmplY3QpIHJldHVybjtcblxuICBkZWxldGUgY29sbGVjdGlvbk9iamVjdFtkb2MubmFtZV07XG5cbiAgLy8gRGVsZXRlIHRoZSBjb2xsZWN0aW9uIGNvbnRhaW5lciBpZiBpdHMgZW1wdHkuIFRoaXMgY291bGQgYmUgYSBzb3VyY2Ugb2ZcbiAgLy8gbWVtb3J5IGxlYWtzIGlmIHlvdSBzbG93bHkgbWFrZSBhIGJpbGxpb24gY29sbGVjdGlvbnMsIHdoaWNoIHlvdSBwcm9iYWJseVxuICAvLyB3b24ndCBkbyBhbnl3YXksIGJ1dCB3aGF0ZXZlci5cbiAgaWYgKCFoYXNLZXlzKGNvbGxlY3Rpb25PYmplY3QpKVxuICAgIGRlbGV0ZSB0aGlzLmNvbGxlY3Rpb25zW2RvYy5jb2xsZWN0aW9uXTtcbn07XG4gXG5mdW5jdGlvbiBoYXNLZXlzKG9iamVjdCkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8gKioqKiBRdWVyaWVzLlxuXG4vLyBIZWxwZXIgZm9yIGNyZWF0ZUZldGNoUXVlcnkgYW5kIGNyZWF0ZVN1YnNjcmliZVF1ZXJ5LCBiZWxvdy5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVRdWVyeSA9IGZ1bmN0aW9uKHR5cGUsIGNvbGxlY3Rpb24sIHEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlICE9PSAnZmV0Y2gnICYmIHR5cGUgIT09ICdzdWInKVxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBxdWVyeSB0eXBlOiAnICsgdHlwZSk7XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBpZCA9IHRoaXMubmV4dFF1ZXJ5SWQrKztcbiAgdmFyIHF1ZXJ5ID0gbmV3IFF1ZXJ5KHR5cGUsIHRoaXMsIGlkLCBjb2xsZWN0aW9uLCBxLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gIHRoaXMucXVlcmllc1tpZF0gPSBxdWVyeTtcbiAgcXVlcnkuX2V4ZWN1dGUoKTtcbiAgcmV0dXJuIHF1ZXJ5O1xufTtcblxuLy8gSW50ZXJuYWwgZnVuY3Rpb24uIFVzZSBxdWVyeS5kZXN0cm95KCkgdG8gcmVtb3ZlIHF1ZXJpZXMuXG5Db25uZWN0aW9uLnByb3RvdHlwZS5fZGVzdHJveVF1ZXJ5ID0gZnVuY3Rpb24ocXVlcnkpIHtcbiAgZGVsZXRlIHRoaXMucXVlcmllc1txdWVyeS5pZF07XG59O1xuXG4vLyBUaGUgcXVlcnkgb3B0aW9ucyBvYmplY3QgY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4vL1xuLy8gZG9jTW9kZTogV2hhdCB0byBkbyB3aXRoIGRvY3VtZW50cyB0aGF0IGFyZSBpbiB0aGUgcmVzdWx0IHNldC4gQ2FuIGJlXG4vLyAgIG51bGwvdW5kZWZpbmVkIChkZWZhdWx0KSwgJ2ZldGNoJyBvciAnc3Vic2NyaWJlJy4gRmV0Y2ggbW9kZSBpbmRpY2F0ZXNcbi8vICAgdGhhdCB0aGUgc2VydmVyIHNob3VsZCBzZW5kIGRvY3VtZW50IHNuYXBzaG90cyB0byB0aGUgY2xpZW50IGZvciBhbGwgcXVlcnlcbi8vICAgcmVzdWx0cy4gVGhlc2Ugd2lsbCBiZSBoeWRyYXRlZCBpbnRvIHRoZSBkb2N1bWVudCBvYmplY3RzIGJlZm9yZSB0aGUgcXVlcnlcbi8vICAgcmVzdWx0IGNhbGxiYWNrcyBhcmUgcmV0dXJuZWQuIFN1YnNjcmliZSBtb2RlIGdldHMgZG9jdW1lbnQgc25hcHNob3RzIGFuZFxuLy8gICBhdXRvbWF0aWNhbGx5IHN1YnNjcmliZXMgdGhlIGNsaWVudCB0byBhbGwgcmVzdWx0cy4gTm90ZSB0aGF0IHRoZVxuLy8gICBkb2N1bWVudHMgKldJTEwgTk9UKiBiZSBhdXRvbWF0aWNhbGx5IHVuc3Vic2NyaWJlZCB3aGVuIHRoZSBxdWVyeSBpc1xuLy8gICBkZXN0cm95ZWQuIChTaGFyZUpTIGRvZXNuJ3QgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb24gdG8gZG8gdGhhdCBzYWZlbHkpLlxuLy8gICBCZXdhcmUgb2YgbWVtb3J5IGxlYWtzIHdoZW4gdXNpbmcgdGhpcyBvcHRpb24uXG4vL1xuLy8gcG9sbDogRm9yY2FibHkgZW5hYmxlIG9yIGRpc2FibGUgcG9sbGluZyBtb2RlLiBQb2xsaW5nIG1vZGUgd2lsbCByZWlzc3VlIHRoZSBxdWVyeVxuLy8gICBldmVyeSB0aW1lIGFueXRoaW5nIGluIHRoZSBjb2xsZWN0aW9uIGNoYW5nZXMgKCEhKSBzbywgaXRzIHF1aXRlXG4vLyAgIGV4cGVuc2l2ZS4gIEl0IGlzIGF1dG9tYXRpY2FsbHkgZW5hYmxlZCBmb3IgcGFnaW5hdGVkIGFuZCBzb3J0ZWQgcXVlcmllcy5cbi8vICAgQnkgZGVmYXVsdCBxdWVyaWVzIHJ1biB3aXRoIHBvbGxpbmcgbW9kZSBkaXNhYmxlZDsgd2hpY2ggd2lsbCBvbmx5IGNoZWNrXG4vLyAgIGNoYW5nZWQgZG9jdW1lbnRzIHRvIHRlc3QgaWYgdGhleSBub3cgbWF0Y2ggdGhlIHNwZWNpZmllZCBxdWVyeS5cbi8vICAgU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcG9sbGluZyBtb2RlLCBvciB0cnVlIHRvIGVuYWJsZSBpdC4gSWYgeW91IGRvbid0XG4vLyAgIHNwZWNpZnkgYSBwb2xsIG9wdGlvbiwgcG9sbGluZyBtb2RlIGlzIGVuYWJsZWQgb3IgZGlzYWJsZWQgYXV0b21hdGljYWxseVxuLy8gICBieSB0aGUgcXVlcnkncyBiYWNrZW5kLlxuLy9cbi8vIGJhY2tlbmQ6IFNldCB0aGUgYmFja2VuZCBzb3VyY2UgZm9yIHRoZSBxdWVyeS4gWW91IGNhbiBhdHRhY2ggZGlmZmVyZW50XG4vLyAgIHF1ZXJ5IGJhY2tlbmRzIHRvIGxpdmVkYiBhbmQgcGljayB3aGljaCBvbmUgdGhlIHF1ZXJ5IHNob3VsZCBoaXQgdXNpbmdcbi8vICAgdGhpcyBwYXJhbWV0ZXIuXG4vL1xuLy8gcmVzdWx0czogKGV4cGVyaW1lbnRhbCkgSW5pdGlhbCBsaXN0IG9mIHJlc3VsdGFudCBkb2N1bWVudHMuIFRoaXMgaXNcbi8vICAgdXNlZnVsIGZvciByZWh5ZHJhdGluZyBxdWVyaWVzIHdoZW4geW91J3JlIHVzaW5nIGF1dG9GZXRjaCAvIGF1dG9TdWJzY3JpYmVcbi8vICAgc28gdGhlIHNlcnZlciBkb2Vzbid0IGhhdmUgdG8gc2VuZCBvdmVyIHNuYXBzaG90cyBmb3IgZG9jdW1lbnRzIHRoZSBjbGllbnRcbi8vICAgYWxyZWFkeSBrbm93cyBhYm91dC4gVGhpcyBpcyBleHBlcmltZW50YWwgLSB0aGUgQVBJIG1heSBjaGFuZ2UgaW4gdXBjb21pbmdcbi8vICAgdmVyc2lvbnMuXG5cbi8vIENyZWF0ZSBhIGZldGNoIHF1ZXJ5LiBGZXRjaCBxdWVyaWVzIGFyZSBvbmx5IGlzc3VlZCBvbmNlLCByZXR1cm5pbmcgdGhlXG4vLyByZXN1bHRzIGRpcmVjdGx5IGludG8gdGhlIGNhbGxiYWNrLlxuLy9cbi8vIFRoZSBpbmRleCBpcyBzcGVjaWZpYyB0byB0aGUgc291cmNlLCBidXQgaWYgeW91J3JlIHVzaW5nIG1vbmdvZGIgaXQnbGwgYmVcbi8vIHRoZSBjb2xsZWN0aW9uIHRvIHdoaWNoIHRoZSBxdWVyeSBpcyBtYWRlLlxuLy8gVGhlIGNhbGxiYWNrIHNob3VsZCBoYXZlIHRoZSBzaWduYXR1cmUgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdHMsIGV4dHJhRGF0YSlcbi8vIHdoZXJlIHJlc3VsdHMgaXMgYSBsaXN0IG9mIERvYyBvYmplY3RzLlxuQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlRmV0Y2hRdWVyeSA9IGZ1bmN0aW9uKGluZGV4LCBxLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlUXVlcnkoJ2ZldGNoJywgaW5kZXgsIHEsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbn07XG5cbi8vIENyZWF0ZSBhIHN1YnNjcmliZSBxdWVyeS4gU3Vic2NyaWJlIHF1ZXJpZXMgcmV0dXJuIHdpdGggdGhlIGluaXRpYWwgZGF0YVxuLy8gdGhyb3VnaCB0aGUgY2FsbGJhY2ssIHRoZW4gdXBkYXRlIHRoZW1zZWx2ZXMgd2hlbmV2ZXIgdGhlIHF1ZXJ5IHJlc3VsdCBzZXRcbi8vIGNoYW5nZXMgdmlhIHRoZWlyIG93biBldmVudCBlbWl0dGVyLlxuLy9cbi8vIElmIHByZXNlbnQsIHRoZSBjYWxsYmFjayBzaG91bGQgaGF2ZSB0aGUgc2lnbmF0dXJlIGZ1bmN0aW9uKGVycm9yLCByZXN1bHRzLCBleHRyYURhdGEpXG4vLyB3aGVyZSByZXN1bHRzIGlzIGEgbGlzdCBvZiBEb2Mgb2JqZWN0cy5cbkNvbm5lY3Rpb24ucHJvdG90eXBlLmNyZWF0ZVN1YnNjcmliZVF1ZXJ5ID0gZnVuY3Rpb24oaW5kZXgsIHEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVRdWVyeSgnc3ViJywgaW5kZXgsIHEsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbn07XG5cbmlmICh0eXBlb2YgYnJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gIE1pY3JvRXZlbnQgPSBicmVxdWlyZSgnLi9taWNyb2V2ZW50Jyk7XG59XG5cbk1pY3JvRXZlbnQubWl4aW4oQ29ubmVjdGlvbik7XG5cbi8qIFRoaXMgY29udGFpbnMgdGhlIHRleHRhcmVhIGJpbmRpbmcgZm9yIFNoYXJlSlMuIFRoaXMgYmluZGluZyBpcyByZWFsbHlcbiAqIHNpbXBsZSwgYW5kIGEgYml0IHNsb3cgb24gYmlnIGRvY3VtZW50cyAoSXRzIE8oTikuIEhvd2V2ZXIsIGl0IGJyZXF1aXJlcyBub1xuICogY2hhbmdlcyB0byB0aGUgRE9NIGFuZCBubyBoZWF2eSBsaWJyYXJpZXMgbGlrZSBhY2UuIEl0IHdvcmtzIGZvciBhbnkga2luZCBvZlxuICogdGV4dCBpbnB1dCBmaWVsZC5cbiAqXG4gKiBZb3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhpcyBiaW5kaW5nIGZvciBzbWFsbCBmaWVsZHMgb24gZm9ybXMgYW5kIHN1Y2guXG4gKiBGb3IgY29kZSBlZGl0b3JzIG9yIHJpY2ggdGV4dCBlZGl0b3JzIG9yIHdoYXRldmVyLCBJIHJlY29tbWVuZCBzb21ldGhpbmdcbiAqIGhlYXZpZXIuXG4gKi9cblxuXG4vKiBhcHBseUNoYW5nZSBjcmVhdGVzIHRoZSBlZGl0cyB0byBjb252ZXJ0IG9sZHZhbCAtPiBuZXd2YWwuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHRleHQgZWxlbWVudCBpcyBjaGFuZ2VkLlxuICogQmVjYXVzZSBjaGFuZ2VzIGFyZSBhbHdheXMgbG9jYWxpc2VkLCB0aGUgZGlmZmluZyBpcyBxdWl0ZSBlYXN5LiBXZSBzaW1wbHlcbiAqIHNjYW4gaW4gZnJvbSB0aGUgc3RhcnQgYW5kIHNjYW4gaW4gZnJvbSB0aGUgZW5kIHRvIGlzb2xhdGUgdGhlIGVkaXRlZCByYW5nZSxcbiAqIHRoZW4gZGVsZXRlIGV2ZXJ5dGhpbmcgdGhhdCB3YXMgcmVtb3ZlZCAmIGFkZCBldmVyeXRoaW5nIHRoYXQgd2FzIGFkZGVkLlxuICogVGhpcyB3b3VsZG4ndCB3b3JrIGZvciBjb21wbGV4IGNoYW5nZXMsIGJ1dCB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWRcbiAqIG9uIGtleXN0cm9rZSAtIHNvIHRoZSBlZGl0cyB3aWxsIG1vc3RseSBqdXN0IGJlIHNpbmdsZSBjaGFyYWN0ZXIgY2hhbmdlcy5cbiAqIFNvbWV0aW1lcyB0aGV5J2xsIHBhc3RlIHRleHQgb3ZlciBvdGhlciB0ZXh0LCBidXQgZXZlbiB0aGVuIHRoZSBkaWZmXG4gKiBnZW5lcmF0ZWQgYnkgdGhpcyBhbGdvcml0aG0gaXMgY29ycmVjdC5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBpcyBPKE4pLiBJIHN1c3BlY3QgeW91IGNvdWxkIHNwZWVkIGl0IHVwIHNvbWVob3cgdXNpbmcgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xudmFyIGFwcGx5Q2hhbmdlID0gZnVuY3Rpb24oY3R4LCBvbGR2YWwsIG5ld3ZhbCkge1xuICAvLyBTdHJpbmdzIGFyZSBpbW11dGFibGUgYW5kIGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5LiBJIHRoaW5rIHRoaXMgdGVzdCBpcyBPKDEpLCBzbyBpdHMgd29ydGggZG9pbmcuXG4gIGlmIChvbGR2YWwgPT09IG5ld3ZhbCkgcmV0dXJuO1xuXG4gIHZhciBjb21tb25TdGFydCA9IDA7XG4gIHdoaWxlIChvbGR2YWwuY2hhckF0KGNvbW1vblN0YXJ0KSA9PT0gbmV3dmFsLmNoYXJBdChjb21tb25TdGFydCkpIHtcbiAgICBjb21tb25TdGFydCsrO1xuICB9XG5cbiAgdmFyIGNvbW1vbkVuZCA9IDA7XG4gIHdoaWxlIChvbGR2YWwuY2hhckF0KG9sZHZhbC5sZW5ndGggLSAxIC0gY29tbW9uRW5kKSA9PT0gbmV3dmFsLmNoYXJBdChuZXd2YWwubGVuZ3RoIC0gMSAtIGNvbW1vbkVuZCkgJiZcbiAgICAgIGNvbW1vbkVuZCArIGNvbW1vblN0YXJ0IDwgb2xkdmFsLmxlbmd0aCAmJiBjb21tb25FbmQgKyBjb21tb25TdGFydCA8IG5ld3ZhbC5sZW5ndGgpIHtcbiAgICBjb21tb25FbmQrKztcbiAgfVxuXG4gIGlmIChvbGR2YWwubGVuZ3RoICE9PSBjb21tb25TdGFydCArIGNvbW1vbkVuZCkge1xuICAgIGN0eC5yZW1vdmUoY29tbW9uU3RhcnQsIG9sZHZhbC5sZW5ndGggLSBjb21tb25TdGFydCAtIGNvbW1vbkVuZCk7XG4gIH1cbiAgaWYgKG5ld3ZhbC5sZW5ndGggIT09IGNvbW1vblN0YXJ0ICsgY29tbW9uRW5kKSB7XG4gICAgY3R4Lmluc2VydChjb21tb25TdGFydCwgbmV3dmFsLnNsaWNlKGNvbW1vblN0YXJ0LCBuZXd2YWwubGVuZ3RoIC0gY29tbW9uRW5kKSk7XG4gIH1cbn07XG5cbi8vIEF0dGFjaCBhIHRleHRhcmVhIHRvIGEgZG9jdW1lbnQncyBlZGl0aW5nIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvbnRleHQgaXMgb3B0aW9uYWwsIGFuZCB3aWxsIGJlIGNyZWF0ZWQgZnJvbSB0aGUgZG9jdW1lbnQgaWYgaXRzIG5vdFxuLy8gc3BlY2lmaWVkLlxud2luZG93LnNoYXJlanMuRG9jLnByb3RvdHlwZS5hdHRhY2hUZXh0YXJlYSA9IGZ1bmN0aW9uKGVsZW0sIGN0eCkge1xuICBpZiAoIWN0eCkgY3R4ID0gdGhpcy5jcmVhdGVDb250ZXh0KCk7XG5cbiAgaWYgKCFjdHgucHJvdmlkZXMudGV4dCkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYXR0YWNoIHRvIG5vbi10ZXh0IGRvY3VtZW50Jyk7XG5cbiAgZWxlbS52YWx1ZSA9IGN0eC5nZXQoKTtcblxuICAvLyBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgZWxlbWVudCdzIHRleHQgaXMgc3RvcmVkIHNvIHdlIGNhbiBxdWlja2x5IGNoZWNrXG4gIC8vIGlmIGl0cyBiZWVuIGNoYW5nZWQgaW4gdGhlIGV2ZW50IGhhbmRsZXJzLiBUaGlzIGlzIG1vc3RseSBmb3IgYnJvd3NlcnMgb25cbiAgLy8gd2luZG93cywgd2hlcmUgdGhlIGNvbnRlbnQgY29udGFpbnMgXFxyXFxuIG5ld2xpbmVzLiBhcHBseUNoYW5nZSgpIGlzIG9ubHlcbiAgLy8gY2FsbGVkIGFmdGVyIHRoZSBcXHJcXG4gbmV3bGluZXMgYXJlIGNvbnZlcnRlZCwgYW5kIHRoYXQgY2hlY2sgaXMgcXVpdGVcbiAgLy8gc2xvdy4gU28gd2UgYWxzbyBjYWNoZSB0aGUgc3RyaW5nIGJlZm9yZSBjb252ZXJzaW9uIHNvIHdlIGNhbiBkbyBhIHF1aWNrXG4gIC8vIGNoZWNrIGluY2FzZSB0aGUgY29udmVyc2lvbiBpc24ndCBuZWVkZWQuXG4gIHZhciBwcmV2dmFsdWU7XG5cbiAgLy8gUmVwbGFjZSB0aGUgY29udGVudCBvZiB0aGUgdGV4dCBhcmVhIHdpdGggbmV3VGV4dCwgYW5kIHRyYW5zZm9ybSB0aGVcbiAgLy8gY3VycmVudCBjdXJzb3IgYnkgdGhlIHNwZWNpZmllZCBmdW5jdGlvbi5cbiAgdmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24obmV3VGV4dCwgdHJhbnNmb3JtQ3Vyc29yKSB7XG4gICAgaWYgKHRyYW5zZm9ybUN1cnNvcikge1xuICAgICAgdmFyIG5ld1NlbGVjdGlvbiA9IFt0cmFuc2Zvcm1DdXJzb3IoZWxlbS5zZWxlY3Rpb25TdGFydCksIHRyYW5zZm9ybUN1cnNvcihlbGVtLnNlbGVjdGlvbkVuZCldO1xuICAgIH1cblxuICAgIC8vIEZpeGF0ZSB0aGUgd2luZG93J3Mgc2Nyb2xsIHdoaWxlIHdlIHNldCB0aGUgZWxlbWVudCdzIHZhbHVlLiBPdGhlcndpc2VcbiAgICAvLyB0aGUgYnJvd3NlciBzY3JvbGxzIHRvIHRoZSBlbGVtZW50LlxuICAgIHZhciBzY3JvbGxUb3AgPSBlbGVtLnNjcm9sbFRvcDtcbiAgICBlbGVtLnZhbHVlID0gbmV3VGV4dDtcbiAgICBwcmV2dmFsdWUgPSBlbGVtLnZhbHVlOyAvLyBOb3QgZG9uZSBvbiBvbmUgbGluZSBzbyB0aGUgYnJvd3NlciBjYW4gZG8gbmV3bGluZSBjb252ZXJzaW9uLlxuICAgIGlmIChlbGVtLnNjcm9sbFRvcCAhPT0gc2Nyb2xsVG9wKSBlbGVtLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcblxuICAgIC8vIFNldHRpbmcgdGhlIHNlbGVjdGlvbiBtb3ZlcyB0aGUgY3Vyc29yLiBXZSdsbCBqdXN0IGhhdmUgdG8gbGV0IHlvdXJcbiAgICAvLyBjdXJzb3IgZHJpZnQgaWYgdGhlIGVsZW1lbnQgaXNuJ3QgYWN0aXZlLCB0aG91Z2ggdXN1YWxseSB1c2VycyBkb24ndFxuICAgIC8vIGNhcmUuXG4gICAgaWYgKG5ld1NlbGVjdGlvbiAmJiB3aW5kb3cuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWxlbSkge1xuICAgICAgZWxlbS5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvblswXTtcbiAgICAgIGVsZW0uc2VsZWN0aW9uRW5kID0gbmV3U2VsZWN0aW9uWzFdO1xuICAgIH1cbiAgfTtcblxuICByZXBsYWNlVGV4dChjdHguZ2V0KCkpO1xuXG5cbiAgLy8gKioqIHJlbW90ZSAtPiBsb2NhbCBjaGFuZ2VzXG5cbiAgY3R4Lm9uSW5zZXJ0ID0gZnVuY3Rpb24ocG9zLCB0ZXh0KSB7XG4gICAgdmFyIHRyYW5zZm9ybUN1cnNvciA9IGZ1bmN0aW9uKGN1cnNvcikge1xuICAgICAgcmV0dXJuIHBvcyA8IGN1cnNvciA/IGN1cnNvciArIHRleHQubGVuZ3RoIDogY3Vyc29yO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgYW55IHdpbmRvdy1zdHlsZSBuZXdsaW5lIGNoYXJhY3RlcnMuIFdpbmRvd3MgaW5zZXJ0cyB0aGVzZSwgYW5kXG4gICAgLy8gdGhleSBtZXNzIHVwIHRoZSBnZW5lcmF0ZWQgZGlmZi5cbiAgICB2YXIgcHJldiA9IGVsZW0udmFsdWUucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKTtcbiAgICByZXBsYWNlVGV4dChwcmV2LnNsaWNlKDAsIHBvcykgKyB0ZXh0ICsgcHJldi5zbGljZShwb3MpLCB0cmFuc2Zvcm1DdXJzb3IpO1xuICB9O1xuXG4gIGN0eC5vblJlbW92ZSA9IGZ1bmN0aW9uKHBvcywgbGVuZ3RoKSB7XG4gICAgdmFyIHRyYW5zZm9ybUN1cnNvciA9IGZ1bmN0aW9uKGN1cnNvcikge1xuICAgICAgLy8gSWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGRlbGV0ZWQgcmVnaW9uLCB3ZSBvbmx5IHdhbnQgdG8gbW92ZSBiYWNrIHRvIHRoZSBzdGFydFxuICAgICAgLy8gb2YgdGhlIHJlZ2lvbi4gSGVuY2UgdGhlIE1hdGgubWluLlxuICAgICAgcmV0dXJuIHBvcyA8IGN1cnNvciA/IGN1cnNvciAtIE1hdGgubWluKGxlbmd0aCwgY3Vyc29yIC0gcG9zKSA6IGN1cnNvcjtcbiAgICB9O1xuXG4gICAgdmFyIHByZXYgPSBlbGVtLnZhbHVlLnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJyk7XG4gICAgcmVwbGFjZVRleHQocHJldi5zbGljZSgwLCBwb3MpICsgcHJldi5zbGljZShwb3MgKyBsZW5ndGgpLCB0cmFuc2Zvcm1DdXJzb3IpO1xuICB9O1xuXG5cbiAgLy8gKioqIGxvY2FsIC0+IHJlbW90ZSBjaGFuZ2VzXG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgb3BlcmF0aW9ucyBmcm9tIHRoZSBjaGFuZ2VkIGNvbnRlbnQgaW4gdGhlIHRleHRhcmVhLlxuICB2YXIgZ2VuT3AgPSBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIEluIGEgdGltZW91dCBzbyB0aGUgYnJvd3NlciBoYXMgdGltZSB0byBwcm9wb2dhdGUgdGhlIGV2ZW50J3MgY2hhbmdlcyB0byB0aGUgRE9NLlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZWxlbS52YWx1ZSAhPT0gcHJldnZhbHVlKSB7XG4gICAgICAgIHByZXZ2YWx1ZSA9IGVsZW0udmFsdWU7XG4gICAgICAgIGFwcGx5Q2hhbmdlKGN0eCwgY3R4LmdldCgpLCBlbGVtLnZhbHVlLnJlcGxhY2UoL1xcclxcbi9nLCAnXFxuJykpO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9O1xuXG4gIHZhciBldmVudE5hbWVzID0gWyd0ZXh0SW5wdXQnLCAna2V5ZG93bicsICdrZXl1cCcsICdzZWxlY3QnLCAnY3V0JywgJ3Bhc3RlJ107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBlID0gZXZlbnROYW1lc1tpXTtcbiAgICBpZiAoZWxlbS5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoZSwgZ2VuT3AsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5hdHRhY2hFdmVudCgnb24nICsgZSwgZ2VuT3ApO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5kZXRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlID0gZXZlbnROYW1lc1tpXTtcbiAgICAgIGlmIChlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKGUsIGdlbk9wLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtLmRldGFjaEV2ZW50KCdvbicgKyBlLCBnZW5PcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBjdHg7XG59O1xuXG52YXIgRG9jO1xuaWYgKHR5cGVvZiBicmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgRG9jID0gYnJlcXVpcmUoJy4vZG9jJykuRG9jO1xufVxuXG4vLyBRdWVyaWVzIGFyZSBsaXZlIHJlcXVlc3RzIHRvIHRoZSBkYXRhYmFzZSBmb3IgcGFydGljdWxhciBzZXRzIG9mIGZpZWxkcy5cbi8vXG4vLyBUaGUgc2VydmVyIGFjdGl2ZWx5IHRlbGxzIHRoZSBjbGllbnQgd2hlbiB0aGVyZSdzIG5ldyBkYXRhIHRoYXQgbWF0Y2hlc1xuLy8gYSBzZXQgb2YgY29uZGl0aW9ucy5cbnZhciBRdWVyeSA9IGV4cG9ydHMuUXVlcnkgPSBmdW5jdGlvbih0eXBlLCBjb25uZWN0aW9uLCBpZCwgY29sbGVjdGlvbiwgcXVlcnksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIC8vICdmZXRjaCcgb3IgJ3N1YidcbiAgdGhpcy50eXBlID0gdHlwZTtcblxuICB0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICB0aGlzLmlkID0gaWQ7XG4gIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cbiAgLy8gVGhlIHF1ZXJ5IGl0c2VsZi4gRm9yIG1vbmdvLCB0aGlzIHNob3VsZCBsb29rIHNvbWV0aGluZyBsaWtlIHtcImRhdGEueFwiOjV9XG4gIHRoaXMucXVlcnkgPSBxdWVyeTtcblxuICAvLyBSZXN1bHRhbnQgZG9jdW1lbnQgYWN0aW9uIGZvciB0aGUgc2VydmVyLiBGZXRjaCBtb2RlIHdpbGwgYXV0b21hdGljYWxseVxuICAvLyBmZXRjaCBhbGwgcmVzdWx0cy4gU3Vic2NyaWJlIG1vZGUgd2lsbCBhdXRvbWF0aWNhbGx5IHN1YnNjcmliZSBhbGxcbiAgLy8gcmVzdWx0cy4gUmVzdWx0cyBhcmUgbmV2ZXIgdW5zdWJzY3JpYmVkLlxuICB0aGlzLmRvY01vZGUgPSBvcHRpb25zLmRvY01vZGU7IC8vIHVuZGVmaW5lZCwgJ2ZldGNoJyBvciAnc3ViJy5cbiAgaWYgKHRoaXMuZG9jTW9kZSA9PT0gJ3N1YnNjcmliZScpIHRoaXMuZG9jTW9kZSA9ICdzdWInO1xuXG4gIC8vIERvIHdlIHJlcG9sbCB0aGUgZW50aXJlIHF1ZXJ5IHdoZW5ldmVyIGFueXRoaW5nIGNoYW5nZXM/IChBcyBvcHBvc2VkIHRvXG4gIC8vIGp1c3QgcG9sbGluZyB0aGUgY2hhbmdlZCBpdGVtKS4gVGhpcyBuZWVkcyB0byBiZSBlbmFibGVkIHRvIGJlIGFibGUgdG8gdXNlXG4gIC8vIG9yZGVyZWQgcXVlcmllcyAoc29ydGJ5OikgYW5kIHBhZ2luYXRlZCBxdWVyaWVzLiBTZXQgdG8gdW5kZWZpbmVkLCBpdCB3aWxsXG4gIC8vIGJlIGVuYWJsZWQgLyBkaXNhYmxlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIHRoZSBxdWVyeSdzIHByb3BlcnRpZXMuXG4gIHRoaXMucG9sbCA9IG9wdGlvbnMucG9sbDtcblxuICAvLyBUaGUgYmFja2VuZCB3ZSBhY3R1YWxseSBoaXQuIElmIHRoaXMgaXNuJ3QgZGVmaW5lZCwgaXQgaGl0cyB0aGUgc25hcHNob3RcbiAgLy8gZGF0YWJhc2UuIE90aGVyd2lzZSB0aGlzIGNhbiBiZSB1c2VkIHRvIGhpdCBhbm90aGVyIGNvbmZpZ3VyZWQgcXVlcnlcbiAgLy8gaW5kZXguXG4gIHRoaXMuYmFja2VuZCA9IG9wdGlvbnMuYmFja2VuZCB8fCBvcHRpb25zLnNvdXJjZTtcblxuICAvLyBBIGxpc3Qgb2YgcmVzdWx0aW5nIGRvY3VtZW50cy4gVGhlc2UgYXJlIGFjdHVhbCBkb2N1bWVudHMsIGNvbXBsZXRlIHdpdGhcbiAgLy8gZGF0YSBhbmQgYWxsIHRoZSByZXN0LiBJZiBmZXRjaCBpcyBmYWxzZSwgdGhlc2UgZG9jdW1lbnRzIHdpbGwgbm90XG4gIC8vIGhhdmUgYW55IGRhdGEuIFlvdSBzaG91bGQgbWFudWFsbHkgY2FsbCBmZXRjaCgpIG9yIHN1YnNjcmliZSgpIG9uIHRoZW0uXG4gIC8vXG4gIC8vIENhbGxpbmcgc3Vic2NyaWJlKCkgbWlnaHQgYmUgYSBnb29kIGlkZWEgYW55d2F5LCBhcyB5b3Ugd29uJ3QgYmVcbiAgLy8gc3Vic2NyaWJlZCB0byB0aGUgZG9jdW1lbnRzIGJ5IGRlZmF1bHQuXG4gIHRoaXMua25vd25Eb2NzID0gb3B0aW9ucy5rbm93bkRvY3MgfHwgW107XG4gIHRoaXMucmVzdWx0cyA9IFtdO1xuXG4gIC8vIERvIHdlIGhhdmUgc29tZSBpbml0aWFsIGRhdGE/XG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcblxuICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG59O1xuUXVlcnkucHJvdG90eXBlLmFjdGlvbiA9ICdxc3ViJztcblxuLy8gSGVscGVyIGZvciBzdWJzY3JpYmUgJiBmZXRjaCwgc2luY2UgdGhleSBzaGFyZSB0aGUgc2FtZSBtZXNzYWdlIGZvcm1hdC5cbi8vXG4vLyBUaGlzIGZ1bmN0aW9uIGFjdHVhbGx5IGlzc3VlcyB0aGUgcXVlcnkuXG5RdWVyeS5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmNvbm5lY3Rpb24uY2FuU2VuZCkgcmV0dXJuO1xuXG4gIGlmICh0aGlzLmRvY01vZGUpIHtcbiAgICB2YXIgY29sbGVjdGlvblZlcnNpb25zID0ge307XG4gICAgLy8gQ29sbGVjdCB0aGUgdmVyc2lvbiBvZiBhbGwgdGhlIGRvY3VtZW50cyBpbiB0aGUgY3VycmVudCByZXN1bHQgc2V0IHNvIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBiZSBzZW50IHRoZWlyIHNuYXBzaG90cyBhZ2Fpbi5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMua25vd25Eb2NzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9jID0gdGhpcy5rbm93bkRvY3NbaV07XG4gICAgICB2YXIgYyA9IGNvbGxlY3Rpb25WZXJzaW9uc1tkb2MuY29sbGVjdGlvbl0gPSBjb2xsZWN0aW9uVmVyc2lvbnNbZG9jLmNvbGxlY3Rpb25dIHx8IHt9O1xuICAgICAgY1tkb2MubmFtZV0gPSBkb2MudmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICB2YXIgbXNnID0ge1xuICAgIGE6ICdxJyArIHRoaXMudHlwZSxcbiAgICBpZDogdGhpcy5pZCxcbiAgICBjOiB0aGlzLmNvbGxlY3Rpb24sXG4gICAgbzoge30sXG4gICAgcTogdGhpcy5xdWVyeSxcbiAgfTtcblxuICBpZiAodGhpcy5kb2NNb2RlKSB7XG4gICAgbXNnLm8ubSA9IHRoaXMuZG9jTW9kZTtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSBvbWl0dGVkIGlmIGVtcHR5LCBidXQgd2hhdGV2ZXIuXG4gICAgbXNnLm8udnMgPSBjb2xsZWN0aW9uVmVyc2lvbnM7XG4gIH1cbiAgaWYgKHRoaXMuYmFja2VuZCAhPSBudWxsKSBtc2cuby5iID0gdGhpcy5iYWNrZW5kO1xuICBpZiAodGhpcy5wb2xsICE9PSB1bmRlZmluZWQpIG1zZy5vLnAgPSB0aGlzLnBvbGw7XG5cbiAgdGhpcy5jb25uZWN0aW9uLnNlbmQobXNnKTtcbn07XG5cbi8vIE1ha2UgYSBsaXN0IG9mIGRvY3VtZW50cyBmcm9tIHRoZSBsaXN0IG9mIHNlcnZlci1yZXR1cm5lZCBkYXRhIG9iamVjdHNcblF1ZXJ5LnByb3RvdHlwZS5fZGF0YVRvRG9jcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIGxhc3RUeXBlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZG9jRGF0YSA9IGRhdGFbaV07XG5cbiAgICAvLyBUeXBlcyBhcmUgb25seSBwdXQgaW4gZm9yIHRoZSBmaXJzdCByZXN1bHQgaW4gdGhlIHNldCBhbmQgZXZlcnkgdGltZSB0aGUgdHlwZSBjaGFuZ2VzIGluIHRoZSBsaXN0LlxuICAgIGlmIChkb2NEYXRhLnR5cGUpIHtcbiAgICAgIGxhc3RUeXBlID0gZG9jRGF0YS50eXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2NEYXRhLnR5cGUgPSBsYXN0VHlwZTtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gdGhpcy5jb25uZWN0aW9uLmdldChkb2NEYXRhLmMgfHwgdGhpcy5jb2xsZWN0aW9uLCBkb2NEYXRhLmQsIGRvY0RhdGEpO1xuICAgIC8vIEZvcmNlIHRoZSBkb2N1bWVudCB0byBrbm93IGl0cyBzdWJzY3JpYmVkIGlmIHdlJ3JlIGluIGRvY21vZGU6c3Vic2NyaWJlLlxuICAgIGlmICh0aGlzLmRvY01vZGUgPT09ICdzdWInKSB7XG4gICAgICBkb2Muc3Vic2NyaWJlZCA9IHRydWU7IC8vIFNldCBiZWZvcmUgc2V0V2FudFN1YnNjcmliZSgpIHNvIGZsdXNoIGRvZXNuJ3Qgc2VuZCBhIHN1YnNjcmliZSByZXF1ZXN0LlxuICAgICAgZG9jLl9zZXRXYW50U3Vic2NyaWJlKHRydWUpOyAvLyB0aGlzIHdpbGwgY2FsbCBhbnkgc3Vic2NyaWJlIGNhbGxiYWNrcyBvciB3aGF0ZXZlci5cbiAgICAgIGRvYy5lbWl0KCdzdWJzY3JpYmUnKTtcbiAgICAgIGRvYy5fZmluaXNoU3ViKHRydWUpOyAvLyB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgZG8gYW55dGhpbmcgaGVyZSwgYnV0IGl0cyBtb3JlIGNvcnJlY3QgdG8gaGF2ZSBpdC5cbiAgICB9XG4gICAgcmVzdWx0cy5wdXNoKGRvYyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBEZXN0cm95IHRoZSBxdWVyeSBvYmplY3QuIEFueSBzdWJzZXF1ZW50IG1lc3NhZ2VzIGZvciB0aGUgcXVlcnkgd2lsbCBiZVxuLy8gaWdub3JlZCBieSB0aGUgY29ubmVjdGlvbi4gWW91IHNob3VsZCB1bnN1YnNjcmliZSBmcm9tIHRoZSBxdWVyeSBiZWZvcmVcbi8vIGRlc3Ryb3lpbmcgaXQuXG5RdWVyeS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jb25uZWN0aW9uLmNhblNlbmQgJiYgdGhpcy50eXBlID09PSAnc3ViJykge1xuICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKHthOidxdW5zdWInLCBpZDp0aGlzLmlkfSk7XG4gIH1cblxuICB0aGlzLmNvbm5lY3Rpb24uX2Rlc3Ryb3lRdWVyeSh0aGlzKTtcbn07XG5cblF1ZXJ5LnByb3RvdHlwZS5fb25Db25uZWN0aW9uU3RhdGVDaGFuZ2VkID0gZnVuY3Rpb24oc3RhdGUsIHJlYXNvbikge1xuICBpZiAodGhpcy5jb25uZWN0aW9uLnN0YXRlID09PSAnY29ubmVjdGluZycpIHtcbiAgICB0aGlzLl9leGVjdXRlKCk7XG4gIH1cbn07XG5cbi8vIEludGVybmFsIG1ldGhvZCBjYWxsZWQgZnJvbSBjb25uZWN0aW9uIHRvIHBhc3Mgc2VydmVyIG1lc3NhZ2VzIHRvIHRoZSBxdWVyeS5cblF1ZXJ5LnByb3RvdHlwZS5fb25NZXNzYWdlID0gZnVuY3Rpb24obXNnKSB7XG4gIGlmICgobXNnLmEgPT09ICdxZmV0Y2gnKSAhPT0gKHRoaXMudHlwZSA9PT0gJ2ZldGNoJykpIHtcbiAgICBpZiAoY29uc29sZSkgY29uc29sZS53YXJuKCdJbnZhbGlkIG1lc3NhZ2Ugc2VudCB0byBxdWVyeScsIG1zZywgdGhpcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG1zZy5lcnJvcikgdGhpcy5lbWl0KCdlcnJvcicsIG1zZy5lcnJvcik7XG5cbiAgc3dpdGNoIChtc2cuYSkge1xuICAgIGNhc2UgJ3FmZXRjaCc6XG4gICAgICB2YXIgcmVzdWx0cyA9IG1zZy5kYXRhID8gdGhpcy5fZGF0YVRvRG9jcyhtc2cuZGF0YSkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5jYWxsYmFjaykgdGhpcy5jYWxsYmFjayhtc2cuZXJyb3IsIHJlc3VsdHMsIG1zZy5leHRyYSk7XG4gICAgICAvLyBPbmNlIGEgZmV0Y2ggcXVlcnkgZ2V0cyBpdHMgZGF0YSwgaXQgaXMgZGVzdHJveWVkLlxuICAgICAgdGhpcy5jb25uZWN0aW9uLl9kZXN0cm95UXVlcnkodGhpcyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3EnOlxuICAgICAgLy8gUXVlcnkgZGlmZiBkYXRhIChpbnNlcnRzIGFuZCByZW1vdmVzKVxuICAgICAgaWYgKG1zZy5kaWZmKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZ28gdGhyb3VnaCB0aGUgbGlzdCB0d2ljZS4gRmlyc3QsIHdlJ2xsIGluamVzdCBhbGwgdGhlXG4gICAgICAgIC8vIG5ldyBkb2N1bWVudHMgYW5kIHNldCB0aGVtIGFzIHN1YnNjcmliZWQuICBBZnRlciB0aGF0IHdlJ2xsIGVtaXRcbiAgICAgICAgLy8gZXZlbnRzIGFuZCBhY3R1YWxseSB1cGRhdGUgb3VyIGxpc3QuIFRoaXMgYXZvaWRzIHJhY2UgY29uZGl0aW9uc1xuICAgICAgICAvLyBhcm91bmQgc2V0dGluZyBkb2N1bWVudHMgdG8gYmUgc3Vic2NyaWJlZCAmIHVuc3Vic2NyaWJpbmcgZG9jdW1lbnRzXG4gICAgICAgIC8vIGluIGV2ZW50IGNhbGxiYWNrcy5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cuZGlmZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBkID0gbXNnLmRpZmZbaV07XG4gICAgICAgICAgaWYgKGQudHlwZSA9PT0gJ2luc2VydCcpIGQudmFsdWVzID0gdGhpcy5fZGF0YVRvRG9jcyhkLnZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5kaWZmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGQgPSBtc2cuZGlmZltpXTtcbiAgICAgICAgICBzd2l0Y2ggKGQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnaW5zZXJ0JzpcbiAgICAgICAgICAgICAgdmFyIG5ld0RvY3MgPSBkLnZhbHVlcztcbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseSh0aGlzLnJlc3VsdHMsIFtkLmluZGV4LCAwXS5jb25jYXQobmV3RG9jcykpO1xuICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2luc2VydCcsIG5ld0RvY3MsIGQuaW5kZXgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZSc6XG4gICAgICAgICAgICAgIHZhciBob3dNYW55ID0gZC5ob3dNYW55IHx8IDE7XG4gICAgICAgICAgICAgIHZhciByZW1vdmVkID0gdGhpcy5yZXN1bHRzLnNwbGljZShkLmluZGV4LCBob3dNYW55KTtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmUnLCByZW1vdmVkLCBkLmluZGV4KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgdmFyIGhvd01hbnkgPSBkLmhvd01hbnkgfHwgMTtcbiAgICAgICAgICAgICAgdmFyIGRvY3MgPSB0aGlzLnJlc3VsdHMuc3BsaWNlKGQuZnJvbSwgaG93TWFueSk7XG4gICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkodGhpcy5yZXN1bHRzLCBbZC50bywgMF0uY29uY2F0KGRvY3MpKTtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KCdtb3ZlJywgZG9jcywgZC5mcm9tLCBkLnRvKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtc2cuZXh0cmEpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdleHRyYScsIG1zZy5leHRyYSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdxc3ViJzpcbiAgICAgIC8vIFRoaXMgbWVzc2FnZSByZXBsYWNlcyB0aGUgZW50aXJlIHJlc3VsdCBzZXQgd2l0aCB0aGUgc2V0IHBhc3NlZC5cbiAgICAgIGlmICghbXNnLmVycm9yKSB7XG4gICAgICAgIHZhciBwcmV2aW91cyA9IHRoaXMucmVzdWx0cztcblxuICAgICAgICAvLyBUaGVuIGFkZCBldmVyeXRoaW5nIGluIHRoZSBuZXcgcmVzdWx0IHNldC5cbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5rbm93bkRvY3MgPSB0aGlzLl9kYXRhVG9Eb2NzKG1zZy5kYXRhKTtcbiAgICAgICAgdGhpcy5leHRyYSA9IG1zZy5leHRyYTtcblxuICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbWl0KCdjaGFuZ2UnLCB0aGlzLnJlc3VsdHMsIHByZXZpb3VzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sobXNnLmVycm9yLCB0aGlzLnJlc3VsdHMsIHRoaXMuZXh0cmEpO1xuICAgICAgICBkZWxldGUgdGhpcy5jYWxsYmFjaztcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG4vLyBDaGFuZ2UgdGhlIHRoaW5nIHdlJ3JlIHNlYXJjaGluZyBmb3IuIFRoaXMgaXNuJ3QgZnVsbHkgc3VwcG9ydGVkIG9uIHRoZVxuLy8gYmFja2VuZCAoaXQgZGVzdHJveXMgdGhlIG9sZCBxdWVyeSBhbmQgbWFrZXMgYSBuZXcgb25lKSAtIGJ1dCBpdHNcbi8vIHByb2dyYW1hdGljYWxseSB1c2VmdWwgYW5kIEkgbWlnaHQgYWRkIGJhY2tlbmQgc3VwcG9ydCBhdCBzb21lIHBvaW50LlxuUXVlcnkucHJvdG90eXBlLnNldFF1ZXJ5ID0gZnVuY3Rpb24ocSkge1xuICBpZiAodGhpcy50eXBlICE9PSAnc3ViJykgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2hhbmdlIGEgZmV0Y2ggcXVlcnknKTtcblxuICB0aGlzLnF1ZXJ5ID0gcTtcbiAgaWYgKHRoaXMuY29ubmVjdGlvbi5jYW5TZW5kKSB7XG4gICAgLy8gVGhlcmUncyBubyAnY2hhbmdlJyBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSnVzdCByZXN1YnNjcmliZS5cbiAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZCh7YToncXVuc3ViJywgaWQ6dGhpcy5pZH0pO1xuICAgIHRoaXMuX2V4ZWN1dGUoKTtcbiAgfVxufTtcblxudmFyIE1pY3JvRXZlbnQ7XG5pZiAodHlwZW9mIGJyZXF1aXJlICE9PSAndW5kZWZpbmVkJykge1xuICBNaWNyb0V2ZW50ID0gYnJlcXVpcmUoJy4vbWljcm9ldmVudCcpO1xufVxuXG5NaWNyb0V2ZW50Lm1peGluKFF1ZXJ5KTtcblxufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuaWQobGVuLCBwcmVmaXgsIGtleXNwYWNlKSB7XHJcbiAgaWYgKGxlbiA9PSBudWxsKSB7XHJcbiAgICBsZW4gPSAzMjtcclxuICB9XHJcbiAgaWYgKHByZWZpeCA9PSBudWxsKSB7XHJcbiAgICBwcmVmaXggPSBcIlwiO1xyXG4gIH1cclxuICBpZiAoa2V5c3BhY2UgPT0gbnVsbCkge1xyXG4gICAga2V5c3BhY2UgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XHJcbiAgfVxyXG4gIHdoaWxlIChsZW4tLSA+IDApIHtcclxuICAgIHByZWZpeCArPSBrZXlzcGFjZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICoga2V5c3BhY2UubGVuZ3RoKSk7XHJcbiAgfVxyXG4gIHJldHVybiBwcmVmaXg7XHJcbn07IiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG8tRGFzaCAyLjAuMCA8aHR0cDovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IDIwMTItMjAxMyBUaGUgRG9qbyBGb3VuZGF0aW9uIDxodHRwOi8vZG9qb2ZvdW5kYXRpb24ub3JnLz5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS41LjIgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEzIEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKiBBdmFpbGFibGUgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHA6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKi9cbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnbG9kYXNoLmlzZnVuY3Rpb24nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJ2xvZGFzaC5pc29iamVjdCcpLFxuICAgIHJlTmF0aXZlID0gcmVxdWlyZSgnbG9kYXNoLl9yZW5hdGl2ZScpO1xuXG4vKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUgRVM1IGVudmlyb25tZW50cyAqL1xudmFyIHVuZGVmaW5lZDtcblxuLyoqIFVzZWQgZm9yIG5hdGl2ZSBtZXRob2QgcmVmZXJlbmNlcyAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIE5hdGl2ZSBtZXRob2Qgc2hvcnRjdXRzICovXG52YXIgbm93ID0gcmVOYXRpdmUudGVzdChub3cgPSBEYXRlLm5vdykgJiYgbm93IHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4gK25ldyBEYXRlOyB9O1xuXG4vKiBOYXRpdmUgbWV0aG9kIHNob3J0Y3V0cyBmb3IgbWV0aG9kcyB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcyAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgZGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiBgZnVuY2AgdW50aWwgYWZ0ZXJcbiAqIGB3YWl0YCBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXQgd2FzIGludm9rZWQuXG4gKiBQcm92aWRlIGFuIG9wdGlvbnMgb2JqZWN0IHRvIGluZGljYXRlIHRoYXQgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uXG4gKiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFN1YnNlcXVlbnQgY2FsbHNcbiAqIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgY2FsbC5cbiAqXG4gKiBOb3RlOiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgIGBmdW5jYCB3aWxsIGJlIGNhbGxlZFxuICogb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBpc1xuICogaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdIFNwZWNpZnkgZXhlY3V0aW9uIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF0gVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGNhbGxlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV0gU3BlY2lmeSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIGF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXhcbiAqIHZhciBsYXp5TGF5b3V0ID0gXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCk7XG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgbGF6eUxheW91dCk7XG4gKlxuICogLy8gZXhlY3V0ZSBgc2VuZE1haWxgIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHNcbiAqIGpRdWVyeSgnI3Bvc3Rib3gnKS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSk7XG4gKlxuICogLy8gZW5zdXJlIGBiYXRjaExvZ2AgaXMgZXhlY3V0ZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHNcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIHNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7XG4gKiAgICdtYXhXYWl0JzogMTAwMFxuICogfSwgZmFsc2UpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBhcmdzLFxuICAgICAgbWF4VGltZW91dElkLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhbXAsXG4gICAgICB0aGlzQXJnLFxuICAgICAgdGltZW91dElkLFxuICAgICAgdHJhaWxpbmdDYWxsLFxuICAgICAgbGFzdENhbGxlZCA9IDAsXG4gICAgICBtYXhXYWl0ID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgfVxuICB3YWl0ID0gbmF0aXZlTWF4KDAsIHdhaXQpIHx8IDA7XG4gIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgdmFyIGxlYWRpbmcgPSB0cnVlO1xuICAgIHRyYWlsaW5nID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heFdhaXQgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucyAmJiAobmF0aXZlTWF4KHdhaXQsIG9wdGlvbnMubWF4V2FpdCkgfHwgMCk7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgdmFyIGRlbGF5ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3coKSAtIHN0YW1wKTtcbiAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgIGlmIChtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KG1heFRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNDYWxsZWQgPSB0cmFpbGluZ0NhbGw7XG4gICAgICBtYXhUaW1lb3V0SWQgPSB0aW1lb3V0SWQgPSB0cmFpbGluZ0NhbGwgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoaXNDYWxsZWQpIHtcbiAgICAgICAgbGFzdENhbGxlZCA9IG5vdygpO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHJlbWFpbmluZyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBtYXhEZWxheWVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgfVxuICAgIG1heFRpbWVvdXRJZCA9IHRpbWVvdXRJZCA9IHRyYWlsaW5nQ2FsbCA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHJhaWxpbmcgfHwgKG1heFdhaXQgIT09IHdhaXQpKSB7XG4gICAgICBsYXN0Q2FsbGVkID0gbm93KCk7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICBzdGFtcCA9IG5vdygpO1xuICAgIHRoaXNBcmcgPSB0aGlzO1xuICAgIHRyYWlsaW5nQ2FsbCA9IHRyYWlsaW5nICYmICh0aW1lb3V0SWQgfHwgIWxlYWRpbmcpO1xuXG4gICAgaWYgKG1heFdhaXQgPT09IGZhbHNlKSB7XG4gICAgICB2YXIgbGVhZGluZ0NhbGwgPSBsZWFkaW5nICYmICF0aW1lb3V0SWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghbWF4VGltZW91dElkICYmICFsZWFkaW5nKSB7XG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgIH1cbiAgICAgIHZhciByZW1haW5pbmcgPSBtYXhXYWl0IC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgaWYgKG1heFRpbWVvdXRJZCkge1xuICAgICAgICAgIG1heFRpbWVvdXRJZCA9IGNsZWFyVGltZW91dChtYXhUaW1lb3V0SWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFtYXhUaW1lb3V0SWQpIHtcbiAgICAgICAgbWF4VGltZW91dElkID0gc2V0VGltZW91dChtYXhEZWxheWVkLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRpbWVvdXRJZCAmJiB3YWl0ICE9PSBtYXhXYWl0KSB7XG4gICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGRlbGF5ZWQsIHdhaXQpO1xuICAgIH1cbiAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMby1EYXNoIDIuMC4wIDxodHRwOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgMjAxMi0yMDEzIFRoZSBEb2pvIEZvdW5kYXRpb24gPGh0dHA6Ly9kb2pvZm91bmRhdGlvbi5vcmcvPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjUuMiA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cDovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xuXG4vKiogVXNlZCBmb3IgbmF0aXZlIG1ldGhvZCByZWZlcmVuY2VzICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlICovXG52YXIgcmVOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgU3RyaW5nKG9iamVjdFByb3RvLnZhbHVlT2YpXG4gICAgLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJylcbiAgICAucmVwbGFjZSgvdmFsdWVPZnxmb3IgW15cXF1dKy9nLCAnLis/JykgKyAnJCdcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVOYXRpdmU7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBMby1EYXNoIDIuMC4wIDxodHRwOi8vbG9kYXNoLmNvbS8+XG4gKiBDb3B5cmlnaHQgMjAxMi0yMDEzIFRoZSBEb2pvIEZvdW5kYXRpb24gPGh0dHA6Ly9kb2pvZm91bmRhdGlvbi5vcmcvPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjUuMiA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCAyMDA5LTIwMTMgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqIEF2YWlsYWJsZSB1bmRlciBNSVQgbGljZW5zZSA8aHR0cDovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RzXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvLURhc2ggMi4wLjAgPGh0dHA6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCAyMDEyLTIwMTMgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuNS4yIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxMyBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG52YXIgb2JqZWN0VHlwZXMgPSByZXF1aXJlKCdsb2Rhc2guX29iamVjdHR5cGVzJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlIGxhbmd1YWdlIHR5cGUgb2YgT2JqZWN0LlxuICogKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RzXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAvLyBjaGVjayBpZiB0aGUgdmFsdWUgaXMgdGhlIEVDTUFTY3JpcHQgbGFuZ3VhZ2UgdHlwZSBvZiBPYmplY3RcbiAgLy8gaHR0cDovL2VzNS5naXRodWIuaW8vI3g4XG4gIC8vIGFuZCBhdm9pZCBhIFY4IGJ1Z1xuICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMjkxXG4gIHJldHVybiAhISh2YWx1ZSAmJiBvYmplY3RUeXBlc1t0eXBlb2YgdmFsdWVdKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvLURhc2ggMi4wLjAgPGh0dHA6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCAyMDEyLTIwMTMgVGhlIERvam8gRm91bmRhdGlvbiA8aHR0cDovL2Rvam9mb3VuZGF0aW9uLm9yZy8+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuNS4yIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IDIwMDktMjAxMyBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICogQXZhaWxhYmxlIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICovXG5cbi8qKiBVc2VkIHRvIGRldGVybWluZSBpZiB2YWx1ZXMgYXJlIG9mIHRoZSBsYW5ndWFnZSB0eXBlIE9iamVjdCAqL1xudmFyIG9iamVjdFR5cGVzID0ge1xuICAnYm9vbGVhbic6IGZhbHNlLFxuICAnZnVuY3Rpb24nOiB0cnVlLFxuICAnb2JqZWN0JzogdHJ1ZSxcbiAgJ251bWJlcic6IGZhbHNlLFxuICAnc3RyaW5nJzogZmFsc2UsXG4gICd1bmRlZmluZWQnOiBmYWxzZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUeXBlcztcbiJdfQ==
;